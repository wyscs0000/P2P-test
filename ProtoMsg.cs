using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace common
{
	public class Account : IMessage
	{
		private ProtoMemberUInt32 _m_account_id;	// 账号id
		private ProtoMemberString _m_account_name;	// 帐号名称
		private ProtoMemberString _m_account_key;	// 帐号密码

		public Account()
		{
			_m_account_id = new ProtoMemberUInt32(1, true);
			_m_account_name = new ProtoMemberString(2, true);
			_m_account_key = new ProtoMemberString(3, true);
		}

		public Account(uint __m_account_id, string __m_account_name, string __m_account_key)
		{
			_m_account_id = new ProtoMemberUInt32(1, true);
			_m_account_id.member_value = __m_account_id;
			_m_account_name = new ProtoMemberString(2, true);
			_m_account_name.member_value = __m_account_name;
			_m_account_key = new ProtoMemberString(3, true);
			_m_account_key.member_value = __m_account_key;
		}

		public uint m_account_id
		{
			get{ return _m_account_id.member_value; }
			set{ _m_account_id.member_value = value; }
		}
		public bool has_m_account_id
		{
			get{ return _m_account_id.has_value; }
		}

		public string m_account_name
		{
			get{ return _m_account_name.member_value; }
			set{ _m_account_name.member_value = value; }
		}
		public bool has_m_account_name
		{
			get{ return _m_account_name.has_value; }
		}

		public string m_account_key
		{
			get{ return _m_account_key.member_value; }
			set{ _m_account_key.member_value = value; }
		}
		public bool has_m_account_key
		{
			get{ return _m_account_key.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_account_id.Serialize(_m_account_id.member_value, ref out_stream);

			count += _m_account_name.Serialize(_m_account_name.member_value, ref out_stream);

			count += _m_account_key.Serialize(_m_account_key.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_account_id = 0;
			one_count = _m_account_id.ParseFrom(ref temp_m_account_id, ref int_stream);
			if (0 < one_count)
			{
					_m_account_id.member_value = temp_m_account_id;
					count = count + one_count;
			}

			string temp_m_account_name = "";
			one_count = _m_account_name.ParseFrom(ref temp_m_account_name, ref int_stream);
			if (0 < one_count)
			{
					_m_account_name.member_value = temp_m_account_name;
					count = count + one_count;
			}

			string temp_m_account_key = "";
			one_count = _m_account_key.ParseFrom(ref temp_m_account_key, ref int_stream);
			if (0 < one_count)
			{
					_m_account_key.member_value = temp_m_account_key;
					count = count + one_count;
			}

			return count;
		}
	}

	public enum AccountRes
	{
		AccountRes_Login_AccountError = 0x0001,			// 账号不存在
		AccountRes_Login_KeyError = 0x0002,				// 密码不匹配
		AccountRes_Login_Success = 0x0003,				// 账号密码验证成功
		AccountRes_Reg_AccountError = 0x0101,			// 账号注册失败（用户名重复）
		AccountRes_Reg_Success = 0x0102,				// 账号注册成功
		AccountRes_CreatePlayer_ToyNotExists = 0x0201,	// 创建角色时，验证该账号下未激活对应玩具
		AccountRes_CreatePlayer_ToyExists = 0x0202,		// 创建角色时，验证该账号下已激活对应玩具
		AccountRes_ToyActivate_GuidError = 0x0301,		// 玩具激活失败，玩具唯一识别码错误
		AccountRes_ToyActivate_TypeError = 0x0302,		// 玩具激活失败，玩具类别错误
		AccountRes_ToyActivate_OthersBound = 0x0303,	// 玩具已经被其他账号绑定
		AccountRes_ToyActivate_SelfBound = 0x0304,		// 玩具已经被本账号绑定
		AccountRes_ToyActivate_BindError = 0x0305,		// 玩具激活失败，数据库绑定操作失败
		AccountRes_ToyActivate_Success = 0x0306,		// 玩具激活成功
		AccountRes_ToyCheck_GuidError = 0x0401,			// 检查玩具失败，玩具唯一识别码错误
		AccountRes_ToyCheck_TypeError = 0x0402,			// 检查玩具失败，玩具类别错误
		AccountRes_ToyCheck_OthersBound = 0x0403,		// 玩具已经被其他账号绑定
		AccountRes_ToyCheck_SelfBound = 0x0404,			// 玩具已经被本账号绑定
		AccountRes_ToyCheck_Success = 0x0405,			// 检查玩具成功（未被绑定过，是一个新玩具）
	}

	public class Actor2Count : IMessage
	{
		private ProtoMemberUInt32 _m_actor_id;	//actorid
		private ProtoMemberUInt32 _m_kill_cnt;	//杀怪数

		public Actor2Count()
		{
			_m_actor_id = new ProtoMemberUInt32(1, true);
			_m_kill_cnt = new ProtoMemberUInt32(2, true);
		}

		public Actor2Count(uint __m_actor_id, uint __m_kill_cnt)
		{
			_m_actor_id = new ProtoMemberUInt32(1, true);
			_m_actor_id.member_value = __m_actor_id;
			_m_kill_cnt = new ProtoMemberUInt32(2, true);
			_m_kill_cnt.member_value = __m_kill_cnt;
		}

		public uint m_actor_id
		{
			get{ return _m_actor_id.member_value; }
			set{ _m_actor_id.member_value = value; }
		}
		public bool has_m_actor_id
		{
			get{ return _m_actor_id.has_value; }
		}

		public uint m_kill_cnt
		{
			get{ return _m_kill_cnt.member_value; }
			set{ _m_kill_cnt.member_value = value; }
		}
		public bool has_m_kill_cnt
		{
			get{ return _m_kill_cnt.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_actor_id.Serialize(_m_actor_id.member_value, ref out_stream);

			count += _m_kill_cnt.Serialize(_m_kill_cnt.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_actor_id = 0;
			one_count = _m_actor_id.ParseFrom(ref temp_m_actor_id, ref int_stream);
			if (0 < one_count)
			{
					_m_actor_id.member_value = temp_m_actor_id;
					count = count + one_count;
			}

			uint temp_m_kill_cnt = 0;
			one_count = _m_kill_cnt.ParseFrom(ref temp_m_kill_cnt, ref int_stream);
			if (0 < one_count)
			{
					_m_kill_cnt.member_value = temp_m_kill_cnt;
					count = count + one_count;
			}

			return count;
		}
	}

	public class AppearanceInfo : IMessage
	{
		private ProtoMemberUInt32 _m_ID;	//ID
		private ProtoMemberUInt32 _m_nType;	//类型 enAppearanceType
		private ProtoMemberInt64 _m_nPastTime;	//截至过期时间 -1 永久 ， 0 过期， 其他则为过期到达时间

		public AppearanceInfo()
		{
			_m_ID = new ProtoMemberUInt32(1, true);
			_m_nType = new ProtoMemberUInt32(2, true);
			_m_nPastTime = new ProtoMemberInt64(3, true);
		}

		public AppearanceInfo(uint __m_ID, uint __m_nType, long __m_nPastTime)
		{
			_m_ID = new ProtoMemberUInt32(1, true);
			_m_ID.member_value = __m_ID;
			_m_nType = new ProtoMemberUInt32(2, true);
			_m_nType.member_value = __m_nType;
			_m_nPastTime = new ProtoMemberInt64(3, true);
			_m_nPastTime.member_value = __m_nPastTime;
		}

		public uint m_ID
		{
			get{ return _m_ID.member_value; }
			set{ _m_ID.member_value = value; }
		}
		public bool has_m_ID
		{
			get{ return _m_ID.has_value; }
		}

		public uint m_nType
		{
			get{ return _m_nType.member_value; }
			set{ _m_nType.member_value = value; }
		}
		public bool has_m_nType
		{
			get{ return _m_nType.has_value; }
		}

		public long m_nPastTime
		{
			get{ return _m_nPastTime.member_value; }
			set{ _m_nPastTime.member_value = value; }
		}
		public bool has_m_nPastTime
		{
			get{ return _m_nPastTime.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_ID.Serialize(_m_ID.member_value, ref out_stream);

			count += _m_nType.Serialize(_m_nType.member_value, ref out_stream);

			count += _m_nPastTime.Serialize(_m_nPastTime.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_ID = 0;
			one_count = _m_ID.ParseFrom(ref temp_m_ID, ref int_stream);
			if (0 < one_count)
			{
					_m_ID.member_value = temp_m_ID;
					count = count + one_count;
			}

			uint temp_m_nType = 0;
			one_count = _m_nType.ParseFrom(ref temp_m_nType, ref int_stream);
			if (0 < one_count)
			{
					_m_nType.member_value = temp_m_nType;
					count = count + one_count;
			}

			long temp_m_nPastTime = 0;
			one_count = _m_nPastTime.ParseFrom(ref temp_m_nPastTime, ref int_stream);
			if (0 < one_count)
			{
					_m_nPastTime.member_value = temp_m_nPastTime;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Battle2Client_HeroSelectInfo : IMessage
	{
		private ProtoMemberUInt32 _m_hero_index;	//英雄索引(0~7)
		private ProtoMemberUInt32 _m_hero_actorid;	//英雄actorid
		private ProtoMemberUInt32 _m_is_Confirmed;	//是确认的(0未确认，1确认)
		private ProtoMemberUInt32 _m_player_server_id;	//玩家
		private ProtoMemberUInt32 _m_player_account_id;	//玩家

		public Battle2Client_HeroSelectInfo()
		{
			_m_hero_index = new ProtoMemberUInt32(1, true);
			_m_hero_actorid = new ProtoMemberUInt32(2, true);
			_m_is_Confirmed = new ProtoMemberUInt32(3, true);
			_m_player_server_id = new ProtoMemberUInt32(4, true);
			_m_player_account_id = new ProtoMemberUInt32(5, true);
		}

		public Battle2Client_HeroSelectInfo(uint __m_hero_index, uint __m_hero_actorid, uint __m_is_Confirmed, uint __m_player_server_id, uint __m_player_account_id)
		{
			_m_hero_index = new ProtoMemberUInt32(1, true);
			_m_hero_index.member_value = __m_hero_index;
			_m_hero_actorid = new ProtoMemberUInt32(2, true);
			_m_hero_actorid.member_value = __m_hero_actorid;
			_m_is_Confirmed = new ProtoMemberUInt32(3, true);
			_m_is_Confirmed.member_value = __m_is_Confirmed;
			_m_player_server_id = new ProtoMemberUInt32(4, true);
			_m_player_server_id.member_value = __m_player_server_id;
			_m_player_account_id = new ProtoMemberUInt32(5, true);
			_m_player_account_id.member_value = __m_player_account_id;
		}

		public uint m_hero_index
		{
			get{ return _m_hero_index.member_value; }
			set{ _m_hero_index.member_value = value; }
		}
		public bool has_m_hero_index
		{
			get{ return _m_hero_index.has_value; }
		}

		public uint m_hero_actorid
		{
			get{ return _m_hero_actorid.member_value; }
			set{ _m_hero_actorid.member_value = value; }
		}
		public bool has_m_hero_actorid
		{
			get{ return _m_hero_actorid.has_value; }
		}

		public uint m_is_Confirmed
		{
			get{ return _m_is_Confirmed.member_value; }
			set{ _m_is_Confirmed.member_value = value; }
		}
		public bool has_m_is_Confirmed
		{
			get{ return _m_is_Confirmed.has_value; }
		}

		public uint m_player_server_id
		{
			get{ return _m_player_server_id.member_value; }
			set{ _m_player_server_id.member_value = value; }
		}
		public bool has_m_player_server_id
		{
			get{ return _m_player_server_id.has_value; }
		}

		public uint m_player_account_id
		{
			get{ return _m_player_account_id.member_value; }
			set{ _m_player_account_id.member_value = value; }
		}
		public bool has_m_player_account_id
		{
			get{ return _m_player_account_id.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_hero_index.Serialize(_m_hero_index.member_value, ref out_stream);

			count += _m_hero_actorid.Serialize(_m_hero_actorid.member_value, ref out_stream);

			count += _m_is_Confirmed.Serialize(_m_is_Confirmed.member_value, ref out_stream);

			count += _m_player_server_id.Serialize(_m_player_server_id.member_value, ref out_stream);

			count += _m_player_account_id.Serialize(_m_player_account_id.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_hero_index = 0;
			one_count = _m_hero_index.ParseFrom(ref temp_m_hero_index, ref int_stream);
			if (0 < one_count)
			{
					_m_hero_index.member_value = temp_m_hero_index;
					count = count + one_count;
			}

			uint temp_m_hero_actorid = 0;
			one_count = _m_hero_actorid.ParseFrom(ref temp_m_hero_actorid, ref int_stream);
			if (0 < one_count)
			{
					_m_hero_actorid.member_value = temp_m_hero_actorid;
					count = count + one_count;
			}

			uint temp_m_is_Confirmed = 0;
			one_count = _m_is_Confirmed.ParseFrom(ref temp_m_is_Confirmed, ref int_stream);
			if (0 < one_count)
			{
					_m_is_Confirmed.member_value = temp_m_is_Confirmed;
					count = count + one_count;
			}

			uint temp_m_player_server_id = 0;
			one_count = _m_player_server_id.ParseFrom(ref temp_m_player_server_id, ref int_stream);
			if (0 < one_count)
			{
					_m_player_server_id.member_value = temp_m_player_server_id;
					count = count + one_count;
			}

			uint temp_m_player_account_id = 0;
			one_count = _m_player_account_id.ParseFrom(ref temp_m_player_account_id, ref int_stream);
			if (0 < one_count)
			{
					_m_player_account_id.member_value = temp_m_player_account_id;
					count = count + one_count;
			}

			return count;
		}
	}

	public class BattleAllHp : IMessage
	{
		private ProtoMemberUInt32 _m_flag;	//标识数据(如：是否清完怪，是否通关了，，，)
		private ProtoMemberEmbeddedList<BattleUnitHp> _m_hps;	//生物血量

		public BattleAllHp()
		{
			_m_flag = new ProtoMemberUInt32(1, false);
			_m_hps = new ProtoMemberEmbeddedList<BattleUnitHp>(2, false);
		}

		public BattleAllHp(uint __m_flag)
		{
			_m_flag = new ProtoMemberUInt32(1, false);
			_m_flag.member_value = __m_flag;
			_m_hps = new ProtoMemberEmbeddedList<BattleUnitHp>(2, false);
		}

		public uint m_flag
		{
			get{ return _m_flag.member_value; }
			set{ _m_flag.member_value = value; }
		}
		public bool has_m_flag
		{
			get{ return _m_flag.has_value; }
		}

		public System.Collections.Generic.List<BattleUnitHp> m_hps
		{
			get{ return _m_hps.member_value; }
		}
		public bool has_m_hps
		{
			get{ return _m_hps.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_flag.Serialize(_m_flag.member_value, ref out_stream);

			foreach(BattleUnitHp one_member_value in _m_hps.member_value)
			{
				count += _m_hps.Serialize(one_member_value, ref out_stream);
			}

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_flag = 0;
			one_count = _m_flag.ParseFrom(ref temp_m_flag, ref int_stream);
			if (0 < one_count)
			{
					_m_flag.member_value = temp_m_flag;
					count = count + one_count;
			}

			while (true)
			{
				BattleUnitHp one_member_value = new BattleUnitHp();
				one_count = _m_hps.ParseFrom(one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_hps.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			return count;
		}
	}

	public class BattleDamage : IMessage
	{
		private ProtoMemberUInt32 _m_tgter_id;	//受击者id(英雄0~3,怪物则是按规则生成的一个更大的四位数的值)
		private ProtoMemberUInt32 _m_damage;	//伤害血量
		private ProtoMemberUInt32 _m_effect_flag;	//效果(死亡、暴击，破甲，连击等二进制组合)
		private ProtoMemberUInt32 _m_random_atk;	//随机出的攻击力
		private ProtoMemberUInt32 _m_extra_param;	//额外参数

		public BattleDamage()
		{
			_m_tgter_id = new ProtoMemberUInt32(1, true);
			_m_damage = new ProtoMemberUInt32(2, false);
			_m_effect_flag = new ProtoMemberUInt32(3, false);
			_m_random_atk = new ProtoMemberUInt32(4, false);
			_m_extra_param = new ProtoMemberUInt32(5, false);
		}

		public BattleDamage(uint __m_tgter_id, uint __m_damage, uint __m_effect_flag, uint __m_random_atk, uint __m_extra_param)
		{
			_m_tgter_id = new ProtoMemberUInt32(1, true);
			_m_tgter_id.member_value = __m_tgter_id;
			_m_damage = new ProtoMemberUInt32(2, false);
			_m_damage.member_value = __m_damage;
			_m_effect_flag = new ProtoMemberUInt32(3, false);
			_m_effect_flag.member_value = __m_effect_flag;
			_m_random_atk = new ProtoMemberUInt32(4, false);
			_m_random_atk.member_value = __m_random_atk;
			_m_extra_param = new ProtoMemberUInt32(5, false);
			_m_extra_param.member_value = __m_extra_param;
		}

		public uint m_tgter_id
		{
			get{ return _m_tgter_id.member_value; }
			set{ _m_tgter_id.member_value = value; }
		}
		public bool has_m_tgter_id
		{
			get{ return _m_tgter_id.has_value; }
		}

		public uint m_damage
		{
			get{ return _m_damage.member_value; }
			set{ _m_damage.member_value = value; }
		}
		public bool has_m_damage
		{
			get{ return _m_damage.has_value; }
		}

		public uint m_effect_flag
		{
			get{ return _m_effect_flag.member_value; }
			set{ _m_effect_flag.member_value = value; }
		}
		public bool has_m_effect_flag
		{
			get{ return _m_effect_flag.has_value; }
		}

		public uint m_random_atk
		{
			get{ return _m_random_atk.member_value; }
			set{ _m_random_atk.member_value = value; }
		}
		public bool has_m_random_atk
		{
			get{ return _m_random_atk.has_value; }
		}

		public uint m_extra_param
		{
			get{ return _m_extra_param.member_value; }
			set{ _m_extra_param.member_value = value; }
		}
		public bool has_m_extra_param
		{
			get{ return _m_extra_param.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_tgter_id.Serialize(_m_tgter_id.member_value, ref out_stream);

			count += _m_damage.Serialize(_m_damage.member_value, ref out_stream);

			count += _m_effect_flag.Serialize(_m_effect_flag.member_value, ref out_stream);

			count += _m_random_atk.Serialize(_m_random_atk.member_value, ref out_stream);

			count += _m_extra_param.Serialize(_m_extra_param.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_tgter_id = 0;
			one_count = _m_tgter_id.ParseFrom(ref temp_m_tgter_id, ref int_stream);
			if (0 < one_count)
			{
					_m_tgter_id.member_value = temp_m_tgter_id;
					count = count + one_count;
			}

			uint temp_m_damage = 0;
			one_count = _m_damage.ParseFrom(ref temp_m_damage, ref int_stream);
			if (0 < one_count)
			{
					_m_damage.member_value = temp_m_damage;
					count = count + one_count;
			}

			uint temp_m_effect_flag = 0;
			one_count = _m_effect_flag.ParseFrom(ref temp_m_effect_flag, ref int_stream);
			if (0 < one_count)
			{
					_m_effect_flag.member_value = temp_m_effect_flag;
					count = count + one_count;
			}

			uint temp_m_random_atk = 0;
			one_count = _m_random_atk.ParseFrom(ref temp_m_random_atk, ref int_stream);
			if (0 < one_count)
			{
					_m_random_atk.member_value = temp_m_random_atk;
					count = count + one_count;
			}

			uint temp_m_extra_param = 0;
			one_count = _m_extra_param.ParseFrom(ref temp_m_extra_param, ref int_stream);
			if (0 < one_count)
			{
					_m_extra_param.member_value = temp_m_extra_param;
					count = count + one_count;
			}

			return count;
		}
	}

	public class BattleEffect : IMessage
	{
		private ProtoMemberUInt32 _m_type;	
		private ProtoMemberUInt32 _m_param1;	
		private ProtoMemberUInt32 _m_param2;	
		private ProtoMemberUInt32 _m_param3;	

		public BattleEffect()
		{
			_m_type = new ProtoMemberUInt32(1, true);
			_m_param1 = new ProtoMemberUInt32(2, true);
			_m_param2 = new ProtoMemberUInt32(3, true);
			_m_param3 = new ProtoMemberUInt32(4, true);
		}

		public BattleEffect(uint __m_type, uint __m_param1, uint __m_param2, uint __m_param3)
		{
			_m_type = new ProtoMemberUInt32(1, true);
			_m_type.member_value = __m_type;
			_m_param1 = new ProtoMemberUInt32(2, true);
			_m_param1.member_value = __m_param1;
			_m_param2 = new ProtoMemberUInt32(3, true);
			_m_param2.member_value = __m_param2;
			_m_param3 = new ProtoMemberUInt32(4, true);
			_m_param3.member_value = __m_param3;
		}

		public uint m_type
		{
			get{ return _m_type.member_value; }
			set{ _m_type.member_value = value; }
		}
		public bool has_m_type
		{
			get{ return _m_type.has_value; }
		}

		public uint m_param1
		{
			get{ return _m_param1.member_value; }
			set{ _m_param1.member_value = value; }
		}
		public bool has_m_param1
		{
			get{ return _m_param1.has_value; }
		}

		public uint m_param2
		{
			get{ return _m_param2.member_value; }
			set{ _m_param2.member_value = value; }
		}
		public bool has_m_param2
		{
			get{ return _m_param2.has_value; }
		}

		public uint m_param3
		{
			get{ return _m_param3.member_value; }
			set{ _m_param3.member_value = value; }
		}
		public bool has_m_param3
		{
			get{ return _m_param3.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_type.Serialize(_m_type.member_value, ref out_stream);

			count += _m_param1.Serialize(_m_param1.member_value, ref out_stream);

			count += _m_param2.Serialize(_m_param2.member_value, ref out_stream);

			count += _m_param3.Serialize(_m_param3.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_type = 0;
			one_count = _m_type.ParseFrom(ref temp_m_type, ref int_stream);
			if (0 < one_count)
			{
					_m_type.member_value = temp_m_type;
					count = count + one_count;
			}

			uint temp_m_param1 = 0;
			one_count = _m_param1.ParseFrom(ref temp_m_param1, ref int_stream);
			if (0 < one_count)
			{
					_m_param1.member_value = temp_m_param1;
					count = count + one_count;
			}

			uint temp_m_param2 = 0;
			one_count = _m_param2.ParseFrom(ref temp_m_param2, ref int_stream);
			if (0 < one_count)
			{
					_m_param2.member_value = temp_m_param2;
					count = count + one_count;
			}

			uint temp_m_param3 = 0;
			one_count = _m_param3.ParseFrom(ref temp_m_param3, ref int_stream);
			if (0 < one_count)
			{
					_m_param3.member_value = temp_m_param3;
					count = count + one_count;
			}

			return count;
		}
	}

	public class BattleHeroProp : IMessage
	{
		private ProtoMemberUInt32 _kangxing;	//抗性类型（金木水火土）
		private ProtoMemberUInt32 _hp;	//生命值
		private ProtoMemberUInt32 _hpmax;	//最大生命值
		private ProtoMemberUInt32 _attack;	//攻击力
		private ProtoMemberUInt32 _pdefense;	//物理防御力
		private ProtoMemberUInt32 _mdefense;	//魔法防御力
		private ProtoMemberUInt32 _jook;	//闪避
		private ProtoMemberUInt32 _hit;	//命中
		private ProtoMemberUInt32 _crit;	//暴击
		private ProtoMemberUInt32 _critdmgmult;	//暴击伤害倍率
		private ProtoMemberUInt32 _bodymodelid;	//模型id
		private ProtoMemberUInt32 _movespeed;	//移动速度
		private ProtoMemberEmbeddedList<BattleSpell> _spells;	//技能		

		public BattleHeroProp()
		{
			_kangxing = new ProtoMemberUInt32(1, true);
			_hp = new ProtoMemberUInt32(2, true);
			_hpmax = new ProtoMemberUInt32(3, true);
			_attack = new ProtoMemberUInt32(4, true);
			_pdefense = new ProtoMemberUInt32(5, true);
			_mdefense = new ProtoMemberUInt32(6, true);
			_jook = new ProtoMemberUInt32(7, true);
			_hit = new ProtoMemberUInt32(8, true);
			_crit = new ProtoMemberUInt32(9, true);
			_critdmgmult = new ProtoMemberUInt32(10, true);
			_bodymodelid = new ProtoMemberUInt32(11, true);
			_movespeed = new ProtoMemberUInt32(12, true);
			_spells = new ProtoMemberEmbeddedList<BattleSpell>(13, false);
		}

		public BattleHeroProp(uint __kangxing, uint __hp, uint __hpmax, uint __attack, uint __pdefense, uint __mdefense, uint __jook, uint __hit, uint __crit, uint __critdmgmult, uint __bodymodelid, uint __movespeed)
		{
			_kangxing = new ProtoMemberUInt32(1, true);
			_kangxing.member_value = __kangxing;
			_hp = new ProtoMemberUInt32(2, true);
			_hp.member_value = __hp;
			_hpmax = new ProtoMemberUInt32(3, true);
			_hpmax.member_value = __hpmax;
			_attack = new ProtoMemberUInt32(4, true);
			_attack.member_value = __attack;
			_pdefense = new ProtoMemberUInt32(5, true);
			_pdefense.member_value = __pdefense;
			_mdefense = new ProtoMemberUInt32(6, true);
			_mdefense.member_value = __mdefense;
			_jook = new ProtoMemberUInt32(7, true);
			_jook.member_value = __jook;
			_hit = new ProtoMemberUInt32(8, true);
			_hit.member_value = __hit;
			_crit = new ProtoMemberUInt32(9, true);
			_crit.member_value = __crit;
			_critdmgmult = new ProtoMemberUInt32(10, true);
			_critdmgmult.member_value = __critdmgmult;
			_bodymodelid = new ProtoMemberUInt32(11, true);
			_bodymodelid.member_value = __bodymodelid;
			_movespeed = new ProtoMemberUInt32(12, true);
			_movespeed.member_value = __movespeed;
			_spells = new ProtoMemberEmbeddedList<BattleSpell>(13, false);
		}

		public uint kangxing
		{
			get{ return _kangxing.member_value; }
			set{ _kangxing.member_value = value; }
		}
		public bool has_kangxing
		{
			get{ return _kangxing.has_value; }
		}

		public uint hp
		{
			get{ return _hp.member_value; }
			set{ _hp.member_value = value; }
		}
		public bool has_hp
		{
			get{ return _hp.has_value; }
		}

		public uint hpmax
		{
			get{ return _hpmax.member_value; }
			set{ _hpmax.member_value = value; }
		}
		public bool has_hpmax
		{
			get{ return _hpmax.has_value; }
		}

		public uint attack
		{
			get{ return _attack.member_value; }
			set{ _attack.member_value = value; }
		}
		public bool has_attack
		{
			get{ return _attack.has_value; }
		}

		public uint pdefense
		{
			get{ return _pdefense.member_value; }
			set{ _pdefense.member_value = value; }
		}
		public bool has_pdefense
		{
			get{ return _pdefense.has_value; }
		}

		public uint mdefense
		{
			get{ return _mdefense.member_value; }
			set{ _mdefense.member_value = value; }
		}
		public bool has_mdefense
		{
			get{ return _mdefense.has_value; }
		}

		public uint jook
		{
			get{ return _jook.member_value; }
			set{ _jook.member_value = value; }
		}
		public bool has_jook
		{
			get{ return _jook.has_value; }
		}

		public uint hit
		{
			get{ return _hit.member_value; }
			set{ _hit.member_value = value; }
		}
		public bool has_hit
		{
			get{ return _hit.has_value; }
		}

		public uint crit
		{
			get{ return _crit.member_value; }
			set{ _crit.member_value = value; }
		}
		public bool has_crit
		{
			get{ return _crit.has_value; }
		}

		public uint critdmgmult
		{
			get{ return _critdmgmult.member_value; }
			set{ _critdmgmult.member_value = value; }
		}
		public bool has_critdmgmult
		{
			get{ return _critdmgmult.has_value; }
		}

		public uint bodymodelid
		{
			get{ return _bodymodelid.member_value; }
			set{ _bodymodelid.member_value = value; }
		}
		public bool has_bodymodelid
		{
			get{ return _bodymodelid.has_value; }
		}

		public uint movespeed
		{
			get{ return _movespeed.member_value; }
			set{ _movespeed.member_value = value; }
		}
		public bool has_movespeed
		{
			get{ return _movespeed.has_value; }
		}

		public System.Collections.Generic.List<BattleSpell> spells
		{
			get{ return _spells.member_value; }
		}
		public bool has_spells
		{
			get{ return _spells.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _kangxing.Serialize(_kangxing.member_value, ref out_stream);

			count += _hp.Serialize(_hp.member_value, ref out_stream);

			count += _hpmax.Serialize(_hpmax.member_value, ref out_stream);

			count += _attack.Serialize(_attack.member_value, ref out_stream);

			count += _pdefense.Serialize(_pdefense.member_value, ref out_stream);

			count += _mdefense.Serialize(_mdefense.member_value, ref out_stream);

			count += _jook.Serialize(_jook.member_value, ref out_stream);

			count += _hit.Serialize(_hit.member_value, ref out_stream);

			count += _crit.Serialize(_crit.member_value, ref out_stream);

			count += _critdmgmult.Serialize(_critdmgmult.member_value, ref out_stream);

			count += _bodymodelid.Serialize(_bodymodelid.member_value, ref out_stream);

			count += _movespeed.Serialize(_movespeed.member_value, ref out_stream);

			foreach(BattleSpell one_member_value in _spells.member_value)
			{
				count += _spells.Serialize(one_member_value, ref out_stream);
			}

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_kangxing = 0;
			one_count = _kangxing.ParseFrom(ref temp_kangxing, ref int_stream);
			if (0 < one_count)
			{
					_kangxing.member_value = temp_kangxing;
					count = count + one_count;
			}

			uint temp_hp = 0;
			one_count = _hp.ParseFrom(ref temp_hp, ref int_stream);
			if (0 < one_count)
			{
					_hp.member_value = temp_hp;
					count = count + one_count;
			}

			uint temp_hpmax = 0;
			one_count = _hpmax.ParseFrom(ref temp_hpmax, ref int_stream);
			if (0 < one_count)
			{
					_hpmax.member_value = temp_hpmax;
					count = count + one_count;
			}

			uint temp_attack = 0;
			one_count = _attack.ParseFrom(ref temp_attack, ref int_stream);
			if (0 < one_count)
			{
					_attack.member_value = temp_attack;
					count = count + one_count;
			}

			uint temp_pdefense = 0;
			one_count = _pdefense.ParseFrom(ref temp_pdefense, ref int_stream);
			if (0 < one_count)
			{
					_pdefense.member_value = temp_pdefense;
					count = count + one_count;
			}

			uint temp_mdefense = 0;
			one_count = _mdefense.ParseFrom(ref temp_mdefense, ref int_stream);
			if (0 < one_count)
			{
					_mdefense.member_value = temp_mdefense;
					count = count + one_count;
			}

			uint temp_jook = 0;
			one_count = _jook.ParseFrom(ref temp_jook, ref int_stream);
			if (0 < one_count)
			{
					_jook.member_value = temp_jook;
					count = count + one_count;
			}

			uint temp_hit = 0;
			one_count = _hit.ParseFrom(ref temp_hit, ref int_stream);
			if (0 < one_count)
			{
					_hit.member_value = temp_hit;
					count = count + one_count;
			}

			uint temp_crit = 0;
			one_count = _crit.ParseFrom(ref temp_crit, ref int_stream);
			if (0 < one_count)
			{
					_crit.member_value = temp_crit;
					count = count + one_count;
			}

			uint temp_critdmgmult = 0;
			one_count = _critdmgmult.ParseFrom(ref temp_critdmgmult, ref int_stream);
			if (0 < one_count)
			{
					_critdmgmult.member_value = temp_critdmgmult;
					count = count + one_count;
			}

			uint temp_bodymodelid = 0;
			one_count = _bodymodelid.ParseFrom(ref temp_bodymodelid, ref int_stream);
			if (0 < one_count)
			{
					_bodymodelid.member_value = temp_bodymodelid;
					count = count + one_count;
			}

			uint temp_movespeed = 0;
			one_count = _movespeed.ParseFrom(ref temp_movespeed, ref int_stream);
			if (0 < one_count)
			{
					_movespeed.member_value = temp_movespeed;
					count = count + one_count;
			}

			while (true)
			{
				BattleSpell one_member_value = new BattleSpell();
				one_count = _spells.ParseFrom(one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_spells.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			return count;
		}
	}

	public class BattleLocation : IMessage
	{
		private ProtoMemberUInt32 _m_uint_guid;	
		private ProtoMemberInt32 _m_posX;	
		private ProtoMemberInt32 _m_posY;	
		private ProtoMemberInt32 _m_posZ;	
		private ProtoMemberInt32 _m_orient;	

		public BattleLocation()
		{
			_m_uint_guid = new ProtoMemberUInt32(1, true);
			_m_posX = new ProtoMemberInt32(2, true);
			_m_posY = new ProtoMemberInt32(3, true);
			_m_posZ = new ProtoMemberInt32(4, true);
			_m_orient = new ProtoMemberInt32(5, true);
		}

		public BattleLocation(uint __m_uint_guid, int __m_posX, int __m_posY, int __m_posZ, int __m_orient)
		{
			_m_uint_guid = new ProtoMemberUInt32(1, true);
			_m_uint_guid.member_value = __m_uint_guid;
			_m_posX = new ProtoMemberInt32(2, true);
			_m_posX.member_value = __m_posX;
			_m_posY = new ProtoMemberInt32(3, true);
			_m_posY.member_value = __m_posY;
			_m_posZ = new ProtoMemberInt32(4, true);
			_m_posZ.member_value = __m_posZ;
			_m_orient = new ProtoMemberInt32(5, true);
			_m_orient.member_value = __m_orient;
		}

		public uint m_uint_guid
		{
			get{ return _m_uint_guid.member_value; }
			set{ _m_uint_guid.member_value = value; }
		}
		public bool has_m_uint_guid
		{
			get{ return _m_uint_guid.has_value; }
		}

		public int m_posX
		{
			get{ return _m_posX.member_value; }
			set{ _m_posX.member_value = value; }
		}
		public bool has_m_posX
		{
			get{ return _m_posX.has_value; }
		}

		public int m_posY
		{
			get{ return _m_posY.member_value; }
			set{ _m_posY.member_value = value; }
		}
		public bool has_m_posY
		{
			get{ return _m_posY.has_value; }
		}

		public int m_posZ
		{
			get{ return _m_posZ.member_value; }
			set{ _m_posZ.member_value = value; }
		}
		public bool has_m_posZ
		{
			get{ return _m_posZ.has_value; }
		}

		public int m_orient
		{
			get{ return _m_orient.member_value; }
			set{ _m_orient.member_value = value; }
		}
		public bool has_m_orient
		{
			get{ return _m_orient.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_uint_guid.Serialize(_m_uint_guid.member_value, ref out_stream);

			count += _m_posX.Serialize(_m_posX.member_value, ref out_stream);

			count += _m_posY.Serialize(_m_posY.member_value, ref out_stream);

			count += _m_posZ.Serialize(_m_posZ.member_value, ref out_stream);

			count += _m_orient.Serialize(_m_orient.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_uint_guid = 0;
			one_count = _m_uint_guid.ParseFrom(ref temp_m_uint_guid, ref int_stream);
			if (0 < one_count)
			{
					_m_uint_guid.member_value = temp_m_uint_guid;
					count = count + one_count;
			}

			int temp_m_posX = 0;
			one_count = _m_posX.ParseFrom(ref temp_m_posX, ref int_stream);
			if (0 < one_count)
			{
					_m_posX.member_value = temp_m_posX;
					count = count + one_count;
			}

			int temp_m_posY = 0;
			one_count = _m_posY.ParseFrom(ref temp_m_posY, ref int_stream);
			if (0 < one_count)
			{
					_m_posY.member_value = temp_m_posY;
					count = count + one_count;
			}

			int temp_m_posZ = 0;
			one_count = _m_posZ.ParseFrom(ref temp_m_posZ, ref int_stream);
			if (0 < one_count)
			{
					_m_posZ.member_value = temp_m_posZ;
					count = count + one_count;
			}

			int temp_m_orient = 0;
			one_count = _m_orient.ParseFrom(ref temp_m_orient, ref int_stream);
			if (0 < one_count)
			{
					_m_orient.member_value = temp_m_orient;
					count = count + one_count;
			}

			return count;
		}
	}

	public class BattleRecordLine : IMessage
	{
		private ProtoMemberUInt32 _m_player_serverid;	//玩家服ID
		private ProtoMemberUInt32 _m_player_accountid;	//玩家帐号ID
		private ProtoMemberEmbeddedList<BattleRecordNodeInfo> _m_nodes;	//战绩榜元数据

		public BattleRecordLine()
		{
			_m_player_serverid = new ProtoMemberUInt32(1, true);
			_m_player_accountid = new ProtoMemberUInt32(2, true);
			_m_nodes = new ProtoMemberEmbeddedList<BattleRecordNodeInfo>(3, false);
		}

		public BattleRecordLine(uint __m_player_serverid, uint __m_player_accountid)
		{
			_m_player_serverid = new ProtoMemberUInt32(1, true);
			_m_player_serverid.member_value = __m_player_serverid;
			_m_player_accountid = new ProtoMemberUInt32(2, true);
			_m_player_accountid.member_value = __m_player_accountid;
			_m_nodes = new ProtoMemberEmbeddedList<BattleRecordNodeInfo>(3, false);
		}

		public uint m_player_serverid
		{
			get{ return _m_player_serverid.member_value; }
			set{ _m_player_serverid.member_value = value; }
		}
		public bool has_m_player_serverid
		{
			get{ return _m_player_serverid.has_value; }
		}

		public uint m_player_accountid
		{
			get{ return _m_player_accountid.member_value; }
			set{ _m_player_accountid.member_value = value; }
		}
		public bool has_m_player_accountid
		{
			get{ return _m_player_accountid.has_value; }
		}

		public System.Collections.Generic.List<BattleRecordNodeInfo> m_nodes
		{
			get{ return _m_nodes.member_value; }
		}
		public bool has_m_nodes
		{
			get{ return _m_nodes.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_player_serverid.Serialize(_m_player_serverid.member_value, ref out_stream);

			count += _m_player_accountid.Serialize(_m_player_accountid.member_value, ref out_stream);

			foreach(BattleRecordNodeInfo one_member_value in _m_nodes.member_value)
			{
				count += _m_nodes.Serialize(one_member_value, ref out_stream);
			}

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_player_serverid = 0;
			one_count = _m_player_serverid.ParseFrom(ref temp_m_player_serverid, ref int_stream);
			if (0 < one_count)
			{
					_m_player_serverid.member_value = temp_m_player_serverid;
					count = count + one_count;
			}

			uint temp_m_player_accountid = 0;
			one_count = _m_player_accountid.ParseFrom(ref temp_m_player_accountid, ref int_stream);
			if (0 < one_count)
			{
					_m_player_accountid.member_value = temp_m_player_accountid;
					count = count + one_count;
			}

			while (true)
			{
				BattleRecordNodeInfo one_member_value = new BattleRecordNodeInfo();
				one_count = _m_nodes.ParseFrom(one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_nodes.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			return count;
		}
	}

	public class BattleRecordNodeInfo : IMessage
	{
		private ProtoMemberEnum<BattleRecordNodeType> _m_nNodeType;	//类型
		private ProtoMemberUInt32 _m_nNodeValue;	//数据	

		public BattleRecordNodeInfo()
		{
			_m_nNodeType = new ProtoMemberEnum<BattleRecordNodeType>(1, true);
			_m_nNodeValue = new ProtoMemberUInt32(2, true);
		}

		public BattleRecordNodeInfo(BattleRecordNodeType __m_nNodeType, uint __m_nNodeValue)
		{
			_m_nNodeType = new ProtoMemberEnum<BattleRecordNodeType>(1, true);
			_m_nNodeType.member_value = __m_nNodeType;
			_m_nNodeValue = new ProtoMemberUInt32(2, true);
			_m_nNodeValue.member_value = __m_nNodeValue;
		}

		public BattleRecordNodeType m_nNodeType
		{
			get{ return _m_nNodeType.member_value; }
			set{ _m_nNodeType.member_value = value; }
		}
		public bool has_m_nNodeType
		{
			get{ return _m_nNodeType.has_value; }
		}

		public uint m_nNodeValue
		{
			get{ return _m_nNodeValue.member_value; }
			set{ _m_nNodeValue.member_value = value; }
		}
		public bool has_m_nNodeValue
		{
			get{ return _m_nNodeValue.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_nNodeType.Serialize((uint)_m_nNodeType.member_value, ref out_stream);

			count += _m_nNodeValue.Serialize(_m_nNodeValue.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_nNodeType = 0;
			one_count = _m_nNodeType.ParseFrom(ref temp_m_nNodeType, ref int_stream);
			if (0 < one_count)
			{
					_m_nNodeType.member_value = (BattleRecordNodeType)temp_m_nNodeType;
					count = count + one_count;
			}

			uint temp_m_nNodeValue = 0;
			one_count = _m_nNodeValue.ParseFrom(ref temp_m_nNodeValue, ref int_stream);
			if (0 < one_count)
			{
					_m_nNodeValue.member_value = temp_m_nNodeValue;
					count = count + one_count;
			}

			return count;
		}
	}

	public enum BattleRecordNodeType
	{
		BattleRecordNodeType_JiSha			= 1,		//击杀
		BattleRecordNodeType_SiWang			= 2,		//死亡
		BattleRecordNodeType_ZhuGong		= 3,		//助攻
		BattleRecordNodeType_ShangHaiLiang	= 4,		//伤害量
		BattleRecordNodeType_ZhiLiaoLiang	= 5,		//治疗量
		BattleRecordNodeType_BianTaCiShu	= 6,		//鞭挞次数
		BattleRecordNodeType_ShouSha		= 7,		//首杀
		BattleRecordNodeType_TuanMie		= 8,		//团灭
		BattleRecordNodeType_LianXuJiSha	= 9,		//连续击杀
		BattleRecordNodeType_LeiJiJiSha		= 10,		//累计击杀
	}

	public class BattleRecord_ChallengeHunting : IMessage
	{
		private ProtoMemberUInt32 _m_player_serverid;	//玩家服ID
		private ProtoMemberUInt32 _m_player_accountid;	//玩家帐号ID
		private ProtoMemberUInt32 _m_kil_cnt;	//击杀数
		private ProtoMemberUInt32 _m_die_cnt;	//死亡数
		private ProtoMemberUInt32 _m_dmg_sum;	//伤害量
		private ProtoMemberUInt32 _m_cur_sum;	//治疗量

		public BattleRecord_ChallengeHunting()
		{
			_m_player_serverid = new ProtoMemberUInt32(1, true);
			_m_player_accountid = new ProtoMemberUInt32(2, true);
			_m_kil_cnt = new ProtoMemberUInt32(3, true);
			_m_die_cnt = new ProtoMemberUInt32(4, true);
			_m_dmg_sum = new ProtoMemberUInt32(5, true);
			_m_cur_sum = new ProtoMemberUInt32(6, true);
		}

		public BattleRecord_ChallengeHunting(uint __m_player_serverid, uint __m_player_accountid, uint __m_kil_cnt, uint __m_die_cnt, uint __m_dmg_sum, uint __m_cur_sum)
		{
			_m_player_serverid = new ProtoMemberUInt32(1, true);
			_m_player_serverid.member_value = __m_player_serverid;
			_m_player_accountid = new ProtoMemberUInt32(2, true);
			_m_player_accountid.member_value = __m_player_accountid;
			_m_kil_cnt = new ProtoMemberUInt32(3, true);
			_m_kil_cnt.member_value = __m_kil_cnt;
			_m_die_cnt = new ProtoMemberUInt32(4, true);
			_m_die_cnt.member_value = __m_die_cnt;
			_m_dmg_sum = new ProtoMemberUInt32(5, true);
			_m_dmg_sum.member_value = __m_dmg_sum;
			_m_cur_sum = new ProtoMemberUInt32(6, true);
			_m_cur_sum.member_value = __m_cur_sum;
		}

		public uint m_player_serverid
		{
			get{ return _m_player_serverid.member_value; }
			set{ _m_player_serverid.member_value = value; }
		}
		public bool has_m_player_serverid
		{
			get{ return _m_player_serverid.has_value; }
		}

		public uint m_player_accountid
		{
			get{ return _m_player_accountid.member_value; }
			set{ _m_player_accountid.member_value = value; }
		}
		public bool has_m_player_accountid
		{
			get{ return _m_player_accountid.has_value; }
		}

		public uint m_kil_cnt
		{
			get{ return _m_kil_cnt.member_value; }
			set{ _m_kil_cnt.member_value = value; }
		}
		public bool has_m_kil_cnt
		{
			get{ return _m_kil_cnt.has_value; }
		}

		public uint m_die_cnt
		{
			get{ return _m_die_cnt.member_value; }
			set{ _m_die_cnt.member_value = value; }
		}
		public bool has_m_die_cnt
		{
			get{ return _m_die_cnt.has_value; }
		}

		public uint m_dmg_sum
		{
			get{ return _m_dmg_sum.member_value; }
			set{ _m_dmg_sum.member_value = value; }
		}
		public bool has_m_dmg_sum
		{
			get{ return _m_dmg_sum.has_value; }
		}

		public uint m_cur_sum
		{
			get{ return _m_cur_sum.member_value; }
			set{ _m_cur_sum.member_value = value; }
		}
		public bool has_m_cur_sum
		{
			get{ return _m_cur_sum.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_player_serverid.Serialize(_m_player_serverid.member_value, ref out_stream);

			count += _m_player_accountid.Serialize(_m_player_accountid.member_value, ref out_stream);

			count += _m_kil_cnt.Serialize(_m_kil_cnt.member_value, ref out_stream);

			count += _m_die_cnt.Serialize(_m_die_cnt.member_value, ref out_stream);

			count += _m_dmg_sum.Serialize(_m_dmg_sum.member_value, ref out_stream);

			count += _m_cur_sum.Serialize(_m_cur_sum.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_player_serverid = 0;
			one_count = _m_player_serverid.ParseFrom(ref temp_m_player_serverid, ref int_stream);
			if (0 < one_count)
			{
					_m_player_serverid.member_value = temp_m_player_serverid;
					count = count + one_count;
			}

			uint temp_m_player_accountid = 0;
			one_count = _m_player_accountid.ParseFrom(ref temp_m_player_accountid, ref int_stream);
			if (0 < one_count)
			{
					_m_player_accountid.member_value = temp_m_player_accountid;
					count = count + one_count;
			}

			uint temp_m_kil_cnt = 0;
			one_count = _m_kil_cnt.ParseFrom(ref temp_m_kil_cnt, ref int_stream);
			if (0 < one_count)
			{
					_m_kil_cnt.member_value = temp_m_kil_cnt;
					count = count + one_count;
			}

			uint temp_m_die_cnt = 0;
			one_count = _m_die_cnt.ParseFrom(ref temp_m_die_cnt, ref int_stream);
			if (0 < one_count)
			{
					_m_die_cnt.member_value = temp_m_die_cnt;
					count = count + one_count;
			}

			uint temp_m_dmg_sum = 0;
			one_count = _m_dmg_sum.ParseFrom(ref temp_m_dmg_sum, ref int_stream);
			if (0 < one_count)
			{
					_m_dmg_sum.member_value = temp_m_dmg_sum;
					count = count + one_count;
			}

			uint temp_m_cur_sum = 0;
			one_count = _m_cur_sum.ParseFrom(ref temp_m_cur_sum, ref int_stream);
			if (0 < one_count)
			{
					_m_cur_sum.member_value = temp_m_cur_sum;
					count = count + one_count;
			}

			return count;
		}
	}

	public class BattleSkillEffect : IMessage
	{
		private ProtoMemberUInt32 _m_atker_id;	//攻击者id(英雄0~3,怪物则是按规则生成的一个更大的四位数的值)
		private ProtoMemberUInt32 _m_skill_id;	//使用的技能id
		private ProtoMemberString _m_clientdata;	//前端副带的一些表现数据
		private ProtoMemberEmbeddedList<DamageEffect> _m_effects;	//		
		private ProtoMemberUInt32 _m_atker_newpos_x;	//攻击者施法时要冲到的目标的位置(用于像狂暴撞击、砸向目标、钳制等效果)
		private ProtoMemberUInt32 _m_atker_newpos_z;	//攻击者施法时要冲到的目标的位置(用于像狂暴撞击、砸向目标、钳制等效果)
		private ProtoMemberInt32 _m_atker_orient;	//攻击者朝向

		public BattleSkillEffect()
		{
			_m_atker_id = new ProtoMemberUInt32(1, true);
			_m_skill_id = new ProtoMemberUInt32(2, true);
			_m_clientdata = new ProtoMemberString(3, false);
			_m_effects = new ProtoMemberEmbeddedList<DamageEffect>(4, false);
			_m_atker_newpos_x = new ProtoMemberUInt32(5, false);
			_m_atker_newpos_z = new ProtoMemberUInt32(6, false);
			_m_atker_orient = new ProtoMemberInt32(7, false);
		}

		public BattleSkillEffect(uint __m_atker_id, uint __m_skill_id, string __m_clientdata, uint __m_atker_newpos_x, uint __m_atker_newpos_z, int __m_atker_orient)
		{
			_m_atker_id = new ProtoMemberUInt32(1, true);
			_m_atker_id.member_value = __m_atker_id;
			_m_skill_id = new ProtoMemberUInt32(2, true);
			_m_skill_id.member_value = __m_skill_id;
			_m_clientdata = new ProtoMemberString(3, false);
			_m_clientdata.member_value = __m_clientdata;
			_m_effects = new ProtoMemberEmbeddedList<DamageEffect>(4, false);
			_m_atker_newpos_x = new ProtoMemberUInt32(5, false);
			_m_atker_newpos_x.member_value = __m_atker_newpos_x;
			_m_atker_newpos_z = new ProtoMemberUInt32(6, false);
			_m_atker_newpos_z.member_value = __m_atker_newpos_z;
			_m_atker_orient = new ProtoMemberInt32(7, false);
			_m_atker_orient.member_value = __m_atker_orient;
		}

		public uint m_atker_id
		{
			get{ return _m_atker_id.member_value; }
			set{ _m_atker_id.member_value = value; }
		}
		public bool has_m_atker_id
		{
			get{ return _m_atker_id.has_value; }
		}

		public uint m_skill_id
		{
			get{ return _m_skill_id.member_value; }
			set{ _m_skill_id.member_value = value; }
		}
		public bool has_m_skill_id
		{
			get{ return _m_skill_id.has_value; }
		}

		public string m_clientdata
		{
			get{ return _m_clientdata.member_value; }
			set{ _m_clientdata.member_value = value; }
		}
		public bool has_m_clientdata
		{
			get{ return _m_clientdata.has_value; }
		}

		public System.Collections.Generic.List<DamageEffect> m_effects
		{
			get{ return _m_effects.member_value; }
		}
		public bool has_m_effects
		{
			get{ return _m_effects.has_value; }
		}

		public uint m_atker_newpos_x
		{
			get{ return _m_atker_newpos_x.member_value; }
			set{ _m_atker_newpos_x.member_value = value; }
		}
		public bool has_m_atker_newpos_x
		{
			get{ return _m_atker_newpos_x.has_value; }
		}

		public uint m_atker_newpos_z
		{
			get{ return _m_atker_newpos_z.member_value; }
			set{ _m_atker_newpos_z.member_value = value; }
		}
		public bool has_m_atker_newpos_z
		{
			get{ return _m_atker_newpos_z.has_value; }
		}

		public int m_atker_orient
		{
			get{ return _m_atker_orient.member_value; }
			set{ _m_atker_orient.member_value = value; }
		}
		public bool has_m_atker_orient
		{
			get{ return _m_atker_orient.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_atker_id.Serialize(_m_atker_id.member_value, ref out_stream);

			count += _m_skill_id.Serialize(_m_skill_id.member_value, ref out_stream);

			count += _m_clientdata.Serialize(_m_clientdata.member_value, ref out_stream);

			foreach(DamageEffect one_member_value in _m_effects.member_value)
			{
				count += _m_effects.Serialize(one_member_value, ref out_stream);
			}

			count += _m_atker_newpos_x.Serialize(_m_atker_newpos_x.member_value, ref out_stream);

			count += _m_atker_newpos_z.Serialize(_m_atker_newpos_z.member_value, ref out_stream);

			count += _m_atker_orient.Serialize(_m_atker_orient.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_atker_id = 0;
			one_count = _m_atker_id.ParseFrom(ref temp_m_atker_id, ref int_stream);
			if (0 < one_count)
			{
					_m_atker_id.member_value = temp_m_atker_id;
					count = count + one_count;
			}

			uint temp_m_skill_id = 0;
			one_count = _m_skill_id.ParseFrom(ref temp_m_skill_id, ref int_stream);
			if (0 < one_count)
			{
					_m_skill_id.member_value = temp_m_skill_id;
					count = count + one_count;
			}

			string temp_m_clientdata = "";
			one_count = _m_clientdata.ParseFrom(ref temp_m_clientdata, ref int_stream);
			if (0 < one_count)
			{
					_m_clientdata.member_value = temp_m_clientdata;
					count = count + one_count;
			}

			while (true)
			{
				DamageEffect one_member_value = new DamageEffect();
				one_count = _m_effects.ParseFrom(one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_effects.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			uint temp_m_atker_newpos_x = 0;
			one_count = _m_atker_newpos_x.ParseFrom(ref temp_m_atker_newpos_x, ref int_stream);
			if (0 < one_count)
			{
					_m_atker_newpos_x.member_value = temp_m_atker_newpos_x;
					count = count + one_count;
			}

			uint temp_m_atker_newpos_z = 0;
			one_count = _m_atker_newpos_z.ParseFrom(ref temp_m_atker_newpos_z, ref int_stream);
			if (0 < one_count)
			{
					_m_atker_newpos_z.member_value = temp_m_atker_newpos_z;
					count = count + one_count;
			}

			int temp_m_atker_orient = 0;
			one_count = _m_atker_orient.ParseFrom(ref temp_m_atker_orient, ref int_stream);
			if (0 < one_count)
			{
					_m_atker_orient.member_value = temp_m_atker_orient;
					count = count + one_count;
			}

			return count;
		}
	}

	public class BattleSpell : IMessage
	{
		private ProtoMemberUInt32 _spellid;	//技能ID 

		public BattleSpell()
		{
			_spellid = new ProtoMemberUInt32(1, true);
		}

		public BattleSpell(uint __spellid)
		{
			_spellid = new ProtoMemberUInt32(1, true);
			_spellid.member_value = __spellid;
		}

		public uint spellid
		{
			get{ return _spellid.member_value; }
			set{ _spellid.member_value = value; }
		}
		public bool has_spellid
		{
			get{ return _spellid.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _spellid.Serialize(_spellid.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_spellid = 0;
			one_count = _spellid.ParseFrom(ref temp_spellid, ref int_stream);
			if (0 < one_count)
			{
					_spellid.member_value = temp_spellid;
					count = count + one_count;
			}

			return count;
		}
	}

	public enum BattleSvrRes
	{
		BattleSvrRes_Login_ParamError = 0x0001,	// 上发的队伍ID或玩家ID有为0
		BattleSvrRes_Login_AuthFaild =	0x0002,	// 未找到对应副本，检验失败
		BattleSvrRes_Login_AuthSuccess = 0x003,	// 找到对应副本、检验通过，登录成功
		BattleSvrRes_BattleRes_Succ				=	0x010,	//挑战成功
		BattleSvrRes_BattleRes_Faild			=	0x011,	//挑战失败
		BattleSvrRes_AttackRes_ReTeamId			=	0x012,	//房间创建失败，重复的队伍ID
		BattleSvrRes_AttackRes_CreateSucc		=	0x013,	//房间战局创建成功可以战斗
		BattleSvrRes_AttackRes_CreateFaild		=	0x014,	//房间战局创建失败
		BattleSvrRes_EnterSceneRes_Faield		=	0x015,	//进入场景失败
		BattleSvrRes_EnterSceneRes_Success		=	0x016,	//进入场景成功
		BattleSvrRes_BattleRes_Exit				=	0x017,	//退出战斗
	}

	public class BattleUnitHp : IMessage
	{
		private ProtoMemberUInt32 _m_unit_id;	//生物id(英雄0~3,怪物则是按规则生成的一个更大的四位数的值)
		private ProtoMemberUInt32 _m_cur_hp;	//当前血量

		public BattleUnitHp()
		{
			_m_unit_id = new ProtoMemberUInt32(1, true);
			_m_cur_hp = new ProtoMemberUInt32(2, true);
		}

		public BattleUnitHp(uint __m_unit_id, uint __m_cur_hp)
		{
			_m_unit_id = new ProtoMemberUInt32(1, true);
			_m_unit_id.member_value = __m_unit_id;
			_m_cur_hp = new ProtoMemberUInt32(2, true);
			_m_cur_hp.member_value = __m_cur_hp;
		}

		public uint m_unit_id
		{
			get{ return _m_unit_id.member_value; }
			set{ _m_unit_id.member_value = value; }
		}
		public bool has_m_unit_id
		{
			get{ return _m_unit_id.has_value; }
		}

		public uint m_cur_hp
		{
			get{ return _m_cur_hp.member_value; }
			set{ _m_cur_hp.member_value = value; }
		}
		public bool has_m_cur_hp
		{
			get{ return _m_cur_hp.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_unit_id.Serialize(_m_unit_id.member_value, ref out_stream);

			count += _m_cur_hp.Serialize(_m_cur_hp.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_unit_id = 0;
			one_count = _m_unit_id.ParseFrom(ref temp_m_unit_id, ref int_stream);
			if (0 < one_count)
			{
					_m_unit_id.member_value = temp_m_unit_id;
					count = count + one_count;
			}

			uint temp_m_cur_hp = 0;
			one_count = _m_cur_hp.ParseFrom(ref temp_m_cur_hp, ref int_stream);
			if (0 < one_count)
			{
					_m_cur_hp.member_value = temp_m_cur_hp;
					count = count + one_count;
			}

			return count;
		}
	}

	public enum BornEffectType
	{
		BornEffectType_Null					= 0,
		BornEffectType_Tamp					= 0x01,	//从天上砸下来
		BornEffectType_Summon				= 0x02,	//召唤出来的
	}

	public enum ChessActionType
	{
		ChessAction_Null						=	0,		//空,什么都不发生
		ChessAction_Time_Add_Self_Secs			= 1001,		//使玩家的时间增加XX秒
		ChessAction_Time_Dec_Self_Secs			= 1002,		//使玩家的时间减少XX秒
		ChessAction_Dice_Add_Self_CommCount		= 2001,		//增加XX个普通骰子数
		ChessAction_Dice_Dec_Self_CommCount		= 2002,		//减少XX个普通骰子数
		ChessAction_Dice_Add_Self_GlodCount		= 2003,		//增加XX个黄金骰子数
		ChessAction_Dice_Dec_Self_GlodCount		= 2004,		//减少XX个黄金骰子数
		ChessAction_Dice_BothSidesSwap			= 2005,		//使双方的骰子数对调
		ChessAction_Dice_BothSidesSwapGlodDice	= 2006,		//使双方的黄金骰子数对调
		ChessAction_Dice_AverageCommDice		= 2007,		//均分普通骰子
		ChessAction_Dice_AverageGoldDice		= 2008,		//均分黄金骰子
		ChessAction_Move_Slef_Ahead				= 3001,		//前进XX格
		ChessAction_Move_Slef_Backaward			= 3002,		//后退XX格
		ChessAction_Move_Slef_Add				= 3003,		//多走XX格
		ChessAction_Move_Slef_Dec				= 3004,		//少走XX格
		ChessAction_Move_Self_Stop				= 3005,		//停顿(止步)
		ChessAction_Move_Self_StopUntilOdd		= 3006,		//无法移动，直到投出奇数
		ChessAction_Move_Self_StopUntilEven		= 3007,		//无法移动，直到投出偶数
		ChessAction_Move_Self_GoRivalPos		= 3008,		//前往对手的位置	
		ChessAction_Move_BothSidesSwapPos		= 3009,		//和对手对调位置
		ChessAction_Move_Self_Double			= 3010,		//移动的格数乘以XX陪
		ChessAction_Move_Self_NextBack			= 3011,		//下回合掷出几点，就后退几格
		ChessAction_Move_Self_Reverse			= 3012,		//反向行走
		ChessAction_Random_Self_Specified		= 4001,		//只能掷出指定XX点数
		ChessAction_Hero_Select					= 5001,		//在这里选择一个英雄加入你的阵容（必须触发的事件）
		ChessAction_Award_Exp					= 6001,		//根据玩家等级奖励（策划配置表）XX经验，在完成副本后结算。
		ChessAction_Award_Money					= 6002,		//奖励XX金币，在完成副本后结算
		ChessAction_Award_BaoXiang				= 6003,		//奖励XX宝箱，触发事件后，从策划配置表（有三种品质的表）中调取道具奖励，在完成副本后结算
		ChessAction_Gain_SpecifItem				= 6005,		//获得一个指定道具
		ChessAction_Gain_RandomItem				= 6006,		//获得一个随机道具
		ChessAction_Clean_RandomItemAction		= 6007,		//清除前方XX格内的随机事件(目前指6006)
		ChessAction_Battle						= 7001,		//对战
		ChessAction_SnatchProp					= 8001,		//抢夺道具
		ChessAction_CopyProp					= 8002,		//复制道具
		ChessAction_DestroyProp					= 8003,		//破坏道具
		ChessAction_CopySpecifyProp				= 8004,		//复制指定道具
	}

	public enum ChessResultType
	{
		ChessResultType_Null					= 0,
		ChessResultType_Win						= 1,
		ChessResultType_Fail_ForRivalWin		= 2,
		ChessResultType_Fail_ForTimeout			= 3,
		ChessResultType_Fail_ForDiceUseUp		= 4,
	}

	public class ChessStep : IMessage
	{
		private ProtoMemberUInt32 _m_nChessStep;	//步(1 ... 200..)
		private ProtoMemberUInt32 _m_nChessActionId;	//事件id,索引StarChessAction.csv表
		private ProtoMemberUInt32 _m_param1;	//辅助参数1
		private ProtoMemberUInt32 _m_param2;	
		private ProtoMemberUInt32 _m_param3;	
		private ProtoMemberUInt32 _m_param4;	
		private ProtoMemberUInt32 _m_param5;	

		public ChessStep()
		{
			_m_nChessStep = new ProtoMemberUInt32(1, true);
			_m_nChessActionId = new ProtoMemberUInt32(2, true);
			_m_param1 = new ProtoMemberUInt32(3, false);
			_m_param2 = new ProtoMemberUInt32(4, false);
			_m_param3 = new ProtoMemberUInt32(5, false);
			_m_param4 = new ProtoMemberUInt32(6, false);
			_m_param5 = new ProtoMemberUInt32(7, false);
		}

		public ChessStep(uint __m_nChessStep, uint __m_nChessActionId, uint __m_param1, uint __m_param2, uint __m_param3, uint __m_param4, uint __m_param5)
		{
			_m_nChessStep = new ProtoMemberUInt32(1, true);
			_m_nChessStep.member_value = __m_nChessStep;
			_m_nChessActionId = new ProtoMemberUInt32(2, true);
			_m_nChessActionId.member_value = __m_nChessActionId;
			_m_param1 = new ProtoMemberUInt32(3, false);
			_m_param1.member_value = __m_param1;
			_m_param2 = new ProtoMemberUInt32(4, false);
			_m_param2.member_value = __m_param2;
			_m_param3 = new ProtoMemberUInt32(5, false);
			_m_param3.member_value = __m_param3;
			_m_param4 = new ProtoMemberUInt32(6, false);
			_m_param4.member_value = __m_param4;
			_m_param5 = new ProtoMemberUInt32(7, false);
			_m_param5.member_value = __m_param5;
		}

		public uint m_nChessStep
		{
			get{ return _m_nChessStep.member_value; }
			set{ _m_nChessStep.member_value = value; }
		}
		public bool has_m_nChessStep
		{
			get{ return _m_nChessStep.has_value; }
		}

		public uint m_nChessActionId
		{
			get{ return _m_nChessActionId.member_value; }
			set{ _m_nChessActionId.member_value = value; }
		}
		public bool has_m_nChessActionId
		{
			get{ return _m_nChessActionId.has_value; }
		}

		public uint m_param1
		{
			get{ return _m_param1.member_value; }
			set{ _m_param1.member_value = value; }
		}
		public bool has_m_param1
		{
			get{ return _m_param1.has_value; }
		}

		public uint m_param2
		{
			get{ return _m_param2.member_value; }
			set{ _m_param2.member_value = value; }
		}
		public bool has_m_param2
		{
			get{ return _m_param2.has_value; }
		}

		public uint m_param3
		{
			get{ return _m_param3.member_value; }
			set{ _m_param3.member_value = value; }
		}
		public bool has_m_param3
		{
			get{ return _m_param3.has_value; }
		}

		public uint m_param4
		{
			get{ return _m_param4.member_value; }
			set{ _m_param4.member_value = value; }
		}
		public bool has_m_param4
		{
			get{ return _m_param4.has_value; }
		}

		public uint m_param5
		{
			get{ return _m_param5.member_value; }
			set{ _m_param5.member_value = value; }
		}
		public bool has_m_param5
		{
			get{ return _m_param5.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_nChessStep.Serialize(_m_nChessStep.member_value, ref out_stream);

			count += _m_nChessActionId.Serialize(_m_nChessActionId.member_value, ref out_stream);

			count += _m_param1.Serialize(_m_param1.member_value, ref out_stream);

			count += _m_param2.Serialize(_m_param2.member_value, ref out_stream);

			count += _m_param3.Serialize(_m_param3.member_value, ref out_stream);

			count += _m_param4.Serialize(_m_param4.member_value, ref out_stream);

			count += _m_param5.Serialize(_m_param5.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_nChessStep = 0;
			one_count = _m_nChessStep.ParseFrom(ref temp_m_nChessStep, ref int_stream);
			if (0 < one_count)
			{
					_m_nChessStep.member_value = temp_m_nChessStep;
					count = count + one_count;
			}

			uint temp_m_nChessActionId = 0;
			one_count = _m_nChessActionId.ParseFrom(ref temp_m_nChessActionId, ref int_stream);
			if (0 < one_count)
			{
					_m_nChessActionId.member_value = temp_m_nChessActionId;
					count = count + one_count;
			}

			uint temp_m_param1 = 0;
			one_count = _m_param1.ParseFrom(ref temp_m_param1, ref int_stream);
			if (0 < one_count)
			{
					_m_param1.member_value = temp_m_param1;
					count = count + one_count;
			}

			uint temp_m_param2 = 0;
			one_count = _m_param2.ParseFrom(ref temp_m_param2, ref int_stream);
			if (0 < one_count)
			{
					_m_param2.member_value = temp_m_param2;
					count = count + one_count;
			}

			uint temp_m_param3 = 0;
			one_count = _m_param3.ParseFrom(ref temp_m_param3, ref int_stream);
			if (0 < one_count)
			{
					_m_param3.member_value = temp_m_param3;
					count = count + one_count;
			}

			uint temp_m_param4 = 0;
			one_count = _m_param4.ParseFrom(ref temp_m_param4, ref int_stream);
			if (0 < one_count)
			{
					_m_param4.member_value = temp_m_param4;
					count = count + one_count;
			}

			uint temp_m_param5 = 0;
			one_count = _m_param5.ParseFrom(ref temp_m_param5, ref int_stream);
			if (0 < one_count)
			{
					_m_param5.member_value = temp_m_param5;
					count = count + one_count;
			}

			return count;
		}
	}

	public class ClientAddr : IMessage
	{
		private ProtoMemberUInt32 _m_AccountID;	
		private ProtoMemberUInt32 _m_ServerID;	
		private ProtoMemberString _m_clientIp;	
		private ProtoMemberUInt32 _m_clientPort;	
		private ProtoMemberString _m_clientIp_LAN;	//内网Ip
		private ProtoMemberUInt32 _m_port_lan;	// 内网port

		public ClientAddr()
		{
			_m_AccountID = new ProtoMemberUInt32(1, true);
			_m_ServerID = new ProtoMemberUInt32(2, true);
			_m_clientIp = new ProtoMemberString(3, true);
			_m_clientPort = new ProtoMemberUInt32(4, true);
			_m_clientIp_LAN = new ProtoMemberString(5, false);
			_m_port_lan = new ProtoMemberUInt32(6, false);
		}

		public ClientAddr(uint __m_AccountID, uint __m_ServerID, string __m_clientIp, uint __m_clientPort, string __m_clientIp_LAN, uint __m_port_lan)
		{
			_m_AccountID = new ProtoMemberUInt32(1, true);
			_m_AccountID.member_value = __m_AccountID;
			_m_ServerID = new ProtoMemberUInt32(2, true);
			_m_ServerID.member_value = __m_ServerID;
			_m_clientIp = new ProtoMemberString(3, true);
			_m_clientIp.member_value = __m_clientIp;
			_m_clientPort = new ProtoMemberUInt32(4, true);
			_m_clientPort.member_value = __m_clientPort;
			_m_clientIp_LAN = new ProtoMemberString(5, false);
			_m_clientIp_LAN.member_value = __m_clientIp_LAN;
			_m_port_lan = new ProtoMemberUInt32(6, false);
			_m_port_lan.member_value = __m_port_lan;
		}

		public uint m_AccountID
		{
			get{ return _m_AccountID.member_value; }
			set{ _m_AccountID.member_value = value; }
		}
		public bool has_m_AccountID
		{
			get{ return _m_AccountID.has_value; }
		}

		public uint m_ServerID
		{
			get{ return _m_ServerID.member_value; }
			set{ _m_ServerID.member_value = value; }
		}
		public bool has_m_ServerID
		{
			get{ return _m_ServerID.has_value; }
		}

		public string m_clientIp
		{
			get{ return _m_clientIp.member_value; }
			set{ _m_clientIp.member_value = value; }
		}
		public bool has_m_clientIp
		{
			get{ return _m_clientIp.has_value; }
		}

		public uint m_clientPort
		{
			get{ return _m_clientPort.member_value; }
			set{ _m_clientPort.member_value = value; }
		}
		public bool has_m_clientPort
		{
			get{ return _m_clientPort.has_value; }
		}

		public string m_clientIp_LAN
		{
			get{ return _m_clientIp_LAN.member_value; }
			set{ _m_clientIp_LAN.member_value = value; }
		}
		public bool has_m_clientIp_LAN
		{
			get{ return _m_clientIp_LAN.has_value; }
		}

		public uint m_port_lan
		{
			get{ return _m_port_lan.member_value; }
			set{ _m_port_lan.member_value = value; }
		}
		public bool has_m_port_lan
		{
			get{ return _m_port_lan.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_AccountID.Serialize(_m_AccountID.member_value, ref out_stream);

			count += _m_ServerID.Serialize(_m_ServerID.member_value, ref out_stream);

			count += _m_clientIp.Serialize(_m_clientIp.member_value, ref out_stream);

			count += _m_clientPort.Serialize(_m_clientPort.member_value, ref out_stream);

			count += _m_clientIp_LAN.Serialize(_m_clientIp_LAN.member_value, ref out_stream);

			count += _m_port_lan.Serialize(_m_port_lan.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_AccountID = 0;
			one_count = _m_AccountID.ParseFrom(ref temp_m_AccountID, ref int_stream);
			if (0 < one_count)
			{
					_m_AccountID.member_value = temp_m_AccountID;
					count = count + one_count;
			}

			uint temp_m_ServerID = 0;
			one_count = _m_ServerID.ParseFrom(ref temp_m_ServerID, ref int_stream);
			if (0 < one_count)
			{
					_m_ServerID.member_value = temp_m_ServerID;
					count = count + one_count;
			}

			string temp_m_clientIp = "";
			one_count = _m_clientIp.ParseFrom(ref temp_m_clientIp, ref int_stream);
			if (0 < one_count)
			{
					_m_clientIp.member_value = temp_m_clientIp;
					count = count + one_count;
			}

			uint temp_m_clientPort = 0;
			one_count = _m_clientPort.ParseFrom(ref temp_m_clientPort, ref int_stream);
			if (0 < one_count)
			{
					_m_clientPort.member_value = temp_m_clientPort;
					count = count + one_count;
			}

			string temp_m_clientIp_LAN = "";
			one_count = _m_clientIp_LAN.ParseFrom(ref temp_m_clientIp_LAN, ref int_stream);
			if (0 < one_count)
			{
					_m_clientIp_LAN.member_value = temp_m_clientIp_LAN;
					count = count + one_count;
			}

			uint temp_m_port_lan = 0;
			one_count = _m_port_lan.ParseFrom(ref temp_m_port_lan, ref int_stream);
			if (0 < one_count)
			{
					_m_port_lan.member_value = temp_m_port_lan;
					count = count + one_count;
			}

			return count;
		}
	}

	public class DamageEffect : IMessage
	{
		private ProtoMemberUInt32 _m_resultid;	//技能效果id(1、2。。)
		private ProtoMemberEmbeddedList<BattleDamage> _m_battledamage;	
		private ProtoMemberEmbeddedList<WorldPosition> _m_skill_attack_pos;	//对类施法类技能效果位置坐标
		private ProtoMemberUInt32 _m_damage_index;	//伤害编号

		public DamageEffect()
		{
			_m_resultid = new ProtoMemberUInt32(1, true);
			_m_battledamage = new ProtoMemberEmbeddedList<BattleDamage>(2, false);
			_m_skill_attack_pos = new ProtoMemberEmbeddedList<WorldPosition>(3, false);
			_m_damage_index = new ProtoMemberUInt32(4, false);
		}

		public DamageEffect(uint __m_resultid, uint __m_damage_index)
		{
			_m_resultid = new ProtoMemberUInt32(1, true);
			_m_resultid.member_value = __m_resultid;
			_m_battledamage = new ProtoMemberEmbeddedList<BattleDamage>(2, false);
			_m_skill_attack_pos = new ProtoMemberEmbeddedList<WorldPosition>(3, false);
			_m_damage_index = new ProtoMemberUInt32(4, false);
			_m_damage_index.member_value = __m_damage_index;
		}

		public uint m_resultid
		{
			get{ return _m_resultid.member_value; }
			set{ _m_resultid.member_value = value; }
		}
		public bool has_m_resultid
		{
			get{ return _m_resultid.has_value; }
		}

		public System.Collections.Generic.List<BattleDamage> m_battledamage
		{
			get{ return _m_battledamage.member_value; }
		}
		public bool has_m_battledamage
		{
			get{ return _m_battledamage.has_value; }
		}

		public System.Collections.Generic.List<WorldPosition> m_skill_attack_pos
		{
			get{ return _m_skill_attack_pos.member_value; }
		}
		public bool has_m_skill_attack_pos
		{
			get{ return _m_skill_attack_pos.has_value; }
		}

		public uint m_damage_index
		{
			get{ return _m_damage_index.member_value; }
			set{ _m_damage_index.member_value = value; }
		}
		public bool has_m_damage_index
		{
			get{ return _m_damage_index.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_resultid.Serialize(_m_resultid.member_value, ref out_stream);

			foreach(BattleDamage one_member_value in _m_battledamage.member_value)
			{
				count += _m_battledamage.Serialize(one_member_value, ref out_stream);
			}

			foreach(WorldPosition one_member_value in _m_skill_attack_pos.member_value)
			{
				count += _m_skill_attack_pos.Serialize(one_member_value, ref out_stream);
			}

			count += _m_damage_index.Serialize(_m_damage_index.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_resultid = 0;
			one_count = _m_resultid.ParseFrom(ref temp_m_resultid, ref int_stream);
			if (0 < one_count)
			{
					_m_resultid.member_value = temp_m_resultid;
					count = count + one_count;
			}

			while (true)
			{
				BattleDamage one_member_value = new BattleDamage();
				one_count = _m_battledamage.ParseFrom(one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_battledamage.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			while (true)
			{
				WorldPosition one_member_value = new WorldPosition();
				one_count = _m_skill_attack_pos.ParseFrom(one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_skill_attack_pos.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			uint temp_m_damage_index = 0;
			one_count = _m_damage_index.ParseFrom(ref temp_m_damage_index, ref int_stream);
			if (0 < one_count)
			{
					_m_damage_index.member_value = temp_m_damage_index;
					count = count + one_count;
			}

			return count;
		}
	}

	public class DamageHpInfo : IMessage
	{
		private ProtoMemberUInt32 _m_unit_guid;	//生物guid
		private ProtoMemberUInt32 _m_dmg_index;	//伤害编号
		private ProtoMemberUInt32 _m_dmg_val;	//伤害量
		private ProtoMemberUInt32 _m_skill_id;	//技能ID
		private ProtoMemberUInt32 _m_result_type;	//效果ID
		private ProtoMemberUInt32 _m_atker_guid;	//施法者guid
		private ProtoMemberUInt32 _m_hp_old;	//扣前的HP
		private ProtoMemberUInt32 _m_hp_new;	//扣后的HP

		public DamageHpInfo()
		{
			_m_unit_guid = new ProtoMemberUInt32(1, true);
			_m_dmg_index = new ProtoMemberUInt32(2, true);
			_m_dmg_val = new ProtoMemberUInt32(3, true);
			_m_skill_id = new ProtoMemberUInt32(4, true);
			_m_result_type = new ProtoMemberUInt32(5, true);
			_m_atker_guid = new ProtoMemberUInt32(6, true);
			_m_hp_old = new ProtoMemberUInt32(7, true);
			_m_hp_new = new ProtoMemberUInt32(8, true);
		}

		public DamageHpInfo(uint __m_unit_guid, uint __m_dmg_index, uint __m_dmg_val, uint __m_skill_id, uint __m_result_type, uint __m_atker_guid, uint __m_hp_old, uint __m_hp_new)
		{
			_m_unit_guid = new ProtoMemberUInt32(1, true);
			_m_unit_guid.member_value = __m_unit_guid;
			_m_dmg_index = new ProtoMemberUInt32(2, true);
			_m_dmg_index.member_value = __m_dmg_index;
			_m_dmg_val = new ProtoMemberUInt32(3, true);
			_m_dmg_val.member_value = __m_dmg_val;
			_m_skill_id = new ProtoMemberUInt32(4, true);
			_m_skill_id.member_value = __m_skill_id;
			_m_result_type = new ProtoMemberUInt32(5, true);
			_m_result_type.member_value = __m_result_type;
			_m_atker_guid = new ProtoMemberUInt32(6, true);
			_m_atker_guid.member_value = __m_atker_guid;
			_m_hp_old = new ProtoMemberUInt32(7, true);
			_m_hp_old.member_value = __m_hp_old;
			_m_hp_new = new ProtoMemberUInt32(8, true);
			_m_hp_new.member_value = __m_hp_new;
		}

		public uint m_unit_guid
		{
			get{ return _m_unit_guid.member_value; }
			set{ _m_unit_guid.member_value = value; }
		}
		public bool has_m_unit_guid
		{
			get{ return _m_unit_guid.has_value; }
		}

		public uint m_dmg_index
		{
			get{ return _m_dmg_index.member_value; }
			set{ _m_dmg_index.member_value = value; }
		}
		public bool has_m_dmg_index
		{
			get{ return _m_dmg_index.has_value; }
		}

		public uint m_dmg_val
		{
			get{ return _m_dmg_val.member_value; }
			set{ _m_dmg_val.member_value = value; }
		}
		public bool has_m_dmg_val
		{
			get{ return _m_dmg_val.has_value; }
		}

		public uint m_skill_id
		{
			get{ return _m_skill_id.member_value; }
			set{ _m_skill_id.member_value = value; }
		}
		public bool has_m_skill_id
		{
			get{ return _m_skill_id.has_value; }
		}

		public uint m_result_type
		{
			get{ return _m_result_type.member_value; }
			set{ _m_result_type.member_value = value; }
		}
		public bool has_m_result_type
		{
			get{ return _m_result_type.has_value; }
		}

		public uint m_atker_guid
		{
			get{ return _m_atker_guid.member_value; }
			set{ _m_atker_guid.member_value = value; }
		}
		public bool has_m_atker_guid
		{
			get{ return _m_atker_guid.has_value; }
		}

		public uint m_hp_old
		{
			get{ return _m_hp_old.member_value; }
			set{ _m_hp_old.member_value = value; }
		}
		public bool has_m_hp_old
		{
			get{ return _m_hp_old.has_value; }
		}

		public uint m_hp_new
		{
			get{ return _m_hp_new.member_value; }
			set{ _m_hp_new.member_value = value; }
		}
		public bool has_m_hp_new
		{
			get{ return _m_hp_new.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_unit_guid.Serialize(_m_unit_guid.member_value, ref out_stream);

			count += _m_dmg_index.Serialize(_m_dmg_index.member_value, ref out_stream);

			count += _m_dmg_val.Serialize(_m_dmg_val.member_value, ref out_stream);

			count += _m_skill_id.Serialize(_m_skill_id.member_value, ref out_stream);

			count += _m_result_type.Serialize(_m_result_type.member_value, ref out_stream);

			count += _m_atker_guid.Serialize(_m_atker_guid.member_value, ref out_stream);

			count += _m_hp_old.Serialize(_m_hp_old.member_value, ref out_stream);

			count += _m_hp_new.Serialize(_m_hp_new.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_unit_guid = 0;
			one_count = _m_unit_guid.ParseFrom(ref temp_m_unit_guid, ref int_stream);
			if (0 < one_count)
			{
					_m_unit_guid.member_value = temp_m_unit_guid;
					count = count + one_count;
			}

			uint temp_m_dmg_index = 0;
			one_count = _m_dmg_index.ParseFrom(ref temp_m_dmg_index, ref int_stream);
			if (0 < one_count)
			{
					_m_dmg_index.member_value = temp_m_dmg_index;
					count = count + one_count;
			}

			uint temp_m_dmg_val = 0;
			one_count = _m_dmg_val.ParseFrom(ref temp_m_dmg_val, ref int_stream);
			if (0 < one_count)
			{
					_m_dmg_val.member_value = temp_m_dmg_val;
					count = count + one_count;
			}

			uint temp_m_skill_id = 0;
			one_count = _m_skill_id.ParseFrom(ref temp_m_skill_id, ref int_stream);
			if (0 < one_count)
			{
					_m_skill_id.member_value = temp_m_skill_id;
					count = count + one_count;
			}

			uint temp_m_result_type = 0;
			one_count = _m_result_type.ParseFrom(ref temp_m_result_type, ref int_stream);
			if (0 < one_count)
			{
					_m_result_type.member_value = temp_m_result_type;
					count = count + one_count;
			}

			uint temp_m_atker_guid = 0;
			one_count = _m_atker_guid.ParseFrom(ref temp_m_atker_guid, ref int_stream);
			if (0 < one_count)
			{
					_m_atker_guid.member_value = temp_m_atker_guid;
					count = count + one_count;
			}

			uint temp_m_hp_old = 0;
			one_count = _m_hp_old.ParseFrom(ref temp_m_hp_old, ref int_stream);
			if (0 < one_count)
			{
					_m_hp_old.member_value = temp_m_hp_old;
					count = count + one_count;
			}

			uint temp_m_hp_new = 0;
			one_count = _m_hp_new.ParseFrom(ref temp_m_hp_new, ref int_stream);
			if (0 < one_count)
			{
					_m_hp_new.member_value = temp_m_hp_new;
					count = count + one_count;
			}

			return count;
		}
	}

	public class DataContainerMsg : IMessage
	{
		private ProtoMemberUInt64 _guid;	
		private ProtoMemberUInt32 _owner_account_id;	
		private ProtoMemberUInt32 _owner_server_id;	
		private ProtoMemberEnum<DataContainerType> _type;	
		private ProtoMemberEnum<DataContainerOpt> _opt;	
		private ProtoMemberEmbeddedList<KeyValue_Uint32> _ltInt;	
		private ProtoMemberEmbeddedList<KeyValue_String> _ltStr;	

		public DataContainerMsg()
		{
			_guid = new ProtoMemberUInt64(1, true);
			_owner_account_id = new ProtoMemberUInt32(2, true);
			_owner_server_id = new ProtoMemberUInt32(3, true);
			_type = new ProtoMemberEnum<DataContainerType>(4, true);
			_opt = new ProtoMemberEnum<DataContainerOpt>(5, true);
			_ltInt = new ProtoMemberEmbeddedList<KeyValue_Uint32>(6, false);
			_ltStr = new ProtoMemberEmbeddedList<KeyValue_String>(7, false);
		}

		public DataContainerMsg(ulong __guid, uint __owner_account_id, uint __owner_server_id, DataContainerType __type, DataContainerOpt __opt)
		{
			_guid = new ProtoMemberUInt64(1, true);
			_guid.member_value = __guid;
			_owner_account_id = new ProtoMemberUInt32(2, true);
			_owner_account_id.member_value = __owner_account_id;
			_owner_server_id = new ProtoMemberUInt32(3, true);
			_owner_server_id.member_value = __owner_server_id;
			_type = new ProtoMemberEnum<DataContainerType>(4, true);
			_type.member_value = __type;
			_opt = new ProtoMemberEnum<DataContainerOpt>(5, true);
			_opt.member_value = __opt;
			_ltInt = new ProtoMemberEmbeddedList<KeyValue_Uint32>(6, false);
			_ltStr = new ProtoMemberEmbeddedList<KeyValue_String>(7, false);
		}

		public ulong guid
		{
			get{ return _guid.member_value; }
			set{ _guid.member_value = value; }
		}
		public bool has_guid
		{
			get{ return _guid.has_value; }
		}

		public uint owner_account_id
		{
			get{ return _owner_account_id.member_value; }
			set{ _owner_account_id.member_value = value; }
		}
		public bool has_owner_account_id
		{
			get{ return _owner_account_id.has_value; }
		}

		public uint owner_server_id
		{
			get{ return _owner_server_id.member_value; }
			set{ _owner_server_id.member_value = value; }
		}
		public bool has_owner_server_id
		{
			get{ return _owner_server_id.has_value; }
		}

		public DataContainerType type
		{
			get{ return _type.member_value; }
			set{ _type.member_value = value; }
		}
		public bool has_type
		{
			get{ return _type.has_value; }
		}

		public DataContainerOpt opt
		{
			get{ return _opt.member_value; }
			set{ _opt.member_value = value; }
		}
		public bool has_opt
		{
			get{ return _opt.has_value; }
		}

		public System.Collections.Generic.List<KeyValue_Uint32> ltInt
		{
			get{ return _ltInt.member_value; }
		}
		public bool has_ltInt
		{
			get{ return _ltInt.has_value; }
		}

		public System.Collections.Generic.List<KeyValue_String> ltStr
		{
			get{ return _ltStr.member_value; }
		}
		public bool has_ltStr
		{
			get{ return _ltStr.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _guid.Serialize(_guid.member_value, ref out_stream);

			count += _owner_account_id.Serialize(_owner_account_id.member_value, ref out_stream);

			count += _owner_server_id.Serialize(_owner_server_id.member_value, ref out_stream);

			count += _type.Serialize((uint)_type.member_value, ref out_stream);

			count += _opt.Serialize((uint)_opt.member_value, ref out_stream);

			foreach(KeyValue_Uint32 one_member_value in _ltInt.member_value)
			{
				count += _ltInt.Serialize(one_member_value, ref out_stream);
			}

			foreach(KeyValue_String one_member_value in _ltStr.member_value)
			{
				count += _ltStr.Serialize(one_member_value, ref out_stream);
			}

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			ulong temp_guid = 0;
			one_count = _guid.ParseFrom(ref temp_guid, ref int_stream);
			if (0 < one_count)
			{
					_guid.member_value = temp_guid;
					count = count + one_count;
			}

			uint temp_owner_account_id = 0;
			one_count = _owner_account_id.ParseFrom(ref temp_owner_account_id, ref int_stream);
			if (0 < one_count)
			{
					_owner_account_id.member_value = temp_owner_account_id;
					count = count + one_count;
			}

			uint temp_owner_server_id = 0;
			one_count = _owner_server_id.ParseFrom(ref temp_owner_server_id, ref int_stream);
			if (0 < one_count)
			{
					_owner_server_id.member_value = temp_owner_server_id;
					count = count + one_count;
			}

			uint temp_type = 0;
			one_count = _type.ParseFrom(ref temp_type, ref int_stream);
			if (0 < one_count)
			{
					_type.member_value = (DataContainerType)temp_type;
					count = count + one_count;
			}

			uint temp_opt = 0;
			one_count = _opt.ParseFrom(ref temp_opt, ref int_stream);
			if (0 < one_count)
			{
					_opt.member_value = (DataContainerOpt)temp_opt;
					count = count + one_count;
			}

			while (true)
			{
				KeyValue_Uint32 one_member_value = new KeyValue_Uint32();
				one_count = _ltInt.ParseFrom(one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_ltInt.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			while (true)
			{
				KeyValue_String one_member_value = new KeyValue_String();
				one_count = _ltStr.ParseFrom(one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_ltStr.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			return count;
		}
	}

	public enum DataContainerOpt
	{
		DataContainerOpt_Update		= 0,
		DataContainerOpt_Create		= 1,
	}

	public enum DataContainerType
	{
		DataContainerType_Player			= 1,		//玩家
		DataContainerType_Item				= 2,		//物品
		DataContainerType_Unit				= 3,		//生物(场景中的可以战斗的怪物及角色)
		DataContainerTypeCount				= 4,		//值应等于最大类型+1
	}

	public enum EBattleConstConfig
	{
		CONFIG_INT_BossDiWangXie_ActorId				=	1,		//帝王蟹ActorId		2310
		CONFIG_INT_BossDiWangXie_BuffId_ChuKe			=	2,		//出壳标记buff		257
		CONFIG_INT_BossDiWangXie_BuffId_KeSui			=	3,		//壳碎标记buff		258
		CONFIG_INT_BossDiWangXie_BuffId_MaoFei			=	4,		//帽飞标记buff		259
		CONFIG_INT_BossDiWangXie_BuffId_QianDiao		=	5,		//钳掉标记buff		260
		CONFIG_INT_BossDiWangXie_SkillId_HengShao1		=	6,		//横扫1				231001
		CONFIG_INT_BossDiWangXie_SkillId_HengShao2		=	7,		//横扫2				231002	
		CONFIG_INT_BossDiWangXie_SkillId_QianZhi		=	8,		//钳制				231003
		CONFIG_INT_BossDiWangXie_SkillId_QianZhiHou		=	9,		//钳制后的攻击		231004
		CONFIG_INT_BossDiWangXie_SkillId_MengChi		=	10,		//猛刺				231005
		CONFIG_INT_BossDiWangXie_SkillId_ShuaiDao		=	11,		//摔倒				231006
		CONFIG_INT_BossDiWangXie_SkillId_ChuKe			=	12,		//出壳				231007
		CONFIG_INT_BossDiWangXie_SkillId_HuiKe			=	13,		//回壳				231008
		CONFIG_INT_BossDiWangXie_SkillId_KeSui			=	14,		//壳碎				231009
		CONFIG_INT_BossDiWangXie_SkillId_MaoFei			=	15,		//帽飞				231012
		CONFIG_INT_BossDiWangXie_SkillId_QianDiao		=	16,		//钳掉				231013
		CONFIG_INT_BossDiWangXie_MengChiFaild_CoolSec	=	17,		//猛刺失败后眩晕秒数		
		CONFIG_INT_BossDiWangXie_MengChiFaild_BuffId	=	18,		//猛刺失败后眩晕BuffId	
		CONFIG_INT_BossDiWangXie_StopQianZhiHou_HpDiff	=	19,		//帝王蟹生命值损失百分比值，停止钳制后的攻击		5
		CONFIG_INT_BossDiWangXie_HuiKe_HpDiff			=	20,		//帝王蟹生命值损失百分比值，回壳	15
		CONFIG_INT_BossDiWangXie_DeadlyHit_RecoverHp	=	21,		//致命时回血百分比值			25
		CONFIG_INT_BossDiWangXie_MissHenShaoTimes		=	22,		//目标累计躲过多少次横扫，则释放出壳技能
		CONFIG_INT_BossDiWangXie_SkillExecIntervalSecs	=	23,		//横扫1，横扫2，钳掉、猛刺技能施法间隔秒数
		CONFIG_INT_BossDiWangXie_RengXueQuiSkillId		=	24,		//哈奇圣者扔雪球技能ID
		CONFIG_INT_BossDiWangXie_FirstCoolBfbMin		=	25,		//AI发技能首次间隔最小值
		CONFIG_INT_BossDiWangXie_FirstCoolBfbMax		=	26,		//AI发技能首次间隔最大值
		CONFIG_INT_BossMuLong_SkillId_SuaiTou			=	30,		//甩头技能ID
		CONFIG_INT_BossMuLong_SkillId_ShaoWei			=	31,		//扫尾技能ID
		CONFIG_INT_BossMuLong_SkillId_SongGuoZhaDan		=	32,		//松果炸弹技能ID
		CONFIG_INT_BossMuLong_SkillId_ZhengChi			=	33,		//振翅技能ID
		CONFIG_INT_BossMuLong_SkillId_QiFei				=	34,		//起飞技能ID
		CONFIG_INT_BossMuLong_SkillId_LuoDi				=	35,		//落地技能ID
		CONFIG_INT_BossMuLong_SkillId_DuYeZhaDan		=	36,		//毒液炸弹技能ID
		CONFIG_INT_BossMuLong_SkillId_QiFeiFaild		=	37,		//起飞失败技能ID
		CONFIG_INT_BossMuLong_SkillId_SongGuoZhaDan2	=	38,		//强化松果炸弹技能ID
		CONFIG_INT_BossMuLong_IntervalSecs_SuaiShao		=	40,		//甩头扫尾技能间隔秒数
		CONFIG_INT_BossMuLong_IntervalSecs_SongGuoZhaDan=	41,		//松果炸弹技能间隔秒数
		CONFIG_INT_BossMuLong_IntervalSecs_ZhengChi		=	42,		//振翅技能间隔秒数
		CONFIG_INT_BossMuLong_IntervalSecs_DuYeZhaDan	=	43,		//毒液炸弹间隔秒数
		CONFIG_INT_BossMuLong_InSkySecs					=	44,		//能在天上的最大秒数
		CONFIG_INT_BossMuLong_InEarthSecs				=	45,		//能在地上的最大秒数
		CONFIG_INT_BossMuLong_BornMonsterId1			=	46,		//飞上去后召怪ID1的ActorId
		CONFIG_INT_BossMuLong_BornMonsterCnt1			=	47,		//飞上去后召怪ID1的数量
		CONFIG_INT_BossMuLong_BornMonsterId2			=	48,		//飞上去后召怪ID2的ActorId
		CONFIG_INT_BossMuLong_BornMonsterCnt2			=	49,		//飞上去后召怪ID2的数量
		CONFIG_INT_BossMuLong_BornMonsterId3			=	50,		//飞上去后召怪ID3的ActorId
		CONFIG_INT_BossMuLong_BornMonsterCnt3			=	51,		//飞上去后召怪ID3的数量
		CONFIG_INT_BossMuLong_BornMonsterId4			=	52,		//飞上去后召怪ID4的ActorId
		CONFIG_INT_BossMuLong_BornMonsterCnt4			=	53,		//飞上去后召怪ID4的数量
		CONFIG_INT_BossMuLong_BornMonsterId5			=	54,		//飞上去后召怪ID5的ActorId
		CONFIG_INT_BossMuLong_BornMonsterCnt5			=	55,		//飞上去后召怪ID5的数量
		CONFIG_INT_BossMuLong_EnterSecondPhaseHpBfbVal	=	56,		//木龙BOSS进入第二阶段的血量百分比值
		CONFIG_INT_BossMuLong_EnterThirdPhaseHpBfbVal	=	57,		//木龙BOSS进入第三阶段的血量百分比值
		//
		CONFIG_INT_BossJiJia_ChuanCi					=	60,		//穿刺技能ID
		CONFIG_INT_BossJiJia_HengSao					=	61,		//横扫技能ID
		CONFIG_INT_BossJiJia_HuiMie						=	62,		//毁灭技能ID
		CONFIG_INT_BossJiJia_BaoZa						=	63,		//暴炸技能ID
		CONFIG_INT_BossJiJia_WeiXiu						=	64,		//维修技能ID
		CONFIG_INT_BossJiJia_FuHuo						=	65,		//复活技能ID
		CONFIG_INT_BossJiJia_GuoZai						=	66,		//过载技能ID
		CONFIG_INT_BossJiJia_ChuanCi_IntervalSecs		=	67,		//穿刺技能间隔
		CONFIG_INT_BossJiJia_HengSao_IntervalSecs		=	68,		//横扫技能间隔
		CONFIG_INT_BossJiJia_RepairHp					=	69,		//修理总血量
		CONFIG_INT_BossJiJia_RepairTimes				=	70,		//修理总次数
		CONFIG_INT_BossJiJia_HuiMieHp1					=	71,		//毁灭HP1
		CONFIG_INT_BossJiJia_HuiMieHp2					=	72,		//毁灭HP2
		CONFIG_INT_BossJiJia_HuiMieHp3					=	73,		//毁灭HP3
		CONFIG_INT_BossJiJia_RepairSeconds				=	74,		//修理时长(秒数)
		CONFIG_INT_BossJiJia_DropOutTuCiHpBfb			=	75,		//穿刺的HP百分比值
		//
		CONFIG_INT_BossDaXiang_DiZhengSkillId			=	80,		//地震技能ID
		CONFIG_INT_BossDaXiang_DiZhengIntervalSecs		=	81,		//地震技能ID间隔多少秒
		CONFIG_INT_BossDaXiang_HengSaoSkillId			=	82,		//棍子横扫技能ID
		CONFIG_INT_BossDaXiang_HengSaoIntervalSecs		=	83,		//棍子横扫技能ID间隔多少秒
		CONFIG_INT_BossDaXiang_StateChangeIntervalSecs	=	84,		//阶段切换时间间隔秒数
		CONFIG_INT_BossDaXiang_GungZiLetOutSkillId		=	85,		//放出棍子技能ID
		CONFIG_INT_BossDaXiang_GungZiTakeBackSkillId	=	86,		//收回棍子技能ID
		CONFIG_INT_BossDaXiang_DaZuoSkillId				=	87,		//大坐技能ID
		CONFIG_INT_BossDaXiang_XuanZhuanSkillId			=	88,		//旋转技能ID
		CONFIG_INT_BossDaXiang_KuangBaoSkillId			=	89,		//狂暴技能ID
		CONFIG_INT_BossDaXiang_DaZuoIntervalSecs		=	90,		//大坐技能ID间隔多少秒
		CONFIG_INT_BossDaXiang_XuanZhuanIntervalSecs	=	91,		//旋转技能ID间隔多少秒
		CONFIG_INT_BossDaXiang_GungZiMonsterActorId		=	92,		//棍子怪ActorID
		CONFIG_INT_BossDaXiang_ReliveIntervalSecs		=	93,		//复活间隔秒数
		CONFIG_INT_BossDaXiang_ReliveSkillId			=	94,		//复活技能ID
		CONFIG_INT_BossDaXiang_GungZiSnowSkillId		=	95,		//棍子暴风雪技能ID
		CONFIG_INT_BossDaXiang_GungZiSnowIntervalSecs	=	96,		//棍子暴风雪释放间隔
	}

	public enum EBattleFlag
	{
		EBattleFlag_LimitWalk		= 0x0001,		//禁止行走
		EBattleFlag_LimitAttack		= 0x0002,		//禁止攻击
		EBattleFlag_MissPhysicAtk	= 0x0004,		//免疫物理攻击
		EBattleFlag_MissMagicAtk	= 0x0008,		//免疫魔法攻击
		EBattleFlag_MissDamage		= 0x0010,		//免疫伤害
		EBattleFlag_MissDebuff		= 0x0020,		//免疫负面BUFF
		EBattleFlag_Asylum			= 0x0040,		//吸收伤害
		EBattleFlag_Dizziness		= 0x0080,		//眩晕表现
		EBattleFlag_Protection		= 0x0100,		//保护友方
		EBattleFlag_Stealth			= 0x0200,		//隐形(身)
		EBattleFlag_MissCure		= 0x0400,		//不能加血（免疫治疗）
		EBattleFlag_LimitCommonSkill= 0x0800,		//禁止普攻攻击
	}

	public enum EDamageEffect
	{
		EDamageEffect_NoHit			= 0x0001,	//未命中
		EDamageEffect_Critl			= 0x0002,	//暴击
		EDamageEffect_Death			= 0x0004,	//死亡
		EDamageEffect_Cure			= 0x0008,	//治疗
		EDamageEffect_Asylum		= 0x0010,	//吸收伤害
		EDamageEffect_Penetrine		= 0x0020,	//(破甲)穿透
		EDamageEffect_LongDist		= 0x0040,	//远程技能
		EDamageEffect_DoubleHit		= 0x0080,	//连击
		EDamageEffect_MissDamage	= 0x0100,	//免伤
		EDamageEffect_HaveHitEffect	= 0x0200,	//有受击动作
		EDamageEffect_BeBeatDown	= 0x0400,	//击倒
		EDamageEffect_BeBeatFly		= 0x0800,	//击飞
	}

	public enum EUnitPropertyType
	{
		EUnitPropType_actorid			= 0,	//角色静态数据ID
		EUnitPropType_BattleType		= 1,	//战斗类型（英雄类型） 0肉盾、1远程物理DPS，2远程魔法DPS、3辅助
		EUnitPropType_kangxing			= 2,	//抗性类型（金木水火土）	
		EUnitPropType_hp				= 3,	//生命值
		EUnitPropType_Level				= 4,	//等级
		EUnitPropType_BaseAttrBegin		= 10,	//基础属性起始
		EUnitPropType_BaseAttrEnd		= 50,	//基础属性终止
		EUnitPropType_movespeed			= 51,	//移动速度	
		EUnitPropType_attackdistance	= 52,	//攻击距离	
		EUnitPropType_bodymodel			= 53,	//模型
		EUnitPropType_BattleFlag		= 54,	//战斗行为标记(禁止攻击、行走、回血等)
		EUnitPropType_MissDamageTimes	= 55,	//免伤次数
		EUnitPropType_AsylumHeroGuid	= 56,	//吸收伤害的英雄GUID
		EUnitPropType_atksped_modify	= 57,	//攻速修正（百分比值）
		EUnitPropType_AreaDisctance		= 58,	//视野距离
		EUnitPropType_SummonOwner		= 59,	//召唤物的主人(是谁召出来的)
		EUnitPropType_QTE_ID			= 60,	//执行的QTE id
		EUnitPropType_PosX				= 61,	//X
		EUnitPropType_PosY				= 62,	//Y
		EUnitPropType_PosZ				= 63,	//Z
		EUnitPropType_Orient			= 64,	//O
		EUnitPropType_IsPlayerControl	= 65,	//是否是玩家操作控制的(1是，0否)
		EUnitPropType_ClientUse_Begin	= 66,	//begin
		EUnitPropType_DefenseByManual	= 66,	//~75手动防御(66~75分配给客户端自行使用)
		EUnitPropType_ClientUse_End		= 75,	//end
		EUnitPropType_TeamId			= 76,	//队伍ID
		EUnitPropType_AiControler_SvrId = 77,	//AI控制者的SvrId
		EUnitPropType_AiControler_ActId = 78,	//AI控制者的ActId
		EUnitPropType_ModelZoom			= 79,	//外形放大比例(万分比值，为0则保持原型)
		EUnitPropType_Crystal			= 80,	//蓝色水晶(技能消耗品,魔法值)
		EUnitPropType_MaxCrystal		= 81,	//蓝色水晶上限(技能消耗品,魔法值)
		EUnitPropType_RedCrystal		= 82,	//红色水晶(一定时间不消耗会暴，造成伤害)
		EUnitPropType_ModelReduce		= 83,	//外形缩放比例(万分比值，为0则保持原型)
		EUnitPropType_TeamId_2			= 84,	//队伍ID  高位
		EUnitPropType_LifeStatus		= 85,	//生命状态
		EUnitPropType_DamageDiffDbfVal	= 86,	//伤害修正百分比值
		EUnitPropType_HuntMonsterIndex	= 87,	//狩猎怪编号
		EUnitPropType_SufferCritTimes	= 88,	//受到的暴击次数
		EUnitPropType_CrystalLocked		= 89,	//锁定的水晶数
		EUnitPropType_CrystalLockedTs	= 89,	//锁定的水晶的时间戳
		EUnitPropType_Killer_SvrId		= 90,	//杀手服ID
		EUnitPropType_Killer_ActId		= 91,	//杀手帐号ID
		EUnitPropType_ContinueKP_Cnt	= 92,	//连续击杀
		EUnitPropType_ContinueKP_TS		= 93,	//最近击杀的时间戳
		EUnitPropType_AccumulatedKP_Cnt	= 94,	//累计击杀
		PlayerHeroEffectAttrType_Begin	= 100,	//逻辑服传过来的战斗效果
		PlayerHeroEffectAttrType_End	= 200,	//逻辑服传过来的战斗效果
		EUnitPropType_BaseAttrAddi_Begin= 210,	//基础属性战斗加成部分起始
		EUnitPropType_BaseAttrAddi_End	= 250,	//基础属性战斗加成部分终止
		EUnitPropType_BaseAttrDec_Begin	= 260,	//基础属性战斗减少部分起始
		EUnitPropType_BaseAttrDec_End	= 300,	//基础属性战斗减少部分终止
		EUnitPropType_MissDeadlyHitTimes= 301,	//可免疫致命伤害次数
		EUnitPropType_UseSkillTimes		= 302,	//释放技能次数
		EUnitPropType_BornEffectType	= 303,	//出生表现方式
		EUnitPropType_SkillId_Begin		= 310,	//技能ID段开始
		EUnitPropType_SkillId_End		= 320,	//技能ID段结束
		EUnitPropType_Count				= 400,
	}

	public enum GM_Error_code
	{
		enum_Error_code_success				= 1,					//没有错误
		enum_Error_code_Param_Error 			= 2,					//命令传入参数错误
		enum_Error_code_Parse_Packet_Error		= 3,					//解包错误
		enum_Error_code_db_exec_error		 	= 4,					//数据库执行sql错误
		enum_Error_code_not_find_player		 	= 5,					//内存找不到玩家
		enum_Error_code_not_enough_mem			= 6,					//内存不足
	}

	public class GmKeyValue : IMessage
	{
		private ProtoMemberUInt32 _m_param;	//属性枚举，对应GmMsgParam
		private ProtoMemberUInt64 _m_value_uint64;	//属性值，不同类型的值填在相应字段中
		private ProtoMemberInt64 _m_value_int64;	
		private ProtoMemberUInt32 _m_value_uint32;	
		private ProtoMemberInt32 _m_value_int32;	
		private ProtoMemberBool _m_value_bool;	
		private ProtoMemberString _m_value_string;	

		public GmKeyValue()
		{
			_m_param = new ProtoMemberUInt32(1, true);
			_m_value_uint64 = new ProtoMemberUInt64(2, false);
			_m_value_int64 = new ProtoMemberInt64(3, false);
			_m_value_uint32 = new ProtoMemberUInt32(4, false);
			_m_value_int32 = new ProtoMemberInt32(5, false);
			_m_value_bool = new ProtoMemberBool(6, false);
			_m_value_string = new ProtoMemberString(7, false);
		}

		public GmKeyValue(uint __m_param, ulong __m_value_uint64, long __m_value_int64, uint __m_value_uint32, int __m_value_int32, bool __m_value_bool, string __m_value_string)
		{
			_m_param = new ProtoMemberUInt32(1, true);
			_m_param.member_value = __m_param;
			_m_value_uint64 = new ProtoMemberUInt64(2, false);
			_m_value_uint64.member_value = __m_value_uint64;
			_m_value_int64 = new ProtoMemberInt64(3, false);
			_m_value_int64.member_value = __m_value_int64;
			_m_value_uint32 = new ProtoMemberUInt32(4, false);
			_m_value_uint32.member_value = __m_value_uint32;
			_m_value_int32 = new ProtoMemberInt32(5, false);
			_m_value_int32.member_value = __m_value_int32;
			_m_value_bool = new ProtoMemberBool(6, false);
			_m_value_bool.member_value = __m_value_bool;
			_m_value_string = new ProtoMemberString(7, false);
			_m_value_string.member_value = __m_value_string;
		}

		public uint m_param
		{
			get{ return _m_param.member_value; }
			set{ _m_param.member_value = value; }
		}
		public bool has_m_param
		{
			get{ return _m_param.has_value; }
		}

		public ulong m_value_uint64
		{
			get{ return _m_value_uint64.member_value; }
			set{ _m_value_uint64.member_value = value; }
		}
		public bool has_m_value_uint64
		{
			get{ return _m_value_uint64.has_value; }
		}

		public long m_value_int64
		{
			get{ return _m_value_int64.member_value; }
			set{ _m_value_int64.member_value = value; }
		}
		public bool has_m_value_int64
		{
			get{ return _m_value_int64.has_value; }
		}

		public uint m_value_uint32
		{
			get{ return _m_value_uint32.member_value; }
			set{ _m_value_uint32.member_value = value; }
		}
		public bool has_m_value_uint32
		{
			get{ return _m_value_uint32.has_value; }
		}

		public int m_value_int32
		{
			get{ return _m_value_int32.member_value; }
			set{ _m_value_int32.member_value = value; }
		}
		public bool has_m_value_int32
		{
			get{ return _m_value_int32.has_value; }
		}

		public bool m_value_bool
		{
			get{ return _m_value_bool.member_value; }
			set{ _m_value_bool.member_value = value; }
		}
		public bool has_m_value_bool
		{
			get{ return _m_value_bool.has_value; }
		}

		public string m_value_string
		{
			get{ return _m_value_string.member_value; }
			set{ _m_value_string.member_value = value; }
		}
		public bool has_m_value_string
		{
			get{ return _m_value_string.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_param.Serialize(_m_param.member_value, ref out_stream);

			count += _m_value_uint64.Serialize(_m_value_uint64.member_value, ref out_stream);

			count += _m_value_int64.Serialize(_m_value_int64.member_value, ref out_stream);

			count += _m_value_uint32.Serialize(_m_value_uint32.member_value, ref out_stream);

			count += _m_value_int32.Serialize(_m_value_int32.member_value, ref out_stream);

			count += _m_value_bool.Serialize(_m_value_bool.member_value, ref out_stream);

			count += _m_value_string.Serialize(_m_value_string.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_param = 0;
			one_count = _m_param.ParseFrom(ref temp_m_param, ref int_stream);
			if (0 < one_count)
			{
					_m_param.member_value = temp_m_param;
					count = count + one_count;
			}

			ulong temp_m_value_uint64 = 0;
			one_count = _m_value_uint64.ParseFrom(ref temp_m_value_uint64, ref int_stream);
			if (0 < one_count)
			{
					_m_value_uint64.member_value = temp_m_value_uint64;
					count = count + one_count;
			}

			long temp_m_value_int64 = 0;
			one_count = _m_value_int64.ParseFrom(ref temp_m_value_int64, ref int_stream);
			if (0 < one_count)
			{
					_m_value_int64.member_value = temp_m_value_int64;
					count = count + one_count;
			}

			uint temp_m_value_uint32 = 0;
			one_count = _m_value_uint32.ParseFrom(ref temp_m_value_uint32, ref int_stream);
			if (0 < one_count)
			{
					_m_value_uint32.member_value = temp_m_value_uint32;
					count = count + one_count;
			}

			int temp_m_value_int32 = 0;
			one_count = _m_value_int32.ParseFrom(ref temp_m_value_int32, ref int_stream);
			if (0 < one_count)
			{
					_m_value_int32.member_value = temp_m_value_int32;
					count = count + one_count;
			}

			bool temp_m_value_bool = false;
			one_count = _m_value_bool.ParseFrom(ref temp_m_value_bool, ref int_stream);
			if (0 < one_count)
			{
					_m_value_bool.member_value = temp_m_value_bool;
					count = count + one_count;
			}

			string temp_m_value_string = "";
			one_count = _m_value_string.ParseFrom(ref temp_m_value_string, ref int_stream);
			if (0 < one_count)
			{
					_m_value_string.member_value = temp_m_value_string;
					count = count + one_count;
			}

			return count;
		}
	}

	public class GmKeyValueList : IMessage
	{
		private ProtoMemberEmbeddedList<GmKeyValue> _m_values;	//属性列表

		public GmKeyValueList()
		{
			_m_values = new ProtoMemberEmbeddedList<GmKeyValue>(1, false);
		}

		public System.Collections.Generic.List<GmKeyValue> m_values
		{
			get{ return _m_values.member_value; }
		}
		public bool has_m_values
		{
			get{ return _m_values.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			foreach(GmKeyValue one_member_value in _m_values.member_value)
			{
				count += _m_values.Serialize(one_member_value, ref out_stream);
			}

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			while (true)
			{
				GmKeyValue one_member_value = new GmKeyValue();
				one_count = _m_values.ParseFrom(one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_values.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			return count;
		}
	}

	public enum GmMsgParam
	{
		// 加载不在线的玩家数据
		enum_PlayerLoadReq_AccountId = 0x0000,					// 加载不在线的玩家数据：参数：账号id（uint32）
		enum_PlayerLoadReq_ServerId = 0x0001,					// 加载不在线的玩家数据：参数：服id（uint32）
		enum_PlayerLoadRes_Res = 0x0002,					// 加载不在线的玩家数据：结果：成功/失败（uint32，0成功，1玩家数据不存在）
		// 踢玩家下线封停玩家
		enum_PlayerBlockReq_AccountId = 0x0100,					// 踢玩家下线封停玩家：参数：账号id（uint32）
		enum_PlayerBlockReq_ServerId = 0x0101,					// 踢玩家下线封停玩家：参数：服id（uint32）
		enum_PlayerBlockReq_BlockSecond = 0x0102,				// 踢玩家下线封停玩家：参数：封停时长：秒（uint32）
		enum_PlayerBlockReq_BlockRes = 0x0103,					// 踢玩家下线封停玩家：参数：封停原因（uint32）
		enum_PlayerBlockRes_Res = 0x0104,					// 踢玩家下线封停玩家：结果：成功/失败（uint32，0成功，1玩家数据不存在）
		// 获取玩家基础信息
		enum_PlayerBaseInfo_GetReq_AccountId = 0x0200,				// 获取玩家基础信息：参数：账号id（uint32）
		enum_PlayerBaseInfo_GetReq_ServerId = 0x0201,				// 获取玩家基础信息：参数：服id（uint32）
		enum_PlayerBaseInfo_GetRes_AccountId = 0x0202,				// 获取玩家基础信息：结果：账号id（uint32）
		enum_PlayerBaseInfo_GetRes_ServerId = 0x0203,				// 获取玩家基础信息：结果：服id（uint32）
		enum_PlayerBaseInfo_GetRes_Name = 0x0204,				// 获取玩家基础信息：结果：玩家名称（string）
		enum_PlayerBaseInfo_GetRes_Lv = 0x0205,					// 获取玩家基础信息：结果：玩家等级（uint32）
		enum_PlayerBaseInfo_GetRes_Exp = 0x0206,				// 获取玩家基础信息：结果：玩家经验（uint32）
		enum_PlayerBaseInfo_GetRes_UnionServerId = 0x0207,			// 获取玩家基础信息：结果：公会所属服id（uint32）
		enum_PlayerBaseInfo_GetRes_UnionIndex = 0x0208,				// 获取玩家基础信息：结果：公会序号（uint32）
		enum_PlayerBaseInfo_GetRes_UnionName = 0x0209,				// 获取玩家基础信息：结果：公会名称（string）
		enum_PlayerBaseInfo_GetRes_UnionContribution = 0x0210,			// 获取玩家基础信息：结果：公会个人贡献等级（uint32）
		enum_PlayerBaseInfo_GetRes_HeroCount = 0x0211,				// 获取玩家基础信息：结果：拥有英雄数量（uint32）
		enum_PlayerBaseInfo_GetRes_FrientCurrCount = 0x0212,			// 获取玩家基础信息：结果：当前好友数（uint32）
		enum_PlayerBaseInfo_GetRes_FrientMaxCount = 0x0213,			// 获取玩家基础信息：结果：上限好友数（uint32）
		enum_PlayerBaseInfo_GetRes_Gold = 0x0214,				// 获取玩家基础信息：结果：金币（uint32）
		enum_PlayerBaseInfo_GetRes_Rmb = 0x0215,				// 获取玩家基础信息：结果：充值货币（uint32）
		enum_PlayerBaseInfo_GetRes_PVECoin = 0x0216,				// 获取玩家基础信息：结果：副本货币（uint32）
		enum_PlayerBaseInfo_GetRes_PVPCoin = 0x0217,				// 获取玩家基础信息：结果：竞技货币（uint32）
		enum_PlayerBaseInfo_GetRes_Decompose = 0x0218,				// 获取玩家基础信息：结果：物品分解获得货币（uint32）
		enum_PlayerBaseInfo_GetRes_HuntingLv = 0x0219,				// 获取玩家基础信息：结果：考试等级（uint32）
		enum_PlayerBaseInfo_GetRes_HuntingTest = 0x0220,			// 获取玩家基础信息：结果：考试进度（uint32）
		enum_PlayerBaseInfo_GetRes_HuntingStrength = 0x0221,			// 获取玩家基础信息：结果：幻境点数（uint32）
		enum_PlayerBaseInfo_GetRes_TalentPoint = 0x0222,			// 获取玩家基础信息：结果：天赋点（uint32）
		enum_PlayerBaseInfo_GetRes_MatchGrade = 0x0223,				// 获取玩家基础信息：结果：PVP分组（uint32）
		enum_PlayerBaseInfo_GetRes_MatchPoint = 0x0224,				// 获取玩家基础信息：结果：PVP积分（uint32）
		enum_PlayerBaseInfo_GetRes_Online = 0x0225,				// 获取玩家基础信息：结果：在线状态（bool，true在线，false不在线）
		enum_PlayerBaseInfo_GetRes_BlockTime = 0x0226,				// 获取玩家基础信息：结果：封停时间戳（uint64）
		enum_PlayerBaseInfo_GetRes_BlockSecond = 0x0227,			// 获取玩家基础信息：结果：封停时长：秒（uint32）
		enum_PlayerBaseInfo_GetRes_BlockRes = 0x0228,				// 获取玩家基础信息：结果：封停原因（uint32）
		// 修改玩家基础信息
		enum_PlayerBaseInfo_UpdateReq_AccountId = 0x0300,			// 修改玩家基础信息：参数：账号id（uint32）
		enum_PlayerBaseInfo_UpdateReq_ServerId = 0x0301,			// 修改玩家基础信息：参数：服id（uint32）
		enum_PlayerBaseInfo_UpdateReq_Lv = 0x0302,				// 修改玩家基础信息：参数：玩家等级（uint32）
		enum_PlayerBaseInfo_UpdateReq_Exp = 0x0303,				// 修改玩家基础信息：参数：玩家经验（uint32）
		enum_PlayerBaseInfo_UpdateReq_Gold = 0x0304,				// 修改玩家基础信息：参数：金币（uint32）
		enum_PlayerBaseInfo_UpdateReq_Rmb = 0x0305,				// 修改玩家基础信息：参数：充值货币（uint32）
		enum_PlayerBaseInfo_UpdateReq_PVECoin = 0x0306,				// 修改玩家基础信息：参数：副本货币（uint32）
		enum_PlayerBaseInfo_UpdateReq_PVPCoin = 0x0307,				// 修改玩家基础信息：参数：竞技货币（uint32）
		enum_PlayerBaseInfo_UpdateReq_Decompose = 0x0308,			// 修改玩家基础信息：参数：物品分解获得货币（uint32）
		enum_PlayerBaseInfo_UpdateReq_HuntingTest = 0x0309,			// 修改玩家基础信息：参数：考试进度（uint32）
		enum_PlayerBaseInfo_UpdateReq_HuntingStrength = 0x0310,			// 修改玩家基础信息：参数：幻境点数（uint32）
		enum_PlayerBaseInfo_UpdateReq_TalentPoint = 0x0311,			// 修改玩家基础信息：参数：天赋点（uint32）
		enum_PlayerBaseInfo_UpdateReq_MatchPoint = 0x0312,			// 修改玩家基础信息：参数：PVP积分（uint32）
		enum_PlayerBaseInfo_UpdateRes = 0x0313,					// 修改玩家基础信息：结果：成功/失败（uint32，0成功，1玩家数据不存在）
		//item
		//enum_Player_GetItem_res_ItemType = 0x0397,				// 获取道具 --道具类型
		enum_Player_GetItem_res_ItemId = 0x0398,				// 获取道具 --道具ID
		enum_Player_GetItem_res_ItemCount = 0x0399,				// 获取道具 --道具数量
		enum_Player_updateItemReq_ItemId = 0x0400,				// 修改玩家道具请求 --道具ID
		enum_Player_updateItemReq_ItemCount = 0x0401,				// 修改玩家道具请求 --道具数量
		//hero
		enum_player_GetHeroCount_ret			= 0x500,		// 获取英雄数量返回
		enum_player_GetHero_res_Lv			= 0x600, //等级
		enum_player_GetHero_res_Exp			= 0x601, //经验
		enum_player_GetHero_res_Quality			= 0x602, //品质
		enum_player_GetHero_res_name			= 0x603, //名称
		enum_player_GetHero_res_Id			= 0x604, //ID
		enum_player_GetHero_res_skillCount		= 0x605, //技能个数
		enum_player_GetHero_res_skillId			= 0x606, //技能名称
		//enum_player_GetHero_res_skillName		= 0x607, //技能名称
		//enum_player_GetHero_res_skillLv			= 0x608, //技能等级
		//enum_player_GetHero_res_skillIsEquip	= 0x609, //技能是否装备
		enum_player_GetHero_res_EquipCount		= 0x610, //装备数量
		enum_player_GetHero_res_EquipId			= 0x611, //装备Id
		//enum_player_updateHero_req_HeroCount		= 0x619, //修改英雄的数量
		enum_player_updateHero_req_HeroId		= 0x620, //英雄ID
		//enum_player_updateHero_req_Lv			= 0x621, //等级
		enum_player_updateHero_req_Exp			= 0x622, //经验
		enum_player_updateHero_req_Quality		= 0x623, //品质
		enum_player_updateHero_req_SkilliD		= 0x624, //要修改技能等级的技能ID 
		enum_player_updateHero_req_SkillIndex		= 0x625, //修改技能的位置
		//enum_player_updateHero_req_SkillLv		= 0x626, //修改技能
		enum_player_updateHero_req_EquipId		= 0x627, //要修改装备品质的装备位置
		//enum_player_updateHero_req_EquipQuality		= 0x628, //修改装备品质
		//mail
		enum_player_GetMailCount_res			= 0x650, // 获取mail数量返回
		enum_player_GetMail_res_MailId 			= 0x651, // 邮件ID
		enum_player_GetMail_res_title			= 0x652, // 邮件标题
		enum_player_GetMail_res_GetTime			= 0x653, // 邮件获取时间
		enum_player_GetMail_res_accessoryCount 	= 0x654, // 邮件附件数量
		enum_player_GetMail_res_accessoryItemId 	= 0x655, // 邮件附件物品ID
		//enum_player_GetMail_res_accessoryItemName 	= 0x656, // 邮件附件物品名称
		enum_player_GetMail_res_accessoryItemCount	= 0x657, // 邮件附件物品数量
		//enum_player_GetMail_res_accessoryMoneyType 	= 0x658, // 邮件附件货币类型
		//enum_player_GetMail_res_accessoryMoneyCount 	= 0x659, // 邮件附件货币数量
		enum_player_GetMail_res_accessoryIsGet 		= 0x660, // 邮件附件是否领取
		enum_player_updateMail_req_deleteMailId		= 0x670, //删除邮件ID
		//Rune
		enum_player_GetRune_res_Count			= 0x800, //获取符文个数
		enum_player_GetRune_res_Id			= 0x801, //获取符文ID
		enum_player_GetRune_res_Type			= 0x802, //获取符文类型
		//enum_player_GetRune_res_name			= 0x803, //获取符文名称
		enum_player_GetRune_res_lv			= 0x804, //获取符文等级
		//enum_player_GetRune_res_IsEquip			= 0x805, //获取符文是否装备
		//enum_player_GetRune_res_IsActive 		= 0x806, //获取符文是否激活
		//enum_player_UpdateRune_req_Id 			= 0x820, //更新符文
		enum_player_UpdateRune_req_lv 			= 0x821, //更新符文等级
		//enum_player_UpdateRune_req_Active 		= 0x822, //更新符文激活状态
		//friend
		enum_player_GetFriend_res_Count 		= 0x850, //获取好友数量
		enum_player_GetFriend_res_name 			= 0x851, //获取好友名称
		enum_player_GetFriend_res_ID 			= 0x852, //获取好友Id
		enum_player_GetFriend_res_lv 			= 0x853, //获取好友等级
		enum_player_GetFriend_res_isOnline 		= 0x854, //获取好友是否在线
		enum_player_UpdateFriend_req_delete_friendID 	= 0x860, //删除好友
		enum_Server_GetPlayerCount				= 0x900,		//获取服务器人数
	}

	public enum GmMsgType
	{
		//////////////////////////////////////////////////////平台GM命令协议//////////////////////////////////////////////////////
		enum_Msg_Gm2Logic_Player_Load_Req = 0x00030,					// gm工具 -> logic 加载不在线的玩家数据
		enum_Msg_Logic2Gm_Player_Load_Res = 0x00031,					// logic -> gm工具 加载不在线的玩家数据结果
		enum_Msg_Gm2Logic_Player_Block_Req = 0x00032,					// gm工具 -> logic 踢玩家下线封停玩家
		enum_Msg_Logic2Gm_Player_Block_Res = 0x00033,					// logic -> gm工具 踢玩家下线封停玩家结果
		enum_Msg_Gm2Logic_Player_BaseInfo_Get_Req = 0x00034,			// gm工具 -> logic 获取玩家基础信息
		enum_Msg_Logic2Gm_Player_BaseInfo_Get_Res = 0x00035,			// logic -> gm工具 获取玩家基础信息结果
		enum_Msg_Gm2Logic_Player_BaseInfo_Update_Req = 0x00036,			// gm工具 -> logic 修改玩家基础信息
		enum_Msg_Logic2Gm_Player_BaseInfo_Update_Res = 0x00037,			// logic -> gm工具 修改玩家基础信息结果
		enum_Msg_Gm2Logic_Player_HeroInfo_Get_Req = 0x00038,			// gm工具 -> logic 获取玩家英雄信息
		enum_Msg_Logic2Gm_Player_HeroInfo_Get_Res = 0x00039,			// logic -> gm工具 获取玩家英雄信息结果
		enum_Msg_Gm2Logic_Player_HeroInfo_Update_Req = 0x0003A,			// gm工具 -> logic 修改玩家英雄信息
		enum_Msg_Logic2Gm_Player_HeroInfo_Update_Res = 0x0003B,			// logic -> gm工具 修改玩家英雄信息结果
		enum_Msg_Gm2Logic_Player_ItemInfo_Get_Req = 0x0003C,			// gm工具 -> logic 获取玩家物品信息
		enum_Msg_Logic2Gm_Player_ItemInfo_Get_Res = 0x0003D,			// logic -> gm工具 获取玩家物品信息结果
		enum_Msg_Gm2Logic_Player_ItemInfo_Update_Req = 0x0003E,			// gm工具 -> logic 修改玩家物品信息
		enum_Msg_Logic2Gm_Player_ItemInfo_Update_Res = 0x0003F,			// logic -> gm工具 修改玩家物品信息结果
		enum_Msg_Gm2Logic_Player_MailInfo_Get_Req = 0x00040,			// gm工具 -> logic 获取玩家邮件信息
		enum_Msg_Logic2Gm_Player_MailInfo_Get_Res = 0x00041,			// logic -> gm工具 获取玩家邮件信息结果
		enum_Msg_Gm2Logic_Player_MailInfo_Update_Req = 0x00042,			// gm工具 -> logic 修改玩家邮件信息
		enum_Msg_Logic2Gm_Player_MailInfo_Update_Res = 0x00043,			// logic -> gm工具 修改玩家邮件信息结果
		enum_Msg_Gm2Logic_Player_RuneInfo_Get_Req = 0x00044,			// gm工具 -> logic 获取玩家符文信息
		enum_Msg_Logic2Gm_Player_RuneInfo_Get_Res = 0x00045,			// logic -> gm工具 获取玩家符文信息结果
		enum_Msg_Gm2Logic_Player_RuneInfo_Update_Req = 0x00046,			// gm工具 -> logic 修改玩家符文信息
		enum_Msg_Logic2Gm_Player_RuneInfo_Update_Res = 0x00047,			// logic -> gm工具 修改玩家符文信息结果
		enum_Msg_Gm2Logic_Player_TalentInfo_Get_Req = 0x00048,			// gm工具 -> logic 获取玩家天赋信息
		enum_Msg_Logic2Gm_Player_TalentInfo_Get_Res = 0x00049,			// logic -> gm工具 获取玩家天赋信息结果
		enum_Msg_Gm2Logic_Player_TalentInfo_Update_Req = 0x0004A,		// gm工具 -> logic 修改玩家天赋信息
		enum_Msg_Logic2Gm_Player_TalentInfo_Update_Res = 0x0004B,		// logic -> gm工具 修改玩家天赋信息结果
		enum_Msg_Gm2Logic_Player_FriendInfo_Get_Req = 0x0004C,			// gm工具 -> logic 获取玩家好友信息
		enum_Msg_Logic2Gm_Player_FriendInfo_Get_Res = 0x0004D,			// logic -> gm工具 获取玩家好友信息结果
		enum_Msg_Gm2Logic_Player_FriendInfo_Update_Req = 0x0004E,		// gm工具 -> logic 修改玩家好友信息
		enum_Msg_Logic2Gm_Player_FriendInfo_Update_Res = 0x0004F,		// logic -> gm工具 修改玩家好友信息结果
		enum_Msg_Gm2Logic_Player_Unblock_Req = 0x00050,				// gm工具 -> logic 解封玩家
		enum_Msg_Logic2Gm_Player_Unblock_Res = 0x00051,				// logic -> gm工具 解封玩家结果
		enum_Msg_Gm2Logic_Player_Kicket_Req = 0x00052,				//gm工具 -> logic 踢人
		enum_Msg_Logic2Gm_Player_Kicket_Res = 0x00053,				//logic -> gm工具  踢人返回结果
		enum_Msg_Gm2Logic_GetServerInfo_Req = 0x00070,				//gm工具 -> logic 请求server信息
		enum_Msg_Logic2Gm_GetServerInfo_Res = 0x00071,				//logic -> gm工具 请求server信息返回
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	}

	public class HeroAppearanceInfo : IMessage
	{
		private ProtoMemberUInt32 _m_nHeroId;	//ID  如果为0 则为公有道具数据
		private ProtoMemberEmbedded<HeroAppearancePlan> _m_plan;	//装饰方案
		private ProtoMemberEmbeddedList<AppearanceInfo> _m_ItemList;	//拥有装饰道具列表

		public HeroAppearanceInfo()
		{
			_m_nHeroId = new ProtoMemberUInt32(1, true);
			_m_plan = new ProtoMemberEmbedded<HeroAppearancePlan>(2, false);
			_m_plan.member_value = new HeroAppearancePlan();
			_m_ItemList = new ProtoMemberEmbeddedList<AppearanceInfo>(3, false);
		}

		public HeroAppearanceInfo(uint __m_nHeroId)
		{
			_m_nHeroId = new ProtoMemberUInt32(1, true);
			_m_nHeroId.member_value = __m_nHeroId;
			_m_plan = new ProtoMemberEmbedded<HeroAppearancePlan>(2, false);
			_m_plan.member_value = new HeroAppearancePlan();
			_m_ItemList = new ProtoMemberEmbeddedList<AppearanceInfo>(3, false);
		}

		public uint m_nHeroId
		{
			get{ return _m_nHeroId.member_value; }
			set{ _m_nHeroId.member_value = value; }
		}
		public bool has_m_nHeroId
		{
			get{ return _m_nHeroId.has_value; }
		}

		public HeroAppearancePlan m_plan
		{
			get{ return _m_plan.member_value as HeroAppearancePlan; }
			set{ _m_plan.member_value = value; }
		}
		public bool has_m_plan
		{
			get{ return _m_plan.has_value; }
		}

		public System.Collections.Generic.List<AppearanceInfo> m_ItemList
		{
			get{ return _m_ItemList.member_value; }
		}
		public bool has_m_ItemList
		{
			get{ return _m_ItemList.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_nHeroId.Serialize(_m_nHeroId.member_value, ref out_stream);

			count += _m_plan.Serialize(_m_plan.member_value, ref out_stream);

			foreach(AppearanceInfo one_member_value in _m_ItemList.member_value)
			{
				count += _m_ItemList.Serialize(one_member_value, ref out_stream);
			}

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_nHeroId = 0;
			one_count = _m_nHeroId.ParseFrom(ref temp_m_nHeroId, ref int_stream);
			if (0 < one_count)
			{
					_m_nHeroId.member_value = temp_m_nHeroId;
					count = count + one_count;
			}

			HeroAppearancePlan temp_m_plan = new HeroAppearancePlan();
			one_count = _m_plan.ParseFrom(temp_m_plan, ref int_stream);
			if (0 < one_count)
			{
					_m_plan.member_value = temp_m_plan;
					count = count + one_count;
			}

			while (true)
			{
				AppearanceInfo one_member_value = new AppearanceInfo();
				one_count = _m_ItemList.ParseFrom(one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_ItemList.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			return count;
		}
	}

	public class HeroAppearancePlan : IMessage
	{
		private ProtoMemberUInt32List _m_slotItemId;	//槽位道具ID ，位置信息：enAppearanceType

		public HeroAppearancePlan()
		{
			_m_slotItemId = new ProtoMemberUInt32List(1, false);
		}

		public System.Collections.Generic.List<uint> m_slotItemId
		{
			get{ return _m_slotItemId.member_value; }
		}
		public bool has_m_slotItemId
		{
			get{ return _m_slotItemId.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			foreach(uint one_member_value in _m_slotItemId.member_value)
			{
				count += _m_slotItemId.Serialize(one_member_value, ref out_stream);
			}

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			while (true)
			{
				uint one_member_value = 0;
				one_count = _m_slotItemId.ParseFrom(ref one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_slotItemId.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			return count;
		}
	}

	public class HeroBattleResult : IMessage
	{
		private ProtoMemberUInt64 _m_ownerplyid;	//玩家playerid
		private ProtoMemberUInt32 _m_actorid;	//英雄模板ID
		private ProtoMemberBool _m_isdeath;	//结果，是否死亡	
		private ProtoMemberUInt32 _m_kilmst_cnt;	//杀怪数
		private ProtoMemberBool _m_ismainhero;	//是否是主控英雄

		public HeroBattleResult()
		{
			_m_ownerplyid = new ProtoMemberUInt64(1, true);
			_m_actorid = new ProtoMemberUInt32(2, true);
			_m_isdeath = new ProtoMemberBool(3, true);
			_m_kilmst_cnt = new ProtoMemberUInt32(4, false);
			_m_ismainhero = new ProtoMemberBool(5, false);
		}

		public HeroBattleResult(ulong __m_ownerplyid, uint __m_actorid, bool __m_isdeath, uint __m_kilmst_cnt, bool __m_ismainhero)
		{
			_m_ownerplyid = new ProtoMemberUInt64(1, true);
			_m_ownerplyid.member_value = __m_ownerplyid;
			_m_actorid = new ProtoMemberUInt32(2, true);
			_m_actorid.member_value = __m_actorid;
			_m_isdeath = new ProtoMemberBool(3, true);
			_m_isdeath.member_value = __m_isdeath;
			_m_kilmst_cnt = new ProtoMemberUInt32(4, false);
			_m_kilmst_cnt.member_value = __m_kilmst_cnt;
			_m_ismainhero = new ProtoMemberBool(5, false);
			_m_ismainhero.member_value = __m_ismainhero;
		}

		public ulong m_ownerplyid
		{
			get{ return _m_ownerplyid.member_value; }
			set{ _m_ownerplyid.member_value = value; }
		}
		public bool has_m_ownerplyid
		{
			get{ return _m_ownerplyid.has_value; }
		}

		public uint m_actorid
		{
			get{ return _m_actorid.member_value; }
			set{ _m_actorid.member_value = value; }
		}
		public bool has_m_actorid
		{
			get{ return _m_actorid.has_value; }
		}

		public bool m_isdeath
		{
			get{ return _m_isdeath.member_value; }
			set{ _m_isdeath.member_value = value; }
		}
		public bool has_m_isdeath
		{
			get{ return _m_isdeath.has_value; }
		}

		public uint m_kilmst_cnt
		{
			get{ return _m_kilmst_cnt.member_value; }
			set{ _m_kilmst_cnt.member_value = value; }
		}
		public bool has_m_kilmst_cnt
		{
			get{ return _m_kilmst_cnt.has_value; }
		}

		public bool m_ismainhero
		{
			get{ return _m_ismainhero.member_value; }
			set{ _m_ismainhero.member_value = value; }
		}
		public bool has_m_ismainhero
		{
			get{ return _m_ismainhero.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_ownerplyid.Serialize(_m_ownerplyid.member_value, ref out_stream);

			count += _m_actorid.Serialize(_m_actorid.member_value, ref out_stream);

			count += _m_isdeath.Serialize(_m_isdeath.member_value, ref out_stream);

			count += _m_kilmst_cnt.Serialize(_m_kilmst_cnt.member_value, ref out_stream);

			count += _m_ismainhero.Serialize(_m_ismainhero.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			ulong temp_m_ownerplyid = 0;
			one_count = _m_ownerplyid.ParseFrom(ref temp_m_ownerplyid, ref int_stream);
			if (0 < one_count)
			{
					_m_ownerplyid.member_value = temp_m_ownerplyid;
					count = count + one_count;
			}

			uint temp_m_actorid = 0;
			one_count = _m_actorid.ParseFrom(ref temp_m_actorid, ref int_stream);
			if (0 < one_count)
			{
					_m_actorid.member_value = temp_m_actorid;
					count = count + one_count;
			}

			bool temp_m_isdeath = false;
			one_count = _m_isdeath.ParseFrom(ref temp_m_isdeath, ref int_stream);
			if (0 < one_count)
			{
					_m_isdeath.member_value = temp_m_isdeath;
					count = count + one_count;
			}

			uint temp_m_kilmst_cnt = 0;
			one_count = _m_kilmst_cnt.ParseFrom(ref temp_m_kilmst_cnt, ref int_stream);
			if (0 < one_count)
			{
					_m_kilmst_cnt.member_value = temp_m_kilmst_cnt;
					count = count + one_count;
			}

			bool temp_m_ismainhero = false;
			one_count = _m_ismainhero.ParseFrom(ref temp_m_ismainhero, ref int_stream);
			if (0 < one_count)
			{
					_m_ismainhero.member_value = temp_m_ismainhero;
					count = count + one_count;
			}

			return count;
		}
	}

	public enum InstanceType
	{
		InstanceType_FunnyModel = 0,		// 娱乐模式
		InstanceType_EliteModel = 1,		// 精英模式
	}

	public enum ItemUsedType
	{
		ItemUsedType_HeroExp = 0,							// 使用获得英雄经验
		ItemUsedType_SummonerExp = 1,						// 使用获得召唤师经验
		ItemUsedType_Chest = 2,								// 使用获得宝箱奖励
		ItemUsedType_Item = 3,								// 使用获得道具
	}

	public class KeyValue_String : IMessage
	{
		private ProtoMemberUInt32 _index;	
		private ProtoMemberString _value;	

		public KeyValue_String()
		{
			_index = new ProtoMemberUInt32(1, true);
			_value = new ProtoMemberString(2, true);
		}

		public KeyValue_String(uint __index, string __value)
		{
			_index = new ProtoMemberUInt32(1, true);
			_index.member_value = __index;
			_value = new ProtoMemberString(2, true);
			_value.member_value = __value;
		}

		public uint index
		{
			get{ return _index.member_value; }
			set{ _index.member_value = value; }
		}
		public bool has_index
		{
			get{ return _index.has_value; }
		}

		public string value
		{
			get{ return _value.member_value; }
			set{ _value.member_value = value; }
		}
		public bool has_value
		{
			get{ return _value.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _index.Serialize(_index.member_value, ref out_stream);

			count += _value.Serialize(_value.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_index = 0;
			one_count = _index.ParseFrom(ref temp_index, ref int_stream);
			if (0 < one_count)
			{
					_index.member_value = temp_index;
					count = count + one_count;
			}

			string temp_value = "";
			one_count = _value.ParseFrom(ref temp_value, ref int_stream);
			if (0 < one_count)
			{
					_value.member_value = temp_value;
					count = count + one_count;
			}

			return count;
		}
	}

	public class KeyValue_Uint32 : IMessage
	{
		private ProtoMemberUInt32 _index;	
		private ProtoMemberUInt32 _value;	

		public KeyValue_Uint32()
		{
			_index = new ProtoMemberUInt32(1, true);
			_value = new ProtoMemberUInt32(2, true);
		}

		public KeyValue_Uint32(uint __index, uint __value)
		{
			_index = new ProtoMemberUInt32(1, true);
			_index.member_value = __index;
			_value = new ProtoMemberUInt32(2, true);
			_value.member_value = __value;
		}

		public uint index
		{
			get{ return _index.member_value; }
			set{ _index.member_value = value; }
		}
		public bool has_index
		{
			get{ return _index.has_value; }
		}

		public uint value
		{
			get{ return _value.member_value; }
			set{ _value.member_value = value; }
		}
		public bool has_value
		{
			get{ return _value.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _index.Serialize(_index.member_value, ref out_stream);

			count += _value.Serialize(_value.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_index = 0;
			one_count = _index.ParseFrom(ref temp_index, ref int_stream);
			if (0 < one_count)
			{
					_index.member_value = temp_index;
					count = count + one_count;
			}

			uint temp_value = 0;
			one_count = _value.ParseFrom(ref temp_value, ref int_stream);
			if (0 < one_count)
			{
					_value.member_value = temp_value;
					count = count + one_count;
			}

			return count;
		}
	}

	public enum LifeStatus
	{
		LifeStatus_Null						= 0,
		LifeStatus_Dead						= 0x01,	//死亡
	}

	public enum LogicRes
	{
		LoginRes_Account_Error = 0x0001,			// 账号不存在
		LoginRes_Key_Error = 0x0002,				// 密码不匹配
		LoginRes_Success = 0x0003,					// 账号密码验证成功
		ToyActivate_ToyId_Error = 0x1001,			// 玩具id错误
		ToyActivate_Key_Error = 0x1002,				// 激活码错误
		ToyActivate_AccountId_Error = 0x1003,		// 玩具已经被绑定
		ToyActivate_Bind_Error = 0x1004,			// 绑定账号失败
		ToyActivate_ReActivate = 0x1005,			// 重复的玩具类型
		ToyActivate_Success = 0x1006,				// 激活玩具验证成功
		ToyUsed_Error = 0x1007,						// 使用玩具失败，没有对应的玩具
		ToyUsed_Success = 0x1008,					// 使用玩具成功
		ToyActivate_Check_Success = 0x1009,			// 检查玩具存在
		ToyActivate_Check_PlayerNotInLine = 0x100A,	// 检查玩具存在，玩具已绑定，但对应玩家不在线
		ToyActivate_Check_HeroNotAdd = 0x100B,		// 检查玩具存在，玩具已绑定，但未在本服务器激活
		ToyActivate_Check_TeamFull = 0x100C,		// 检查玩具存在，组队情况下队伍已满员
		Connect_AccountId_Error = 0x2001,			// 账号id未授权
		Connect_Key_Error = 0x2002,					// 服务器授权码key不正确
		Connect_Success = 0x2003,					// 连接服务器成功
		AccountReg_Error = 0x2004,					// 账号注册失败
		AccountReg_Success = 0x2005,				// 账号注册成功
		CreatePlayer_ToyActivate_Error = 0x3001,	// 创建角色，玩具未激活
		CreatePlayer_Name_Error = 0x3002,			// 创建角色，角色名重复
		CreatePlayer_Success = 0x3003,				// 创建角色成功
		CheckName_Success = 0x3004,					// 角色名可用
		CheckName_Error = 0x3005,					// 角色名重复
		CreateUnion_Success = 0x3006,				// 创建公会成功
		CreateUnion_Error = 0x3007,					// 创建公会失败
		Team_HadTeamError = 0x4000,					// 玩家已有其他队伍，不能被邀请
		Team_InviteError = 0x4001,					// 玩家已经处于队伍中，不能被邀请
		Team_InviteSuccess = 0x4002,				// 邀请成功
		Team_Agree = 0x4003,						// 同意加入
		Team_Refuse = 0x4004,						// 拒绝加入
		Team_JoinError = 0x4005,					// 未被邀请，加入失败
		Team_JoinSuccess = 0x4006,					// 加入队伍成功
		Team_ChangeHeroError = 0x4007,				// 英雄上阵失败
		Team_ChangeHeroSuccess = 0x4008,			// 英雄上阵成功
		Team_CancelHeroError = 0x4009,				// 取消英雄失败
		Team_CancelHeroSuccess = 0x400A,			// 取消英雄成功
		Team_NeedOwner = 0x400B,					// 不是房主，无法操作
		Team_NeedTeam = 0x400C,						// 没有队伍，无法操作
		Team_IsLockedError = 0x400D,				// 位置已被锁定，无法再次邀请
		Team_NotAllReady = 0x400E,					// 没有准备，无法开始战斗
		Team_IsReadyError = 0x400F,					// 已准备，无法操作英雄
		Team_IsMatch = 0x4010,						// 队伍匹配中
		Team_Guest_PlayerNotExists = 0x4011,		// 被邀请的游客数据不存在
		Team_Guest_PlayerLoadError = 0x4012,		// 被邀请的游客数据加载失败
		Team_Guest_HeroNotExists = 0x4013,			// 被邀请的游客数据不存在
		Team_Guest_InviteSuccess = 0x4014,			// 游客邀请成功
		Hunting_InScene_Success = 0x5001,			// 进入狩猎地图成功
		Hunting_WorldId_Error = 0x5002,				// 狩猎地图id错误，不能进入/不能开战
		Hunting_PointId_Error = 0x5003,				// 狩猎位置点不存在，不能开战
		Hunting_SceneId_Error = 0x5004,				// 战斗场景不存在，不能开战
		Hunting_CD_Error = 0x5005,					// 事件cd未满足，不能开战
		Hunting_NoTeam_Error = 0x5006,				// 未加入队伍，不能开战
		Hunting_NoStrength_Error = 0x5007,			// 体力不足，不能开战
		Hunting_AttackBegin_Success = 0x5008,		// 开战成功
		Item_Id_Error = 0x6001,						// 道具id错误，没有该道具
		Item_Count_Error = 0x6002,					// 道具数量不足
		Item_Decompose_Success = 0x6003,			// 道具分解成功
		Item_Use_Success = 0x6004,					// 道具使用成功
		Shop_Type_Error = 0x6005,					// 商店类型错误
		Shop_Refresh_Count_Error = 0x6006,			// 商店刷新次数不足
		Shop_Refresh_Success = 0x6007,				// 商店刷新成功
		Goods_Buy_Id_Error = 0x6008,				// 购买道具id错误，没有该道具
		Goods_Buy_Count_Error = 0x6009,				// 购买道具剩余数量不足
		Goods_Buy_NeedItem_Error = 0x600A,			// 购买道具所需花费数量不足
		Goods_Buy_Success = 0x600B,					// 购买道具成功
		Item_MaxUsedCount_Error = 0x600C,				//道具使用次数达到上限
		Task_Id_Error = 0x7001,						// 任务id错误，没有该任务
		Task_Index_Error = 0x7002,					// 操作的任务序号非法
		Task_Change_Error = 0x7003,					// 任务替换非法（替换次数超过一次）
		Task_Change_Success = 0x7004,				// 任务替换成功
		Task_Finsh_Error = 0x7005,					// 领取任务奖励非法（奖励已领取）
		Task_Finsh_Success = 0x7006,				// 领取任务奖励成功
		Task_Item_Count_Error = 0x7007,				// 领取任务奖励非法（任务物品/进度不足，任务尚未完成）
		Task_Next_NULL = 0x7008,					// 已经是最后一个任务，没有下一个任务
		Task_Next_Error = 0x7009,					// 当前任务未完成/已完成未领取奖励，无法接取下一个任务
		Task_Next_Success = 0x700A,					// 领取下一个任务成功
		DiaoWen_Type_Error = 0x8001,				// 雕文类型错误
		DiaoWen_Plan_Index_Error = 0x8002,			// 雕文方案序号错误
		DiaoWen_Plan_Seat_Error = 0x8003,			// 雕文镶嵌位置错误
		DiaoWen_Bag_Seat_Error = 0x8004,			// 雕文所在背包错误，该位置没有雕文
		DiaoWen_Id_Error = 0x8005,					// 雕文表格记录id错误
		DiaoWen_Plan_Null_Error = 0x8006,			// 方案位置没有对应的雕文
		DiaoWen_LvUp_MaxLv_Error = 0x8007,			// 升级雕文已达最大等级
		DiaoWen_LvUp_Resources_Error = 0x8008,		// 升级雕文所需材料不足
		DiaoWen_LvUp_Success = 0x8009,				// 升级雕文成功
		DiaoWen_Set_TypeNotMatch_Error = 0x800A,	// 雕文类型与当前方案类型不匹配
		DiaoWen_Set_Repeated_Error = 0x800B,		// 雕文不能在同一个方案中重复使用
		DiaoWen_Set_Success = 0x800C,				// 镶嵌雕文成功
		DiaoWen_UnSet_Success = 0x800D,				// 卸下雕文成功
		DiaoWen_SetCurrPlan_Success = 0x800E,		// 设置雕文当前使用方案成功
		DiaoWen_LvUp_PlayerLvNotEnough_Error = 0x8010,	// 升级雕文等级不够
		Talent_Plan_Index_Error = 0x9001,			// 天赋方案序号错误
		Talent_Id_Error = 0x9002,					// 天赋id错误，没有对应的表格记录
		Talent_Id_NotExists = 0x9003,				// 玩家该方案下没有激活对应的天赋id
		Talent_LvUp_Points_Error = 0x9004,			// 升级天赋所需天赋点不足
		Talent_LvUp_Precondition_Error = 0x9005,	// 升级天赋所需前置条件不满足
		Talent_LvUp_Max_Error = 0x9006,				// 天赋已达最大等级
		Talent_LvUp_Success = 0x9007,				// 升级天赋成功
		Talent_ReSet_Success = 0x9008,				// 重置天赋成功
		Talent_SetCurrPlan_Success = 0x9009,		// 设置天赋当前使用方案成功
		Talent_Plan_Type_Error = 0x900A,			// 天赋方案类型错误
		Hero_Type_Error = 0xA001,					// 玩家未拥有该英雄
		Hero_Type_Exists_Error = 0xA002,			// 玩家已拥有该英雄
		Hero_ToyId_Error = 0xA003,					// 玩具id表格记录不存在
		Hero_QualityUp_Resources_Error = 0xA004,	// 英雄升品质所需资源不足
		Hero_QualityUp_Type_Error = 0xA005,			// 英雄已达最大品质
		Hero_QualityUp_Success = 0xA006,			// 英雄升品质成功
		Hero_EquipmentUp_EquipmentId_Error = 0xA007,// 装备id表格记录不存在
		Hero_EquipmentUp_Index_Error = 0xA008,		// 装备强化位置非法
		Hero_EquipmentUp_Resources_Error = 0xA009,	// 装备强化所需资源不足
		Hero_EquipmentUp_EquipmentLv_Error = 0xA00A,// 装备已达最大等级，装备强化失败
		Hero_EquipmentUp_HeroLv_Error = 0xA00B,		// 英雄等级不足，装备强化失败
		Hero_EquipmentUp_Success = 0xA00C,			// 装备强化成功
		Hero_SkillSet_SkillId_Error = 0xA00D,		// 技能id表格记录不存在
		Hero_SkillSet_Index_Error = 0xA00E,			// 技能设置位置非法
		Hero_SkillSet_Toy_Error = 0xA00F,			// 技能设置失败，英雄id不匹配
		Hero_SkillSet_Quality_Error = 0xA010,		// 技能设置失败，英雄品质不足
		Hero_SkillSet_Lv_Error = 0xA011,			// 技能设置失败，英雄等级不足
		Hero_SkillSet_Success = 0xA012,				// 技能设置成功
		RandCard_Success = 0xB001,					// 抽卡成功
		RandCard_NeedRandCount = 0xB002,			// 抽卡次数不足
		RandCard_Seat_Error = 0xB003,				// 抽卡位置非法
		RandCard_Used_Error = 0xB004,				// 该位置卡牌已经生效，无法再次被选择
		RandCard_Destroy_Error = 0xB005,			// 该位置卡牌已经摧毁，无法再次被选择
		Union_Get_Success = 0xC000,					// 获取玩家个人公会信息成功
		Union_NotInUnion_Error = 0xC001,			// 不属于公会，未加入公会
		Union_InUnion_Error = 0xC002,				// 已经在公会中，不能再加入公会
		Union_Id_Error = 0xC003,					// 公会不存在
		Union_Position_Error = 0xC004,				// 权限不足
		Union_NotInLine_Error = 0xC005,				// 目标玩家不在线，无法操作
		Union_Create_Success = 0xC006,				// 创建公会成功
		Union_Create_Name_Error = 0xC007,			// 创建公会失败，名称重复
		Union_Create_NeedItem_Error = 0xC008,		// 创建公会失败，道具不足
		Union_Join_Success = 0xC009,				// 申请加入公会成功
		Union_Join_MaxApply_Error = 0xC00A,			// 申请加入公会失败，申请列表已满
		Union_Join_Limit_Error = 0xC00B,			// 申请加入公会失败，限制条件不满足
		Union_CancelJoin_Success = 0xC00C,			// 取消申请加入公会成功
		Union_CancelJoin_NotExists_Error = 0xC00D,	// 取消申请失败，申请列表中没有该玩家
		Union_Set_Success = 0xC00E,					// 公会属性设置成功
		Union_Set_Type_Error = 0xC00F,				// 公会属性设置失败，属性不存在
		Union_Set_Value_Error = 0xC010,				// 公会属性设置失败，值错误
		Union_Technology_LvUp_Success = 0xC011,		// 公会科技升级成功
		Union_Technology_Id_Error = 0xC012,			// 公会科技升级失败，公会科技id错误
		Union_Technology_NeedItem_Error = 0xC013,	// 公会科技升级失败，道具不足
		Union_Technology_UnionLv_Error = 0xC014,	// 公会科技升级失败，公会等级不足
		Union_Technology_Max_Error = 0xC015,		// 公会科技升级失败，已达到最大等级
		Union_Chest_Get_Success = 0xC016,			// 公会宝箱领取成功
		Union_Chest_Id_Error = 0xC017,				// 公会宝箱领取失败，公会宝箱id错误
		Union_Chest_Count_Error = 0xC018,			// 公会宝箱领取失败，公会宝箱数量不足
		Union_Manor_Bid_Success = 0xC019,			// 公会领地投标成功
		Union_Manor_Id_Error = 0xC01A,				// 公会领地投标失败，领地id错误
		Union_Manor_NeedItem_Error = 0xC01B,		// 公会领地投标失败，道具不足
		Union_Manor_State_Error = 0xC01C,			// 公会领地投标失败，领地当前状态无法竞标
		Union_Player_Operator_Success = 0xC01D,		// 操作公会成员成功
		Union_Player_Id_Error = 0xC01E,				// 操作公会成员失败，玩家id不存在
		Union_Player_Max_Error = 0xC01F,			// 操作公会成员失败，公会人数已满
		Union_Player_Operator_Type_Error = 0xC020,	// 操作公会成员失败，操作类型不存在
		Union_Exit_Chairman_Error = 0xC021,			// 退出公会失败，会长不可以退出公会
		Friend_Player_NotExists_Error = 0xD001,		// 申请/添加/删除好友，目标玩家不存在
		Friend_Application_Full_Error = 0xD002,		// 申请好友，对方申请已满
		Friend_Application_Add_Success = 0xD003,	// 申请好友成功
		Friend_Application_Remove_Success = 0xD004,	// 忽略申请好友成功
		Friend_Player_Full_Error = 0xD005,			// 添加好友，本方好友已满
		Friend_OtherPlayer_Full_Error = 0xD006,		// 添加好友，对方好友已满
		Friend_Player_Add_Success = 0xD007,			// 添加好友成功
		Friend_Shield_Full_Error = 0xD008,			// 添加黑名单已满
		Friend_Shield_Add_Success = 0xD009,			// 添加黑名单成功
		Friend_Shield_Remove_Success = 0xD00A,		// 取消黑名单成功
		Mail_Id_Error = 0xE000,						// 邮件不存在
		Mail_Read_Success = 0xE001,					// 邮件已读成功
		Mail_Bag_Full_Error = 0xE002,				// 邮件领取附件失败，背包已满
		Mail_Receive_Success = 0xE003,				// 邮件领取附件成功
		Mail_Receive_Error = 0xE004,				// 邮件领取附件失败，重复领取
		File_Update_Success = 0xFF000,				// 文件更新成功
		File_ServerVer_Error = 0xFF001,				// 服务器最新版本号不匹配
		File_ReqVer_Error = 0xFF002,				// 请求的版本号不匹配
		File_Seek_Error = 0xFF003,					// 请求的起始位置不匹配
		Appearance_set_plan_success = 0xFF100,				//设置外观装饰方案成功
		Appearance_plan_not_item_error = 0xFF101,			//设置外观方案失败，没有拥有方案中道具
		Appearance_add_item_success = 0xFF102,				//添加装饰道具成功
		Appearance_add_item_error = 0xFF103,				//添加装饰道具失败
		Appearance_plan_set_error = 0xFF104,				//设置方案失败
		Appearance_item_not_found = 0xFF105,				//没有找到装饰道具
	}

	public enum MonsterLvType
	{
		MonsterLvType_Normal = 0,			//普通怪
		MonsterLvType_Elite = 1,			//精英怪
		MonsterLvType_Boos = 2,				//boos
	}

	public enum MonsterType
	{
		MonsterType_Whatever = 0,			//任意类型均可匹配
		MonsterType_Never = 1,				//任意类型均不匹配
		MonsterType_Skeleton = 2,			//骷髅怪
		MonsterType_Dog = 3,				//狗
		MonsterType_Crab = 4,				//螃蟹
	}

	public class Msg_Account2Center_CheckToyActivate_Res : IMessage
	{
		private ProtoMemberUInt32 _m_operator_account_id;	// 账号id
		private ProtoMemberUInt32 _m_operator_server_id;	// 服id
		private ProtoMemberString _m_toy_guid;	// 激活的玩具唯一识别码
		private ProtoMemberUInt32 _m_toy_type;	// 激活的玩具类别
		private ProtoMemberUInt32 _m_account_id;	// 玩具对应账号id，0则为不存在绑定的账号
		private ProtoMemberUInt32 _m_res;	// 检查结果AccountRes

		public Msg_Account2Center_CheckToyActivate_Res()
		{
			_m_operator_account_id = new ProtoMemberUInt32(1, true);
			_m_operator_server_id = new ProtoMemberUInt32(2, true);
			_m_toy_guid = new ProtoMemberString(3, true);
			_m_toy_type = new ProtoMemberUInt32(4, true);
			_m_account_id = new ProtoMemberUInt32(5, true);
			_m_res = new ProtoMemberUInt32(6, true);
		}

		public Msg_Account2Center_CheckToyActivate_Res(uint __m_operator_account_id, uint __m_operator_server_id, string __m_toy_guid, uint __m_toy_type, uint __m_account_id, uint __m_res)
		{
			_m_operator_account_id = new ProtoMemberUInt32(1, true);
			_m_operator_account_id.member_value = __m_operator_account_id;
			_m_operator_server_id = new ProtoMemberUInt32(2, true);
			_m_operator_server_id.member_value = __m_operator_server_id;
			_m_toy_guid = new ProtoMemberString(3, true);
			_m_toy_guid.member_value = __m_toy_guid;
			_m_toy_type = new ProtoMemberUInt32(4, true);
			_m_toy_type.member_value = __m_toy_type;
			_m_account_id = new ProtoMemberUInt32(5, true);
			_m_account_id.member_value = __m_account_id;
			_m_res = new ProtoMemberUInt32(6, true);
			_m_res.member_value = __m_res;
		}

		public uint m_operator_account_id
		{
			get{ return _m_operator_account_id.member_value; }
			set{ _m_operator_account_id.member_value = value; }
		}
		public bool has_m_operator_account_id
		{
			get{ return _m_operator_account_id.has_value; }
		}

		public uint m_operator_server_id
		{
			get{ return _m_operator_server_id.member_value; }
			set{ _m_operator_server_id.member_value = value; }
		}
		public bool has_m_operator_server_id
		{
			get{ return _m_operator_server_id.has_value; }
		}

		public string m_toy_guid
		{
			get{ return _m_toy_guid.member_value; }
			set{ _m_toy_guid.member_value = value; }
		}
		public bool has_m_toy_guid
		{
			get{ return _m_toy_guid.has_value; }
		}

		public uint m_toy_type
		{
			get{ return _m_toy_type.member_value; }
			set{ _m_toy_type.member_value = value; }
		}
		public bool has_m_toy_type
		{
			get{ return _m_toy_type.has_value; }
		}

		public uint m_account_id
		{
			get{ return _m_account_id.member_value; }
			set{ _m_account_id.member_value = value; }
		}
		public bool has_m_account_id
		{
			get{ return _m_account_id.has_value; }
		}

		public uint m_res
		{
			get{ return _m_res.member_value; }
			set{ _m_res.member_value = value; }
		}
		public bool has_m_res
		{
			get{ return _m_res.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_operator_account_id.Serialize(_m_operator_account_id.member_value, ref out_stream);

			count += _m_operator_server_id.Serialize(_m_operator_server_id.member_value, ref out_stream);

			count += _m_toy_guid.Serialize(_m_toy_guid.member_value, ref out_stream);

			count += _m_toy_type.Serialize(_m_toy_type.member_value, ref out_stream);

			count += _m_account_id.Serialize(_m_account_id.member_value, ref out_stream);

			count += _m_res.Serialize(_m_res.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_operator_account_id = 0;
			one_count = _m_operator_account_id.ParseFrom(ref temp_m_operator_account_id, ref int_stream);
			if (0 < one_count)
			{
					_m_operator_account_id.member_value = temp_m_operator_account_id;
					count = count + one_count;
			}

			uint temp_m_operator_server_id = 0;
			one_count = _m_operator_server_id.ParseFrom(ref temp_m_operator_server_id, ref int_stream);
			if (0 < one_count)
			{
					_m_operator_server_id.member_value = temp_m_operator_server_id;
					count = count + one_count;
			}

			string temp_m_toy_guid = "";
			one_count = _m_toy_guid.ParseFrom(ref temp_m_toy_guid, ref int_stream);
			if (0 < one_count)
			{
					_m_toy_guid.member_value = temp_m_toy_guid;
					count = count + one_count;
			}

			uint temp_m_toy_type = 0;
			one_count = _m_toy_type.ParseFrom(ref temp_m_toy_type, ref int_stream);
			if (0 < one_count)
			{
					_m_toy_type.member_value = temp_m_toy_type;
					count = count + one_count;
			}

			uint temp_m_account_id = 0;
			one_count = _m_account_id.ParseFrom(ref temp_m_account_id, ref int_stream);
			if (0 < one_count)
			{
					_m_account_id.member_value = temp_m_account_id;
					count = count + one_count;
			}

			uint temp_m_res = 0;
			one_count = _m_res.ParseFrom(ref temp_m_res, ref int_stream);
			if (0 < one_count)
			{
					_m_res.member_value = temp_m_res;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Account2Center_Create_Player_Res : IMessage
	{
		private ProtoMemberUInt32 _m_operator_account_id;	// 账号id
		private ProtoMemberUInt32 _m_operator_server_id;	// 服id
		private ProtoMemberString _m_name;	// 待创建的角色名称
		private ProtoMemberUInt32 _m_create_toy_type;	// 待创建的角色的玩具id
		private ProtoMemberUInt32List _m_activate_toy_type;	// 验证成功的情况下，该账号下已激活的玩具类型列表
		private ProtoMemberUInt32 _m_res;	// 该账号是否已激活该玩具的验证结果AccountRes

		public Msg_Account2Center_Create_Player_Res()
		{
			_m_operator_account_id = new ProtoMemberUInt32(1, true);
			_m_operator_server_id = new ProtoMemberUInt32(2, true);
			_m_name = new ProtoMemberString(3, true);
			_m_create_toy_type = new ProtoMemberUInt32(4, true);
			_m_activate_toy_type = new ProtoMemberUInt32List(5, false);
			_m_res = new ProtoMemberUInt32(6, true);
		}

		public Msg_Account2Center_Create_Player_Res(uint __m_operator_account_id, uint __m_operator_server_id, string __m_name, uint __m_create_toy_type, uint __m_res)
		{
			_m_operator_account_id = new ProtoMemberUInt32(1, true);
			_m_operator_account_id.member_value = __m_operator_account_id;
			_m_operator_server_id = new ProtoMemberUInt32(2, true);
			_m_operator_server_id.member_value = __m_operator_server_id;
			_m_name = new ProtoMemberString(3, true);
			_m_name.member_value = __m_name;
			_m_create_toy_type = new ProtoMemberUInt32(4, true);
			_m_create_toy_type.member_value = __m_create_toy_type;
			_m_activate_toy_type = new ProtoMemberUInt32List(5, false);
			_m_res = new ProtoMemberUInt32(6, true);
			_m_res.member_value = __m_res;
		}

		public uint m_operator_account_id
		{
			get{ return _m_operator_account_id.member_value; }
			set{ _m_operator_account_id.member_value = value; }
		}
		public bool has_m_operator_account_id
		{
			get{ return _m_operator_account_id.has_value; }
		}

		public uint m_operator_server_id
		{
			get{ return _m_operator_server_id.member_value; }
			set{ _m_operator_server_id.member_value = value; }
		}
		public bool has_m_operator_server_id
		{
			get{ return _m_operator_server_id.has_value; }
		}

		public string m_name
		{
			get{ return _m_name.member_value; }
			set{ _m_name.member_value = value; }
		}
		public bool has_m_name
		{
			get{ return _m_name.has_value; }
		}

		public uint m_create_toy_type
		{
			get{ return _m_create_toy_type.member_value; }
			set{ _m_create_toy_type.member_value = value; }
		}
		public bool has_m_create_toy_type
		{
			get{ return _m_create_toy_type.has_value; }
		}

		public System.Collections.Generic.List<uint> m_activate_toy_type
		{
			get{ return _m_activate_toy_type.member_value; }
		}
		public bool has_m_activate_toy_type
		{
			get{ return _m_activate_toy_type.has_value; }
		}

		public uint m_res
		{
			get{ return _m_res.member_value; }
			set{ _m_res.member_value = value; }
		}
		public bool has_m_res
		{
			get{ return _m_res.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_operator_account_id.Serialize(_m_operator_account_id.member_value, ref out_stream);

			count += _m_operator_server_id.Serialize(_m_operator_server_id.member_value, ref out_stream);

			count += _m_name.Serialize(_m_name.member_value, ref out_stream);

			count += _m_create_toy_type.Serialize(_m_create_toy_type.member_value, ref out_stream);

			foreach(uint one_member_value in _m_activate_toy_type.member_value)
			{
				count += _m_activate_toy_type.Serialize(one_member_value, ref out_stream);
			}

			count += _m_res.Serialize(_m_res.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_operator_account_id = 0;
			one_count = _m_operator_account_id.ParseFrom(ref temp_m_operator_account_id, ref int_stream);
			if (0 < one_count)
			{
					_m_operator_account_id.member_value = temp_m_operator_account_id;
					count = count + one_count;
			}

			uint temp_m_operator_server_id = 0;
			one_count = _m_operator_server_id.ParseFrom(ref temp_m_operator_server_id, ref int_stream);
			if (0 < one_count)
			{
					_m_operator_server_id.member_value = temp_m_operator_server_id;
					count = count + one_count;
			}

			string temp_m_name = "";
			one_count = _m_name.ParseFrom(ref temp_m_name, ref int_stream);
			if (0 < one_count)
			{
					_m_name.member_value = temp_m_name;
					count = count + one_count;
			}

			uint temp_m_create_toy_type = 0;
			one_count = _m_create_toy_type.ParseFrom(ref temp_m_create_toy_type, ref int_stream);
			if (0 < one_count)
			{
					_m_create_toy_type.member_value = temp_m_create_toy_type;
					count = count + one_count;
			}

			while (true)
			{
				uint one_member_value = 0;
				one_count = _m_activate_toy_type.ParseFrom(ref one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_activate_toy_type.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			uint temp_m_res = 0;
			one_count = _m_res.ParseFrom(ref temp_m_res, ref int_stream);
			if (0 < one_count)
			{
					_m_res.member_value = temp_m_res;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Account2Center_Reg_Login_Key_Req : IMessage
	{
		private ProtoMemberUInt32 _m_account_id;	// 验证成功的情况下，账号id

		public Msg_Account2Center_Reg_Login_Key_Req()
		{
			_m_account_id = new ProtoMemberUInt32(1, true);
		}

		public Msg_Account2Center_Reg_Login_Key_Req(uint __m_account_id)
		{
			_m_account_id = new ProtoMemberUInt32(1, true);
			_m_account_id.member_value = __m_account_id;
		}

		public uint m_account_id
		{
			get{ return _m_account_id.member_value; }
			set{ _m_account_id.member_value = value; }
		}
		public bool has_m_account_id
		{
			get{ return _m_account_id.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_account_id.Serialize(_m_account_id.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_account_id = 0;
			one_count = _m_account_id.ParseFrom(ref temp_m_account_id, ref int_stream);
			if (0 < one_count)
			{
					_m_account_id.member_value = temp_m_account_id;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Account2Center_ToyActivate_Res : IMessage
	{
		private ProtoMemberUInt32 _m_operator_account_id;	// 账号id
		private ProtoMemberUInt32 _m_operator_server_id;	// 服id
		private ProtoMemberString _m_toy_guid;	// 激活的玩具唯一识别码
		private ProtoMemberUInt32 _m_toy_type;	// 激活的玩具类别
		private ProtoMemberUInt32 _m_res;	// 激活验证结果AccountRes

		public Msg_Account2Center_ToyActivate_Res()
		{
			_m_operator_account_id = new ProtoMemberUInt32(1, true);
			_m_operator_server_id = new ProtoMemberUInt32(2, true);
			_m_toy_guid = new ProtoMemberString(3, true);
			_m_toy_type = new ProtoMemberUInt32(4, true);
			_m_res = new ProtoMemberUInt32(5, true);
		}

		public Msg_Account2Center_ToyActivate_Res(uint __m_operator_account_id, uint __m_operator_server_id, string __m_toy_guid, uint __m_toy_type, uint __m_res)
		{
			_m_operator_account_id = new ProtoMemberUInt32(1, true);
			_m_operator_account_id.member_value = __m_operator_account_id;
			_m_operator_server_id = new ProtoMemberUInt32(2, true);
			_m_operator_server_id.member_value = __m_operator_server_id;
			_m_toy_guid = new ProtoMemberString(3, true);
			_m_toy_guid.member_value = __m_toy_guid;
			_m_toy_type = new ProtoMemberUInt32(4, true);
			_m_toy_type.member_value = __m_toy_type;
			_m_res = new ProtoMemberUInt32(5, true);
			_m_res.member_value = __m_res;
		}

		public uint m_operator_account_id
		{
			get{ return _m_operator_account_id.member_value; }
			set{ _m_operator_account_id.member_value = value; }
		}
		public bool has_m_operator_account_id
		{
			get{ return _m_operator_account_id.has_value; }
		}

		public uint m_operator_server_id
		{
			get{ return _m_operator_server_id.member_value; }
			set{ _m_operator_server_id.member_value = value; }
		}
		public bool has_m_operator_server_id
		{
			get{ return _m_operator_server_id.has_value; }
		}

		public string m_toy_guid
		{
			get{ return _m_toy_guid.member_value; }
			set{ _m_toy_guid.member_value = value; }
		}
		public bool has_m_toy_guid
		{
			get{ return _m_toy_guid.has_value; }
		}

		public uint m_toy_type
		{
			get{ return _m_toy_type.member_value; }
			set{ _m_toy_type.member_value = value; }
		}
		public bool has_m_toy_type
		{
			get{ return _m_toy_type.has_value; }
		}

		public uint m_res
		{
			get{ return _m_res.member_value; }
			set{ _m_res.member_value = value; }
		}
		public bool has_m_res
		{
			get{ return _m_res.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_operator_account_id.Serialize(_m_operator_account_id.member_value, ref out_stream);

			count += _m_operator_server_id.Serialize(_m_operator_server_id.member_value, ref out_stream);

			count += _m_toy_guid.Serialize(_m_toy_guid.member_value, ref out_stream);

			count += _m_toy_type.Serialize(_m_toy_type.member_value, ref out_stream);

			count += _m_res.Serialize(_m_res.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_operator_account_id = 0;
			one_count = _m_operator_account_id.ParseFrom(ref temp_m_operator_account_id, ref int_stream);
			if (0 < one_count)
			{
					_m_operator_account_id.member_value = temp_m_operator_account_id;
					count = count + one_count;
			}

			uint temp_m_operator_server_id = 0;
			one_count = _m_operator_server_id.ParseFrom(ref temp_m_operator_server_id, ref int_stream);
			if (0 < one_count)
			{
					_m_operator_server_id.member_value = temp_m_operator_server_id;
					count = count + one_count;
			}

			string temp_m_toy_guid = "";
			one_count = _m_toy_guid.ParseFrom(ref temp_m_toy_guid, ref int_stream);
			if (0 < one_count)
			{
					_m_toy_guid.member_value = temp_m_toy_guid;
					count = count + one_count;
			}

			uint temp_m_toy_type = 0;
			one_count = _m_toy_type.ParseFrom(ref temp_m_toy_type, ref int_stream);
			if (0 < one_count)
			{
					_m_toy_type.member_value = temp_m_toy_type;
					count = count + one_count;
			}

			uint temp_m_res = 0;
			one_count = _m_res.ParseFrom(ref temp_m_res, ref int_stream);
			if (0 < one_count)
			{
					_m_res.member_value = temp_m_res;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Account2Client_Login_Res : IMessage
	{
		private ProtoMemberUInt32 _m_account_id;	// 验证成功的情况下，账号id
		private ProtoMemberUInt32 _m_key;	// 验证成功的情况下，服务器生成的授权码key，进入服务器需要带这个key
		private ProtoMemberUInt32List _m_toy_type;	// 验证成功的情况下，该账号下已激活的玩具类型列表
		private ProtoMemberUInt32 _m_res;	// 验证结果AccountRes

		public Msg_Account2Client_Login_Res()
		{
			_m_account_id = new ProtoMemberUInt32(1, false);
			_m_key = new ProtoMemberUInt32(2, false);
			_m_toy_type = new ProtoMemberUInt32List(3, false);
			_m_res = new ProtoMemberUInt32(4, true);
		}

		public Msg_Account2Client_Login_Res(uint __m_account_id, uint __m_key, uint __m_res)
		{
			_m_account_id = new ProtoMemberUInt32(1, false);
			_m_account_id.member_value = __m_account_id;
			_m_key = new ProtoMemberUInt32(2, false);
			_m_key.member_value = __m_key;
			_m_toy_type = new ProtoMemberUInt32List(3, false);
			_m_res = new ProtoMemberUInt32(4, true);
			_m_res.member_value = __m_res;
		}

		public uint m_account_id
		{
			get{ return _m_account_id.member_value; }
			set{ _m_account_id.member_value = value; }
		}
		public bool has_m_account_id
		{
			get{ return _m_account_id.has_value; }
		}

		public uint m_key
		{
			get{ return _m_key.member_value; }
			set{ _m_key.member_value = value; }
		}
		public bool has_m_key
		{
			get{ return _m_key.has_value; }
		}

		public System.Collections.Generic.List<uint> m_toy_type
		{
			get{ return _m_toy_type.member_value; }
		}
		public bool has_m_toy_type
		{
			get{ return _m_toy_type.has_value; }
		}

		public uint m_res
		{
			get{ return _m_res.member_value; }
			set{ _m_res.member_value = value; }
		}
		public bool has_m_res
		{
			get{ return _m_res.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_account_id.Serialize(_m_account_id.member_value, ref out_stream);

			count += _m_key.Serialize(_m_key.member_value, ref out_stream);

			foreach(uint one_member_value in _m_toy_type.member_value)
			{
				count += _m_toy_type.Serialize(one_member_value, ref out_stream);
			}

			count += _m_res.Serialize(_m_res.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_account_id = 0;
			one_count = _m_account_id.ParseFrom(ref temp_m_account_id, ref int_stream);
			if (0 < one_count)
			{
					_m_account_id.member_value = temp_m_account_id;
					count = count + one_count;
			}

			uint temp_m_key = 0;
			one_count = _m_key.ParseFrom(ref temp_m_key, ref int_stream);
			if (0 < one_count)
			{
					_m_key.member_value = temp_m_key;
					count = count + one_count;
			}

			while (true)
			{
				uint one_member_value = 0;
				one_count = _m_toy_type.ParseFrom(ref one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_toy_type.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			uint temp_m_res = 0;
			one_count = _m_res.ParseFrom(ref temp_m_res, ref int_stream);
			if (0 < one_count)
			{
					_m_res.member_value = temp_m_res;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Account2Client_Reg_Res : IMessage
	{
		private ProtoMemberUInt32 _m_res;	// 注册结果AccountRes

		public Msg_Account2Client_Reg_Res()
		{
			_m_res = new ProtoMemberUInt32(1, true);
		}

		public Msg_Account2Client_Reg_Res(uint __m_res)
		{
			_m_res = new ProtoMemberUInt32(1, true);
			_m_res.member_value = __m_res;
		}

		public uint m_res
		{
			get{ return _m_res.member_value; }
			set{ _m_res.member_value = value; }
		}
		public bool has_m_res
		{
			get{ return _m_res.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_res.Serialize(_m_res.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_res = 0;
			one_count = _m_res.ParseFrom(ref temp_m_res, ref int_stream);
			if (0 < one_count)
			{
					_m_res.member_value = temp_m_res;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Battle2Client_BattleEffect : IMessage
	{
		private ProtoMemberUInt32 _m_hero_guid;	
		private ProtoMemberEmbeddedList<BattleEffect> _m_hero_battle_effect;	//战斗特殊加成效果列表

		public Msg_Battle2Client_BattleEffect()
		{
			_m_hero_guid = new ProtoMemberUInt32(1, true);
			_m_hero_battle_effect = new ProtoMemberEmbeddedList<BattleEffect>(2, false);
		}

		public Msg_Battle2Client_BattleEffect(uint __m_hero_guid)
		{
			_m_hero_guid = new ProtoMemberUInt32(1, true);
			_m_hero_guid.member_value = __m_hero_guid;
			_m_hero_battle_effect = new ProtoMemberEmbeddedList<BattleEffect>(2, false);
		}

		public uint m_hero_guid
		{
			get{ return _m_hero_guid.member_value; }
			set{ _m_hero_guid.member_value = value; }
		}
		public bool has_m_hero_guid
		{
			get{ return _m_hero_guid.has_value; }
		}

		public System.Collections.Generic.List<BattleEffect> m_hero_battle_effect
		{
			get{ return _m_hero_battle_effect.member_value; }
		}
		public bool has_m_hero_battle_effect
		{
			get{ return _m_hero_battle_effect.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_hero_guid.Serialize(_m_hero_guid.member_value, ref out_stream);

			foreach(BattleEffect one_member_value in _m_hero_battle_effect.member_value)
			{
				count += _m_hero_battle_effect.Serialize(one_member_value, ref out_stream);
			}

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_hero_guid = 0;
			one_count = _m_hero_guid.ParseFrom(ref temp_m_hero_guid, ref int_stream);
			if (0 < one_count)
			{
					_m_hero_guid.member_value = temp_m_hero_guid;
					count = count + one_count;
			}

			while (true)
			{
				BattleEffect one_member_value = new BattleEffect();
				one_count = _m_hero_battle_effect.ParseFrom(one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_hero_battle_effect.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			return count;
		}
	}

	public class Msg_Battle2Client_BattleStatusNotify : IMessage
	{
		private ProtoMemberEnum<PlayerTeamType> _m_PlayMode;	//玩法类型
		private ProtoMemberUInt32 _m_scene_id;	//情景编号(关卡ID*100+平台次序号)
		private ProtoMemberUInt32 _m_BattleStatus;	//战斗状态(0非战斗，1战斗)

		public Msg_Battle2Client_BattleStatusNotify()
		{
			_m_PlayMode = new ProtoMemberEnum<PlayerTeamType>(1, true);
			_m_scene_id = new ProtoMemberUInt32(2, true);
			_m_BattleStatus = new ProtoMemberUInt32(3, true);
		}

		public Msg_Battle2Client_BattleStatusNotify(PlayerTeamType __m_PlayMode, uint __m_scene_id, uint __m_BattleStatus)
		{
			_m_PlayMode = new ProtoMemberEnum<PlayerTeamType>(1, true);
			_m_PlayMode.member_value = __m_PlayMode;
			_m_scene_id = new ProtoMemberUInt32(2, true);
			_m_scene_id.member_value = __m_scene_id;
			_m_BattleStatus = new ProtoMemberUInt32(3, true);
			_m_BattleStatus.member_value = __m_BattleStatus;
		}

		public PlayerTeamType m_PlayMode
		{
			get{ return _m_PlayMode.member_value; }
			set{ _m_PlayMode.member_value = value; }
		}
		public bool has_m_PlayMode
		{
			get{ return _m_PlayMode.has_value; }
		}

		public uint m_scene_id
		{
			get{ return _m_scene_id.member_value; }
			set{ _m_scene_id.member_value = value; }
		}
		public bool has_m_scene_id
		{
			get{ return _m_scene_id.has_value; }
		}

		public uint m_BattleStatus
		{
			get{ return _m_BattleStatus.member_value; }
			set{ _m_BattleStatus.member_value = value; }
		}
		public bool has_m_BattleStatus
		{
			get{ return _m_BattleStatus.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_PlayMode.Serialize((uint)_m_PlayMode.member_value, ref out_stream);

			count += _m_scene_id.Serialize(_m_scene_id.member_value, ref out_stream);

			count += _m_BattleStatus.Serialize(_m_BattleStatus.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_PlayMode = 0;
			one_count = _m_PlayMode.ParseFrom(ref temp_m_PlayMode, ref int_stream);
			if (0 < one_count)
			{
					_m_PlayMode.member_value = (PlayerTeamType)temp_m_PlayMode;
					count = count + one_count;
			}

			uint temp_m_scene_id = 0;
			one_count = _m_scene_id.ParseFrom(ref temp_m_scene_id, ref int_stream);
			if (0 < one_count)
			{
					_m_scene_id.member_value = temp_m_scene_id;
					count = count + one_count;
			}

			uint temp_m_BattleStatus = 0;
			one_count = _m_BattleStatus.ParseFrom(ref temp_m_BattleStatus, ref int_stream);
			if (0 < one_count)
			{
					_m_BattleStatus.member_value = temp_m_BattleStatus;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Battle2Client_CalcNetDelayTime : IMessage
	{
		private ProtoMemberUInt32 _m_index;	

		public Msg_Battle2Client_CalcNetDelayTime()
		{
			_m_index = new ProtoMemberUInt32(1, true);
		}

		public Msg_Battle2Client_CalcNetDelayTime(uint __m_index)
		{
			_m_index = new ProtoMemberUInt32(1, true);
			_m_index.member_value = __m_index;
		}

		public uint m_index
		{
			get{ return _m_index.member_value; }
			set{ _m_index.member_value = value; }
		}
		public bool has_m_index
		{
			get{ return _m_index.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_index.Serialize(_m_index.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_index = 0;
			one_count = _m_index.ParseFrom(ref temp_m_index, ref int_stream);
			if (0 < one_count)
			{
					_m_index.member_value = temp_m_index;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Battle2Client_ChallengeHunting : IMessage
	{
		private ProtoMemberEmbeddedList<BattleRecord_ChallengeHunting> _m_records;	

		public Msg_Battle2Client_ChallengeHunting()
		{
			_m_records = new ProtoMemberEmbeddedList<BattleRecord_ChallengeHunting>(1, false);
		}

		public System.Collections.Generic.List<BattleRecord_ChallengeHunting> m_records
		{
			get{ return _m_records.member_value; }
		}
		public bool has_m_records
		{
			get{ return _m_records.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			foreach(BattleRecord_ChallengeHunting one_member_value in _m_records.member_value)
			{
				count += _m_records.Serialize(one_member_value, ref out_stream);
			}

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			while (true)
			{
				BattleRecord_ChallengeHunting one_member_value = new BattleRecord_ChallengeHunting();
				one_count = _m_records.ParseFrom(one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_records.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			return count;
		}
	}

	public class Msg_Battle2Client_CommonBattleMsgHint : IMessage
	{
		private ProtoMemberUInt32 _m_player_serverid;	//玩家服ID
		private ProtoMemberUInt32 _m_player_accountid;	//玩家帐号ID
		private ProtoMemberUInt32 _m_player_actor_id;	//玩家actorid
		private ProtoMemberUInt32 _m_dier_serverid;	//死者服ID
		private ProtoMemberUInt32 _m_dier_accountid;	//死者帐号ID
		private ProtoMemberUInt32 _m_dier_actor_id;	//死者actorid
		private ProtoMemberUInt32 _m_zger_serverid;	//助攻者服ID
		private ProtoMemberUInt32 _m_zger_accountid;	//助攻者帐号ID
		private ProtoMemberUInt32 _m_zger_actor_id;	//助攻者actorid
		private ProtoMemberEnum<PlayerTeamType> _m_PlayMode;	//玩法类型	
		private ProtoMemberEnum<BattleRecordNodeType> _m_BattleMsgType;	//战斗提示消息类型
		private ProtoMemberUInt32 _m_BattleMsgParam;	//战斗提示消息参数

		public Msg_Battle2Client_CommonBattleMsgHint()
		{
			_m_player_serverid = new ProtoMemberUInt32(1, true);
			_m_player_accountid = new ProtoMemberUInt32(2, true);
			_m_player_actor_id = new ProtoMemberUInt32(3, true);
			_m_dier_serverid = new ProtoMemberUInt32(4, true);
			_m_dier_accountid = new ProtoMemberUInt32(5, true);
			_m_dier_actor_id = new ProtoMemberUInt32(6, true);
			_m_zger_serverid = new ProtoMemberUInt32(7, true);
			_m_zger_accountid = new ProtoMemberUInt32(8, true);
			_m_zger_actor_id = new ProtoMemberUInt32(9, true);
			_m_PlayMode = new ProtoMemberEnum<PlayerTeamType>(10, true);
			_m_BattleMsgType = new ProtoMemberEnum<BattleRecordNodeType>(11, true);
			_m_BattleMsgParam = new ProtoMemberUInt32(12, true);
		}

		public Msg_Battle2Client_CommonBattleMsgHint(uint __m_player_serverid, uint __m_player_accountid, uint __m_player_actor_id, uint __m_dier_serverid, uint __m_dier_accountid, uint __m_dier_actor_id, uint __m_zger_serverid, uint __m_zger_accountid, uint __m_zger_actor_id, PlayerTeamType __m_PlayMode, BattleRecordNodeType __m_BattleMsgType, uint __m_BattleMsgParam)
		{
			_m_player_serverid = new ProtoMemberUInt32(1, true);
			_m_player_serverid.member_value = __m_player_serverid;
			_m_player_accountid = new ProtoMemberUInt32(2, true);
			_m_player_accountid.member_value = __m_player_accountid;
			_m_player_actor_id = new ProtoMemberUInt32(3, true);
			_m_player_actor_id.member_value = __m_player_actor_id;
			_m_dier_serverid = new ProtoMemberUInt32(4, true);
			_m_dier_serverid.member_value = __m_dier_serverid;
			_m_dier_accountid = new ProtoMemberUInt32(5, true);
			_m_dier_accountid.member_value = __m_dier_accountid;
			_m_dier_actor_id = new ProtoMemberUInt32(6, true);
			_m_dier_actor_id.member_value = __m_dier_actor_id;
			_m_zger_serverid = new ProtoMemberUInt32(7, true);
			_m_zger_serverid.member_value = __m_zger_serverid;
			_m_zger_accountid = new ProtoMemberUInt32(8, true);
			_m_zger_accountid.member_value = __m_zger_accountid;
			_m_zger_actor_id = new ProtoMemberUInt32(9, true);
			_m_zger_actor_id.member_value = __m_zger_actor_id;
			_m_PlayMode = new ProtoMemberEnum<PlayerTeamType>(10, true);
			_m_PlayMode.member_value = __m_PlayMode;
			_m_BattleMsgType = new ProtoMemberEnum<BattleRecordNodeType>(11, true);
			_m_BattleMsgType.member_value = __m_BattleMsgType;
			_m_BattleMsgParam = new ProtoMemberUInt32(12, true);
			_m_BattleMsgParam.member_value = __m_BattleMsgParam;
		}

		public uint m_player_serverid
		{
			get{ return _m_player_serverid.member_value; }
			set{ _m_player_serverid.member_value = value; }
		}
		public bool has_m_player_serverid
		{
			get{ return _m_player_serverid.has_value; }
		}

		public uint m_player_accountid
		{
			get{ return _m_player_accountid.member_value; }
			set{ _m_player_accountid.member_value = value; }
		}
		public bool has_m_player_accountid
		{
			get{ return _m_player_accountid.has_value; }
		}

		public uint m_player_actor_id
		{
			get{ return _m_player_actor_id.member_value; }
			set{ _m_player_actor_id.member_value = value; }
		}
		public bool has_m_player_actor_id
		{
			get{ return _m_player_actor_id.has_value; }
		}

		public uint m_dier_serverid
		{
			get{ return _m_dier_serverid.member_value; }
			set{ _m_dier_serverid.member_value = value; }
		}
		public bool has_m_dier_serverid
		{
			get{ return _m_dier_serverid.has_value; }
		}

		public uint m_dier_accountid
		{
			get{ return _m_dier_accountid.member_value; }
			set{ _m_dier_accountid.member_value = value; }
		}
		public bool has_m_dier_accountid
		{
			get{ return _m_dier_accountid.has_value; }
		}

		public uint m_dier_actor_id
		{
			get{ return _m_dier_actor_id.member_value; }
			set{ _m_dier_actor_id.member_value = value; }
		}
		public bool has_m_dier_actor_id
		{
			get{ return _m_dier_actor_id.has_value; }
		}

		public uint m_zger_serverid
		{
			get{ return _m_zger_serverid.member_value; }
			set{ _m_zger_serverid.member_value = value; }
		}
		public bool has_m_zger_serverid
		{
			get{ return _m_zger_serverid.has_value; }
		}

		public uint m_zger_accountid
		{
			get{ return _m_zger_accountid.member_value; }
			set{ _m_zger_accountid.member_value = value; }
		}
		public bool has_m_zger_accountid
		{
			get{ return _m_zger_accountid.has_value; }
		}

		public uint m_zger_actor_id
		{
			get{ return _m_zger_actor_id.member_value; }
			set{ _m_zger_actor_id.member_value = value; }
		}
		public bool has_m_zger_actor_id
		{
			get{ return _m_zger_actor_id.has_value; }
		}

		public PlayerTeamType m_PlayMode
		{
			get{ return _m_PlayMode.member_value; }
			set{ _m_PlayMode.member_value = value; }
		}
		public bool has_m_PlayMode
		{
			get{ return _m_PlayMode.has_value; }
		}

		public BattleRecordNodeType m_BattleMsgType
		{
			get{ return _m_BattleMsgType.member_value; }
			set{ _m_BattleMsgType.member_value = value; }
		}
		public bool has_m_BattleMsgType
		{
			get{ return _m_BattleMsgType.has_value; }
		}

		public uint m_BattleMsgParam
		{
			get{ return _m_BattleMsgParam.member_value; }
			set{ _m_BattleMsgParam.member_value = value; }
		}
		public bool has_m_BattleMsgParam
		{
			get{ return _m_BattleMsgParam.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_player_serverid.Serialize(_m_player_serverid.member_value, ref out_stream);

			count += _m_player_accountid.Serialize(_m_player_accountid.member_value, ref out_stream);

			count += _m_player_actor_id.Serialize(_m_player_actor_id.member_value, ref out_stream);

			count += _m_dier_serverid.Serialize(_m_dier_serverid.member_value, ref out_stream);

			count += _m_dier_accountid.Serialize(_m_dier_accountid.member_value, ref out_stream);

			count += _m_dier_actor_id.Serialize(_m_dier_actor_id.member_value, ref out_stream);

			count += _m_zger_serverid.Serialize(_m_zger_serverid.member_value, ref out_stream);

			count += _m_zger_accountid.Serialize(_m_zger_accountid.member_value, ref out_stream);

			count += _m_zger_actor_id.Serialize(_m_zger_actor_id.member_value, ref out_stream);

			count += _m_PlayMode.Serialize((uint)_m_PlayMode.member_value, ref out_stream);

			count += _m_BattleMsgType.Serialize((uint)_m_BattleMsgType.member_value, ref out_stream);

			count += _m_BattleMsgParam.Serialize(_m_BattleMsgParam.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_player_serverid = 0;
			one_count = _m_player_serverid.ParseFrom(ref temp_m_player_serverid, ref int_stream);
			if (0 < one_count)
			{
					_m_player_serverid.member_value = temp_m_player_serverid;
					count = count + one_count;
			}

			uint temp_m_player_accountid = 0;
			one_count = _m_player_accountid.ParseFrom(ref temp_m_player_accountid, ref int_stream);
			if (0 < one_count)
			{
					_m_player_accountid.member_value = temp_m_player_accountid;
					count = count + one_count;
			}

			uint temp_m_player_actor_id = 0;
			one_count = _m_player_actor_id.ParseFrom(ref temp_m_player_actor_id, ref int_stream);
			if (0 < one_count)
			{
					_m_player_actor_id.member_value = temp_m_player_actor_id;
					count = count + one_count;
			}

			uint temp_m_dier_serverid = 0;
			one_count = _m_dier_serverid.ParseFrom(ref temp_m_dier_serverid, ref int_stream);
			if (0 < one_count)
			{
					_m_dier_serverid.member_value = temp_m_dier_serverid;
					count = count + one_count;
			}

			uint temp_m_dier_accountid = 0;
			one_count = _m_dier_accountid.ParseFrom(ref temp_m_dier_accountid, ref int_stream);
			if (0 < one_count)
			{
					_m_dier_accountid.member_value = temp_m_dier_accountid;
					count = count + one_count;
			}

			uint temp_m_dier_actor_id = 0;
			one_count = _m_dier_actor_id.ParseFrom(ref temp_m_dier_actor_id, ref int_stream);
			if (0 < one_count)
			{
					_m_dier_actor_id.member_value = temp_m_dier_actor_id;
					count = count + one_count;
			}

			uint temp_m_zger_serverid = 0;
			one_count = _m_zger_serverid.ParseFrom(ref temp_m_zger_serverid, ref int_stream);
			if (0 < one_count)
			{
					_m_zger_serverid.member_value = temp_m_zger_serverid;
					count = count + one_count;
			}

			uint temp_m_zger_accountid = 0;
			one_count = _m_zger_accountid.ParseFrom(ref temp_m_zger_accountid, ref int_stream);
			if (0 < one_count)
			{
					_m_zger_accountid.member_value = temp_m_zger_accountid;
					count = count + one_count;
			}

			uint temp_m_zger_actor_id = 0;
			one_count = _m_zger_actor_id.ParseFrom(ref temp_m_zger_actor_id, ref int_stream);
			if (0 < one_count)
			{
					_m_zger_actor_id.member_value = temp_m_zger_actor_id;
					count = count + one_count;
			}

			uint temp_m_PlayMode = 0;
			one_count = _m_PlayMode.ParseFrom(ref temp_m_PlayMode, ref int_stream);
			if (0 < one_count)
			{
					_m_PlayMode.member_value = (PlayerTeamType)temp_m_PlayMode;
					count = count + one_count;
			}

			uint temp_m_BattleMsgType = 0;
			one_count = _m_BattleMsgType.ParseFrom(ref temp_m_BattleMsgType, ref int_stream);
			if (0 < one_count)
			{
					_m_BattleMsgType.member_value = (BattleRecordNodeType)temp_m_BattleMsgType;
					count = count + one_count;
			}

			uint temp_m_BattleMsgParam = 0;
			one_count = _m_BattleMsgParam.ParseFrom(ref temp_m_BattleMsgParam, ref int_stream);
			if (0 < one_count)
			{
					_m_BattleMsgParam.member_value = temp_m_BattleMsgParam;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Battle2Client_CommonBattleRecord : IMessage
	{
		private ProtoMemberEnum<PlayerTeamType> _m_PlayMode;	//玩法类型
		private ProtoMemberEmbeddedList<BattleRecordLine> _m_lines;	//战绩榜行数据

		public Msg_Battle2Client_CommonBattleRecord()
		{
			_m_PlayMode = new ProtoMemberEnum<PlayerTeamType>(1, true);
			_m_lines = new ProtoMemberEmbeddedList<BattleRecordLine>(2, false);
		}

		public Msg_Battle2Client_CommonBattleRecord(PlayerTeamType __m_PlayMode)
		{
			_m_PlayMode = new ProtoMemberEnum<PlayerTeamType>(1, true);
			_m_PlayMode.member_value = __m_PlayMode;
			_m_lines = new ProtoMemberEmbeddedList<BattleRecordLine>(2, false);
		}

		public PlayerTeamType m_PlayMode
		{
			get{ return _m_PlayMode.member_value; }
			set{ _m_PlayMode.member_value = value; }
		}
		public bool has_m_PlayMode
		{
			get{ return _m_PlayMode.has_value; }
		}

		public System.Collections.Generic.List<BattleRecordLine> m_lines
		{
			get{ return _m_lines.member_value; }
		}
		public bool has_m_lines
		{
			get{ return _m_lines.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_PlayMode.Serialize((uint)_m_PlayMode.member_value, ref out_stream);

			foreach(BattleRecordLine one_member_value in _m_lines.member_value)
			{
				count += _m_lines.Serialize(one_member_value, ref out_stream);
			}

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_PlayMode = 0;
			one_count = _m_PlayMode.ParseFrom(ref temp_m_PlayMode, ref int_stream);
			if (0 < one_count)
			{
					_m_PlayMode.member_value = (PlayerTeamType)temp_m_PlayMode;
					count = count + one_count;
			}

			while (true)
			{
				BattleRecordLine one_member_value = new BattleRecordLine();
				one_count = _m_lines.ParseFrom(one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_lines.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			return count;
		}
	}

	public class Msg_Battle2Client_CurOnlinePlayers : IMessage
	{
		private ProtoMemberEmbeddedList<PlayerGuid> _m_curonline_players;	//当前进入的玩家的GUID
		private ProtoMemberUInt32 _m_nState;	//状态(1表示达到100%可以展开了)
		private ProtoMemberUInt32 _m_player_count;	//PVP玩家总数

		public Msg_Battle2Client_CurOnlinePlayers()
		{
			_m_curonline_players = new ProtoMemberEmbeddedList<PlayerGuid>(1, false);
			_m_nState = new ProtoMemberUInt32(2, false);
			_m_player_count = new ProtoMemberUInt32(3, false);
		}

		public Msg_Battle2Client_CurOnlinePlayers(uint __m_nState, uint __m_player_count)
		{
			_m_curonline_players = new ProtoMemberEmbeddedList<PlayerGuid>(1, false);
			_m_nState = new ProtoMemberUInt32(2, false);
			_m_nState.member_value = __m_nState;
			_m_player_count = new ProtoMemberUInt32(3, false);
			_m_player_count.member_value = __m_player_count;
		}

		public System.Collections.Generic.List<PlayerGuid> m_curonline_players
		{
			get{ return _m_curonline_players.member_value; }
		}
		public bool has_m_curonline_players
		{
			get{ return _m_curonline_players.has_value; }
		}

		public uint m_nState
		{
			get{ return _m_nState.member_value; }
			set{ _m_nState.member_value = value; }
		}
		public bool has_m_nState
		{
			get{ return _m_nState.has_value; }
		}

		public uint m_player_count
		{
			get{ return _m_player_count.member_value; }
			set{ _m_player_count.member_value = value; }
		}
		public bool has_m_player_count
		{
			get{ return _m_player_count.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			foreach(PlayerGuid one_member_value in _m_curonline_players.member_value)
			{
				count += _m_curonline_players.Serialize(one_member_value, ref out_stream);
			}

			count += _m_nState.Serialize(_m_nState.member_value, ref out_stream);

			count += _m_player_count.Serialize(_m_player_count.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			while (true)
			{
				PlayerGuid one_member_value = new PlayerGuid();
				one_count = _m_curonline_players.ParseFrom(one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_curonline_players.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			uint temp_m_nState = 0;
			one_count = _m_nState.ParseFrom(ref temp_m_nState, ref int_stream);
			if (0 < one_count)
			{
					_m_nState.member_value = temp_m_nState;
					count = count + one_count;
			}

			uint temp_m_player_count = 0;
			one_count = _m_player_count.ParseFrom(ref temp_m_player_count, ref int_stream);
			if (0 < one_count)
			{
					_m_player_count.member_value = temp_m_player_count;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Battle2Client_DamageHpInfoList : IMessage
	{
		private ProtoMemberEmbeddedList<DamageHpInfo> _m_lstDamageInfo;	

		public Msg_Battle2Client_DamageHpInfoList()
		{
			_m_lstDamageInfo = new ProtoMemberEmbeddedList<DamageHpInfo>(1, false);
		}

		public System.Collections.Generic.List<DamageHpInfo> m_lstDamageInfo
		{
			get{ return _m_lstDamageInfo.member_value; }
		}
		public bool has_m_lstDamageInfo
		{
			get{ return _m_lstDamageInfo.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			foreach(DamageHpInfo one_member_value in _m_lstDamageInfo.member_value)
			{
				count += _m_lstDamageInfo.Serialize(one_member_value, ref out_stream);
			}

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			while (true)
			{
				DamageHpInfo one_member_value = new DamageHpInfo();
				one_count = _m_lstDamageInfo.ParseFrom(one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_lstDamageInfo.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			return count;
		}
	}

	public class Msg_Battle2Client_HeroSelectInfoList : IMessage
	{
		private ProtoMemberEmbeddedList<Battle2Client_HeroSelectInfo> _m_hero_selinfos;	
		private ProtoMemberUInt32 _m_state;	//0,正常更新。1超时或全部确认时最后一次更新(界面可关闭进入战斗)

		public Msg_Battle2Client_HeroSelectInfoList()
		{
			_m_hero_selinfos = new ProtoMemberEmbeddedList<Battle2Client_HeroSelectInfo>(1, false);
			_m_state = new ProtoMemberUInt32(2, false);
		}

		public Msg_Battle2Client_HeroSelectInfoList(uint __m_state)
		{
			_m_hero_selinfos = new ProtoMemberEmbeddedList<Battle2Client_HeroSelectInfo>(1, false);
			_m_state = new ProtoMemberUInt32(2, false);
			_m_state.member_value = __m_state;
		}

		public System.Collections.Generic.List<Battle2Client_HeroSelectInfo> m_hero_selinfos
		{
			get{ return _m_hero_selinfos.member_value; }
		}
		public bool has_m_hero_selinfos
		{
			get{ return _m_hero_selinfos.has_value; }
		}

		public uint m_state
		{
			get{ return _m_state.member_value; }
			set{ _m_state.member_value = value; }
		}
		public bool has_m_state
		{
			get{ return _m_state.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			foreach(Battle2Client_HeroSelectInfo one_member_value in _m_hero_selinfos.member_value)
			{
				count += _m_hero_selinfos.Serialize(one_member_value, ref out_stream);
			}

			count += _m_state.Serialize(_m_state.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			while (true)
			{
				Battle2Client_HeroSelectInfo one_member_value = new Battle2Client_HeroSelectInfo();
				one_count = _m_hero_selinfos.ParseFrom(one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_hero_selinfos.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			uint temp_m_state = 0;
			one_count = _m_state.ParseFrom(ref temp_m_state, ref int_stream);
			if (0 < one_count)
			{
					_m_state.member_value = temp_m_state;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Battle2Client_HeroSkill : IMessage
	{
		private ProtoMemberEmbedded<BattleSkillEffect> _m_skill;	

		public Msg_Battle2Client_HeroSkill()
		{
			_m_skill = new ProtoMemberEmbedded<BattleSkillEffect>(1, true);
			_m_skill.member_value = new BattleSkillEffect();
		}

		public BattleSkillEffect m_skill
		{
			get{ return _m_skill.member_value as BattleSkillEffect; }
			set{ _m_skill.member_value = value; }
		}
		public bool has_m_skill
		{
			get{ return _m_skill.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_skill.Serialize(_m_skill.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			BattleSkillEffect temp_m_skill = new BattleSkillEffect();
			one_count = _m_skill.ParseFrom(temp_m_skill, ref int_stream);
			if (0 < one_count)
			{
					_m_skill.member_value = temp_m_skill;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Battle2Client_InterruptSkill : IMessage
	{
		private ProtoMemberUInt32 _m_hero_guid;	//主控英雄GUID
		private ProtoMemberUInt32 _m_skill_id;	//技能ID

		public Msg_Battle2Client_InterruptSkill()
		{
			_m_hero_guid = new ProtoMemberUInt32(1, true);
			_m_skill_id = new ProtoMemberUInt32(2, true);
		}

		public Msg_Battle2Client_InterruptSkill(uint __m_hero_guid, uint __m_skill_id)
		{
			_m_hero_guid = new ProtoMemberUInt32(1, true);
			_m_hero_guid.member_value = __m_hero_guid;
			_m_skill_id = new ProtoMemberUInt32(2, true);
			_m_skill_id.member_value = __m_skill_id;
		}

		public uint m_hero_guid
		{
			get{ return _m_hero_guid.member_value; }
			set{ _m_hero_guid.member_value = value; }
		}
		public bool has_m_hero_guid
		{
			get{ return _m_hero_guid.has_value; }
		}

		public uint m_skill_id
		{
			get{ return _m_skill_id.member_value; }
			set{ _m_skill_id.member_value = value; }
		}
		public bool has_m_skill_id
		{
			get{ return _m_skill_id.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_hero_guid.Serialize(_m_hero_guid.member_value, ref out_stream);

			count += _m_skill_id.Serialize(_m_skill_id.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_hero_guid = 0;
			one_count = _m_hero_guid.ParseFrom(ref temp_m_hero_guid, ref int_stream);
			if (0 < one_count)
			{
					_m_hero_guid.member_value = temp_m_hero_guid;
					count = count + one_count;
			}

			uint temp_m_skill_id = 0;
			one_count = _m_skill_id.ParseFrom(ref temp_m_skill_id, ref int_stream);
			if (0 < one_count)
			{
					_m_skill_id.member_value = temp_m_skill_id;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Battle2Client_MonsterSkill : IMessage
	{
		private ProtoMemberEmbedded<BattleSkillEffect> _m_skill;	
		private ProtoMemberUInt32 _m_syncpos_account_id;	//若施法怪位置有变动，同步位置的端的玩家帐号ID
		private ProtoMemberUInt32 _m_syncpos_server_id;	//若施法怪位置有变动，同步位置的端的玩家服ID

		public Msg_Battle2Client_MonsterSkill()
		{
			_m_skill = new ProtoMemberEmbedded<BattleSkillEffect>(1, true);
			_m_skill.member_value = new BattleSkillEffect();
			_m_syncpos_account_id = new ProtoMemberUInt32(2, false);
			_m_syncpos_server_id = new ProtoMemberUInt32(3, false);
		}

		public Msg_Battle2Client_MonsterSkill(uint __m_syncpos_account_id, uint __m_syncpos_server_id)
		{
			_m_skill = new ProtoMemberEmbedded<BattleSkillEffect>(1, true);
			_m_skill.member_value = new BattleSkillEffect();
			_m_syncpos_account_id = new ProtoMemberUInt32(2, false);
			_m_syncpos_account_id.member_value = __m_syncpos_account_id;
			_m_syncpos_server_id = new ProtoMemberUInt32(3, false);
			_m_syncpos_server_id.member_value = __m_syncpos_server_id;
		}

		public BattleSkillEffect m_skill
		{
			get{ return _m_skill.member_value as BattleSkillEffect; }
			set{ _m_skill.member_value = value; }
		}
		public bool has_m_skill
		{
			get{ return _m_skill.has_value; }
		}

		public uint m_syncpos_account_id
		{
			get{ return _m_syncpos_account_id.member_value; }
			set{ _m_syncpos_account_id.member_value = value; }
		}
		public bool has_m_syncpos_account_id
		{
			get{ return _m_syncpos_account_id.has_value; }
		}

		public uint m_syncpos_server_id
		{
			get{ return _m_syncpos_server_id.member_value; }
			set{ _m_syncpos_server_id.member_value = value; }
		}
		public bool has_m_syncpos_server_id
		{
			get{ return _m_syncpos_server_id.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_skill.Serialize(_m_skill.member_value, ref out_stream);

			count += _m_syncpos_account_id.Serialize(_m_syncpos_account_id.member_value, ref out_stream);

			count += _m_syncpos_server_id.Serialize(_m_syncpos_server_id.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			BattleSkillEffect temp_m_skill = new BattleSkillEffect();
			one_count = _m_skill.ParseFrom(temp_m_skill, ref int_stream);
			if (0 < one_count)
			{
					_m_skill.member_value = temp_m_skill;
					count = count + one_count;
			}

			uint temp_m_syncpos_account_id = 0;
			one_count = _m_syncpos_account_id.ParseFrom(ref temp_m_syncpos_account_id, ref int_stream);
			if (0 < one_count)
			{
					_m_syncpos_account_id.member_value = temp_m_syncpos_account_id;
					count = count + one_count;
			}

			uint temp_m_syncpos_server_id = 0;
			one_count = _m_syncpos_server_id.ParseFrom(ref temp_m_syncpos_server_id, ref int_stream);
			if (0 < one_count)
			{
					_m_syncpos_server_id.member_value = temp_m_syncpos_server_id;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Battle2Client_NotifyBattleResult : IMessage
	{
		private ProtoMemberUInt64 _m_teamid;	//队伍id
		private ProtoMemberUInt32 _m_dungeonid;	//副本id
		private ProtoMemberUInt32 _m_sceneid;	//当前场景id
		private ProtoMemberEnum<BattleSvrRes> _m_res;	//结果()

		public Msg_Battle2Client_NotifyBattleResult()
		{
			_m_teamid = new ProtoMemberUInt64(1, true);
			_m_dungeonid = new ProtoMemberUInt32(2, true);
			_m_sceneid = new ProtoMemberUInt32(3, true);
			_m_res = new ProtoMemberEnum<BattleSvrRes>(4, true);
		}

		public Msg_Battle2Client_NotifyBattleResult(ulong __m_teamid, uint __m_dungeonid, uint __m_sceneid, BattleSvrRes __m_res)
		{
			_m_teamid = new ProtoMemberUInt64(1, true);
			_m_teamid.member_value = __m_teamid;
			_m_dungeonid = new ProtoMemberUInt32(2, true);
			_m_dungeonid.member_value = __m_dungeonid;
			_m_sceneid = new ProtoMemberUInt32(3, true);
			_m_sceneid.member_value = __m_sceneid;
			_m_res = new ProtoMemberEnum<BattleSvrRes>(4, true);
			_m_res.member_value = __m_res;
		}

		public ulong m_teamid
		{
			get{ return _m_teamid.member_value; }
			set{ _m_teamid.member_value = value; }
		}
		public bool has_m_teamid
		{
			get{ return _m_teamid.has_value; }
		}

		public uint m_dungeonid
		{
			get{ return _m_dungeonid.member_value; }
			set{ _m_dungeonid.member_value = value; }
		}
		public bool has_m_dungeonid
		{
			get{ return _m_dungeonid.has_value; }
		}

		public uint m_sceneid
		{
			get{ return _m_sceneid.member_value; }
			set{ _m_sceneid.member_value = value; }
		}
		public bool has_m_sceneid
		{
			get{ return _m_sceneid.has_value; }
		}

		public BattleSvrRes m_res
		{
			get{ return _m_res.member_value; }
			set{ _m_res.member_value = value; }
		}
		public bool has_m_res
		{
			get{ return _m_res.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_teamid.Serialize(_m_teamid.member_value, ref out_stream);

			count += _m_dungeonid.Serialize(_m_dungeonid.member_value, ref out_stream);

			count += _m_sceneid.Serialize(_m_sceneid.member_value, ref out_stream);

			count += _m_res.Serialize((uint)_m_res.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			ulong temp_m_teamid = 0;
			one_count = _m_teamid.ParseFrom(ref temp_m_teamid, ref int_stream);
			if (0 < one_count)
			{
					_m_teamid.member_value = temp_m_teamid;
					count = count + one_count;
			}

			uint temp_m_dungeonid = 0;
			one_count = _m_dungeonid.ParseFrom(ref temp_m_dungeonid, ref int_stream);
			if (0 < one_count)
			{
					_m_dungeonid.member_value = temp_m_dungeonid;
					count = count + one_count;
			}

			uint temp_m_sceneid = 0;
			one_count = _m_sceneid.ParseFrom(ref temp_m_sceneid, ref int_stream);
			if (0 < one_count)
			{
					_m_sceneid.member_value = temp_m_sceneid;
					count = count + one_count;
			}

			uint temp_m_res = 0;
			one_count = _m_res.ParseFrom(ref temp_m_res, ref int_stream);
			if (0 < one_count)
			{
					_m_res.member_value = (BattleSvrRes)temp_m_res;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Battle2Client_NotifyChgScene : IMessage
	{
		private ProtoMemberUInt32 _m_sceneid;	//场景ID

		public Msg_Battle2Client_NotifyChgScene()
		{
			_m_sceneid = new ProtoMemberUInt32(1, true);
		}

		public Msg_Battle2Client_NotifyChgScene(uint __m_sceneid)
		{
			_m_sceneid = new ProtoMemberUInt32(1, true);
			_m_sceneid.member_value = __m_sceneid;
		}

		public uint m_sceneid
		{
			get{ return _m_sceneid.member_value; }
			set{ _m_sceneid.member_value = value; }
		}
		public bool has_m_sceneid
		{
			get{ return _m_sceneid.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_sceneid.Serialize(_m_sceneid.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_sceneid = 0;
			one_count = _m_sceneid.ParseFrom(ref temp_m_sceneid, ref int_stream);
			if (0 < one_count)
			{
					_m_sceneid.member_value = temp_m_sceneid;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Battle2Client_NotifyControlHeroIndex : IMessage
	{
		private ProtoMemberUInt32List _m_heroIndexs;	

		public Msg_Battle2Client_NotifyControlHeroIndex()
		{
			_m_heroIndexs = new ProtoMemberUInt32List(1, false);
		}

		public System.Collections.Generic.List<uint> m_heroIndexs
		{
			get{ return _m_heroIndexs.member_value; }
		}
		public bool has_m_heroIndexs
		{
			get{ return _m_heroIndexs.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			foreach(uint one_member_value in _m_heroIndexs.member_value)
			{
				count += _m_heroIndexs.Serialize(one_member_value, ref out_stream);
			}

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			while (true)
			{
				uint one_member_value = 0;
				one_count = _m_heroIndexs.ParseFrom(ref one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_heroIndexs.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			return count;
		}
	}

	public class Msg_Battle2Client_NotifyEnterScene_Res : IMessage
	{
		private ProtoMemberEnum<BattleSvrRes> _m_res;	

		public Msg_Battle2Client_NotifyEnterScene_Res()
		{
			_m_res = new ProtoMemberEnum<BattleSvrRes>(1, true);
		}

		public Msg_Battle2Client_NotifyEnterScene_Res(BattleSvrRes __m_res)
		{
			_m_res = new ProtoMemberEnum<BattleSvrRes>(1, true);
			_m_res.member_value = __m_res;
		}

		public BattleSvrRes m_res
		{
			get{ return _m_res.member_value; }
			set{ _m_res.member_value = value; }
		}
		public bool has_m_res
		{
			get{ return _m_res.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_res.Serialize((uint)_m_res.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_res = 0;
			one_count = _m_res.ParseFrom(ref temp_m_res, ref int_stream);
			if (0 < one_count)
			{
					_m_res.member_value = (BattleSvrRes)temp_m_res;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Battle2Client_NotifyHeroUseSkill : IMessage
	{
		private ProtoMemberUInt32 _m_account_id;	//英雄的玩家的帐号ID
		private ProtoMemberUInt32 _m_server_id;	//英雄的玩家的服ID
		private ProtoMemberUInt32 _m_hero_guid;	//英雄guid 1~4	
		private ProtoMemberUInt32 _m_skill_id;	//技能id

		public Msg_Battle2Client_NotifyHeroUseSkill()
		{
			_m_account_id = new ProtoMemberUInt32(1, true);
			_m_server_id = new ProtoMemberUInt32(2, true);
			_m_hero_guid = new ProtoMemberUInt32(3, true);
			_m_skill_id = new ProtoMemberUInt32(4, true);
		}

		public Msg_Battle2Client_NotifyHeroUseSkill(uint __m_account_id, uint __m_server_id, uint __m_hero_guid, uint __m_skill_id)
		{
			_m_account_id = new ProtoMemberUInt32(1, true);
			_m_account_id.member_value = __m_account_id;
			_m_server_id = new ProtoMemberUInt32(2, true);
			_m_server_id.member_value = __m_server_id;
			_m_hero_guid = new ProtoMemberUInt32(3, true);
			_m_hero_guid.member_value = __m_hero_guid;
			_m_skill_id = new ProtoMemberUInt32(4, true);
			_m_skill_id.member_value = __m_skill_id;
		}

		public uint m_account_id
		{
			get{ return _m_account_id.member_value; }
			set{ _m_account_id.member_value = value; }
		}
		public bool has_m_account_id
		{
			get{ return _m_account_id.has_value; }
		}

		public uint m_server_id
		{
			get{ return _m_server_id.member_value; }
			set{ _m_server_id.member_value = value; }
		}
		public bool has_m_server_id
		{
			get{ return _m_server_id.has_value; }
		}

		public uint m_hero_guid
		{
			get{ return _m_hero_guid.member_value; }
			set{ _m_hero_guid.member_value = value; }
		}
		public bool has_m_hero_guid
		{
			get{ return _m_hero_guid.has_value; }
		}

		public uint m_skill_id
		{
			get{ return _m_skill_id.member_value; }
			set{ _m_skill_id.member_value = value; }
		}
		public bool has_m_skill_id
		{
			get{ return _m_skill_id.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_account_id.Serialize(_m_account_id.member_value, ref out_stream);

			count += _m_server_id.Serialize(_m_server_id.member_value, ref out_stream);

			count += _m_hero_guid.Serialize(_m_hero_guid.member_value, ref out_stream);

			count += _m_skill_id.Serialize(_m_skill_id.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_account_id = 0;
			one_count = _m_account_id.ParseFrom(ref temp_m_account_id, ref int_stream);
			if (0 < one_count)
			{
					_m_account_id.member_value = temp_m_account_id;
					count = count + one_count;
			}

			uint temp_m_server_id = 0;
			one_count = _m_server_id.ParseFrom(ref temp_m_server_id, ref int_stream);
			if (0 < one_count)
			{
					_m_server_id.member_value = temp_m_server_id;
					count = count + one_count;
			}

			uint temp_m_hero_guid = 0;
			one_count = _m_hero_guid.ParseFrom(ref temp_m_hero_guid, ref int_stream);
			if (0 < one_count)
			{
					_m_hero_guid.member_value = temp_m_hero_guid;
					count = count + one_count;
			}

			uint temp_m_skill_id = 0;
			one_count = _m_skill_id.ParseFrom(ref temp_m_skill_id, ref int_stream);
			if (0 < one_count)
			{
					_m_skill_id.member_value = temp_m_skill_id;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Battle2Client_PlayerLogin_Res : IMessage
	{
		private ProtoMemberEnum<BattleSvrRes> _m_res;	
		private ProtoMemberUInt32List _m_HuntingChapter_EventId;	//战役关卡外层事件ID	

		public Msg_Battle2Client_PlayerLogin_Res()
		{
			_m_res = new ProtoMemberEnum<BattleSvrRes>(1, true);
			_m_HuntingChapter_EventId = new ProtoMemberUInt32List(2, false);
		}

		public Msg_Battle2Client_PlayerLogin_Res(BattleSvrRes __m_res)
		{
			_m_res = new ProtoMemberEnum<BattleSvrRes>(1, true);
			_m_res.member_value = __m_res;
			_m_HuntingChapter_EventId = new ProtoMemberUInt32List(2, false);
		}

		public BattleSvrRes m_res
		{
			get{ return _m_res.member_value; }
			set{ _m_res.member_value = value; }
		}
		public bool has_m_res
		{
			get{ return _m_res.has_value; }
		}

		public System.Collections.Generic.List<uint> m_HuntingChapter_EventId
		{
			get{ return _m_HuntingChapter_EventId.member_value; }
		}
		public bool has_m_HuntingChapter_EventId
		{
			get{ return _m_HuntingChapter_EventId.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_res.Serialize((uint)_m_res.member_value, ref out_stream);

			foreach(uint one_member_value in _m_HuntingChapter_EventId.member_value)
			{
				count += _m_HuntingChapter_EventId.Serialize(one_member_value, ref out_stream);
			}

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_res = 0;
			one_count = _m_res.ParseFrom(ref temp_m_res, ref int_stream);
			if (0 < one_count)
			{
					_m_res.member_value = (BattleSvrRes)temp_m_res;
					count = count + one_count;
			}

			while (true)
			{
				uint one_member_value = 0;
				one_count = _m_HuntingChapter_EventId.ParseFrom(ref one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_HuntingChapter_EventId.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			return count;
		}
	}

	public class Msg_Battle2Client_PlayerOffline : IMessage
	{
		private ProtoMemberUInt32 _m_server_id;	
		private ProtoMemberUInt32 _m_account;	
		private ProtoMemberUInt32List _m_hero_guids;	

		public Msg_Battle2Client_PlayerOffline()
		{
			_m_server_id = new ProtoMemberUInt32(1, true);
			_m_account = new ProtoMemberUInt32(2, true);
			_m_hero_guids = new ProtoMemberUInt32List(3, false);
		}

		public Msg_Battle2Client_PlayerOffline(uint __m_server_id, uint __m_account)
		{
			_m_server_id = new ProtoMemberUInt32(1, true);
			_m_server_id.member_value = __m_server_id;
			_m_account = new ProtoMemberUInt32(2, true);
			_m_account.member_value = __m_account;
			_m_hero_guids = new ProtoMemberUInt32List(3, false);
		}

		public uint m_server_id
		{
			get{ return _m_server_id.member_value; }
			set{ _m_server_id.member_value = value; }
		}
		public bool has_m_server_id
		{
			get{ return _m_server_id.has_value; }
		}

		public uint m_account
		{
			get{ return _m_account.member_value; }
			set{ _m_account.member_value = value; }
		}
		public bool has_m_account
		{
			get{ return _m_account.has_value; }
		}

		public System.Collections.Generic.List<uint> m_hero_guids
		{
			get{ return _m_hero_guids.member_value; }
		}
		public bool has_m_hero_guids
		{
			get{ return _m_hero_guids.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_server_id.Serialize(_m_server_id.member_value, ref out_stream);

			count += _m_account.Serialize(_m_account.member_value, ref out_stream);

			foreach(uint one_member_value in _m_hero_guids.member_value)
			{
				count += _m_hero_guids.Serialize(one_member_value, ref out_stream);
			}

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_server_id = 0;
			one_count = _m_server_id.ParseFrom(ref temp_m_server_id, ref int_stream);
			if (0 < one_count)
			{
					_m_server_id.member_value = temp_m_server_id;
					count = count + one_count;
			}

			uint temp_m_account = 0;
			one_count = _m_account.ParseFrom(ref temp_m_account, ref int_stream);
			if (0 < one_count)
			{
					_m_account.member_value = temp_m_account;
					count = count + one_count;
			}

			while (true)
			{
				uint one_member_value = 0;
				one_count = _m_hero_guids.ParseFrom(ref one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_hero_guids.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			return count;
		}
	}

	public class Msg_Battle2Client_QTE_Touch : IMessage
	{
		private ProtoMemberUInt32 _m_hero_guid;	//英雄id
		private ProtoMemberUInt32 _m_qte_id;	//QTEid
		private ProtoMemberUInt32 _m_monsterid;	//怪物id

		public Msg_Battle2Client_QTE_Touch()
		{
			_m_hero_guid = new ProtoMemberUInt32(1, true);
			_m_qte_id = new ProtoMemberUInt32(2, true);
			_m_monsterid = new ProtoMemberUInt32(3, true);
		}

		public Msg_Battle2Client_QTE_Touch(uint __m_hero_guid, uint __m_qte_id, uint __m_monsterid)
		{
			_m_hero_guid = new ProtoMemberUInt32(1, true);
			_m_hero_guid.member_value = __m_hero_guid;
			_m_qte_id = new ProtoMemberUInt32(2, true);
			_m_qte_id.member_value = __m_qte_id;
			_m_monsterid = new ProtoMemberUInt32(3, true);
			_m_monsterid.member_value = __m_monsterid;
		}

		public uint m_hero_guid
		{
			get{ return _m_hero_guid.member_value; }
			set{ _m_hero_guid.member_value = value; }
		}
		public bool has_m_hero_guid
		{
			get{ return _m_hero_guid.has_value; }
		}

		public uint m_qte_id
		{
			get{ return _m_qte_id.member_value; }
			set{ _m_qte_id.member_value = value; }
		}
		public bool has_m_qte_id
		{
			get{ return _m_qte_id.has_value; }
		}

		public uint m_monsterid
		{
			get{ return _m_monsterid.member_value; }
			set{ _m_monsterid.member_value = value; }
		}
		public bool has_m_monsterid
		{
			get{ return _m_monsterid.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_hero_guid.Serialize(_m_hero_guid.member_value, ref out_stream);

			count += _m_qte_id.Serialize(_m_qte_id.member_value, ref out_stream);

			count += _m_monsterid.Serialize(_m_monsterid.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_hero_guid = 0;
			one_count = _m_hero_guid.ParseFrom(ref temp_m_hero_guid, ref int_stream);
			if (0 < one_count)
			{
					_m_hero_guid.member_value = temp_m_hero_guid;
					count = count + one_count;
			}

			uint temp_m_qte_id = 0;
			one_count = _m_qte_id.ParseFrom(ref temp_m_qte_id, ref int_stream);
			if (0 < one_count)
			{
					_m_qte_id.member_value = temp_m_qte_id;
					count = count + one_count;
			}

			uint temp_m_monsterid = 0;
			one_count = _m_monsterid.ParseFrom(ref temp_m_monsterid, ref int_stream);
			if (0 < one_count)
			{
					_m_monsterid.member_value = temp_m_monsterid;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Battle2Client_SelectHero_Res : IMessage
	{
		private ProtoMemberUInt32 _m_player_server_id;	//玩家
		private ProtoMemberUInt32 _m_player_account_id;	//玩家
		private ProtoMemberUInt32 _m_hero_index;	//英雄索引(1~8)
		private ProtoMemberUInt32 _m_hero_actorid;	//英雄ActorID
		private ProtoMemberUInt32 _m_is_Confirmed;	//是确认操作(0未确认，1确认)
		private ProtoMemberUInt32 _m_res;	//(结果：0表成功，1表失败)		

		public Msg_Battle2Client_SelectHero_Res()
		{
			_m_player_server_id = new ProtoMemberUInt32(1, true);
			_m_player_account_id = new ProtoMemberUInt32(2, true);
			_m_hero_index = new ProtoMemberUInt32(3, true);
			_m_hero_actorid = new ProtoMemberUInt32(4, true);
			_m_is_Confirmed = new ProtoMemberUInt32(5, true);
			_m_res = new ProtoMemberUInt32(6, true);
		}

		public Msg_Battle2Client_SelectHero_Res(uint __m_player_server_id, uint __m_player_account_id, uint __m_hero_index, uint __m_hero_actorid, uint __m_is_Confirmed, uint __m_res)
		{
			_m_player_server_id = new ProtoMemberUInt32(1, true);
			_m_player_server_id.member_value = __m_player_server_id;
			_m_player_account_id = new ProtoMemberUInt32(2, true);
			_m_player_account_id.member_value = __m_player_account_id;
			_m_hero_index = new ProtoMemberUInt32(3, true);
			_m_hero_index.member_value = __m_hero_index;
			_m_hero_actorid = new ProtoMemberUInt32(4, true);
			_m_hero_actorid.member_value = __m_hero_actorid;
			_m_is_Confirmed = new ProtoMemberUInt32(5, true);
			_m_is_Confirmed.member_value = __m_is_Confirmed;
			_m_res = new ProtoMemberUInt32(6, true);
			_m_res.member_value = __m_res;
		}

		public uint m_player_server_id
		{
			get{ return _m_player_server_id.member_value; }
			set{ _m_player_server_id.member_value = value; }
		}
		public bool has_m_player_server_id
		{
			get{ return _m_player_server_id.has_value; }
		}

		public uint m_player_account_id
		{
			get{ return _m_player_account_id.member_value; }
			set{ _m_player_account_id.member_value = value; }
		}
		public bool has_m_player_account_id
		{
			get{ return _m_player_account_id.has_value; }
		}

		public uint m_hero_index
		{
			get{ return _m_hero_index.member_value; }
			set{ _m_hero_index.member_value = value; }
		}
		public bool has_m_hero_index
		{
			get{ return _m_hero_index.has_value; }
		}

		public uint m_hero_actorid
		{
			get{ return _m_hero_actorid.member_value; }
			set{ _m_hero_actorid.member_value = value; }
		}
		public bool has_m_hero_actorid
		{
			get{ return _m_hero_actorid.has_value; }
		}

		public uint m_is_Confirmed
		{
			get{ return _m_is_Confirmed.member_value; }
			set{ _m_is_Confirmed.member_value = value; }
		}
		public bool has_m_is_Confirmed
		{
			get{ return _m_is_Confirmed.has_value; }
		}

		public uint m_res
		{
			get{ return _m_res.member_value; }
			set{ _m_res.member_value = value; }
		}
		public bool has_m_res
		{
			get{ return _m_res.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_player_server_id.Serialize(_m_player_server_id.member_value, ref out_stream);

			count += _m_player_account_id.Serialize(_m_player_account_id.member_value, ref out_stream);

			count += _m_hero_index.Serialize(_m_hero_index.member_value, ref out_stream);

			count += _m_hero_actorid.Serialize(_m_hero_actorid.member_value, ref out_stream);

			count += _m_is_Confirmed.Serialize(_m_is_Confirmed.member_value, ref out_stream);

			count += _m_res.Serialize(_m_res.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_player_server_id = 0;
			one_count = _m_player_server_id.ParseFrom(ref temp_m_player_server_id, ref int_stream);
			if (0 < one_count)
			{
					_m_player_server_id.member_value = temp_m_player_server_id;
					count = count + one_count;
			}

			uint temp_m_player_account_id = 0;
			one_count = _m_player_account_id.ParseFrom(ref temp_m_player_account_id, ref int_stream);
			if (0 < one_count)
			{
					_m_player_account_id.member_value = temp_m_player_account_id;
					count = count + one_count;
			}

			uint temp_m_hero_index = 0;
			one_count = _m_hero_index.ParseFrom(ref temp_m_hero_index, ref int_stream);
			if (0 < one_count)
			{
					_m_hero_index.member_value = temp_m_hero_index;
					count = count + one_count;
			}

			uint temp_m_hero_actorid = 0;
			one_count = _m_hero_actorid.ParseFrom(ref temp_m_hero_actorid, ref int_stream);
			if (0 < one_count)
			{
					_m_hero_actorid.member_value = temp_m_hero_actorid;
					count = count + one_count;
			}

			uint temp_m_is_Confirmed = 0;
			one_count = _m_is_Confirmed.ParseFrom(ref temp_m_is_Confirmed, ref int_stream);
			if (0 < one_count)
			{
					_m_is_Confirmed.member_value = temp_m_is_Confirmed;
					count = count + one_count;
			}

			uint temp_m_res = 0;
			one_count = _m_res.ParseFrom(ref temp_m_res, ref int_stream);
			if (0 < one_count)
			{
					_m_res.member_value = temp_m_res;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Battle2Client_ShowDamage : IMessage
	{
		private ProtoMemberUInt32 _m_hero_guid;	//受击者
		private ProtoMemberUInt32 _m_damage;	//伤害量
		private ProtoMemberUInt32 _m_atker_guid;	//攻击者
		private ProtoMemberUInt32 _m_skill_id;	//技能

		public Msg_Battle2Client_ShowDamage()
		{
			_m_hero_guid = new ProtoMemberUInt32(1, true);
			_m_damage = new ProtoMemberUInt32(2, true);
			_m_atker_guid = new ProtoMemberUInt32(3, true);
			_m_skill_id = new ProtoMemberUInt32(4, true);
		}

		public Msg_Battle2Client_ShowDamage(uint __m_hero_guid, uint __m_damage, uint __m_atker_guid, uint __m_skill_id)
		{
			_m_hero_guid = new ProtoMemberUInt32(1, true);
			_m_hero_guid.member_value = __m_hero_guid;
			_m_damage = new ProtoMemberUInt32(2, true);
			_m_damage.member_value = __m_damage;
			_m_atker_guid = new ProtoMemberUInt32(3, true);
			_m_atker_guid.member_value = __m_atker_guid;
			_m_skill_id = new ProtoMemberUInt32(4, true);
			_m_skill_id.member_value = __m_skill_id;
		}

		public uint m_hero_guid
		{
			get{ return _m_hero_guid.member_value; }
			set{ _m_hero_guid.member_value = value; }
		}
		public bool has_m_hero_guid
		{
			get{ return _m_hero_guid.has_value; }
		}

		public uint m_damage
		{
			get{ return _m_damage.member_value; }
			set{ _m_damage.member_value = value; }
		}
		public bool has_m_damage
		{
			get{ return _m_damage.has_value; }
		}

		public uint m_atker_guid
		{
			get{ return _m_atker_guid.member_value; }
			set{ _m_atker_guid.member_value = value; }
		}
		public bool has_m_atker_guid
		{
			get{ return _m_atker_guid.has_value; }
		}

		public uint m_skill_id
		{
			get{ return _m_skill_id.member_value; }
			set{ _m_skill_id.member_value = value; }
		}
		public bool has_m_skill_id
		{
			get{ return _m_skill_id.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_hero_guid.Serialize(_m_hero_guid.member_value, ref out_stream);

			count += _m_damage.Serialize(_m_damage.member_value, ref out_stream);

			count += _m_atker_guid.Serialize(_m_atker_guid.member_value, ref out_stream);

			count += _m_skill_id.Serialize(_m_skill_id.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_hero_guid = 0;
			one_count = _m_hero_guid.ParseFrom(ref temp_m_hero_guid, ref int_stream);
			if (0 < one_count)
			{
					_m_hero_guid.member_value = temp_m_hero_guid;
					count = count + one_count;
			}

			uint temp_m_damage = 0;
			one_count = _m_damage.ParseFrom(ref temp_m_damage, ref int_stream);
			if (0 < one_count)
			{
					_m_damage.member_value = temp_m_damage;
					count = count + one_count;
			}

			uint temp_m_atker_guid = 0;
			one_count = _m_atker_guid.ParseFrom(ref temp_m_atker_guid, ref int_stream);
			if (0 < one_count)
			{
					_m_atker_guid.member_value = temp_m_atker_guid;
					count = count + one_count;
			}

			uint temp_m_skill_id = 0;
			one_count = _m_skill_id.ParseFrom(ref temp_m_skill_id, ref int_stream);
			if (0 < one_count)
			{
					_m_skill_id.member_value = temp_m_skill_id;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Battle2Client_StarChessTouchEvent : IMessage
	{
		private ProtoMemberUInt32 _m_player_server_id;	
		private ProtoMemberUInt32 _m_player_account_id;	
		private ProtoMemberUInt32 _m_starchess_step;	//步子

		public Msg_Battle2Client_StarChessTouchEvent()
		{
			_m_player_server_id = new ProtoMemberUInt32(1, true);
			_m_player_account_id = new ProtoMemberUInt32(2, true);
			_m_starchess_step = new ProtoMemberUInt32(3, true);
		}

		public Msg_Battle2Client_StarChessTouchEvent(uint __m_player_server_id, uint __m_player_account_id, uint __m_starchess_step)
		{
			_m_player_server_id = new ProtoMemberUInt32(1, true);
			_m_player_server_id.member_value = __m_player_server_id;
			_m_player_account_id = new ProtoMemberUInt32(2, true);
			_m_player_account_id.member_value = __m_player_account_id;
			_m_starchess_step = new ProtoMemberUInt32(3, true);
			_m_starchess_step.member_value = __m_starchess_step;
		}

		public uint m_player_server_id
		{
			get{ return _m_player_server_id.member_value; }
			set{ _m_player_server_id.member_value = value; }
		}
		public bool has_m_player_server_id
		{
			get{ return _m_player_server_id.has_value; }
		}

		public uint m_player_account_id
		{
			get{ return _m_player_account_id.member_value; }
			set{ _m_player_account_id.member_value = value; }
		}
		public bool has_m_player_account_id
		{
			get{ return _m_player_account_id.has_value; }
		}

		public uint m_starchess_step
		{
			get{ return _m_starchess_step.member_value; }
			set{ _m_starchess_step.member_value = value; }
		}
		public bool has_m_starchess_step
		{
			get{ return _m_starchess_step.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_player_server_id.Serialize(_m_player_server_id.member_value, ref out_stream);

			count += _m_player_account_id.Serialize(_m_player_account_id.member_value, ref out_stream);

			count += _m_starchess_step.Serialize(_m_starchess_step.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_player_server_id = 0;
			one_count = _m_player_server_id.ParseFrom(ref temp_m_player_server_id, ref int_stream);
			if (0 < one_count)
			{
					_m_player_server_id.member_value = temp_m_player_server_id;
					count = count + one_count;
			}

			uint temp_m_player_account_id = 0;
			one_count = _m_player_account_id.ParseFrom(ref temp_m_player_account_id, ref int_stream);
			if (0 < one_count)
			{
					_m_player_account_id.member_value = temp_m_player_account_id;
					count = count + one_count;
			}

			uint temp_m_starchess_step = 0;
			one_count = _m_starchess_step.ParseFrom(ref temp_m_starchess_step, ref int_stream);
			if (0 < one_count)
			{
					_m_starchess_step.member_value = temp_m_starchess_step;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Battle2Client_StarChess_BeginInfo : IMessage
	{
		private ProtoMemberUInt32 _m_player1_server_id;	//玩家1服ID
		private ProtoMemberUInt32 _m_player1_account_id;	//玩家1帐号ID
		private ProtoMemberUInt32 _m_player1_actorid;	//玩家模型数据
		private ProtoMemberUInt32 _m_player2_server_id;	//玩家2服ID
		private ProtoMemberUInt32 _m_player2_account_id;	//玩家2帐号ID
		private ProtoMemberUInt32 _m_player2_actorid;	//玩家模型数据
		private ProtoMemberUInt32 _m_chess_id;	//棋局ID
		private ProtoMemberUInt32 _m_gloden_dices;	//初始给的金骰子数
		private ProtoMemberUInt32 _m_common_dices;	//初始给的普通骰子数
		private ProtoMemberUInt32 _m_remain_secs;	//持续时间(秒数)
		private ProtoMemberUInt32List _m_default_props;	//初始道具
		private ProtoMemberEmbeddedList<ChessStep> _m_chess_steps;	//棋局事件数据

		public Msg_Battle2Client_StarChess_BeginInfo()
		{
			_m_player1_server_id = new ProtoMemberUInt32(1, true);
			_m_player1_account_id = new ProtoMemberUInt32(2, true);
			_m_player1_actorid = new ProtoMemberUInt32(3, true);
			_m_player2_server_id = new ProtoMemberUInt32(4, true);
			_m_player2_account_id = new ProtoMemberUInt32(5, true);
			_m_player2_actorid = new ProtoMemberUInt32(6, true);
			_m_chess_id = new ProtoMemberUInt32(7, true);
			_m_gloden_dices = new ProtoMemberUInt32(8, true);
			_m_common_dices = new ProtoMemberUInt32(9, true);
			_m_remain_secs = new ProtoMemberUInt32(10, true);
			_m_default_props = new ProtoMemberUInt32List(11, false);
			_m_chess_steps = new ProtoMemberEmbeddedList<ChessStep>(12, false);
		}

		public Msg_Battle2Client_StarChess_BeginInfo(uint __m_player1_server_id, uint __m_player1_account_id, uint __m_player1_actorid, uint __m_player2_server_id, uint __m_player2_account_id, uint __m_player2_actorid, uint __m_chess_id, uint __m_gloden_dices, uint __m_common_dices, uint __m_remain_secs)
		{
			_m_player1_server_id = new ProtoMemberUInt32(1, true);
			_m_player1_server_id.member_value = __m_player1_server_id;
			_m_player1_account_id = new ProtoMemberUInt32(2, true);
			_m_player1_account_id.member_value = __m_player1_account_id;
			_m_player1_actorid = new ProtoMemberUInt32(3, true);
			_m_player1_actorid.member_value = __m_player1_actorid;
			_m_player2_server_id = new ProtoMemberUInt32(4, true);
			_m_player2_server_id.member_value = __m_player2_server_id;
			_m_player2_account_id = new ProtoMemberUInt32(5, true);
			_m_player2_account_id.member_value = __m_player2_account_id;
			_m_player2_actorid = new ProtoMemberUInt32(6, true);
			_m_player2_actorid.member_value = __m_player2_actorid;
			_m_chess_id = new ProtoMemberUInt32(7, true);
			_m_chess_id.member_value = __m_chess_id;
			_m_gloden_dices = new ProtoMemberUInt32(8, true);
			_m_gloden_dices.member_value = __m_gloden_dices;
			_m_common_dices = new ProtoMemberUInt32(9, true);
			_m_common_dices.member_value = __m_common_dices;
			_m_remain_secs = new ProtoMemberUInt32(10, true);
			_m_remain_secs.member_value = __m_remain_secs;
			_m_default_props = new ProtoMemberUInt32List(11, false);
			_m_chess_steps = new ProtoMemberEmbeddedList<ChessStep>(12, false);
		}

		public uint m_player1_server_id
		{
			get{ return _m_player1_server_id.member_value; }
			set{ _m_player1_server_id.member_value = value; }
		}
		public bool has_m_player1_server_id
		{
			get{ return _m_player1_server_id.has_value; }
		}

		public uint m_player1_account_id
		{
			get{ return _m_player1_account_id.member_value; }
			set{ _m_player1_account_id.member_value = value; }
		}
		public bool has_m_player1_account_id
		{
			get{ return _m_player1_account_id.has_value; }
		}

		public uint m_player1_actorid
		{
			get{ return _m_player1_actorid.member_value; }
			set{ _m_player1_actorid.member_value = value; }
		}
		public bool has_m_player1_actorid
		{
			get{ return _m_player1_actorid.has_value; }
		}

		public uint m_player2_server_id
		{
			get{ return _m_player2_server_id.member_value; }
			set{ _m_player2_server_id.member_value = value; }
		}
		public bool has_m_player2_server_id
		{
			get{ return _m_player2_server_id.has_value; }
		}

		public uint m_player2_account_id
		{
			get{ return _m_player2_account_id.member_value; }
			set{ _m_player2_account_id.member_value = value; }
		}
		public bool has_m_player2_account_id
		{
			get{ return _m_player2_account_id.has_value; }
		}

		public uint m_player2_actorid
		{
			get{ return _m_player2_actorid.member_value; }
			set{ _m_player2_actorid.member_value = value; }
		}
		public bool has_m_player2_actorid
		{
			get{ return _m_player2_actorid.has_value; }
		}

		public uint m_chess_id
		{
			get{ return _m_chess_id.member_value; }
			set{ _m_chess_id.member_value = value; }
		}
		public bool has_m_chess_id
		{
			get{ return _m_chess_id.has_value; }
		}

		public uint m_gloden_dices
		{
			get{ return _m_gloden_dices.member_value; }
			set{ _m_gloden_dices.member_value = value; }
		}
		public bool has_m_gloden_dices
		{
			get{ return _m_gloden_dices.has_value; }
		}

		public uint m_common_dices
		{
			get{ return _m_common_dices.member_value; }
			set{ _m_common_dices.member_value = value; }
		}
		public bool has_m_common_dices
		{
			get{ return _m_common_dices.has_value; }
		}

		public uint m_remain_secs
		{
			get{ return _m_remain_secs.member_value; }
			set{ _m_remain_secs.member_value = value; }
		}
		public bool has_m_remain_secs
		{
			get{ return _m_remain_secs.has_value; }
		}

		public System.Collections.Generic.List<uint> m_default_props
		{
			get{ return _m_default_props.member_value; }
		}
		public bool has_m_default_props
		{
			get{ return _m_default_props.has_value; }
		}

		public System.Collections.Generic.List<ChessStep> m_chess_steps
		{
			get{ return _m_chess_steps.member_value; }
		}
		public bool has_m_chess_steps
		{
			get{ return _m_chess_steps.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_player1_server_id.Serialize(_m_player1_server_id.member_value, ref out_stream);

			count += _m_player1_account_id.Serialize(_m_player1_account_id.member_value, ref out_stream);

			count += _m_player1_actorid.Serialize(_m_player1_actorid.member_value, ref out_stream);

			count += _m_player2_server_id.Serialize(_m_player2_server_id.member_value, ref out_stream);

			count += _m_player2_account_id.Serialize(_m_player2_account_id.member_value, ref out_stream);

			count += _m_player2_actorid.Serialize(_m_player2_actorid.member_value, ref out_stream);

			count += _m_chess_id.Serialize(_m_chess_id.member_value, ref out_stream);

			count += _m_gloden_dices.Serialize(_m_gloden_dices.member_value, ref out_stream);

			count += _m_common_dices.Serialize(_m_common_dices.member_value, ref out_stream);

			count += _m_remain_secs.Serialize(_m_remain_secs.member_value, ref out_stream);

			foreach(uint one_member_value in _m_default_props.member_value)
			{
				count += _m_default_props.Serialize(one_member_value, ref out_stream);
			}

			foreach(ChessStep one_member_value in _m_chess_steps.member_value)
			{
				count += _m_chess_steps.Serialize(one_member_value, ref out_stream);
			}

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_player1_server_id = 0;
			one_count = _m_player1_server_id.ParseFrom(ref temp_m_player1_server_id, ref int_stream);
			if (0 < one_count)
			{
					_m_player1_server_id.member_value = temp_m_player1_server_id;
					count = count + one_count;
			}

			uint temp_m_player1_account_id = 0;
			one_count = _m_player1_account_id.ParseFrom(ref temp_m_player1_account_id, ref int_stream);
			if (0 < one_count)
			{
					_m_player1_account_id.member_value = temp_m_player1_account_id;
					count = count + one_count;
			}

			uint temp_m_player1_actorid = 0;
			one_count = _m_player1_actorid.ParseFrom(ref temp_m_player1_actorid, ref int_stream);
			if (0 < one_count)
			{
					_m_player1_actorid.member_value = temp_m_player1_actorid;
					count = count + one_count;
			}

			uint temp_m_player2_server_id = 0;
			one_count = _m_player2_server_id.ParseFrom(ref temp_m_player2_server_id, ref int_stream);
			if (0 < one_count)
			{
					_m_player2_server_id.member_value = temp_m_player2_server_id;
					count = count + one_count;
			}

			uint temp_m_player2_account_id = 0;
			one_count = _m_player2_account_id.ParseFrom(ref temp_m_player2_account_id, ref int_stream);
			if (0 < one_count)
			{
					_m_player2_account_id.member_value = temp_m_player2_account_id;
					count = count + one_count;
			}

			uint temp_m_player2_actorid = 0;
			one_count = _m_player2_actorid.ParseFrom(ref temp_m_player2_actorid, ref int_stream);
			if (0 < one_count)
			{
					_m_player2_actorid.member_value = temp_m_player2_actorid;
					count = count + one_count;
			}

			uint temp_m_chess_id = 0;
			one_count = _m_chess_id.ParseFrom(ref temp_m_chess_id, ref int_stream);
			if (0 < one_count)
			{
					_m_chess_id.member_value = temp_m_chess_id;
					count = count + one_count;
			}

			uint temp_m_gloden_dices = 0;
			one_count = _m_gloden_dices.ParseFrom(ref temp_m_gloden_dices, ref int_stream);
			if (0 < one_count)
			{
					_m_gloden_dices.member_value = temp_m_gloden_dices;
					count = count + one_count;
			}

			uint temp_m_common_dices = 0;
			one_count = _m_common_dices.ParseFrom(ref temp_m_common_dices, ref int_stream);
			if (0 < one_count)
			{
					_m_common_dices.member_value = temp_m_common_dices;
					count = count + one_count;
			}

			uint temp_m_remain_secs = 0;
			one_count = _m_remain_secs.ParseFrom(ref temp_m_remain_secs, ref int_stream);
			if (0 < one_count)
			{
					_m_remain_secs.member_value = temp_m_remain_secs;
					count = count + one_count;
			}

			while (true)
			{
				uint one_member_value = 0;
				one_count = _m_default_props.ParseFrom(ref one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_default_props.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			while (true)
			{
				ChessStep one_member_value = new ChessStep();
				one_count = _m_chess_steps.ParseFrom(one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_chess_steps.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			return count;
		}
	}

	public class Msg_Battle2Client_StarChess_ChessPlayerInfo : IMessage
	{
		private ProtoMemberUInt32 _m_server_id;	
		private ProtoMemberUInt32 _m_account_id;	
		private ProtoMemberUInt32 _m_chess_id;	
		private ProtoMemberUInt32 _m_cur_step;	
		private ProtoMemberUInt32 _m_remain_secs;	
		private ProtoMemberUInt32 _m_comm_dices;	
		private ProtoMemberUInt32 _m_gloden_dices;	
		private ProtoMemberUInt32 _m_reward_exp;	
		private ProtoMemberUInt32 _m_reward_money;	
		private ProtoMemberEnum<ChessResultType> _m_chess_result;	
		private ProtoMemberEmbeddedList<StarChessStepInfo> _m_step_list;	//当前投掷骰子后的步顺序
		private ProtoMemberEmbeddedList<StarChessActionStatus> _m_status_list;	//状态
		private ProtoMemberUInt32 _m_pvpbattle_result;	//PVP战斗结果（0未开占，1战胜，2战败）
		private ProtoMemberUInt32 _m_latest_client_random;	//客户端最近的一次的骰子随机数
		private ProtoMemberUInt32 _m_propitem_1;	//道具位1上的道具ID
		private ProtoMemberUInt32 _m_propitem_2;	//道具位2上的道具ID
		private ProtoMemberUInt32 _m_propitem_3;	//道具位3上的道具ID

		public Msg_Battle2Client_StarChess_ChessPlayerInfo()
		{
			_m_server_id = new ProtoMemberUInt32(1, true);
			_m_account_id = new ProtoMemberUInt32(2, true);
			_m_chess_id = new ProtoMemberUInt32(3, true);
			_m_cur_step = new ProtoMemberUInt32(4, true);
			_m_remain_secs = new ProtoMemberUInt32(5, true);
			_m_comm_dices = new ProtoMemberUInt32(6, true);
			_m_gloden_dices = new ProtoMemberUInt32(7, true);
			_m_reward_exp = new ProtoMemberUInt32(8, true);
			_m_reward_money = new ProtoMemberUInt32(9, true);
			_m_chess_result = new ProtoMemberEnum<ChessResultType>(10, true);
			_m_step_list = new ProtoMemberEmbeddedList<StarChessStepInfo>(11, false);
			_m_status_list = new ProtoMemberEmbeddedList<StarChessActionStatus>(12, false);
			_m_pvpbattle_result = new ProtoMemberUInt32(13, false);
			_m_latest_client_random = new ProtoMemberUInt32(14, false);
			_m_propitem_1 = new ProtoMemberUInt32(15, true);
			_m_propitem_2 = new ProtoMemberUInt32(16, true);
			_m_propitem_3 = new ProtoMemberUInt32(17, true);
		}

		public Msg_Battle2Client_StarChess_ChessPlayerInfo(uint __m_server_id, uint __m_account_id, uint __m_chess_id, uint __m_cur_step, uint __m_remain_secs, uint __m_comm_dices, uint __m_gloden_dices, uint __m_reward_exp, uint __m_reward_money, ChessResultType __m_chess_result, uint __m_pvpbattle_result, uint __m_latest_client_random, uint __m_propitem_1, uint __m_propitem_2, uint __m_propitem_3)
		{
			_m_server_id = new ProtoMemberUInt32(1, true);
			_m_server_id.member_value = __m_server_id;
			_m_account_id = new ProtoMemberUInt32(2, true);
			_m_account_id.member_value = __m_account_id;
			_m_chess_id = new ProtoMemberUInt32(3, true);
			_m_chess_id.member_value = __m_chess_id;
			_m_cur_step = new ProtoMemberUInt32(4, true);
			_m_cur_step.member_value = __m_cur_step;
			_m_remain_secs = new ProtoMemberUInt32(5, true);
			_m_remain_secs.member_value = __m_remain_secs;
			_m_comm_dices = new ProtoMemberUInt32(6, true);
			_m_comm_dices.member_value = __m_comm_dices;
			_m_gloden_dices = new ProtoMemberUInt32(7, true);
			_m_gloden_dices.member_value = __m_gloden_dices;
			_m_reward_exp = new ProtoMemberUInt32(8, true);
			_m_reward_exp.member_value = __m_reward_exp;
			_m_reward_money = new ProtoMemberUInt32(9, true);
			_m_reward_money.member_value = __m_reward_money;
			_m_chess_result = new ProtoMemberEnum<ChessResultType>(10, true);
			_m_chess_result.member_value = __m_chess_result;
			_m_step_list = new ProtoMemberEmbeddedList<StarChessStepInfo>(11, false);
			_m_status_list = new ProtoMemberEmbeddedList<StarChessActionStatus>(12, false);
			_m_pvpbattle_result = new ProtoMemberUInt32(13, false);
			_m_pvpbattle_result.member_value = __m_pvpbattle_result;
			_m_latest_client_random = new ProtoMemberUInt32(14, false);
			_m_latest_client_random.member_value = __m_latest_client_random;
			_m_propitem_1 = new ProtoMemberUInt32(15, true);
			_m_propitem_1.member_value = __m_propitem_1;
			_m_propitem_2 = new ProtoMemberUInt32(16, true);
			_m_propitem_2.member_value = __m_propitem_2;
			_m_propitem_3 = new ProtoMemberUInt32(17, true);
			_m_propitem_3.member_value = __m_propitem_3;
		}

		public uint m_server_id
		{
			get{ return _m_server_id.member_value; }
			set{ _m_server_id.member_value = value; }
		}
		public bool has_m_server_id
		{
			get{ return _m_server_id.has_value; }
		}

		public uint m_account_id
		{
			get{ return _m_account_id.member_value; }
			set{ _m_account_id.member_value = value; }
		}
		public bool has_m_account_id
		{
			get{ return _m_account_id.has_value; }
		}

		public uint m_chess_id
		{
			get{ return _m_chess_id.member_value; }
			set{ _m_chess_id.member_value = value; }
		}
		public bool has_m_chess_id
		{
			get{ return _m_chess_id.has_value; }
		}

		public uint m_cur_step
		{
			get{ return _m_cur_step.member_value; }
			set{ _m_cur_step.member_value = value; }
		}
		public bool has_m_cur_step
		{
			get{ return _m_cur_step.has_value; }
		}

		public uint m_remain_secs
		{
			get{ return _m_remain_secs.member_value; }
			set{ _m_remain_secs.member_value = value; }
		}
		public bool has_m_remain_secs
		{
			get{ return _m_remain_secs.has_value; }
		}

		public uint m_comm_dices
		{
			get{ return _m_comm_dices.member_value; }
			set{ _m_comm_dices.member_value = value; }
		}
		public bool has_m_comm_dices
		{
			get{ return _m_comm_dices.has_value; }
		}

		public uint m_gloden_dices
		{
			get{ return _m_gloden_dices.member_value; }
			set{ _m_gloden_dices.member_value = value; }
		}
		public bool has_m_gloden_dices
		{
			get{ return _m_gloden_dices.has_value; }
		}

		public uint m_reward_exp
		{
			get{ return _m_reward_exp.member_value; }
			set{ _m_reward_exp.member_value = value; }
		}
		public bool has_m_reward_exp
		{
			get{ return _m_reward_exp.has_value; }
		}

		public uint m_reward_money
		{
			get{ return _m_reward_money.member_value; }
			set{ _m_reward_money.member_value = value; }
		}
		public bool has_m_reward_money
		{
			get{ return _m_reward_money.has_value; }
		}

		public ChessResultType m_chess_result
		{
			get{ return _m_chess_result.member_value; }
			set{ _m_chess_result.member_value = value; }
		}
		public bool has_m_chess_result
		{
			get{ return _m_chess_result.has_value; }
		}

		public System.Collections.Generic.List<StarChessStepInfo> m_step_list
		{
			get{ return _m_step_list.member_value; }
		}
		public bool has_m_step_list
		{
			get{ return _m_step_list.has_value; }
		}

		public System.Collections.Generic.List<StarChessActionStatus> m_status_list
		{
			get{ return _m_status_list.member_value; }
		}
		public bool has_m_status_list
		{
			get{ return _m_status_list.has_value; }
		}

		public uint m_pvpbattle_result
		{
			get{ return _m_pvpbattle_result.member_value; }
			set{ _m_pvpbattle_result.member_value = value; }
		}
		public bool has_m_pvpbattle_result
		{
			get{ return _m_pvpbattle_result.has_value; }
		}

		public uint m_latest_client_random
		{
			get{ return _m_latest_client_random.member_value; }
			set{ _m_latest_client_random.member_value = value; }
		}
		public bool has_m_latest_client_random
		{
			get{ return _m_latest_client_random.has_value; }
		}

		public uint m_propitem_1
		{
			get{ return _m_propitem_1.member_value; }
			set{ _m_propitem_1.member_value = value; }
		}
		public bool has_m_propitem_1
		{
			get{ return _m_propitem_1.has_value; }
		}

		public uint m_propitem_2
		{
			get{ return _m_propitem_2.member_value; }
			set{ _m_propitem_2.member_value = value; }
		}
		public bool has_m_propitem_2
		{
			get{ return _m_propitem_2.has_value; }
		}

		public uint m_propitem_3
		{
			get{ return _m_propitem_3.member_value; }
			set{ _m_propitem_3.member_value = value; }
		}
		public bool has_m_propitem_3
		{
			get{ return _m_propitem_3.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_server_id.Serialize(_m_server_id.member_value, ref out_stream);

			count += _m_account_id.Serialize(_m_account_id.member_value, ref out_stream);

			count += _m_chess_id.Serialize(_m_chess_id.member_value, ref out_stream);

			count += _m_cur_step.Serialize(_m_cur_step.member_value, ref out_stream);

			count += _m_remain_secs.Serialize(_m_remain_secs.member_value, ref out_stream);

			count += _m_comm_dices.Serialize(_m_comm_dices.member_value, ref out_stream);

			count += _m_gloden_dices.Serialize(_m_gloden_dices.member_value, ref out_stream);

			count += _m_reward_exp.Serialize(_m_reward_exp.member_value, ref out_stream);

			count += _m_reward_money.Serialize(_m_reward_money.member_value, ref out_stream);

			count += _m_chess_result.Serialize((uint)_m_chess_result.member_value, ref out_stream);

			foreach(StarChessStepInfo one_member_value in _m_step_list.member_value)
			{
				count += _m_step_list.Serialize(one_member_value, ref out_stream);
			}

			foreach(StarChessActionStatus one_member_value in _m_status_list.member_value)
			{
				count += _m_status_list.Serialize(one_member_value, ref out_stream);
			}

			count += _m_pvpbattle_result.Serialize(_m_pvpbattle_result.member_value, ref out_stream);

			count += _m_latest_client_random.Serialize(_m_latest_client_random.member_value, ref out_stream);

			count += _m_propitem_1.Serialize(_m_propitem_1.member_value, ref out_stream);

			count += _m_propitem_2.Serialize(_m_propitem_2.member_value, ref out_stream);

			count += _m_propitem_3.Serialize(_m_propitem_3.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_server_id = 0;
			one_count = _m_server_id.ParseFrom(ref temp_m_server_id, ref int_stream);
			if (0 < one_count)
			{
					_m_server_id.member_value = temp_m_server_id;
					count = count + one_count;
			}

			uint temp_m_account_id = 0;
			one_count = _m_account_id.ParseFrom(ref temp_m_account_id, ref int_stream);
			if (0 < one_count)
			{
					_m_account_id.member_value = temp_m_account_id;
					count = count + one_count;
			}

			uint temp_m_chess_id = 0;
			one_count = _m_chess_id.ParseFrom(ref temp_m_chess_id, ref int_stream);
			if (0 < one_count)
			{
					_m_chess_id.member_value = temp_m_chess_id;
					count = count + one_count;
			}

			uint temp_m_cur_step = 0;
			one_count = _m_cur_step.ParseFrom(ref temp_m_cur_step, ref int_stream);
			if (0 < one_count)
			{
					_m_cur_step.member_value = temp_m_cur_step;
					count = count + one_count;
			}

			uint temp_m_remain_secs = 0;
			one_count = _m_remain_secs.ParseFrom(ref temp_m_remain_secs, ref int_stream);
			if (0 < one_count)
			{
					_m_remain_secs.member_value = temp_m_remain_secs;
					count = count + one_count;
			}

			uint temp_m_comm_dices = 0;
			one_count = _m_comm_dices.ParseFrom(ref temp_m_comm_dices, ref int_stream);
			if (0 < one_count)
			{
					_m_comm_dices.member_value = temp_m_comm_dices;
					count = count + one_count;
			}

			uint temp_m_gloden_dices = 0;
			one_count = _m_gloden_dices.ParseFrom(ref temp_m_gloden_dices, ref int_stream);
			if (0 < one_count)
			{
					_m_gloden_dices.member_value = temp_m_gloden_dices;
					count = count + one_count;
			}

			uint temp_m_reward_exp = 0;
			one_count = _m_reward_exp.ParseFrom(ref temp_m_reward_exp, ref int_stream);
			if (0 < one_count)
			{
					_m_reward_exp.member_value = temp_m_reward_exp;
					count = count + one_count;
			}

			uint temp_m_reward_money = 0;
			one_count = _m_reward_money.ParseFrom(ref temp_m_reward_money, ref int_stream);
			if (0 < one_count)
			{
					_m_reward_money.member_value = temp_m_reward_money;
					count = count + one_count;
			}

			uint temp_m_chess_result = 0;
			one_count = _m_chess_result.ParseFrom(ref temp_m_chess_result, ref int_stream);
			if (0 < one_count)
			{
					_m_chess_result.member_value = (ChessResultType)temp_m_chess_result;
					count = count + one_count;
			}

			while (true)
			{
				StarChessStepInfo one_member_value = new StarChessStepInfo();
				one_count = _m_step_list.ParseFrom(one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_step_list.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			while (true)
			{
				StarChessActionStatus one_member_value = new StarChessActionStatus();
				one_count = _m_status_list.ParseFrom(one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_status_list.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			uint temp_m_pvpbattle_result = 0;
			one_count = _m_pvpbattle_result.ParseFrom(ref temp_m_pvpbattle_result, ref int_stream);
			if (0 < one_count)
			{
					_m_pvpbattle_result.member_value = temp_m_pvpbattle_result;
					count = count + one_count;
			}

			uint temp_m_latest_client_random = 0;
			one_count = _m_latest_client_random.ParseFrom(ref temp_m_latest_client_random, ref int_stream);
			if (0 < one_count)
			{
					_m_latest_client_random.member_value = temp_m_latest_client_random;
					count = count + one_count;
			}

			uint temp_m_propitem_1 = 0;
			one_count = _m_propitem_1.ParseFrom(ref temp_m_propitem_1, ref int_stream);
			if (0 < one_count)
			{
					_m_propitem_1.member_value = temp_m_propitem_1;
					count = count + one_count;
			}

			uint temp_m_propitem_2 = 0;
			one_count = _m_propitem_2.ParseFrom(ref temp_m_propitem_2, ref int_stream);
			if (0 < one_count)
			{
					_m_propitem_2.member_value = temp_m_propitem_2;
					count = count + one_count;
			}

			uint temp_m_propitem_3 = 0;
			one_count = _m_propitem_3.ParseFrom(ref temp_m_propitem_3, ref int_stream);
			if (0 < one_count)
			{
					_m_propitem_3.member_value = temp_m_propitem_3;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Battle2Client_StarChess_ChessPlayerInfo_List : IMessage
	{
		private ProtoMemberEmbeddedList<Msg_Battle2Client_StarChess_ChessPlayerInfo> _m_player_list;	
		private ProtoMemberUInt32 _m_update_reason;	//更新原因(0投骰子，1使用道具，2战斗，3超时结束)
		private ProtoMemberUInt32 _m_reason_server_id;	//操作方服ID
		private ProtoMemberUInt32 _m_reason_account_id;	//操作方帐号ID
		private ProtoMemberUInt32 _m_operat_param;	//操作参数(骰子数，道具ID)

		public Msg_Battle2Client_StarChess_ChessPlayerInfo_List()
		{
			_m_player_list = new ProtoMemberEmbeddedList<Msg_Battle2Client_StarChess_ChessPlayerInfo>(1, false);
			_m_update_reason = new ProtoMemberUInt32(2, true);
			_m_reason_server_id = new ProtoMemberUInt32(3, true);
			_m_reason_account_id = new ProtoMemberUInt32(4, true);
			_m_operat_param = new ProtoMemberUInt32(5, true);
		}

		public Msg_Battle2Client_StarChess_ChessPlayerInfo_List(uint __m_update_reason, uint __m_reason_server_id, uint __m_reason_account_id, uint __m_operat_param)
		{
			_m_player_list = new ProtoMemberEmbeddedList<Msg_Battle2Client_StarChess_ChessPlayerInfo>(1, false);
			_m_update_reason = new ProtoMemberUInt32(2, true);
			_m_update_reason.member_value = __m_update_reason;
			_m_reason_server_id = new ProtoMemberUInt32(3, true);
			_m_reason_server_id.member_value = __m_reason_server_id;
			_m_reason_account_id = new ProtoMemberUInt32(4, true);
			_m_reason_account_id.member_value = __m_reason_account_id;
			_m_operat_param = new ProtoMemberUInt32(5, true);
			_m_operat_param.member_value = __m_operat_param;
		}

		public System.Collections.Generic.List<Msg_Battle2Client_StarChess_ChessPlayerInfo> m_player_list
		{
			get{ return _m_player_list.member_value; }
		}
		public bool has_m_player_list
		{
			get{ return _m_player_list.has_value; }
		}

		public uint m_update_reason
		{
			get{ return _m_update_reason.member_value; }
			set{ _m_update_reason.member_value = value; }
		}
		public bool has_m_update_reason
		{
			get{ return _m_update_reason.has_value; }
		}

		public uint m_reason_server_id
		{
			get{ return _m_reason_server_id.member_value; }
			set{ _m_reason_server_id.member_value = value; }
		}
		public bool has_m_reason_server_id
		{
			get{ return _m_reason_server_id.has_value; }
		}

		public uint m_reason_account_id
		{
			get{ return _m_reason_account_id.member_value; }
			set{ _m_reason_account_id.member_value = value; }
		}
		public bool has_m_reason_account_id
		{
			get{ return _m_reason_account_id.has_value; }
		}

		public uint m_operat_param
		{
			get{ return _m_operat_param.member_value; }
			set{ _m_operat_param.member_value = value; }
		}
		public bool has_m_operat_param
		{
			get{ return _m_operat_param.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			foreach(Msg_Battle2Client_StarChess_ChessPlayerInfo one_member_value in _m_player_list.member_value)
			{
				count += _m_player_list.Serialize(one_member_value, ref out_stream);
			}

			count += _m_update_reason.Serialize(_m_update_reason.member_value, ref out_stream);

			count += _m_reason_server_id.Serialize(_m_reason_server_id.member_value, ref out_stream);

			count += _m_reason_account_id.Serialize(_m_reason_account_id.member_value, ref out_stream);

			count += _m_operat_param.Serialize(_m_operat_param.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			while (true)
			{
				Msg_Battle2Client_StarChess_ChessPlayerInfo one_member_value = new Msg_Battle2Client_StarChess_ChessPlayerInfo();
				one_count = _m_player_list.ParseFrom(one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_player_list.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			uint temp_m_update_reason = 0;
			one_count = _m_update_reason.ParseFrom(ref temp_m_update_reason, ref int_stream);
			if (0 < one_count)
			{
					_m_update_reason.member_value = temp_m_update_reason;
					count = count + one_count;
			}

			uint temp_m_reason_server_id = 0;
			one_count = _m_reason_server_id.ParseFrom(ref temp_m_reason_server_id, ref int_stream);
			if (0 < one_count)
			{
					_m_reason_server_id.member_value = temp_m_reason_server_id;
					count = count + one_count;
			}

			uint temp_m_reason_account_id = 0;
			one_count = _m_reason_account_id.ParseFrom(ref temp_m_reason_account_id, ref int_stream);
			if (0 < one_count)
			{
					_m_reason_account_id.member_value = temp_m_reason_account_id;
					count = count + one_count;
			}

			uint temp_m_operat_param = 0;
			one_count = _m_operat_param.ParseFrom(ref temp_m_operat_param, ref int_stream);
			if (0 < one_count)
			{
					_m_operat_param.member_value = temp_m_operat_param;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Battle2Client_StarChess_SelHero : IMessage
	{
		private ProtoMemberUInt32 _m_player_server_id;	
		private ProtoMemberUInt32 _m_player_account_id;	
		private ProtoMemberUInt32 _m_step;	//步子
		private ProtoMemberUInt32 _m_hero_index;	//0~2

		public Msg_Battle2Client_StarChess_SelHero()
		{
			_m_player_server_id = new ProtoMemberUInt32(1, true);
			_m_player_account_id = new ProtoMemberUInt32(2, true);
			_m_step = new ProtoMemberUInt32(3, true);
			_m_hero_index = new ProtoMemberUInt32(4, true);
		}

		public Msg_Battle2Client_StarChess_SelHero(uint __m_player_server_id, uint __m_player_account_id, uint __m_step, uint __m_hero_index)
		{
			_m_player_server_id = new ProtoMemberUInt32(1, true);
			_m_player_server_id.member_value = __m_player_server_id;
			_m_player_account_id = new ProtoMemberUInt32(2, true);
			_m_player_account_id.member_value = __m_player_account_id;
			_m_step = new ProtoMemberUInt32(3, true);
			_m_step.member_value = __m_step;
			_m_hero_index = new ProtoMemberUInt32(4, true);
			_m_hero_index.member_value = __m_hero_index;
		}

		public uint m_player_server_id
		{
			get{ return _m_player_server_id.member_value; }
			set{ _m_player_server_id.member_value = value; }
		}
		public bool has_m_player_server_id
		{
			get{ return _m_player_server_id.has_value; }
		}

		public uint m_player_account_id
		{
			get{ return _m_player_account_id.member_value; }
			set{ _m_player_account_id.member_value = value; }
		}
		public bool has_m_player_account_id
		{
			get{ return _m_player_account_id.has_value; }
		}

		public uint m_step
		{
			get{ return _m_step.member_value; }
			set{ _m_step.member_value = value; }
		}
		public bool has_m_step
		{
			get{ return _m_step.has_value; }
		}

		public uint m_hero_index
		{
			get{ return _m_hero_index.member_value; }
			set{ _m_hero_index.member_value = value; }
		}
		public bool has_m_hero_index
		{
			get{ return _m_hero_index.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_player_server_id.Serialize(_m_player_server_id.member_value, ref out_stream);

			count += _m_player_account_id.Serialize(_m_player_account_id.member_value, ref out_stream);

			count += _m_step.Serialize(_m_step.member_value, ref out_stream);

			count += _m_hero_index.Serialize(_m_hero_index.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_player_server_id = 0;
			one_count = _m_player_server_id.ParseFrom(ref temp_m_player_server_id, ref int_stream);
			if (0 < one_count)
			{
					_m_player_server_id.member_value = temp_m_player_server_id;
					count = count + one_count;
			}

			uint temp_m_player_account_id = 0;
			one_count = _m_player_account_id.ParseFrom(ref temp_m_player_account_id, ref int_stream);
			if (0 < one_count)
			{
					_m_player_account_id.member_value = temp_m_player_account_id;
					count = count + one_count;
			}

			uint temp_m_step = 0;
			one_count = _m_step.ParseFrom(ref temp_m_step, ref int_stream);
			if (0 < one_count)
			{
					_m_step.member_value = temp_m_step;
					count = count + one_count;
			}

			uint temp_m_hero_index = 0;
			one_count = _m_hero_index.ParseFrom(ref temp_m_hero_index, ref int_stream);
			if (0 < one_count)
			{
					_m_hero_index.member_value = temp_m_hero_index;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Battle2Client_StatusProc : IMessage
	{
		private ProtoMemberUInt32 _m_unit_guid;	
		private ProtoMemberUInt32 _m_proc_type;	//0添加，1是删除, 2是更新(持续时间)
		private ProtoMemberUInt32 _m_status_index;	//从1开始自增的统一编号
		private ProtoMemberUInt32 _m_remain_milsecs;	//持续时间（毫秒）
		private ProtoMemberUInt32 _m_buff_id;	//buff表里的ID，无则就是SkillEnum.cs文件里的SkillResultType
		private ProtoMemberUInt32 _m_skill_id;	//属于哪个技能的

		public Msg_Battle2Client_StatusProc()
		{
			_m_unit_guid = new ProtoMemberUInt32(1, true);
			_m_proc_type = new ProtoMemberUInt32(2, true);
			_m_status_index = new ProtoMemberUInt32(3, true);
			_m_remain_milsecs = new ProtoMemberUInt32(4, true);
			_m_buff_id = new ProtoMemberUInt32(5, true);
			_m_skill_id = new ProtoMemberUInt32(6, false);
		}

		public Msg_Battle2Client_StatusProc(uint __m_unit_guid, uint __m_proc_type, uint __m_status_index, uint __m_remain_milsecs, uint __m_buff_id, uint __m_skill_id)
		{
			_m_unit_guid = new ProtoMemberUInt32(1, true);
			_m_unit_guid.member_value = __m_unit_guid;
			_m_proc_type = new ProtoMemberUInt32(2, true);
			_m_proc_type.member_value = __m_proc_type;
			_m_status_index = new ProtoMemberUInt32(3, true);
			_m_status_index.member_value = __m_status_index;
			_m_remain_milsecs = new ProtoMemberUInt32(4, true);
			_m_remain_milsecs.member_value = __m_remain_milsecs;
			_m_buff_id = new ProtoMemberUInt32(5, true);
			_m_buff_id.member_value = __m_buff_id;
			_m_skill_id = new ProtoMemberUInt32(6, false);
			_m_skill_id.member_value = __m_skill_id;
		}

		public uint m_unit_guid
		{
			get{ return _m_unit_guid.member_value; }
			set{ _m_unit_guid.member_value = value; }
		}
		public bool has_m_unit_guid
		{
			get{ return _m_unit_guid.has_value; }
		}

		public uint m_proc_type
		{
			get{ return _m_proc_type.member_value; }
			set{ _m_proc_type.member_value = value; }
		}
		public bool has_m_proc_type
		{
			get{ return _m_proc_type.has_value; }
		}

		public uint m_status_index
		{
			get{ return _m_status_index.member_value; }
			set{ _m_status_index.member_value = value; }
		}
		public bool has_m_status_index
		{
			get{ return _m_status_index.has_value; }
		}

		public uint m_remain_milsecs
		{
			get{ return _m_remain_milsecs.member_value; }
			set{ _m_remain_milsecs.member_value = value; }
		}
		public bool has_m_remain_milsecs
		{
			get{ return _m_remain_milsecs.has_value; }
		}

		public uint m_buff_id
		{
			get{ return _m_buff_id.member_value; }
			set{ _m_buff_id.member_value = value; }
		}
		public bool has_m_buff_id
		{
			get{ return _m_buff_id.has_value; }
		}

		public uint m_skill_id
		{
			get{ return _m_skill_id.member_value; }
			set{ _m_skill_id.member_value = value; }
		}
		public bool has_m_skill_id
		{
			get{ return _m_skill_id.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_unit_guid.Serialize(_m_unit_guid.member_value, ref out_stream);

			count += _m_proc_type.Serialize(_m_proc_type.member_value, ref out_stream);

			count += _m_status_index.Serialize(_m_status_index.member_value, ref out_stream);

			count += _m_remain_milsecs.Serialize(_m_remain_milsecs.member_value, ref out_stream);

			count += _m_buff_id.Serialize(_m_buff_id.member_value, ref out_stream);

			count += _m_skill_id.Serialize(_m_skill_id.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_unit_guid = 0;
			one_count = _m_unit_guid.ParseFrom(ref temp_m_unit_guid, ref int_stream);
			if (0 < one_count)
			{
					_m_unit_guid.member_value = temp_m_unit_guid;
					count = count + one_count;
			}

			uint temp_m_proc_type = 0;
			one_count = _m_proc_type.ParseFrom(ref temp_m_proc_type, ref int_stream);
			if (0 < one_count)
			{
					_m_proc_type.member_value = temp_m_proc_type;
					count = count + one_count;
			}

			uint temp_m_status_index = 0;
			one_count = _m_status_index.ParseFrom(ref temp_m_status_index, ref int_stream);
			if (0 < one_count)
			{
					_m_status_index.member_value = temp_m_status_index;
					count = count + one_count;
			}

			uint temp_m_remain_milsecs = 0;
			one_count = _m_remain_milsecs.ParseFrom(ref temp_m_remain_milsecs, ref int_stream);
			if (0 < one_count)
			{
					_m_remain_milsecs.member_value = temp_m_remain_milsecs;
					count = count + one_count;
			}

			uint temp_m_buff_id = 0;
			one_count = _m_buff_id.ParseFrom(ref temp_m_buff_id, ref int_stream);
			if (0 < one_count)
			{
					_m_buff_id.member_value = temp_m_buff_id;
					count = count + one_count;
			}

			uint temp_m_skill_id = 0;
			one_count = _m_skill_id.ParseFrom(ref temp_m_skill_id, ref int_stream);
			if (0 < one_count)
			{
					_m_skill_id.member_value = temp_m_skill_id;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Battle2Client_SyncUnitHp : IMessage
	{
		private ProtoMemberEmbedded<BattleAllHp> _m_allhps;	

		public Msg_Battle2Client_SyncUnitHp()
		{
			_m_allhps = new ProtoMemberEmbedded<BattleAllHp>(1, true);
			_m_allhps.member_value = new BattleAllHp();
		}

		public BattleAllHp m_allhps
		{
			get{ return _m_allhps.member_value as BattleAllHp; }
			set{ _m_allhps.member_value = value; }
		}
		public bool has_m_allhps
		{
			get{ return _m_allhps.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_allhps.Serialize(_m_allhps.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			BattleAllHp temp_m_allhps = new BattleAllHp();
			one_count = _m_allhps.ParseFrom(temp_m_allhps, ref int_stream);
			if (0 < one_count)
			{
					_m_allhps.member_value = temp_m_allhps;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Battle2Client_SyncUnitPos : IMessage
	{
		private ProtoMemberUInt32 _m_sceneid;	//场景ID
		private ProtoMemberEmbeddedList<BattleLocation> _m_locations;	//生物位置

		public Msg_Battle2Client_SyncUnitPos()
		{
			_m_sceneid = new ProtoMemberUInt32(1, true);
			_m_locations = new ProtoMemberEmbeddedList<BattleLocation>(2, false);
		}

		public Msg_Battle2Client_SyncUnitPos(uint __m_sceneid)
		{
			_m_sceneid = new ProtoMemberUInt32(1, true);
			_m_sceneid.member_value = __m_sceneid;
			_m_locations = new ProtoMemberEmbeddedList<BattleLocation>(2, false);
		}

		public uint m_sceneid
		{
			get{ return _m_sceneid.member_value; }
			set{ _m_sceneid.member_value = value; }
		}
		public bool has_m_sceneid
		{
			get{ return _m_sceneid.has_value; }
		}

		public System.Collections.Generic.List<BattleLocation> m_locations
		{
			get{ return _m_locations.member_value; }
		}
		public bool has_m_locations
		{
			get{ return _m_locations.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_sceneid.Serialize(_m_sceneid.member_value, ref out_stream);

			foreach(BattleLocation one_member_value in _m_locations.member_value)
			{
				count += _m_locations.Serialize(one_member_value, ref out_stream);
			}

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_sceneid = 0;
			one_count = _m_sceneid.ParseFrom(ref temp_m_sceneid, ref int_stream);
			if (0 < one_count)
			{
					_m_sceneid.member_value = temp_m_sceneid;
					count = count + one_count;
			}

			while (true)
			{
				BattleLocation one_member_value = new BattleLocation();
				one_count = _m_locations.ParseFrom(one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_locations.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			return count;
		}
	}

	public class Msg_Battle2Logic_AttackBegin_Res : IMessage
	{
		private ProtoMemberEnum<BattleSvrRes> _m_res;	//关卡挑战总结果（是否开成功，战斗胜/负）
		private ProtoMemberUInt64 _m_team_id;	//队伍ID
		private ProtoMemberUInt32 _m_dungeon_id;	//关卡ID
		private ProtoMemberEmbeddedList<HeroBattleResult> _m_heros_res;	//各英雄的存亡情况
		private ProtoMemberEmbeddedList<PlyKilMstCnt> _m_kilmst_cnt;	//玩家杀怪数
		private ProtoMemberEnum<PlayerTeamType> _m_team_type;	//队伍类型
		private ProtoMemberUInt32 _m_less_money;	//奖励较少金钱次数
		private ProtoMemberUInt32 _m_more_money;	//奖励较多金钱次数
		private ProtoMemberUInt32 _m_less_exp;	//奖励较少经验次数
		private ProtoMemberUInt32 _m_more_exp;	//奖励较多经验次数
		private ProtoMemberEmbeddedList<PlayerItemInfo> _m_reward_item_list;	//奖励道具
		private ProtoMemberUInt32 _m_extern_value1;	//额外值1(星空迷棋总步数)
		private ProtoMemberUInt32 _m_extern_value2;	//额外值2(星空迷棋总消耗秒数)
		private ProtoMemberEmbeddedList<Actor2Count> _m_kilmst_actor2cnt;	//玩家杀怪数(按类型统计)
		private ProtoMemberUInt32 _m_kill_enemyhero;	//PVP时杀死的敌方英雄数
		private ProtoMemberUInt32 _m_extreme_hard_lv;	//极限试炼的难度

		public Msg_Battle2Logic_AttackBegin_Res()
		{
			_m_res = new ProtoMemberEnum<BattleSvrRes>(1, true);
			_m_team_id = new ProtoMemberUInt64(2, true);
			_m_dungeon_id = new ProtoMemberUInt32(3, true);
			_m_heros_res = new ProtoMemberEmbeddedList<HeroBattleResult>(4, false);
			_m_kilmst_cnt = new ProtoMemberEmbeddedList<PlyKilMstCnt>(5, false);
			_m_team_type = new ProtoMemberEnum<PlayerTeamType>(6, false);
			_m_less_money = new ProtoMemberUInt32(7, false);
			_m_more_money = new ProtoMemberUInt32(8, false);
			_m_less_exp = new ProtoMemberUInt32(9, false);
			_m_more_exp = new ProtoMemberUInt32(10, false);
			_m_reward_item_list = new ProtoMemberEmbeddedList<PlayerItemInfo>(11, false);
			_m_extern_value1 = new ProtoMemberUInt32(12, false);
			_m_extern_value2 = new ProtoMemberUInt32(13, false);
			_m_kilmst_actor2cnt = new ProtoMemberEmbeddedList<Actor2Count>(14, false);
			_m_kill_enemyhero = new ProtoMemberUInt32(15, false);
			_m_extreme_hard_lv = new ProtoMemberUInt32(16, false);
		}

		public Msg_Battle2Logic_AttackBegin_Res(BattleSvrRes __m_res, ulong __m_team_id, uint __m_dungeon_id, PlayerTeamType __m_team_type, uint __m_less_money, uint __m_more_money, uint __m_less_exp, uint __m_more_exp, uint __m_extern_value1, uint __m_extern_value2, uint __m_kill_enemyhero, uint __m_extreme_hard_lv)
		{
			_m_res = new ProtoMemberEnum<BattleSvrRes>(1, true);
			_m_res.member_value = __m_res;
			_m_team_id = new ProtoMemberUInt64(2, true);
			_m_team_id.member_value = __m_team_id;
			_m_dungeon_id = new ProtoMemberUInt32(3, true);
			_m_dungeon_id.member_value = __m_dungeon_id;
			_m_heros_res = new ProtoMemberEmbeddedList<HeroBattleResult>(4, false);
			_m_kilmst_cnt = new ProtoMemberEmbeddedList<PlyKilMstCnt>(5, false);
			_m_team_type = new ProtoMemberEnum<PlayerTeamType>(6, false);
			_m_team_type.member_value = __m_team_type;
			_m_less_money = new ProtoMemberUInt32(7, false);
			_m_less_money.member_value = __m_less_money;
			_m_more_money = new ProtoMemberUInt32(8, false);
			_m_more_money.member_value = __m_more_money;
			_m_less_exp = new ProtoMemberUInt32(9, false);
			_m_less_exp.member_value = __m_less_exp;
			_m_more_exp = new ProtoMemberUInt32(10, false);
			_m_more_exp.member_value = __m_more_exp;
			_m_reward_item_list = new ProtoMemberEmbeddedList<PlayerItemInfo>(11, false);
			_m_extern_value1 = new ProtoMemberUInt32(12, false);
			_m_extern_value1.member_value = __m_extern_value1;
			_m_extern_value2 = new ProtoMemberUInt32(13, false);
			_m_extern_value2.member_value = __m_extern_value2;
			_m_kilmst_actor2cnt = new ProtoMemberEmbeddedList<Actor2Count>(14, false);
			_m_kill_enemyhero = new ProtoMemberUInt32(15, false);
			_m_kill_enemyhero.member_value = __m_kill_enemyhero;
			_m_extreme_hard_lv = new ProtoMemberUInt32(16, false);
			_m_extreme_hard_lv.member_value = __m_extreme_hard_lv;
		}

		public BattleSvrRes m_res
		{
			get{ return _m_res.member_value; }
			set{ _m_res.member_value = value; }
		}
		public bool has_m_res
		{
			get{ return _m_res.has_value; }
		}

		public ulong m_team_id
		{
			get{ return _m_team_id.member_value; }
			set{ _m_team_id.member_value = value; }
		}
		public bool has_m_team_id
		{
			get{ return _m_team_id.has_value; }
		}

		public uint m_dungeon_id
		{
			get{ return _m_dungeon_id.member_value; }
			set{ _m_dungeon_id.member_value = value; }
		}
		public bool has_m_dungeon_id
		{
			get{ return _m_dungeon_id.has_value; }
		}

		public System.Collections.Generic.List<HeroBattleResult> m_heros_res
		{
			get{ return _m_heros_res.member_value; }
		}
		public bool has_m_heros_res
		{
			get{ return _m_heros_res.has_value; }
		}

		public System.Collections.Generic.List<PlyKilMstCnt> m_kilmst_cnt
		{
			get{ return _m_kilmst_cnt.member_value; }
		}
		public bool has_m_kilmst_cnt
		{
			get{ return _m_kilmst_cnt.has_value; }
		}

		public PlayerTeamType m_team_type
		{
			get{ return _m_team_type.member_value; }
			set{ _m_team_type.member_value = value; }
		}
		public bool has_m_team_type
		{
			get{ return _m_team_type.has_value; }
		}

		public uint m_less_money
		{
			get{ return _m_less_money.member_value; }
			set{ _m_less_money.member_value = value; }
		}
		public bool has_m_less_money
		{
			get{ return _m_less_money.has_value; }
		}

		public uint m_more_money
		{
			get{ return _m_more_money.member_value; }
			set{ _m_more_money.member_value = value; }
		}
		public bool has_m_more_money
		{
			get{ return _m_more_money.has_value; }
		}

		public uint m_less_exp
		{
			get{ return _m_less_exp.member_value; }
			set{ _m_less_exp.member_value = value; }
		}
		public bool has_m_less_exp
		{
			get{ return _m_less_exp.has_value; }
		}

		public uint m_more_exp
		{
			get{ return _m_more_exp.member_value; }
			set{ _m_more_exp.member_value = value; }
		}
		public bool has_m_more_exp
		{
			get{ return _m_more_exp.has_value; }
		}

		public System.Collections.Generic.List<PlayerItemInfo> m_reward_item_list
		{
			get{ return _m_reward_item_list.member_value; }
		}
		public bool has_m_reward_item_list
		{
			get{ return _m_reward_item_list.has_value; }
		}

		public uint m_extern_value1
		{
			get{ return _m_extern_value1.member_value; }
			set{ _m_extern_value1.member_value = value; }
		}
		public bool has_m_extern_value1
		{
			get{ return _m_extern_value1.has_value; }
		}

		public uint m_extern_value2
		{
			get{ return _m_extern_value2.member_value; }
			set{ _m_extern_value2.member_value = value; }
		}
		public bool has_m_extern_value2
		{
			get{ return _m_extern_value2.has_value; }
		}

		public System.Collections.Generic.List<Actor2Count> m_kilmst_actor2cnt
		{
			get{ return _m_kilmst_actor2cnt.member_value; }
		}
		public bool has_m_kilmst_actor2cnt
		{
			get{ return _m_kilmst_actor2cnt.has_value; }
		}

		public uint m_kill_enemyhero
		{
			get{ return _m_kill_enemyhero.member_value; }
			set{ _m_kill_enemyhero.member_value = value; }
		}
		public bool has_m_kill_enemyhero
		{
			get{ return _m_kill_enemyhero.has_value; }
		}

		public uint m_extreme_hard_lv
		{
			get{ return _m_extreme_hard_lv.member_value; }
			set{ _m_extreme_hard_lv.member_value = value; }
		}
		public bool has_m_extreme_hard_lv
		{
			get{ return _m_extreme_hard_lv.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_res.Serialize((uint)_m_res.member_value, ref out_stream);

			count += _m_team_id.Serialize(_m_team_id.member_value, ref out_stream);

			count += _m_dungeon_id.Serialize(_m_dungeon_id.member_value, ref out_stream);

			foreach(HeroBattleResult one_member_value in _m_heros_res.member_value)
			{
				count += _m_heros_res.Serialize(one_member_value, ref out_stream);
			}

			foreach(PlyKilMstCnt one_member_value in _m_kilmst_cnt.member_value)
			{
				count += _m_kilmst_cnt.Serialize(one_member_value, ref out_stream);
			}

			count += _m_team_type.Serialize((uint)_m_team_type.member_value, ref out_stream);

			count += _m_less_money.Serialize(_m_less_money.member_value, ref out_stream);

			count += _m_more_money.Serialize(_m_more_money.member_value, ref out_stream);

			count += _m_less_exp.Serialize(_m_less_exp.member_value, ref out_stream);

			count += _m_more_exp.Serialize(_m_more_exp.member_value, ref out_stream);

			foreach(PlayerItemInfo one_member_value in _m_reward_item_list.member_value)
			{
				count += _m_reward_item_list.Serialize(one_member_value, ref out_stream);
			}

			count += _m_extern_value1.Serialize(_m_extern_value1.member_value, ref out_stream);

			count += _m_extern_value2.Serialize(_m_extern_value2.member_value, ref out_stream);

			foreach(Actor2Count one_member_value in _m_kilmst_actor2cnt.member_value)
			{
				count += _m_kilmst_actor2cnt.Serialize(one_member_value, ref out_stream);
			}

			count += _m_kill_enemyhero.Serialize(_m_kill_enemyhero.member_value, ref out_stream);

			count += _m_extreme_hard_lv.Serialize(_m_extreme_hard_lv.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_res = 0;
			one_count = _m_res.ParseFrom(ref temp_m_res, ref int_stream);
			if (0 < one_count)
			{
					_m_res.member_value = (BattleSvrRes)temp_m_res;
					count = count + one_count;
			}

			ulong temp_m_team_id = 0;
			one_count = _m_team_id.ParseFrom(ref temp_m_team_id, ref int_stream);
			if (0 < one_count)
			{
					_m_team_id.member_value = temp_m_team_id;
					count = count + one_count;
			}

			uint temp_m_dungeon_id = 0;
			one_count = _m_dungeon_id.ParseFrom(ref temp_m_dungeon_id, ref int_stream);
			if (0 < one_count)
			{
					_m_dungeon_id.member_value = temp_m_dungeon_id;
					count = count + one_count;
			}

			while (true)
			{
				HeroBattleResult one_member_value = new HeroBattleResult();
				one_count = _m_heros_res.ParseFrom(one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_heros_res.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			while (true)
			{
				PlyKilMstCnt one_member_value = new PlyKilMstCnt();
				one_count = _m_kilmst_cnt.ParseFrom(one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_kilmst_cnt.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			uint temp_m_team_type = 0;
			one_count = _m_team_type.ParseFrom(ref temp_m_team_type, ref int_stream);
			if (0 < one_count)
			{
					_m_team_type.member_value = (PlayerTeamType)temp_m_team_type;
					count = count + one_count;
			}

			uint temp_m_less_money = 0;
			one_count = _m_less_money.ParseFrom(ref temp_m_less_money, ref int_stream);
			if (0 < one_count)
			{
					_m_less_money.member_value = temp_m_less_money;
					count = count + one_count;
			}

			uint temp_m_more_money = 0;
			one_count = _m_more_money.ParseFrom(ref temp_m_more_money, ref int_stream);
			if (0 < one_count)
			{
					_m_more_money.member_value = temp_m_more_money;
					count = count + one_count;
			}

			uint temp_m_less_exp = 0;
			one_count = _m_less_exp.ParseFrom(ref temp_m_less_exp, ref int_stream);
			if (0 < one_count)
			{
					_m_less_exp.member_value = temp_m_less_exp;
					count = count + one_count;
			}

			uint temp_m_more_exp = 0;
			one_count = _m_more_exp.ParseFrom(ref temp_m_more_exp, ref int_stream);
			if (0 < one_count)
			{
					_m_more_exp.member_value = temp_m_more_exp;
					count = count + one_count;
			}

			while (true)
			{
				PlayerItemInfo one_member_value = new PlayerItemInfo();
				one_count = _m_reward_item_list.ParseFrom(one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_reward_item_list.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			uint temp_m_extern_value1 = 0;
			one_count = _m_extern_value1.ParseFrom(ref temp_m_extern_value1, ref int_stream);
			if (0 < one_count)
			{
					_m_extern_value1.member_value = temp_m_extern_value1;
					count = count + one_count;
			}

			uint temp_m_extern_value2 = 0;
			one_count = _m_extern_value2.ParseFrom(ref temp_m_extern_value2, ref int_stream);
			if (0 < one_count)
			{
					_m_extern_value2.member_value = temp_m_extern_value2;
					count = count + one_count;
			}

			while (true)
			{
				Actor2Count one_member_value = new Actor2Count();
				one_count = _m_kilmst_actor2cnt.ParseFrom(one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_kilmst_actor2cnt.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			uint temp_m_kill_enemyhero = 0;
			one_count = _m_kill_enemyhero.ParseFrom(ref temp_m_kill_enemyhero, ref int_stream);
			if (0 < one_count)
			{
					_m_kill_enemyhero.member_value = temp_m_kill_enemyhero;
					count = count + one_count;
			}

			uint temp_m_extreme_hard_lv = 0;
			one_count = _m_extreme_hard_lv.ParseFrom(ref temp_m_extreme_hard_lv, ref int_stream);
			if (0 < one_count)
			{
					_m_extreme_hard_lv.member_value = temp_m_extreme_hard_lv;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Battle2Logic_PVE_Extreme_Temp2 : IMessage
	{

		public Msg_Battle2Logic_PVE_Extreme_Temp2()
		{
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			return count;
		}
	}

	public class Msg_Battle2Logic_PVE_HuntingChallenge_Mid_Res : IMessage
	{
		private ProtoMemberUInt32 _m_monster_id;	// 击杀的怪物id（对应ActorBase的ActorID）

		public Msg_Battle2Logic_PVE_HuntingChallenge_Mid_Res()
		{
			_m_monster_id = new ProtoMemberUInt32(1, true);
		}

		public Msg_Battle2Logic_PVE_HuntingChallenge_Mid_Res(uint __m_monster_id)
		{
			_m_monster_id = new ProtoMemberUInt32(1, true);
			_m_monster_id.member_value = __m_monster_id;
		}

		public uint m_monster_id
		{
			get{ return _m_monster_id.member_value; }
			set{ _m_monster_id.member_value = value; }
		}
		public bool has_m_monster_id
		{
			get{ return _m_monster_id.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_monster_id.Serialize(_m_monster_id.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_monster_id = 0;
			one_count = _m_monster_id.ParseFrom(ref temp_m_monster_id, ref int_stream);
			if (0 < one_count)
			{
					_m_monster_id.member_value = temp_m_monster_id;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Battle2Logic_PVP_BattleField_MidExit_Res : IMessage
	{
		private ProtoMemberUInt64 _m_last_midexit;	// 中途退出时间

		public Msg_Battle2Logic_PVP_BattleField_MidExit_Res()
		{
			_m_last_midexit = new ProtoMemberUInt64(1, true);
		}

		public Msg_Battle2Logic_PVP_BattleField_MidExit_Res(ulong __m_last_midexit)
		{
			_m_last_midexit = new ProtoMemberUInt64(1, true);
			_m_last_midexit.member_value = __m_last_midexit;
		}

		public ulong m_last_midexit
		{
			get{ return _m_last_midexit.member_value; }
			set{ _m_last_midexit.member_value = value; }
		}
		public bool has_m_last_midexit
		{
			get{ return _m_last_midexit.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_last_midexit.Serialize(_m_last_midexit.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			ulong temp_m_last_midexit = 0;
			one_count = _m_last_midexit.ParseFrom(ref temp_m_last_midexit, ref int_stream);
			if (0 < one_count)
			{
					_m_last_midexit.member_value = temp_m_last_midexit;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Battle2Team_GiveRewardToPlayer : IMessage
	{
		private ProtoMemberUInt64 _m_team_id;	//队伍id
		private ProtoMemberUInt32 _m_server_id;	//玩家服id
		private ProtoMemberUInt32 _m_account_id;	//玩家帐号id
		private ProtoMemberUInt32 _m_reward_money;	//奖励金钱
		private ProtoMemberUInt32 _m_reward_exp;	//奖励经验
		private ProtoMemberEmbeddedList<PlayerItemInfo> _m_reward_item_list;	//奖励道具
		private ProtoMemberUInt32 _m_operation_type;	//业务类型
		private ProtoMemberUInt32 _m_operation_param;	//业务参数

		public Msg_Battle2Team_GiveRewardToPlayer()
		{
			_m_team_id = new ProtoMemberUInt64(1, true);
			_m_server_id = new ProtoMemberUInt32(2, true);
			_m_account_id = new ProtoMemberUInt32(3, true);
			_m_reward_money = new ProtoMemberUInt32(4, false);
			_m_reward_exp = new ProtoMemberUInt32(5, false);
			_m_reward_item_list = new ProtoMemberEmbeddedList<PlayerItemInfo>(6, false);
			_m_operation_type = new ProtoMemberUInt32(7, false);
			_m_operation_param = new ProtoMemberUInt32(8, false);
		}

		public Msg_Battle2Team_GiveRewardToPlayer(ulong __m_team_id, uint __m_server_id, uint __m_account_id, uint __m_reward_money, uint __m_reward_exp, uint __m_operation_type, uint __m_operation_param)
		{
			_m_team_id = new ProtoMemberUInt64(1, true);
			_m_team_id.member_value = __m_team_id;
			_m_server_id = new ProtoMemberUInt32(2, true);
			_m_server_id.member_value = __m_server_id;
			_m_account_id = new ProtoMemberUInt32(3, true);
			_m_account_id.member_value = __m_account_id;
			_m_reward_money = new ProtoMemberUInt32(4, false);
			_m_reward_money.member_value = __m_reward_money;
			_m_reward_exp = new ProtoMemberUInt32(5, false);
			_m_reward_exp.member_value = __m_reward_exp;
			_m_reward_item_list = new ProtoMemberEmbeddedList<PlayerItemInfo>(6, false);
			_m_operation_type = new ProtoMemberUInt32(7, false);
			_m_operation_type.member_value = __m_operation_type;
			_m_operation_param = new ProtoMemberUInt32(8, false);
			_m_operation_param.member_value = __m_operation_param;
		}

		public ulong m_team_id
		{
			get{ return _m_team_id.member_value; }
			set{ _m_team_id.member_value = value; }
		}
		public bool has_m_team_id
		{
			get{ return _m_team_id.has_value; }
		}

		public uint m_server_id
		{
			get{ return _m_server_id.member_value; }
			set{ _m_server_id.member_value = value; }
		}
		public bool has_m_server_id
		{
			get{ return _m_server_id.has_value; }
		}

		public uint m_account_id
		{
			get{ return _m_account_id.member_value; }
			set{ _m_account_id.member_value = value; }
		}
		public bool has_m_account_id
		{
			get{ return _m_account_id.has_value; }
		}

		public uint m_reward_money
		{
			get{ return _m_reward_money.member_value; }
			set{ _m_reward_money.member_value = value; }
		}
		public bool has_m_reward_money
		{
			get{ return _m_reward_money.has_value; }
		}

		public uint m_reward_exp
		{
			get{ return _m_reward_exp.member_value; }
			set{ _m_reward_exp.member_value = value; }
		}
		public bool has_m_reward_exp
		{
			get{ return _m_reward_exp.has_value; }
		}

		public System.Collections.Generic.List<PlayerItemInfo> m_reward_item_list
		{
			get{ return _m_reward_item_list.member_value; }
		}
		public bool has_m_reward_item_list
		{
			get{ return _m_reward_item_list.has_value; }
		}

		public uint m_operation_type
		{
			get{ return _m_operation_type.member_value; }
			set{ _m_operation_type.member_value = value; }
		}
		public bool has_m_operation_type
		{
			get{ return _m_operation_type.has_value; }
		}

		public uint m_operation_param
		{
			get{ return _m_operation_param.member_value; }
			set{ _m_operation_param.member_value = value; }
		}
		public bool has_m_operation_param
		{
			get{ return _m_operation_param.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_team_id.Serialize(_m_team_id.member_value, ref out_stream);

			count += _m_server_id.Serialize(_m_server_id.member_value, ref out_stream);

			count += _m_account_id.Serialize(_m_account_id.member_value, ref out_stream);

			count += _m_reward_money.Serialize(_m_reward_money.member_value, ref out_stream);

			count += _m_reward_exp.Serialize(_m_reward_exp.member_value, ref out_stream);

			foreach(PlayerItemInfo one_member_value in _m_reward_item_list.member_value)
			{
				count += _m_reward_item_list.Serialize(one_member_value, ref out_stream);
			}

			count += _m_operation_type.Serialize(_m_operation_type.member_value, ref out_stream);

			count += _m_operation_param.Serialize(_m_operation_param.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			ulong temp_m_team_id = 0;
			one_count = _m_team_id.ParseFrom(ref temp_m_team_id, ref int_stream);
			if (0 < one_count)
			{
					_m_team_id.member_value = temp_m_team_id;
					count = count + one_count;
			}

			uint temp_m_server_id = 0;
			one_count = _m_server_id.ParseFrom(ref temp_m_server_id, ref int_stream);
			if (0 < one_count)
			{
					_m_server_id.member_value = temp_m_server_id;
					count = count + one_count;
			}

			uint temp_m_account_id = 0;
			one_count = _m_account_id.ParseFrom(ref temp_m_account_id, ref int_stream);
			if (0 < one_count)
			{
					_m_account_id.member_value = temp_m_account_id;
					count = count + one_count;
			}

			uint temp_m_reward_money = 0;
			one_count = _m_reward_money.ParseFrom(ref temp_m_reward_money, ref int_stream);
			if (0 < one_count)
			{
					_m_reward_money.member_value = temp_m_reward_money;
					count = count + one_count;
			}

			uint temp_m_reward_exp = 0;
			one_count = _m_reward_exp.ParseFrom(ref temp_m_reward_exp, ref int_stream);
			if (0 < one_count)
			{
					_m_reward_exp.member_value = temp_m_reward_exp;
					count = count + one_count;
			}

			while (true)
			{
				PlayerItemInfo one_member_value = new PlayerItemInfo();
				one_count = _m_reward_item_list.ParseFrom(one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_reward_item_list.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			uint temp_m_operation_type = 0;
			one_count = _m_operation_type.ParseFrom(ref temp_m_operation_type, ref int_stream);
			if (0 < one_count)
			{
					_m_operation_type.member_value = temp_m_operation_type;
					count = count + one_count;
			}

			uint temp_m_operation_param = 0;
			one_count = _m_operation_param.ParseFrom(ref temp_m_operation_param, ref int_stream);
			if (0 < one_count)
			{
					_m_operation_param.member_value = temp_m_operation_param;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Broadcast : IMessage
	{

		public Msg_Broadcast()
		{
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			return count;
		}
	}

	public class Msg_Center2Account_CheckToyActivate_Req : IMessage
	{
		private ProtoMemberUInt32 _m_operator_account_id;	// 账号id
		private ProtoMemberUInt32 _m_operator_server_id;	// 服id
		private ProtoMemberString _m_toy_guid;	// 玩具唯一识别码
		private ProtoMemberUInt32 _m_toy_type;	// 玩具类别
		private ProtoMemberString _m_toy_key;	// 玩具密码

		public Msg_Center2Account_CheckToyActivate_Req()
		{
			_m_operator_account_id = new ProtoMemberUInt32(1, true);
			_m_operator_server_id = new ProtoMemberUInt32(2, true);
			_m_toy_guid = new ProtoMemberString(3, true);
			_m_toy_type = new ProtoMemberUInt32(4, true);
			_m_toy_key = new ProtoMemberString(5, true);
		}

		public Msg_Center2Account_CheckToyActivate_Req(uint __m_operator_account_id, uint __m_operator_server_id, string __m_toy_guid, uint __m_toy_type, string __m_toy_key)
		{
			_m_operator_account_id = new ProtoMemberUInt32(1, true);
			_m_operator_account_id.member_value = __m_operator_account_id;
			_m_operator_server_id = new ProtoMemberUInt32(2, true);
			_m_operator_server_id.member_value = __m_operator_server_id;
			_m_toy_guid = new ProtoMemberString(3, true);
			_m_toy_guid.member_value = __m_toy_guid;
			_m_toy_type = new ProtoMemberUInt32(4, true);
			_m_toy_type.member_value = __m_toy_type;
			_m_toy_key = new ProtoMemberString(5, true);
			_m_toy_key.member_value = __m_toy_key;
		}

		public uint m_operator_account_id
		{
			get{ return _m_operator_account_id.member_value; }
			set{ _m_operator_account_id.member_value = value; }
		}
		public bool has_m_operator_account_id
		{
			get{ return _m_operator_account_id.has_value; }
		}

		public uint m_operator_server_id
		{
			get{ return _m_operator_server_id.member_value; }
			set{ _m_operator_server_id.member_value = value; }
		}
		public bool has_m_operator_server_id
		{
			get{ return _m_operator_server_id.has_value; }
		}

		public string m_toy_guid
		{
			get{ return _m_toy_guid.member_value; }
			set{ _m_toy_guid.member_value = value; }
		}
		public bool has_m_toy_guid
		{
			get{ return _m_toy_guid.has_value; }
		}

		public uint m_toy_type
		{
			get{ return _m_toy_type.member_value; }
			set{ _m_toy_type.member_value = value; }
		}
		public bool has_m_toy_type
		{
			get{ return _m_toy_type.has_value; }
		}

		public string m_toy_key
		{
			get{ return _m_toy_key.member_value; }
			set{ _m_toy_key.member_value = value; }
		}
		public bool has_m_toy_key
		{
			get{ return _m_toy_key.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_operator_account_id.Serialize(_m_operator_account_id.member_value, ref out_stream);

			count += _m_operator_server_id.Serialize(_m_operator_server_id.member_value, ref out_stream);

			count += _m_toy_guid.Serialize(_m_toy_guid.member_value, ref out_stream);

			count += _m_toy_type.Serialize(_m_toy_type.member_value, ref out_stream);

			count += _m_toy_key.Serialize(_m_toy_key.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_operator_account_id = 0;
			one_count = _m_operator_account_id.ParseFrom(ref temp_m_operator_account_id, ref int_stream);
			if (0 < one_count)
			{
					_m_operator_account_id.member_value = temp_m_operator_account_id;
					count = count + one_count;
			}

			uint temp_m_operator_server_id = 0;
			one_count = _m_operator_server_id.ParseFrom(ref temp_m_operator_server_id, ref int_stream);
			if (0 < one_count)
			{
					_m_operator_server_id.member_value = temp_m_operator_server_id;
					count = count + one_count;
			}

			string temp_m_toy_guid = "";
			one_count = _m_toy_guid.ParseFrom(ref temp_m_toy_guid, ref int_stream);
			if (0 < one_count)
			{
					_m_toy_guid.member_value = temp_m_toy_guid;
					count = count + one_count;
			}

			uint temp_m_toy_type = 0;
			one_count = _m_toy_type.ParseFrom(ref temp_m_toy_type, ref int_stream);
			if (0 < one_count)
			{
					_m_toy_type.member_value = temp_m_toy_type;
					count = count + one_count;
			}

			string temp_m_toy_key = "";
			one_count = _m_toy_key.ParseFrom(ref temp_m_toy_key, ref int_stream);
			if (0 < one_count)
			{
					_m_toy_key.member_value = temp_m_toy_key;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Center2Account_Create_Player_Req : IMessage
	{
		private ProtoMemberUInt32 _m_operator_account_id;	// 账号id
		private ProtoMemberUInt32 _m_operator_server_id;	// 服id
		private ProtoMemberString _m_name;	// 待创建的角色名称
		private ProtoMemberUInt32 _m_create_toy_type;	// 待创建的角色的玩具id

		public Msg_Center2Account_Create_Player_Req()
		{
			_m_operator_account_id = new ProtoMemberUInt32(1, true);
			_m_operator_server_id = new ProtoMemberUInt32(2, true);
			_m_name = new ProtoMemberString(3, true);
			_m_create_toy_type = new ProtoMemberUInt32(4, true);
		}

		public Msg_Center2Account_Create_Player_Req(uint __m_operator_account_id, uint __m_operator_server_id, string __m_name, uint __m_create_toy_type)
		{
			_m_operator_account_id = new ProtoMemberUInt32(1, true);
			_m_operator_account_id.member_value = __m_operator_account_id;
			_m_operator_server_id = new ProtoMemberUInt32(2, true);
			_m_operator_server_id.member_value = __m_operator_server_id;
			_m_name = new ProtoMemberString(3, true);
			_m_name.member_value = __m_name;
			_m_create_toy_type = new ProtoMemberUInt32(4, true);
			_m_create_toy_type.member_value = __m_create_toy_type;
		}

		public uint m_operator_account_id
		{
			get{ return _m_operator_account_id.member_value; }
			set{ _m_operator_account_id.member_value = value; }
		}
		public bool has_m_operator_account_id
		{
			get{ return _m_operator_account_id.has_value; }
		}

		public uint m_operator_server_id
		{
			get{ return _m_operator_server_id.member_value; }
			set{ _m_operator_server_id.member_value = value; }
		}
		public bool has_m_operator_server_id
		{
			get{ return _m_operator_server_id.has_value; }
		}

		public string m_name
		{
			get{ return _m_name.member_value; }
			set{ _m_name.member_value = value; }
		}
		public bool has_m_name
		{
			get{ return _m_name.has_value; }
		}

		public uint m_create_toy_type
		{
			get{ return _m_create_toy_type.member_value; }
			set{ _m_create_toy_type.member_value = value; }
		}
		public bool has_m_create_toy_type
		{
			get{ return _m_create_toy_type.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_operator_account_id.Serialize(_m_operator_account_id.member_value, ref out_stream);

			count += _m_operator_server_id.Serialize(_m_operator_server_id.member_value, ref out_stream);

			count += _m_name.Serialize(_m_name.member_value, ref out_stream);

			count += _m_create_toy_type.Serialize(_m_create_toy_type.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_operator_account_id = 0;
			one_count = _m_operator_account_id.ParseFrom(ref temp_m_operator_account_id, ref int_stream);
			if (0 < one_count)
			{
					_m_operator_account_id.member_value = temp_m_operator_account_id;
					count = count + one_count;
			}

			uint temp_m_operator_server_id = 0;
			one_count = _m_operator_server_id.ParseFrom(ref temp_m_operator_server_id, ref int_stream);
			if (0 < one_count)
			{
					_m_operator_server_id.member_value = temp_m_operator_server_id;
					count = count + one_count;
			}

			string temp_m_name = "";
			one_count = _m_name.ParseFrom(ref temp_m_name, ref int_stream);
			if (0 < one_count)
			{
					_m_name.member_value = temp_m_name;
					count = count + one_count;
			}

			uint temp_m_create_toy_type = 0;
			one_count = _m_create_toy_type.ParseFrom(ref temp_m_create_toy_type, ref int_stream);
			if (0 < one_count)
			{
					_m_create_toy_type.member_value = temp_m_create_toy_type;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Center2Account_Reg_Login_Key_Res : IMessage
	{
		private ProtoMemberUInt32 _m_account_id;	// 验证成功的情况下，账号id
		private ProtoMemberUInt32 _m_key;	// 服务器生成的授权码key，进入服务器需要带这个key

		public Msg_Center2Account_Reg_Login_Key_Res()
		{
			_m_account_id = new ProtoMemberUInt32(1, true);
			_m_key = new ProtoMemberUInt32(2, true);
		}

		public Msg_Center2Account_Reg_Login_Key_Res(uint __m_account_id, uint __m_key)
		{
			_m_account_id = new ProtoMemberUInt32(1, true);
			_m_account_id.member_value = __m_account_id;
			_m_key = new ProtoMemberUInt32(2, true);
			_m_key.member_value = __m_key;
		}

		public uint m_account_id
		{
			get{ return _m_account_id.member_value; }
			set{ _m_account_id.member_value = value; }
		}
		public bool has_m_account_id
		{
			get{ return _m_account_id.has_value; }
		}

		public uint m_key
		{
			get{ return _m_key.member_value; }
			set{ _m_key.member_value = value; }
		}
		public bool has_m_key
		{
			get{ return _m_key.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_account_id.Serialize(_m_account_id.member_value, ref out_stream);

			count += _m_key.Serialize(_m_key.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_account_id = 0;
			one_count = _m_account_id.ParseFrom(ref temp_m_account_id, ref int_stream);
			if (0 < one_count)
			{
					_m_account_id.member_value = temp_m_account_id;
					count = count + one_count;
			}

			uint temp_m_key = 0;
			one_count = _m_key.ParseFrom(ref temp_m_key, ref int_stream);
			if (0 < one_count)
			{
					_m_key.member_value = temp_m_key;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Center2Account_ToyActivate_Req : IMessage
	{
		private ProtoMemberUInt32 _m_operator_account_id;	// 账号id
		private ProtoMemberUInt32 _m_operator_server_id;	// 服id
		private ProtoMemberString _m_toy_guid;	// 玩具唯一识别码
		private ProtoMemberUInt32 _m_toy_type;	// 玩具类别
		private ProtoMemberString _m_toy_key;	// 玩具密码

		public Msg_Center2Account_ToyActivate_Req()
		{
			_m_operator_account_id = new ProtoMemberUInt32(1, true);
			_m_operator_server_id = new ProtoMemberUInt32(2, true);
			_m_toy_guid = new ProtoMemberString(3, true);
			_m_toy_type = new ProtoMemberUInt32(4, true);
			_m_toy_key = new ProtoMemberString(5, true);
		}

		public Msg_Center2Account_ToyActivate_Req(uint __m_operator_account_id, uint __m_operator_server_id, string __m_toy_guid, uint __m_toy_type, string __m_toy_key)
		{
			_m_operator_account_id = new ProtoMemberUInt32(1, true);
			_m_operator_account_id.member_value = __m_operator_account_id;
			_m_operator_server_id = new ProtoMemberUInt32(2, true);
			_m_operator_server_id.member_value = __m_operator_server_id;
			_m_toy_guid = new ProtoMemberString(3, true);
			_m_toy_guid.member_value = __m_toy_guid;
			_m_toy_type = new ProtoMemberUInt32(4, true);
			_m_toy_type.member_value = __m_toy_type;
			_m_toy_key = new ProtoMemberString(5, true);
			_m_toy_key.member_value = __m_toy_key;
		}

		public uint m_operator_account_id
		{
			get{ return _m_operator_account_id.member_value; }
			set{ _m_operator_account_id.member_value = value; }
		}
		public bool has_m_operator_account_id
		{
			get{ return _m_operator_account_id.has_value; }
		}

		public uint m_operator_server_id
		{
			get{ return _m_operator_server_id.member_value; }
			set{ _m_operator_server_id.member_value = value; }
		}
		public bool has_m_operator_server_id
		{
			get{ return _m_operator_server_id.has_value; }
		}

		public string m_toy_guid
		{
			get{ return _m_toy_guid.member_value; }
			set{ _m_toy_guid.member_value = value; }
		}
		public bool has_m_toy_guid
		{
			get{ return _m_toy_guid.has_value; }
		}

		public uint m_toy_type
		{
			get{ return _m_toy_type.member_value; }
			set{ _m_toy_type.member_value = value; }
		}
		public bool has_m_toy_type
		{
			get{ return _m_toy_type.has_value; }
		}

		public string m_toy_key
		{
			get{ return _m_toy_key.member_value; }
			set{ _m_toy_key.member_value = value; }
		}
		public bool has_m_toy_key
		{
			get{ return _m_toy_key.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_operator_account_id.Serialize(_m_operator_account_id.member_value, ref out_stream);

			count += _m_operator_server_id.Serialize(_m_operator_server_id.member_value, ref out_stream);

			count += _m_toy_guid.Serialize(_m_toy_guid.member_value, ref out_stream);

			count += _m_toy_type.Serialize(_m_toy_type.member_value, ref out_stream);

			count += _m_toy_key.Serialize(_m_toy_key.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_operator_account_id = 0;
			one_count = _m_operator_account_id.ParseFrom(ref temp_m_operator_account_id, ref int_stream);
			if (0 < one_count)
			{
					_m_operator_account_id.member_value = temp_m_operator_account_id;
					count = count + one_count;
			}

			uint temp_m_operator_server_id = 0;
			one_count = _m_operator_server_id.ParseFrom(ref temp_m_operator_server_id, ref int_stream);
			if (0 < one_count)
			{
					_m_operator_server_id.member_value = temp_m_operator_server_id;
					count = count + one_count;
			}

			string temp_m_toy_guid = "";
			one_count = _m_toy_guid.ParseFrom(ref temp_m_toy_guid, ref int_stream);
			if (0 < one_count)
			{
					_m_toy_guid.member_value = temp_m_toy_guid;
					count = count + one_count;
			}

			uint temp_m_toy_type = 0;
			one_count = _m_toy_type.ParseFrom(ref temp_m_toy_type, ref int_stream);
			if (0 < one_count)
			{
					_m_toy_type.member_value = temp_m_toy_type;
					count = count + one_count;
			}

			string temp_m_toy_key = "";
			one_count = _m_toy_key.ParseFrom(ref temp_m_toy_key, ref int_stream);
			if (0 < one_count)
			{
					_m_toy_key.member_value = temp_m_toy_key;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Center2Client_Connect_Res : IMessage
	{
		private ProtoMemberUInt32 _m_res;	// 进入服务器的key验证结果（LogicRes）
		private ProtoMemberString _m_ip;	// 登陆ip
		private ProtoMemberString _m_imei;	// 设备唯一标识

		public Msg_Center2Client_Connect_Res()
		{
			_m_res = new ProtoMemberUInt32(1, true);
			_m_ip = new ProtoMemberString(2, false);
			_m_imei = new ProtoMemberString(3, false);
		}

		public Msg_Center2Client_Connect_Res(uint __m_res, string __m_ip, string __m_imei)
		{
			_m_res = new ProtoMemberUInt32(1, true);
			_m_res.member_value = __m_res;
			_m_ip = new ProtoMemberString(2, false);
			_m_ip.member_value = __m_ip;
			_m_imei = new ProtoMemberString(3, false);
			_m_imei.member_value = __m_imei;
		}

		public uint m_res
		{
			get{ return _m_res.member_value; }
			set{ _m_res.member_value = value; }
		}
		public bool has_m_res
		{
			get{ return _m_res.has_value; }
		}

		public string m_ip
		{
			get{ return _m_ip.member_value; }
			set{ _m_ip.member_value = value; }
		}
		public bool has_m_ip
		{
			get{ return _m_ip.has_value; }
		}

		public string m_imei
		{
			get{ return _m_imei.member_value; }
			set{ _m_imei.member_value = value; }
		}
		public bool has_m_imei
		{
			get{ return _m_imei.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_res.Serialize(_m_res.member_value, ref out_stream);

			count += _m_ip.Serialize(_m_ip.member_value, ref out_stream);

			count += _m_imei.Serialize(_m_imei.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_res = 0;
			one_count = _m_res.ParseFrom(ref temp_m_res, ref int_stream);
			if (0 < one_count)
			{
					_m_res.member_value = temp_m_res;
					count = count + one_count;
			}

			string temp_m_ip = "";
			one_count = _m_ip.ParseFrom(ref temp_m_ip, ref int_stream);
			if (0 < one_count)
			{
					_m_ip.member_value = temp_m_ip;
					count = count + one_count;
			}

			string temp_m_imei = "";
			one_count = _m_imei.ParseFrom(ref temp_m_imei, ref int_stream);
			if (0 < one_count)
			{
					_m_imei.member_value = temp_m_imei;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Center2Logic_CheckToyActivate_Res : IMessage
	{
		private ProtoMemberString _m_toy_guid;	// 激活的玩具唯一识别码
		private ProtoMemberUInt32 _m_toy_type;	// 激活的玩具类别
		private ProtoMemberUInt32 _m_account_id;	// 玩具对应账号id，0则为不存在绑定的账号
		private ProtoMemberUInt32 _m_res;	// 检查结果（AccountRes）

		public Msg_Center2Logic_CheckToyActivate_Res()
		{
			_m_toy_guid = new ProtoMemberString(1, true);
			_m_toy_type = new ProtoMemberUInt32(2, true);
			_m_account_id = new ProtoMemberUInt32(3, true);
			_m_res = new ProtoMemberUInt32(4, true);
		}

		public Msg_Center2Logic_CheckToyActivate_Res(string __m_toy_guid, uint __m_toy_type, uint __m_account_id, uint __m_res)
		{
			_m_toy_guid = new ProtoMemberString(1, true);
			_m_toy_guid.member_value = __m_toy_guid;
			_m_toy_type = new ProtoMemberUInt32(2, true);
			_m_toy_type.member_value = __m_toy_type;
			_m_account_id = new ProtoMemberUInt32(3, true);
			_m_account_id.member_value = __m_account_id;
			_m_res = new ProtoMemberUInt32(4, true);
			_m_res.member_value = __m_res;
		}

		public string m_toy_guid
		{
			get{ return _m_toy_guid.member_value; }
			set{ _m_toy_guid.member_value = value; }
		}
		public bool has_m_toy_guid
		{
			get{ return _m_toy_guid.has_value; }
		}

		public uint m_toy_type
		{
			get{ return _m_toy_type.member_value; }
			set{ _m_toy_type.member_value = value; }
		}
		public bool has_m_toy_type
		{
			get{ return _m_toy_type.has_value; }
		}

		public uint m_account_id
		{
			get{ return _m_account_id.member_value; }
			set{ _m_account_id.member_value = value; }
		}
		public bool has_m_account_id
		{
			get{ return _m_account_id.has_value; }
		}

		public uint m_res
		{
			get{ return _m_res.member_value; }
			set{ _m_res.member_value = value; }
		}
		public bool has_m_res
		{
			get{ return _m_res.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_toy_guid.Serialize(_m_toy_guid.member_value, ref out_stream);

			count += _m_toy_type.Serialize(_m_toy_type.member_value, ref out_stream);

			count += _m_account_id.Serialize(_m_account_id.member_value, ref out_stream);

			count += _m_res.Serialize(_m_res.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			string temp_m_toy_guid = "";
			one_count = _m_toy_guid.ParseFrom(ref temp_m_toy_guid, ref int_stream);
			if (0 < one_count)
			{
					_m_toy_guid.member_value = temp_m_toy_guid;
					count = count + one_count;
			}

			uint temp_m_toy_type = 0;
			one_count = _m_toy_type.ParseFrom(ref temp_m_toy_type, ref int_stream);
			if (0 < one_count)
			{
					_m_toy_type.member_value = temp_m_toy_type;
					count = count + one_count;
			}

			uint temp_m_account_id = 0;
			one_count = _m_account_id.ParseFrom(ref temp_m_account_id, ref int_stream);
			if (0 < one_count)
			{
					_m_account_id.member_value = temp_m_account_id;
					count = count + one_count;
			}

			uint temp_m_res = 0;
			one_count = _m_res.ParseFrom(ref temp_m_res, ref int_stream);
			if (0 < one_count)
			{
					_m_res.member_value = temp_m_res;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Center2Logic_Create_Player_Res : IMessage
	{
		private ProtoMemberString _m_name;	// 待创建的角色名称
		private ProtoMemberUInt32 _m_create_toy_type;	// 待创建的角色对应的模型数据
		private ProtoMemberUInt32List _m_activate_toy_type;	// 已激活的角色对应的模型数据
		private ProtoMemberUInt32 _m_res;	// 玩具激活的验证结果（AccountRes)

		public Msg_Center2Logic_Create_Player_Res()
		{
			_m_name = new ProtoMemberString(1, true);
			_m_create_toy_type = new ProtoMemberUInt32(2, true);
			_m_activate_toy_type = new ProtoMemberUInt32List(3, false);
			_m_res = new ProtoMemberUInt32(4, true);
		}

		public Msg_Center2Logic_Create_Player_Res(string __m_name, uint __m_create_toy_type, uint __m_res)
		{
			_m_name = new ProtoMemberString(1, true);
			_m_name.member_value = __m_name;
			_m_create_toy_type = new ProtoMemberUInt32(2, true);
			_m_create_toy_type.member_value = __m_create_toy_type;
			_m_activate_toy_type = new ProtoMemberUInt32List(3, false);
			_m_res = new ProtoMemberUInt32(4, true);
			_m_res.member_value = __m_res;
		}

		public string m_name
		{
			get{ return _m_name.member_value; }
			set{ _m_name.member_value = value; }
		}
		public bool has_m_name
		{
			get{ return _m_name.has_value; }
		}

		public uint m_create_toy_type
		{
			get{ return _m_create_toy_type.member_value; }
			set{ _m_create_toy_type.member_value = value; }
		}
		public bool has_m_create_toy_type
		{
			get{ return _m_create_toy_type.has_value; }
		}

		public System.Collections.Generic.List<uint> m_activate_toy_type
		{
			get{ return _m_activate_toy_type.member_value; }
		}
		public bool has_m_activate_toy_type
		{
			get{ return _m_activate_toy_type.has_value; }
		}

		public uint m_res
		{
			get{ return _m_res.member_value; }
			set{ _m_res.member_value = value; }
		}
		public bool has_m_res
		{
			get{ return _m_res.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_name.Serialize(_m_name.member_value, ref out_stream);

			count += _m_create_toy_type.Serialize(_m_create_toy_type.member_value, ref out_stream);

			foreach(uint one_member_value in _m_activate_toy_type.member_value)
			{
				count += _m_activate_toy_type.Serialize(one_member_value, ref out_stream);
			}

			count += _m_res.Serialize(_m_res.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			string temp_m_name = "";
			one_count = _m_name.ParseFrom(ref temp_m_name, ref int_stream);
			if (0 < one_count)
			{
					_m_name.member_value = temp_m_name;
					count = count + one_count;
			}

			uint temp_m_create_toy_type = 0;
			one_count = _m_create_toy_type.ParseFrom(ref temp_m_create_toy_type, ref int_stream);
			if (0 < one_count)
			{
					_m_create_toy_type.member_value = temp_m_create_toy_type;
					count = count + one_count;
			}

			while (true)
			{
				uint one_member_value = 0;
				one_count = _m_activate_toy_type.ParseFrom(ref one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_activate_toy_type.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			uint temp_m_res = 0;
			one_count = _m_res.ParseFrom(ref temp_m_res, ref int_stream);
			if (0 < one_count)
			{
					_m_res.member_value = temp_m_res;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Center2Logic_ToyActivate_Res : IMessage
	{
		private ProtoMemberString _m_toy_guid;	// 激活的玩具唯一识别码
		private ProtoMemberUInt32 _m_toy_type;	// 激活的玩具类别
		private ProtoMemberUInt32 _m_res;	// 激活验证结果（AccountRes）

		public Msg_Center2Logic_ToyActivate_Res()
		{
			_m_toy_guid = new ProtoMemberString(1, true);
			_m_toy_type = new ProtoMemberUInt32(2, true);
			_m_res = new ProtoMemberUInt32(3, true);
		}

		public Msg_Center2Logic_ToyActivate_Res(string __m_toy_guid, uint __m_toy_type, uint __m_res)
		{
			_m_toy_guid = new ProtoMemberString(1, true);
			_m_toy_guid.member_value = __m_toy_guid;
			_m_toy_type = new ProtoMemberUInt32(2, true);
			_m_toy_type.member_value = __m_toy_type;
			_m_res = new ProtoMemberUInt32(3, true);
			_m_res.member_value = __m_res;
		}

		public string m_toy_guid
		{
			get{ return _m_toy_guid.member_value; }
			set{ _m_toy_guid.member_value = value; }
		}
		public bool has_m_toy_guid
		{
			get{ return _m_toy_guid.has_value; }
		}

		public uint m_toy_type
		{
			get{ return _m_toy_type.member_value; }
			set{ _m_toy_type.member_value = value; }
		}
		public bool has_m_toy_type
		{
			get{ return _m_toy_type.has_value; }
		}

		public uint m_res
		{
			get{ return _m_res.member_value; }
			set{ _m_res.member_value = value; }
		}
		public bool has_m_res
		{
			get{ return _m_res.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_toy_guid.Serialize(_m_toy_guid.member_value, ref out_stream);

			count += _m_toy_type.Serialize(_m_toy_type.member_value, ref out_stream);

			count += _m_res.Serialize(_m_res.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			string temp_m_toy_guid = "";
			one_count = _m_toy_guid.ParseFrom(ref temp_m_toy_guid, ref int_stream);
			if (0 < one_count)
			{
					_m_toy_guid.member_value = temp_m_toy_guid;
					count = count + one_count;
			}

			uint temp_m_toy_type = 0;
			one_count = _m_toy_type.ParseFrom(ref temp_m_toy_type, ref int_stream);
			if (0 < one_count)
			{
					_m_toy_type.member_value = temp_m_toy_type;
					count = count + one_count;
			}

			uint temp_m_res = 0;
			one_count = _m_res.ParseFrom(ref temp_m_res, ref int_stream);
			if (0 < one_count)
			{
					_m_res.member_value = temp_m_res;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_CenterDB2Ranking_RankingInfo_Res : IMessage
	{
		private ProtoMemberEmbedded<RankingList> _m_RankingList;	//排行数据

		public Msg_CenterDB2Ranking_RankingInfo_Res()
		{
			_m_RankingList = new ProtoMemberEmbedded<RankingList>(1, false);
			_m_RankingList.member_value = new RankingList();
		}

		public RankingList m_RankingList
		{
			get{ return _m_RankingList.member_value as RankingList; }
			set{ _m_RankingList.member_value = value; }
		}
		public bool has_m_RankingList
		{
			get{ return _m_RankingList.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_RankingList.Serialize(_m_RankingList.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			RankingList temp_m_RankingList = new RankingList();
			one_count = _m_RankingList.ParseFrom(temp_m_RankingList, ref int_stream);
			if (0 < one_count)
			{
					_m_RankingList.member_value = temp_m_RankingList;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Chat2Client_Disconnect : IMessage
	{
		private ProtoMemberUInt32 _m_req_account_id;	// 账号id
		private ProtoMemberUInt32 _m_req_server_id;	// 所选服id

		public Msg_Chat2Client_Disconnect()
		{
			_m_req_account_id = new ProtoMemberUInt32(1, true);
			_m_req_server_id = new ProtoMemberUInt32(2, true);
		}

		public Msg_Chat2Client_Disconnect(uint __m_req_account_id, uint __m_req_server_id)
		{
			_m_req_account_id = new ProtoMemberUInt32(1, true);
			_m_req_account_id.member_value = __m_req_account_id;
			_m_req_server_id = new ProtoMemberUInt32(2, true);
			_m_req_server_id.member_value = __m_req_server_id;
		}

		public uint m_req_account_id
		{
			get{ return _m_req_account_id.member_value; }
			set{ _m_req_account_id.member_value = value; }
		}
		public bool has_m_req_account_id
		{
			get{ return _m_req_account_id.has_value; }
		}

		public uint m_req_server_id
		{
			get{ return _m_req_server_id.member_value; }
			set{ _m_req_server_id.member_value = value; }
		}
		public bool has_m_req_server_id
		{
			get{ return _m_req_server_id.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_req_account_id.Serialize(_m_req_account_id.member_value, ref out_stream);

			count += _m_req_server_id.Serialize(_m_req_server_id.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_req_account_id = 0;
			one_count = _m_req_account_id.ParseFrom(ref temp_m_req_account_id, ref int_stream);
			if (0 < one_count)
			{
					_m_req_account_id.member_value = temp_m_req_account_id;
					count = count + one_count;
			}

			uint temp_m_req_server_id = 0;
			one_count = _m_req_server_id.ParseFrom(ref temp_m_req_server_id, ref int_stream);
			if (0 < one_count)
			{
					_m_req_server_id.member_value = temp_m_req_server_id;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Chat2Client_TeamMember_IpPort_Res : IMessage
	{
		private ProtoMemberUInt32 _m_req_account_id;	// 账号id
		private ProtoMemberUInt32 _m_req_server_id;	// 所选服id
		private ProtoMemberEmbeddedList<ClientAddr> _m_addrList;	//地址列表

		public Msg_Chat2Client_TeamMember_IpPort_Res()
		{
			_m_req_account_id = new ProtoMemberUInt32(1, true);
			_m_req_server_id = new ProtoMemberUInt32(2, true);
			_m_addrList = new ProtoMemberEmbeddedList<ClientAddr>(4, false);
		}

		public Msg_Chat2Client_TeamMember_IpPort_Res(uint __m_req_account_id, uint __m_req_server_id)
		{
			_m_req_account_id = new ProtoMemberUInt32(1, true);
			_m_req_account_id.member_value = __m_req_account_id;
			_m_req_server_id = new ProtoMemberUInt32(2, true);
			_m_req_server_id.member_value = __m_req_server_id;
			_m_addrList = new ProtoMemberEmbeddedList<ClientAddr>(4, false);
		}

		public uint m_req_account_id
		{
			get{ return _m_req_account_id.member_value; }
			set{ _m_req_account_id.member_value = value; }
		}
		public bool has_m_req_account_id
		{
			get{ return _m_req_account_id.has_value; }
		}

		public uint m_req_server_id
		{
			get{ return _m_req_server_id.member_value; }
			set{ _m_req_server_id.member_value = value; }
		}
		public bool has_m_req_server_id
		{
			get{ return _m_req_server_id.has_value; }
		}

		public System.Collections.Generic.List<ClientAddr> m_addrList
		{
			get{ return _m_addrList.member_value; }
		}
		public bool has_m_addrList
		{
			get{ return _m_addrList.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_req_account_id.Serialize(_m_req_account_id.member_value, ref out_stream);

			count += _m_req_server_id.Serialize(_m_req_server_id.member_value, ref out_stream);

			foreach(ClientAddr one_member_value in _m_addrList.member_value)
			{
				count += _m_addrList.Serialize(one_member_value, ref out_stream);
			}

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_req_account_id = 0;
			one_count = _m_req_account_id.ParseFrom(ref temp_m_req_account_id, ref int_stream);
			if (0 < one_count)
			{
					_m_req_account_id.member_value = temp_m_req_account_id;
					count = count + one_count;
			}

			uint temp_m_req_server_id = 0;
			one_count = _m_req_server_id.ParseFrom(ref temp_m_req_server_id, ref int_stream);
			if (0 < one_count)
			{
					_m_req_server_id.member_value = temp_m_req_server_id;
					count = count + one_count;
			}

			while (true)
			{
				ClientAddr one_member_value = new ClientAddr();
				one_count = _m_addrList.ParseFrom(one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_addrList.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			return count;
		}
	}

	public class Msg_Chat2Client_UdpConnect_Res : IMessage
	{
		private ProtoMemberUInt32 _m_res;	// 验证结果（LogicRes）

		public Msg_Chat2Client_UdpConnect_Res()
		{
			_m_res = new ProtoMemberUInt32(1, true);
		}

		public Msg_Chat2Client_UdpConnect_Res(uint __m_res)
		{
			_m_res = new ProtoMemberUInt32(1, true);
			_m_res.member_value = __m_res;
		}

		public uint m_res
		{
			get{ return _m_res.member_value; }
			set{ _m_res.member_value = value; }
		}
		public bool has_m_res
		{
			get{ return _m_res.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_res.Serialize(_m_res.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_res = 0;
			one_count = _m_res.ParseFrom(ref temp_m_res, ref int_stream);
			if (0 < one_count)
			{
					_m_res.member_value = temp_m_res;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Client2Account_CleanToy_Req : IMessage
	{

		public Msg_Client2Account_CleanToy_Req()
		{
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			return count;
		}
	}

	public class Msg_Client2Account_Login_Req : IMessage
	{
		private ProtoMemberString _m_account_name;	// 请求登录的账号/密码
		private ProtoMemberString _m_account_key;	

		public Msg_Client2Account_Login_Req()
		{
			_m_account_name = new ProtoMemberString(1, true);
			_m_account_key = new ProtoMemberString(2, true);
		}

		public Msg_Client2Account_Login_Req(string __m_account_name, string __m_account_key)
		{
			_m_account_name = new ProtoMemberString(1, true);
			_m_account_name.member_value = __m_account_name;
			_m_account_key = new ProtoMemberString(2, true);
			_m_account_key.member_value = __m_account_key;
		}

		public string m_account_name
		{
			get{ return _m_account_name.member_value; }
			set{ _m_account_name.member_value = value; }
		}
		public bool has_m_account_name
		{
			get{ return _m_account_name.has_value; }
		}

		public string m_account_key
		{
			get{ return _m_account_key.member_value; }
			set{ _m_account_key.member_value = value; }
		}
		public bool has_m_account_key
		{
			get{ return _m_account_key.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_account_name.Serialize(_m_account_name.member_value, ref out_stream);

			count += _m_account_key.Serialize(_m_account_key.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			string temp_m_account_name = "";
			one_count = _m_account_name.ParseFrom(ref temp_m_account_name, ref int_stream);
			if (0 < one_count)
			{
					_m_account_name.member_value = temp_m_account_name;
					count = count + one_count;
			}

			string temp_m_account_key = "";
			one_count = _m_account_key.ParseFrom(ref temp_m_account_key, ref int_stream);
			if (0 < one_count)
			{
					_m_account_key.member_value = temp_m_account_key;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Client2Account_Reg_Req : IMessage
	{
		private ProtoMemberString _m_account_name;	// 请求注册的账号/密码
		private ProtoMemberString _m_account_key;	

		public Msg_Client2Account_Reg_Req()
		{
			_m_account_name = new ProtoMemberString(1, true);
			_m_account_key = new ProtoMemberString(2, true);
		}

		public Msg_Client2Account_Reg_Req(string __m_account_name, string __m_account_key)
		{
			_m_account_name = new ProtoMemberString(1, true);
			_m_account_name.member_value = __m_account_name;
			_m_account_key = new ProtoMemberString(2, true);
			_m_account_key.member_value = __m_account_key;
		}

		public string m_account_name
		{
			get{ return _m_account_name.member_value; }
			set{ _m_account_name.member_value = value; }
		}
		public bool has_m_account_name
		{
			get{ return _m_account_name.has_value; }
		}

		public string m_account_key
		{
			get{ return _m_account_key.member_value; }
			set{ _m_account_key.member_value = value; }
		}
		public bool has_m_account_key
		{
			get{ return _m_account_key.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_account_name.Serialize(_m_account_name.member_value, ref out_stream);

			count += _m_account_key.Serialize(_m_account_key.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			string temp_m_account_name = "";
			one_count = _m_account_name.ParseFrom(ref temp_m_account_name, ref int_stream);
			if (0 < one_count)
			{
					_m_account_name.member_value = temp_m_account_name;
					count = count + one_count;
			}

			string temp_m_account_key = "";
			one_count = _m_account_key.ParseFrom(ref temp_m_account_key, ref int_stream);
			if (0 < one_count)
			{
					_m_account_key.member_value = temp_m_account_key;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Client2Battle_BoardcastSkillEffect : IMessage
	{
		private ProtoMemberUInt32 _m_server_id;	//发包者的服id
		private ProtoMemberUInt32 _m_account;	//发包者的帐号id
		private ProtoMemberUInt32 _m_need_toself;	//是否需要广播给发包者
		private ProtoMemberUInt32 _m_atker_id;	//攻击者id(英雄0~3,怪物则是按规则生成的一个更大的四位数的值)
		private ProtoMemberUInt32 _m_skill_id;	//使用的技能id
		private ProtoMemberUInt32 _m_tgter_id;	//受击者id(英雄0~3,怪物则是按规则生成的一个更大的四位数的值)
		private ProtoMemberUInt32 _m_result_idx;	//技能效果列表索引
		private ProtoMemberEmbeddedList<DamageEffect> _m_effects;	//技能效果

		public Msg_Client2Battle_BoardcastSkillEffect()
		{
			_m_server_id = new ProtoMemberUInt32(1, true);
			_m_account = new ProtoMemberUInt32(2, true);
			_m_need_toself = new ProtoMemberUInt32(3, false);
			_m_atker_id = new ProtoMemberUInt32(4, true);
			_m_skill_id = new ProtoMemberUInt32(5, true);
			_m_tgter_id = new ProtoMemberUInt32(6, true);
			_m_result_idx = new ProtoMemberUInt32(7, true);
			_m_effects = new ProtoMemberEmbeddedList<DamageEffect>(8, false);
		}

		public Msg_Client2Battle_BoardcastSkillEffect(uint __m_server_id, uint __m_account, uint __m_need_toself, uint __m_atker_id, uint __m_skill_id, uint __m_tgter_id, uint __m_result_idx)
		{
			_m_server_id = new ProtoMemberUInt32(1, true);
			_m_server_id.member_value = __m_server_id;
			_m_account = new ProtoMemberUInt32(2, true);
			_m_account.member_value = __m_account;
			_m_need_toself = new ProtoMemberUInt32(3, false);
			_m_need_toself.member_value = __m_need_toself;
			_m_atker_id = new ProtoMemberUInt32(4, true);
			_m_atker_id.member_value = __m_atker_id;
			_m_skill_id = new ProtoMemberUInt32(5, true);
			_m_skill_id.member_value = __m_skill_id;
			_m_tgter_id = new ProtoMemberUInt32(6, true);
			_m_tgter_id.member_value = __m_tgter_id;
			_m_result_idx = new ProtoMemberUInt32(7, true);
			_m_result_idx.member_value = __m_result_idx;
			_m_effects = new ProtoMemberEmbeddedList<DamageEffect>(8, false);
		}

		public uint m_server_id
		{
			get{ return _m_server_id.member_value; }
			set{ _m_server_id.member_value = value; }
		}
		public bool has_m_server_id
		{
			get{ return _m_server_id.has_value; }
		}

		public uint m_account
		{
			get{ return _m_account.member_value; }
			set{ _m_account.member_value = value; }
		}
		public bool has_m_account
		{
			get{ return _m_account.has_value; }
		}

		public uint m_need_toself
		{
			get{ return _m_need_toself.member_value; }
			set{ _m_need_toself.member_value = value; }
		}
		public bool has_m_need_toself
		{
			get{ return _m_need_toself.has_value; }
		}

		public uint m_atker_id
		{
			get{ return _m_atker_id.member_value; }
			set{ _m_atker_id.member_value = value; }
		}
		public bool has_m_atker_id
		{
			get{ return _m_atker_id.has_value; }
		}

		public uint m_skill_id
		{
			get{ return _m_skill_id.member_value; }
			set{ _m_skill_id.member_value = value; }
		}
		public bool has_m_skill_id
		{
			get{ return _m_skill_id.has_value; }
		}

		public uint m_tgter_id
		{
			get{ return _m_tgter_id.member_value; }
			set{ _m_tgter_id.member_value = value; }
		}
		public bool has_m_tgter_id
		{
			get{ return _m_tgter_id.has_value; }
		}

		public uint m_result_idx
		{
			get{ return _m_result_idx.member_value; }
			set{ _m_result_idx.member_value = value; }
		}
		public bool has_m_result_idx
		{
			get{ return _m_result_idx.has_value; }
		}

		public System.Collections.Generic.List<DamageEffect> m_effects
		{
			get{ return _m_effects.member_value; }
		}
		public bool has_m_effects
		{
			get{ return _m_effects.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_server_id.Serialize(_m_server_id.member_value, ref out_stream);

			count += _m_account.Serialize(_m_account.member_value, ref out_stream);

			count += _m_need_toself.Serialize(_m_need_toself.member_value, ref out_stream);

			count += _m_atker_id.Serialize(_m_atker_id.member_value, ref out_stream);

			count += _m_skill_id.Serialize(_m_skill_id.member_value, ref out_stream);

			count += _m_tgter_id.Serialize(_m_tgter_id.member_value, ref out_stream);

			count += _m_result_idx.Serialize(_m_result_idx.member_value, ref out_stream);

			foreach(DamageEffect one_member_value in _m_effects.member_value)
			{
				count += _m_effects.Serialize(one_member_value, ref out_stream);
			}

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_server_id = 0;
			one_count = _m_server_id.ParseFrom(ref temp_m_server_id, ref int_stream);
			if (0 < one_count)
			{
					_m_server_id.member_value = temp_m_server_id;
					count = count + one_count;
			}

			uint temp_m_account = 0;
			one_count = _m_account.ParseFrom(ref temp_m_account, ref int_stream);
			if (0 < one_count)
			{
					_m_account.member_value = temp_m_account;
					count = count + one_count;
			}

			uint temp_m_need_toself = 0;
			one_count = _m_need_toself.ParseFrom(ref temp_m_need_toself, ref int_stream);
			if (0 < one_count)
			{
					_m_need_toself.member_value = temp_m_need_toself;
					count = count + one_count;
			}

			uint temp_m_atker_id = 0;
			one_count = _m_atker_id.ParseFrom(ref temp_m_atker_id, ref int_stream);
			if (0 < one_count)
			{
					_m_atker_id.member_value = temp_m_atker_id;
					count = count + one_count;
			}

			uint temp_m_skill_id = 0;
			one_count = _m_skill_id.ParseFrom(ref temp_m_skill_id, ref int_stream);
			if (0 < one_count)
			{
					_m_skill_id.member_value = temp_m_skill_id;
					count = count + one_count;
			}

			uint temp_m_tgter_id = 0;
			one_count = _m_tgter_id.ParseFrom(ref temp_m_tgter_id, ref int_stream);
			if (0 < one_count)
			{
					_m_tgter_id.member_value = temp_m_tgter_id;
					count = count + one_count;
			}

			uint temp_m_result_idx = 0;
			one_count = _m_result_idx.ParseFrom(ref temp_m_result_idx, ref int_stream);
			if (0 < one_count)
			{
					_m_result_idx.member_value = temp_m_result_idx;
					count = count + one_count;
			}

			while (true)
			{
				DamageEffect one_member_value = new DamageEffect();
				one_count = _m_effects.ParseFrom(one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_effects.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			return count;
		}
	}

	public class Msg_Client2Battle_CalcNetDelayTime : IMessage
	{
		private ProtoMemberUInt32 _m_index;	

		public Msg_Client2Battle_CalcNetDelayTime()
		{
			_m_index = new ProtoMemberUInt32(1, true);
		}

		public Msg_Client2Battle_CalcNetDelayTime(uint __m_index)
		{
			_m_index = new ProtoMemberUInt32(1, true);
			_m_index.member_value = __m_index;
		}

		public uint m_index
		{
			get{ return _m_index.member_value; }
			set{ _m_index.member_value = value; }
		}
		public bool has_m_index
		{
			get{ return _m_index.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_index.Serialize(_m_index.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_index = 0;
			one_count = _m_index.ParseFrom(ref temp_m_index, ref int_stream);
			if (0 < one_count)
			{
					_m_index.member_value = temp_m_index;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Client2Battle_CourseCartoonFinish : IMessage
	{
		private ProtoMemberUInt32List _m_sceneid;	//切的场景id

		public Msg_Client2Battle_CourseCartoonFinish()
		{
			_m_sceneid = new ProtoMemberUInt32List(1, false);
		}

		public System.Collections.Generic.List<uint> m_sceneid
		{
			get{ return _m_sceneid.member_value; }
		}
		public bool has_m_sceneid
		{
			get{ return _m_sceneid.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			foreach(uint one_member_value in _m_sceneid.member_value)
			{
				count += _m_sceneid.Serialize(one_member_value, ref out_stream);
			}

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			while (true)
			{
				uint one_member_value = 0;
				one_count = _m_sceneid.ParseFrom(ref one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_sceneid.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			return count;
		}
	}

	public class Msg_Client2Battle_GM_Req : IMessage
	{
		private ProtoMemberString _m_gm_cmd;	//GM命令

		public Msg_Client2Battle_GM_Req()
		{
			_m_gm_cmd = new ProtoMemberString(1, true);
		}

		public Msg_Client2Battle_GM_Req(string __m_gm_cmd)
		{
			_m_gm_cmd = new ProtoMemberString(1, true);
			_m_gm_cmd.member_value = __m_gm_cmd;
		}

		public string m_gm_cmd
		{
			get{ return _m_gm_cmd.member_value; }
			set{ _m_gm_cmd.member_value = value; }
		}
		public bool has_m_gm_cmd
		{
			get{ return _m_gm_cmd.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_gm_cmd.Serialize(_m_gm_cmd.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			string temp_m_gm_cmd = "";
			one_count = _m_gm_cmd.ParseFrom(ref temp_m_gm_cmd, ref int_stream);
			if (0 < one_count)
			{
					_m_gm_cmd.member_value = temp_m_gm_cmd;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Client2Battle_HelpBoardcast : IMessage
	{
		private ProtoMemberUInt32 _m_server_id;	//发包者的服id
		private ProtoMemberUInt32 _m_account;	//发包者的帐号id
		private ProtoMemberUInt32 _m_need_toself;	//是否需要广播给发包者
		private ProtoMemberUInt32 _m_operation;	//功能
		private ProtoMemberUInt32List _m_intParams;	//整形参数
		private ProtoMemberStringList _m_strParams;	//字符串型参数

		public Msg_Client2Battle_HelpBoardcast()
		{
			_m_server_id = new ProtoMemberUInt32(1, true);
			_m_account = new ProtoMemberUInt32(2, true);
			_m_need_toself = new ProtoMemberUInt32(3, false);
			_m_operation = new ProtoMemberUInt32(4, true);
			_m_intParams = new ProtoMemberUInt32List(5, false);
			_m_strParams = new ProtoMemberStringList(6, false);
		}

		public Msg_Client2Battle_HelpBoardcast(uint __m_server_id, uint __m_account, uint __m_need_toself, uint __m_operation)
		{
			_m_server_id = new ProtoMemberUInt32(1, true);
			_m_server_id.member_value = __m_server_id;
			_m_account = new ProtoMemberUInt32(2, true);
			_m_account.member_value = __m_account;
			_m_need_toself = new ProtoMemberUInt32(3, false);
			_m_need_toself.member_value = __m_need_toself;
			_m_operation = new ProtoMemberUInt32(4, true);
			_m_operation.member_value = __m_operation;
			_m_intParams = new ProtoMemberUInt32List(5, false);
			_m_strParams = new ProtoMemberStringList(6, false);
		}

		public uint m_server_id
		{
			get{ return _m_server_id.member_value; }
			set{ _m_server_id.member_value = value; }
		}
		public bool has_m_server_id
		{
			get{ return _m_server_id.has_value; }
		}

		public uint m_account
		{
			get{ return _m_account.member_value; }
			set{ _m_account.member_value = value; }
		}
		public bool has_m_account
		{
			get{ return _m_account.has_value; }
		}

		public uint m_need_toself
		{
			get{ return _m_need_toself.member_value; }
			set{ _m_need_toself.member_value = value; }
		}
		public bool has_m_need_toself
		{
			get{ return _m_need_toself.has_value; }
		}

		public uint m_operation
		{
			get{ return _m_operation.member_value; }
			set{ _m_operation.member_value = value; }
		}
		public bool has_m_operation
		{
			get{ return _m_operation.has_value; }
		}

		public System.Collections.Generic.List<uint> m_intParams
		{
			get{ return _m_intParams.member_value; }
		}
		public bool has_m_intParams
		{
			get{ return _m_intParams.has_value; }
		}

		public System.Collections.Generic.List<string> m_strParams
		{
			get{ return _m_strParams.member_value; }
		}
		public bool has_m_strParams
		{
			get{ return _m_strParams.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_server_id.Serialize(_m_server_id.member_value, ref out_stream);

			count += _m_account.Serialize(_m_account.member_value, ref out_stream);

			count += _m_need_toself.Serialize(_m_need_toself.member_value, ref out_stream);

			count += _m_operation.Serialize(_m_operation.member_value, ref out_stream);

			foreach(uint one_member_value in _m_intParams.member_value)
			{
				count += _m_intParams.Serialize(one_member_value, ref out_stream);
			}

			foreach(string one_member_value in _m_strParams.member_value)
			{
				count += _m_strParams.Serialize(one_member_value, ref out_stream);
			}

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_server_id = 0;
			one_count = _m_server_id.ParseFrom(ref temp_m_server_id, ref int_stream);
			if (0 < one_count)
			{
					_m_server_id.member_value = temp_m_server_id;
					count = count + one_count;
			}

			uint temp_m_account = 0;
			one_count = _m_account.ParseFrom(ref temp_m_account, ref int_stream);
			if (0 < one_count)
			{
					_m_account.member_value = temp_m_account;
					count = count + one_count;
			}

			uint temp_m_need_toself = 0;
			one_count = _m_need_toself.ParseFrom(ref temp_m_need_toself, ref int_stream);
			if (0 < one_count)
			{
					_m_need_toself.member_value = temp_m_need_toself;
					count = count + one_count;
			}

			uint temp_m_operation = 0;
			one_count = _m_operation.ParseFrom(ref temp_m_operation, ref int_stream);
			if (0 < one_count)
			{
					_m_operation.member_value = temp_m_operation;
					count = count + one_count;
			}

			while (true)
			{
				uint one_member_value = 0;
				one_count = _m_intParams.ParseFrom(ref one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_intParams.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			while (true)
			{
				string one_member_value = "";
				one_count = _m_strParams.ParseFrom(ref one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_strParams.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			return count;
		}
	}

	public class Msg_Client2Battle_HeroSkill : IMessage
	{
		private ProtoMemberEmbedded<BattleSkillEffect> _m_skill;	

		public Msg_Client2Battle_HeroSkill()
		{
			_m_skill = new ProtoMemberEmbedded<BattleSkillEffect>(1, true);
			_m_skill.member_value = new BattleSkillEffect();
		}

		public BattleSkillEffect m_skill
		{
			get{ return _m_skill.member_value as BattleSkillEffect; }
			set{ _m_skill.member_value = value; }
		}
		public bool has_m_skill
		{
			get{ return _m_skill.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_skill.Serialize(_m_skill.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			BattleSkillEffect temp_m_skill = new BattleSkillEffect();
			one_count = _m_skill.ParseFrom(temp_m_skill, ref int_stream);
			if (0 < one_count)
			{
					_m_skill.member_value = temp_m_skill;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Client2Battle_HeroWalk : IMessage
	{
		private ProtoMemberUInt32 _m_team_index;	//0~3		
		private ProtoMemberInt32 _m_fmPosX;	//起点X坐标
		private ProtoMemberInt32 _m_fmPosY;	//起点y坐标
		private ProtoMemberInt32 _m_fmPosZ;	//起点X坐标
		private ProtoMemberInt32 _m_toPosX;	//终点X坐标
		private ProtoMemberInt32 _m_toPosY;	//终点Y坐标
		private ProtoMemberInt32 _m_toPosZ;	//终点Z坐标
		private ProtoMemberInt32 _m_orient;	//在终点朝向
		private ProtoMemberUInt32 _m_walk_type;	//行走操作类型（前端用）
		private ProtoMemberUInt32 _m_speed;	//速度

		public Msg_Client2Battle_HeroWalk()
		{
			_m_team_index = new ProtoMemberUInt32(1, true);
			_m_fmPosX = new ProtoMemberInt32(2, true);
			_m_fmPosY = new ProtoMemberInt32(3, true);
			_m_fmPosZ = new ProtoMemberInt32(4, true);
			_m_toPosX = new ProtoMemberInt32(5, true);
			_m_toPosY = new ProtoMemberInt32(6, true);
			_m_toPosZ = new ProtoMemberInt32(7, true);
			_m_orient = new ProtoMemberInt32(8, true);
			_m_walk_type = new ProtoMemberUInt32(9, false);
			_m_speed = new ProtoMemberUInt32(10, false);
		}

		public Msg_Client2Battle_HeroWalk(uint __m_team_index, int __m_fmPosX, int __m_fmPosY, int __m_fmPosZ, int __m_toPosX, int __m_toPosY, int __m_toPosZ, int __m_orient, uint __m_walk_type, uint __m_speed)
		{
			_m_team_index = new ProtoMemberUInt32(1, true);
			_m_team_index.member_value = __m_team_index;
			_m_fmPosX = new ProtoMemberInt32(2, true);
			_m_fmPosX.member_value = __m_fmPosX;
			_m_fmPosY = new ProtoMemberInt32(3, true);
			_m_fmPosY.member_value = __m_fmPosY;
			_m_fmPosZ = new ProtoMemberInt32(4, true);
			_m_fmPosZ.member_value = __m_fmPosZ;
			_m_toPosX = new ProtoMemberInt32(5, true);
			_m_toPosX.member_value = __m_toPosX;
			_m_toPosY = new ProtoMemberInt32(6, true);
			_m_toPosY.member_value = __m_toPosY;
			_m_toPosZ = new ProtoMemberInt32(7, true);
			_m_toPosZ.member_value = __m_toPosZ;
			_m_orient = new ProtoMemberInt32(8, true);
			_m_orient.member_value = __m_orient;
			_m_walk_type = new ProtoMemberUInt32(9, false);
			_m_walk_type.member_value = __m_walk_type;
			_m_speed = new ProtoMemberUInt32(10, false);
			_m_speed.member_value = __m_speed;
		}

		public uint m_team_index
		{
			get{ return _m_team_index.member_value; }
			set{ _m_team_index.member_value = value; }
		}
		public bool has_m_team_index
		{
			get{ return _m_team_index.has_value; }
		}

		public int m_fmPosX
		{
			get{ return _m_fmPosX.member_value; }
			set{ _m_fmPosX.member_value = value; }
		}
		public bool has_m_fmPosX
		{
			get{ return _m_fmPosX.has_value; }
		}

		public int m_fmPosY
		{
			get{ return _m_fmPosY.member_value; }
			set{ _m_fmPosY.member_value = value; }
		}
		public bool has_m_fmPosY
		{
			get{ return _m_fmPosY.has_value; }
		}

		public int m_fmPosZ
		{
			get{ return _m_fmPosZ.member_value; }
			set{ _m_fmPosZ.member_value = value; }
		}
		public bool has_m_fmPosZ
		{
			get{ return _m_fmPosZ.has_value; }
		}

		public int m_toPosX
		{
			get{ return _m_toPosX.member_value; }
			set{ _m_toPosX.member_value = value; }
		}
		public bool has_m_toPosX
		{
			get{ return _m_toPosX.has_value; }
		}

		public int m_toPosY
		{
			get{ return _m_toPosY.member_value; }
			set{ _m_toPosY.member_value = value; }
		}
		public bool has_m_toPosY
		{
			get{ return _m_toPosY.has_value; }
		}

		public int m_toPosZ
		{
			get{ return _m_toPosZ.member_value; }
			set{ _m_toPosZ.member_value = value; }
		}
		public bool has_m_toPosZ
		{
			get{ return _m_toPosZ.has_value; }
		}

		public int m_orient
		{
			get{ return _m_orient.member_value; }
			set{ _m_orient.member_value = value; }
		}
		public bool has_m_orient
		{
			get{ return _m_orient.has_value; }
		}

		public uint m_walk_type
		{
			get{ return _m_walk_type.member_value; }
			set{ _m_walk_type.member_value = value; }
		}
		public bool has_m_walk_type
		{
			get{ return _m_walk_type.has_value; }
		}

		public uint m_speed
		{
			get{ return _m_speed.member_value; }
			set{ _m_speed.member_value = value; }
		}
		public bool has_m_speed
		{
			get{ return _m_speed.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_team_index.Serialize(_m_team_index.member_value, ref out_stream);

			count += _m_fmPosX.Serialize(_m_fmPosX.member_value, ref out_stream);

			count += _m_fmPosY.Serialize(_m_fmPosY.member_value, ref out_stream);

			count += _m_fmPosZ.Serialize(_m_fmPosZ.member_value, ref out_stream);

			count += _m_toPosX.Serialize(_m_toPosX.member_value, ref out_stream);

			count += _m_toPosY.Serialize(_m_toPosY.member_value, ref out_stream);

			count += _m_toPosZ.Serialize(_m_toPosZ.member_value, ref out_stream);

			count += _m_orient.Serialize(_m_orient.member_value, ref out_stream);

			count += _m_walk_type.Serialize(_m_walk_type.member_value, ref out_stream);

			count += _m_speed.Serialize(_m_speed.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_team_index = 0;
			one_count = _m_team_index.ParseFrom(ref temp_m_team_index, ref int_stream);
			if (0 < one_count)
			{
					_m_team_index.member_value = temp_m_team_index;
					count = count + one_count;
			}

			int temp_m_fmPosX = 0;
			one_count = _m_fmPosX.ParseFrom(ref temp_m_fmPosX, ref int_stream);
			if (0 < one_count)
			{
					_m_fmPosX.member_value = temp_m_fmPosX;
					count = count + one_count;
			}

			int temp_m_fmPosY = 0;
			one_count = _m_fmPosY.ParseFrom(ref temp_m_fmPosY, ref int_stream);
			if (0 < one_count)
			{
					_m_fmPosY.member_value = temp_m_fmPosY;
					count = count + one_count;
			}

			int temp_m_fmPosZ = 0;
			one_count = _m_fmPosZ.ParseFrom(ref temp_m_fmPosZ, ref int_stream);
			if (0 < one_count)
			{
					_m_fmPosZ.member_value = temp_m_fmPosZ;
					count = count + one_count;
			}

			int temp_m_toPosX = 0;
			one_count = _m_toPosX.ParseFrom(ref temp_m_toPosX, ref int_stream);
			if (0 < one_count)
			{
					_m_toPosX.member_value = temp_m_toPosX;
					count = count + one_count;
			}

			int temp_m_toPosY = 0;
			one_count = _m_toPosY.ParseFrom(ref temp_m_toPosY, ref int_stream);
			if (0 < one_count)
			{
					_m_toPosY.member_value = temp_m_toPosY;
					count = count + one_count;
			}

			int temp_m_toPosZ = 0;
			one_count = _m_toPosZ.ParseFrom(ref temp_m_toPosZ, ref int_stream);
			if (0 < one_count)
			{
					_m_toPosZ.member_value = temp_m_toPosZ;
					count = count + one_count;
			}

			int temp_m_orient = 0;
			one_count = _m_orient.ParseFrom(ref temp_m_orient, ref int_stream);
			if (0 < one_count)
			{
					_m_orient.member_value = temp_m_orient;
					count = count + one_count;
			}

			uint temp_m_walk_type = 0;
			one_count = _m_walk_type.ParseFrom(ref temp_m_walk_type, ref int_stream);
			if (0 < one_count)
			{
					_m_walk_type.member_value = temp_m_walk_type;
					count = count + one_count;
			}

			uint temp_m_speed = 0;
			one_count = _m_speed.ParseFrom(ref temp_m_speed, ref int_stream);
			if (0 < one_count)
			{
					_m_speed.member_value = temp_m_speed;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Client2Battle_NotifyEnterScene : IMessage
	{
		private ProtoMemberUInt32 _m_sceneid;	//场景ID	

		public Msg_Client2Battle_NotifyEnterScene()
		{
			_m_sceneid = new ProtoMemberUInt32(1, true);
		}

		public Msg_Client2Battle_NotifyEnterScene(uint __m_sceneid)
		{
			_m_sceneid = new ProtoMemberUInt32(1, true);
			_m_sceneid.member_value = __m_sceneid;
		}

		public uint m_sceneid
		{
			get{ return _m_sceneid.member_value; }
			set{ _m_sceneid.member_value = value; }
		}
		public bool has_m_sceneid
		{
			get{ return _m_sceneid.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_sceneid.Serialize(_m_sceneid.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_sceneid = 0;
			one_count = _m_sceneid.ParseFrom(ref temp_m_sceneid, ref int_stream);
			if (0 < one_count)
			{
					_m_sceneid.member_value = temp_m_sceneid;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Client2Battle_NotifyExitBattle : IMessage
	{

		public Msg_Client2Battle_NotifyExitBattle()
		{
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			return count;
		}
	}

	public class Msg_Client2Battle_PlayerLogin_Req : IMessage
	{
		private ProtoMemberUInt64 _m_team_id;	//逻辑服下发的当前组的队伍的唯一编号（也即是房间号）
		private ProtoMemberUInt32 _m_server_id;	//发包者的服id
		private ProtoMemberUInt32 _m_account;	//发包者的帐号id
		private ProtoMemberEmbeddedList<BattleLocation> _m_locations;	//英雄坐标位置(狩猎) 			

		public Msg_Client2Battle_PlayerLogin_Req()
		{
			_m_team_id = new ProtoMemberUInt64(1, true);
			_m_server_id = new ProtoMemberUInt32(2, true);
			_m_account = new ProtoMemberUInt32(3, true);
			_m_locations = new ProtoMemberEmbeddedList<BattleLocation>(4, false);
		}

		public Msg_Client2Battle_PlayerLogin_Req(ulong __m_team_id, uint __m_server_id, uint __m_account)
		{
			_m_team_id = new ProtoMemberUInt64(1, true);
			_m_team_id.member_value = __m_team_id;
			_m_server_id = new ProtoMemberUInt32(2, true);
			_m_server_id.member_value = __m_server_id;
			_m_account = new ProtoMemberUInt32(3, true);
			_m_account.member_value = __m_account;
			_m_locations = new ProtoMemberEmbeddedList<BattleLocation>(4, false);
		}

		public ulong m_team_id
		{
			get{ return _m_team_id.member_value; }
			set{ _m_team_id.member_value = value; }
		}
		public bool has_m_team_id
		{
			get{ return _m_team_id.has_value; }
		}

		public uint m_server_id
		{
			get{ return _m_server_id.member_value; }
			set{ _m_server_id.member_value = value; }
		}
		public bool has_m_server_id
		{
			get{ return _m_server_id.has_value; }
		}

		public uint m_account
		{
			get{ return _m_account.member_value; }
			set{ _m_account.member_value = value; }
		}
		public bool has_m_account
		{
			get{ return _m_account.has_value; }
		}

		public System.Collections.Generic.List<BattleLocation> m_locations
		{
			get{ return _m_locations.member_value; }
		}
		public bool has_m_locations
		{
			get{ return _m_locations.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_team_id.Serialize(_m_team_id.member_value, ref out_stream);

			count += _m_server_id.Serialize(_m_server_id.member_value, ref out_stream);

			count += _m_account.Serialize(_m_account.member_value, ref out_stream);

			foreach(BattleLocation one_member_value in _m_locations.member_value)
			{
				count += _m_locations.Serialize(one_member_value, ref out_stream);
			}

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			ulong temp_m_team_id = 0;
			one_count = _m_team_id.ParseFrom(ref temp_m_team_id, ref int_stream);
			if (0 < one_count)
			{
					_m_team_id.member_value = temp_m_team_id;
					count = count + one_count;
			}

			uint temp_m_server_id = 0;
			one_count = _m_server_id.ParseFrom(ref temp_m_server_id, ref int_stream);
			if (0 < one_count)
			{
					_m_server_id.member_value = temp_m_server_id;
					count = count + one_count;
			}

			uint temp_m_account = 0;
			one_count = _m_account.ParseFrom(ref temp_m_account, ref int_stream);
			if (0 < one_count)
			{
					_m_account.member_value = temp_m_account;
					count = count + one_count;
			}

			while (true)
			{
				BattleLocation one_member_value = new BattleLocation();
				one_count = _m_locations.ParseFrom(one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_locations.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			return count;
		}
	}

	public class Msg_Client2Battle_PvpLoadBegin : IMessage
	{

		public Msg_Client2Battle_PvpLoadBegin()
		{
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			return count;
		}
	}

	public class Msg_Client2Battle_QTE_Result : IMessage
	{
		private ProtoMemberUInt32 _m_sceneid;	//场景id
		private ProtoMemberUInt32 _m_monster_id;	//怪物id
		private ProtoMemberUInt32 _m_qte_id;	//QTE id
		private ProtoMemberUInt32 _m_res;	//QTE结果，0成功，1失败
		private ProtoMemberUInt32 _m_hero_guid;	//英雄guid

		public Msg_Client2Battle_QTE_Result()
		{
			_m_sceneid = new ProtoMemberUInt32(1, false);
			_m_monster_id = new ProtoMemberUInt32(2, false);
			_m_qte_id = new ProtoMemberUInt32(3, false);
			_m_res = new ProtoMemberUInt32(4, true);
			_m_hero_guid = new ProtoMemberUInt32(5, true);
		}

		public Msg_Client2Battle_QTE_Result(uint __m_sceneid, uint __m_monster_id, uint __m_qte_id, uint __m_res, uint __m_hero_guid)
		{
			_m_sceneid = new ProtoMemberUInt32(1, false);
			_m_sceneid.member_value = __m_sceneid;
			_m_monster_id = new ProtoMemberUInt32(2, false);
			_m_monster_id.member_value = __m_monster_id;
			_m_qte_id = new ProtoMemberUInt32(3, false);
			_m_qte_id.member_value = __m_qte_id;
			_m_res = new ProtoMemberUInt32(4, true);
			_m_res.member_value = __m_res;
			_m_hero_guid = new ProtoMemberUInt32(5, true);
			_m_hero_guid.member_value = __m_hero_guid;
		}

		public uint m_sceneid
		{
			get{ return _m_sceneid.member_value; }
			set{ _m_sceneid.member_value = value; }
		}
		public bool has_m_sceneid
		{
			get{ return _m_sceneid.has_value; }
		}

		public uint m_monster_id
		{
			get{ return _m_monster_id.member_value; }
			set{ _m_monster_id.member_value = value; }
		}
		public bool has_m_monster_id
		{
			get{ return _m_monster_id.has_value; }
		}

		public uint m_qte_id
		{
			get{ return _m_qte_id.member_value; }
			set{ _m_qte_id.member_value = value; }
		}
		public bool has_m_qte_id
		{
			get{ return _m_qte_id.has_value; }
		}

		public uint m_res
		{
			get{ return _m_res.member_value; }
			set{ _m_res.member_value = value; }
		}
		public bool has_m_res
		{
			get{ return _m_res.has_value; }
		}

		public uint m_hero_guid
		{
			get{ return _m_hero_guid.member_value; }
			set{ _m_hero_guid.member_value = value; }
		}
		public bool has_m_hero_guid
		{
			get{ return _m_hero_guid.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_sceneid.Serialize(_m_sceneid.member_value, ref out_stream);

			count += _m_monster_id.Serialize(_m_monster_id.member_value, ref out_stream);

			count += _m_qte_id.Serialize(_m_qte_id.member_value, ref out_stream);

			count += _m_res.Serialize(_m_res.member_value, ref out_stream);

			count += _m_hero_guid.Serialize(_m_hero_guid.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_sceneid = 0;
			one_count = _m_sceneid.ParseFrom(ref temp_m_sceneid, ref int_stream);
			if (0 < one_count)
			{
					_m_sceneid.member_value = temp_m_sceneid;
					count = count + one_count;
			}

			uint temp_m_monster_id = 0;
			one_count = _m_monster_id.ParseFrom(ref temp_m_monster_id, ref int_stream);
			if (0 < one_count)
			{
					_m_monster_id.member_value = temp_m_monster_id;
					count = count + one_count;
			}

			uint temp_m_qte_id = 0;
			one_count = _m_qte_id.ParseFrom(ref temp_m_qte_id, ref int_stream);
			if (0 < one_count)
			{
					_m_qte_id.member_value = temp_m_qte_id;
					count = count + one_count;
			}

			uint temp_m_res = 0;
			one_count = _m_res.ParseFrom(ref temp_m_res, ref int_stream);
			if (0 < one_count)
			{
					_m_res.member_value = temp_m_res;
					count = count + one_count;
			}

			uint temp_m_hero_guid = 0;
			one_count = _m_hero_guid.ParseFrom(ref temp_m_hero_guid, ref int_stream);
			if (0 < one_count)
			{
					_m_hero_guid.member_value = temp_m_hero_guid;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Client2Battle_RequestBattleRecordOfChallengeHunting : IMessage
	{

		public Msg_Client2Battle_RequestBattleRecordOfChallengeHunting()
		{
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			return count;
		}
	}

	public class Msg_Client2Battle_RequestMonsterUseSkill : IMessage
	{
		private ProtoMemberUInt32 _m_skillid;	//技能id
		private ProtoMemberUInt32 _m_monster_guid;	//怪物guid,为0则为当前地图所有怪

		public Msg_Client2Battle_RequestMonsterUseSkill()
		{
			_m_skillid = new ProtoMemberUInt32(1, true);
			_m_monster_guid = new ProtoMemberUInt32(2, false);
		}

		public Msg_Client2Battle_RequestMonsterUseSkill(uint __m_skillid, uint __m_monster_guid)
		{
			_m_skillid = new ProtoMemberUInt32(1, true);
			_m_skillid.member_value = __m_skillid;
			_m_monster_guid = new ProtoMemberUInt32(2, false);
			_m_monster_guid.member_value = __m_monster_guid;
		}

		public uint m_skillid
		{
			get{ return _m_skillid.member_value; }
			set{ _m_skillid.member_value = value; }
		}
		public bool has_m_skillid
		{
			get{ return _m_skillid.has_value; }
		}

		public uint m_monster_guid
		{
			get{ return _m_monster_guid.member_value; }
			set{ _m_monster_guid.member_value = value; }
		}
		public bool has_m_monster_guid
		{
			get{ return _m_monster_guid.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_skillid.Serialize(_m_skillid.member_value, ref out_stream);

			count += _m_monster_guid.Serialize(_m_monster_guid.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_skillid = 0;
			one_count = _m_skillid.ParseFrom(ref temp_m_skillid, ref int_stream);
			if (0 < one_count)
			{
					_m_skillid.member_value = temp_m_skillid;
					count = count + one_count;
			}

			uint temp_m_monster_guid = 0;
			one_count = _m_monster_guid.ParseFrom(ref temp_m_monster_guid, ref int_stream);
			if (0 < one_count)
			{
					_m_monster_guid.member_value = temp_m_monster_guid;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Client2Battle_SelectHero : IMessage
	{
		private ProtoMemberUInt32 _m_player_server_id;	//玩家
		private ProtoMemberUInt32 _m_player_account_id;	//玩家
		private ProtoMemberUInt32 _m_hero_index;	//英雄索引(1~8)
		private ProtoMemberUInt32 _m_hero_actorid;	//英雄ActorID
		private ProtoMemberUInt32 _m_is_Confirmed;	//是确认操作(0未确认，1确认)
		private ProtoMemberUInt32 _m_replace_hero_guid;	//将被换下的英雄的guid	

		public Msg_Client2Battle_SelectHero()
		{
			_m_player_server_id = new ProtoMemberUInt32(1, true);
			_m_player_account_id = new ProtoMemberUInt32(2, true);
			_m_hero_index = new ProtoMemberUInt32(3, true);
			_m_hero_actorid = new ProtoMemberUInt32(4, true);
			_m_is_Confirmed = new ProtoMemberUInt32(5, true);
			_m_replace_hero_guid = new ProtoMemberUInt32(6, false);
		}

		public Msg_Client2Battle_SelectHero(uint __m_player_server_id, uint __m_player_account_id, uint __m_hero_index, uint __m_hero_actorid, uint __m_is_Confirmed, uint __m_replace_hero_guid)
		{
			_m_player_server_id = new ProtoMemberUInt32(1, true);
			_m_player_server_id.member_value = __m_player_server_id;
			_m_player_account_id = new ProtoMemberUInt32(2, true);
			_m_player_account_id.member_value = __m_player_account_id;
			_m_hero_index = new ProtoMemberUInt32(3, true);
			_m_hero_index.member_value = __m_hero_index;
			_m_hero_actorid = new ProtoMemberUInt32(4, true);
			_m_hero_actorid.member_value = __m_hero_actorid;
			_m_is_Confirmed = new ProtoMemberUInt32(5, true);
			_m_is_Confirmed.member_value = __m_is_Confirmed;
			_m_replace_hero_guid = new ProtoMemberUInt32(6, false);
			_m_replace_hero_guid.member_value = __m_replace_hero_guid;
		}

		public uint m_player_server_id
		{
			get{ return _m_player_server_id.member_value; }
			set{ _m_player_server_id.member_value = value; }
		}
		public bool has_m_player_server_id
		{
			get{ return _m_player_server_id.has_value; }
		}

		public uint m_player_account_id
		{
			get{ return _m_player_account_id.member_value; }
			set{ _m_player_account_id.member_value = value; }
		}
		public bool has_m_player_account_id
		{
			get{ return _m_player_account_id.has_value; }
		}

		public uint m_hero_index
		{
			get{ return _m_hero_index.member_value; }
			set{ _m_hero_index.member_value = value; }
		}
		public bool has_m_hero_index
		{
			get{ return _m_hero_index.has_value; }
		}

		public uint m_hero_actorid
		{
			get{ return _m_hero_actorid.member_value; }
			set{ _m_hero_actorid.member_value = value; }
		}
		public bool has_m_hero_actorid
		{
			get{ return _m_hero_actorid.has_value; }
		}

		public uint m_is_Confirmed
		{
			get{ return _m_is_Confirmed.member_value; }
			set{ _m_is_Confirmed.member_value = value; }
		}
		public bool has_m_is_Confirmed
		{
			get{ return _m_is_Confirmed.has_value; }
		}

		public uint m_replace_hero_guid
		{
			get{ return _m_replace_hero_guid.member_value; }
			set{ _m_replace_hero_guid.member_value = value; }
		}
		public bool has_m_replace_hero_guid
		{
			get{ return _m_replace_hero_guid.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_player_server_id.Serialize(_m_player_server_id.member_value, ref out_stream);

			count += _m_player_account_id.Serialize(_m_player_account_id.member_value, ref out_stream);

			count += _m_hero_index.Serialize(_m_hero_index.member_value, ref out_stream);

			count += _m_hero_actorid.Serialize(_m_hero_actorid.member_value, ref out_stream);

			count += _m_is_Confirmed.Serialize(_m_is_Confirmed.member_value, ref out_stream);

			count += _m_replace_hero_guid.Serialize(_m_replace_hero_guid.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_player_server_id = 0;
			one_count = _m_player_server_id.ParseFrom(ref temp_m_player_server_id, ref int_stream);
			if (0 < one_count)
			{
					_m_player_server_id.member_value = temp_m_player_server_id;
					count = count + one_count;
			}

			uint temp_m_player_account_id = 0;
			one_count = _m_player_account_id.ParseFrom(ref temp_m_player_account_id, ref int_stream);
			if (0 < one_count)
			{
					_m_player_account_id.member_value = temp_m_player_account_id;
					count = count + one_count;
			}

			uint temp_m_hero_index = 0;
			one_count = _m_hero_index.ParseFrom(ref temp_m_hero_index, ref int_stream);
			if (0 < one_count)
			{
					_m_hero_index.member_value = temp_m_hero_index;
					count = count + one_count;
			}

			uint temp_m_hero_actorid = 0;
			one_count = _m_hero_actorid.ParseFrom(ref temp_m_hero_actorid, ref int_stream);
			if (0 < one_count)
			{
					_m_hero_actorid.member_value = temp_m_hero_actorid;
					count = count + one_count;
			}

			uint temp_m_is_Confirmed = 0;
			one_count = _m_is_Confirmed.ParseFrom(ref temp_m_is_Confirmed, ref int_stream);
			if (0 < one_count)
			{
					_m_is_Confirmed.member_value = temp_m_is_Confirmed;
					count = count + one_count;
			}

			uint temp_m_replace_hero_guid = 0;
			one_count = _m_replace_hero_guid.ParseFrom(ref temp_m_replace_hero_guid, ref int_stream);
			if (0 < one_count)
			{
					_m_replace_hero_guid.member_value = temp_m_replace_hero_guid;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Client2Battle_SetPropValue : IMessage
	{
		private ProtoMemberUInt32 _m_hero_guid;	//英雄guid 1~4	
		private ProtoMemberUInt32 _m_prop_id;	//属性id
		private ProtoMemberUInt32 _m_prop_value;	//属性值

		public Msg_Client2Battle_SetPropValue()
		{
			_m_hero_guid = new ProtoMemberUInt32(1, true);
			_m_prop_id = new ProtoMemberUInt32(2, true);
			_m_prop_value = new ProtoMemberUInt32(3, true);
		}

		public Msg_Client2Battle_SetPropValue(uint __m_hero_guid, uint __m_prop_id, uint __m_prop_value)
		{
			_m_hero_guid = new ProtoMemberUInt32(1, true);
			_m_hero_guid.member_value = __m_hero_guid;
			_m_prop_id = new ProtoMemberUInt32(2, true);
			_m_prop_id.member_value = __m_prop_id;
			_m_prop_value = new ProtoMemberUInt32(3, true);
			_m_prop_value.member_value = __m_prop_value;
		}

		public uint m_hero_guid
		{
			get{ return _m_hero_guid.member_value; }
			set{ _m_hero_guid.member_value = value; }
		}
		public bool has_m_hero_guid
		{
			get{ return _m_hero_guid.has_value; }
		}

		public uint m_prop_id
		{
			get{ return _m_prop_id.member_value; }
			set{ _m_prop_id.member_value = value; }
		}
		public bool has_m_prop_id
		{
			get{ return _m_prop_id.has_value; }
		}

		public uint m_prop_value
		{
			get{ return _m_prop_value.member_value; }
			set{ _m_prop_value.member_value = value; }
		}
		public bool has_m_prop_value
		{
			get{ return _m_prop_value.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_hero_guid.Serialize(_m_hero_guid.member_value, ref out_stream);

			count += _m_prop_id.Serialize(_m_prop_id.member_value, ref out_stream);

			count += _m_prop_value.Serialize(_m_prop_value.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_hero_guid = 0;
			one_count = _m_hero_guid.ParseFrom(ref temp_m_hero_guid, ref int_stream);
			if (0 < one_count)
			{
					_m_hero_guid.member_value = temp_m_hero_guid;
					count = count + one_count;
			}

			uint temp_m_prop_id = 0;
			one_count = _m_prop_id.ParseFrom(ref temp_m_prop_id, ref int_stream);
			if (0 < one_count)
			{
					_m_prop_id.member_value = temp_m_prop_id;
					count = count + one_count;
			}

			uint temp_m_prop_value = 0;
			one_count = _m_prop_value.ParseFrom(ref temp_m_prop_value, ref int_stream);
			if (0 < one_count)
			{
					_m_prop_value.member_value = temp_m_prop_value;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Client2Battle_StarChessUsePropItem : IMessage
	{
		private ProtoMemberUInt32 _m_player_server_id;	//使用道具的玩家
		private ProtoMemberUInt32 _m_player_account_id;	//使用道具的玩家
		private ProtoMemberUInt32 _m_propitem_index;	//被使用的道具索引(0~2)
		private ProtoMemberUInt32 _m_param;	//参数(如复制指定物品时，将被复制的物品的索引放在此参数)

		public Msg_Client2Battle_StarChessUsePropItem()
		{
			_m_player_server_id = new ProtoMemberUInt32(1, true);
			_m_player_account_id = new ProtoMemberUInt32(2, true);
			_m_propitem_index = new ProtoMemberUInt32(3, true);
			_m_param = new ProtoMemberUInt32(4, true);
		}

		public Msg_Client2Battle_StarChessUsePropItem(uint __m_player_server_id, uint __m_player_account_id, uint __m_propitem_index, uint __m_param)
		{
			_m_player_server_id = new ProtoMemberUInt32(1, true);
			_m_player_server_id.member_value = __m_player_server_id;
			_m_player_account_id = new ProtoMemberUInt32(2, true);
			_m_player_account_id.member_value = __m_player_account_id;
			_m_propitem_index = new ProtoMemberUInt32(3, true);
			_m_propitem_index.member_value = __m_propitem_index;
			_m_param = new ProtoMemberUInt32(4, true);
			_m_param.member_value = __m_param;
		}

		public uint m_player_server_id
		{
			get{ return _m_player_server_id.member_value; }
			set{ _m_player_server_id.member_value = value; }
		}
		public bool has_m_player_server_id
		{
			get{ return _m_player_server_id.has_value; }
		}

		public uint m_player_account_id
		{
			get{ return _m_player_account_id.member_value; }
			set{ _m_player_account_id.member_value = value; }
		}
		public bool has_m_player_account_id
		{
			get{ return _m_player_account_id.has_value; }
		}

		public uint m_propitem_index
		{
			get{ return _m_propitem_index.member_value; }
			set{ _m_propitem_index.member_value = value; }
		}
		public bool has_m_propitem_index
		{
			get{ return _m_propitem_index.has_value; }
		}

		public uint m_param
		{
			get{ return _m_param.member_value; }
			set{ _m_param.member_value = value; }
		}
		public bool has_m_param
		{
			get{ return _m_param.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_player_server_id.Serialize(_m_player_server_id.member_value, ref out_stream);

			count += _m_player_account_id.Serialize(_m_player_account_id.member_value, ref out_stream);

			count += _m_propitem_index.Serialize(_m_propitem_index.member_value, ref out_stream);

			count += _m_param.Serialize(_m_param.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_player_server_id = 0;
			one_count = _m_player_server_id.ParseFrom(ref temp_m_player_server_id, ref int_stream);
			if (0 < one_count)
			{
					_m_player_server_id.member_value = temp_m_player_server_id;
					count = count + one_count;
			}

			uint temp_m_player_account_id = 0;
			one_count = _m_player_account_id.ParseFrom(ref temp_m_player_account_id, ref int_stream);
			if (0 < one_count)
			{
					_m_player_account_id.member_value = temp_m_player_account_id;
					count = count + one_count;
			}

			uint temp_m_propitem_index = 0;
			one_count = _m_propitem_index.ParseFrom(ref temp_m_propitem_index, ref int_stream);
			if (0 < one_count)
			{
					_m_propitem_index.member_value = temp_m_propitem_index;
					count = count + one_count;
			}

			uint temp_m_param = 0;
			one_count = _m_param.ParseFrom(ref temp_m_param, ref int_stream);
			if (0 < one_count)
			{
					_m_param.member_value = temp_m_param;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Client2Battle_StarChess_Dice : IMessage
	{
		private ProtoMemberUInt32 _m_player_server_id;	
		private ProtoMemberUInt32 _m_player_account_id;	
		private ProtoMemberUInt32 _m_dice_type;	//骰子类型
		private ProtoMemberUInt32 _m_dice_value;	//骰子结果

		public Msg_Client2Battle_StarChess_Dice()
		{
			_m_player_server_id = new ProtoMemberUInt32(1, true);
			_m_player_account_id = new ProtoMemberUInt32(2, true);
			_m_dice_type = new ProtoMemberUInt32(3, true);
			_m_dice_value = new ProtoMemberUInt32(4, true);
		}

		public Msg_Client2Battle_StarChess_Dice(uint __m_player_server_id, uint __m_player_account_id, uint __m_dice_type, uint __m_dice_value)
		{
			_m_player_server_id = new ProtoMemberUInt32(1, true);
			_m_player_server_id.member_value = __m_player_server_id;
			_m_player_account_id = new ProtoMemberUInt32(2, true);
			_m_player_account_id.member_value = __m_player_account_id;
			_m_dice_type = new ProtoMemberUInt32(3, true);
			_m_dice_type.member_value = __m_dice_type;
			_m_dice_value = new ProtoMemberUInt32(4, true);
			_m_dice_value.member_value = __m_dice_value;
		}

		public uint m_player_server_id
		{
			get{ return _m_player_server_id.member_value; }
			set{ _m_player_server_id.member_value = value; }
		}
		public bool has_m_player_server_id
		{
			get{ return _m_player_server_id.has_value; }
		}

		public uint m_player_account_id
		{
			get{ return _m_player_account_id.member_value; }
			set{ _m_player_account_id.member_value = value; }
		}
		public bool has_m_player_account_id
		{
			get{ return _m_player_account_id.has_value; }
		}

		public uint m_dice_type
		{
			get{ return _m_dice_type.member_value; }
			set{ _m_dice_type.member_value = value; }
		}
		public bool has_m_dice_type
		{
			get{ return _m_dice_type.has_value; }
		}

		public uint m_dice_value
		{
			get{ return _m_dice_value.member_value; }
			set{ _m_dice_value.member_value = value; }
		}
		public bool has_m_dice_value
		{
			get{ return _m_dice_value.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_player_server_id.Serialize(_m_player_server_id.member_value, ref out_stream);

			count += _m_player_account_id.Serialize(_m_player_account_id.member_value, ref out_stream);

			count += _m_dice_type.Serialize(_m_dice_type.member_value, ref out_stream);

			count += _m_dice_value.Serialize(_m_dice_value.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_player_server_id = 0;
			one_count = _m_player_server_id.ParseFrom(ref temp_m_player_server_id, ref int_stream);
			if (0 < one_count)
			{
					_m_player_server_id.member_value = temp_m_player_server_id;
					count = count + one_count;
			}

			uint temp_m_player_account_id = 0;
			one_count = _m_player_account_id.ParseFrom(ref temp_m_player_account_id, ref int_stream);
			if (0 < one_count)
			{
					_m_player_account_id.member_value = temp_m_player_account_id;
					count = count + one_count;
			}

			uint temp_m_dice_type = 0;
			one_count = _m_dice_type.ParseFrom(ref temp_m_dice_type, ref int_stream);
			if (0 < one_count)
			{
					_m_dice_type.member_value = temp_m_dice_type;
					count = count + one_count;
			}

			uint temp_m_dice_value = 0;
			one_count = _m_dice_value.ParseFrom(ref temp_m_dice_value, ref int_stream);
			if (0 < one_count)
			{
					_m_dice_value.member_value = temp_m_dice_value;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Client2Battle_StarChess_GetHort : IMessage
	{

		public Msg_Client2Battle_StarChess_GetHort()
		{
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			return count;
		}
	}

	public class Msg_Client2Battle_StarChess_PartyModeNotify : IMessage
	{
		private ProtoMemberUInt32 _m_is_partymode;	//0非聚会模式，1聚会模式

		public Msg_Client2Battle_StarChess_PartyModeNotify()
		{
			_m_is_partymode = new ProtoMemberUInt32(1, true);
		}

		public Msg_Client2Battle_StarChess_PartyModeNotify(uint __m_is_partymode)
		{
			_m_is_partymode = new ProtoMemberUInt32(1, true);
			_m_is_partymode.member_value = __m_is_partymode;
		}

		public uint m_is_partymode
		{
			get{ return _m_is_partymode.member_value; }
			set{ _m_is_partymode.member_value = value; }
		}
		public bool has_m_is_partymode
		{
			get{ return _m_is_partymode.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_is_partymode.Serialize(_m_is_partymode.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_is_partymode = 0;
			one_count = _m_is_partymode.ParseFrom(ref temp_m_is_partymode, ref int_stream);
			if (0 < one_count)
			{
					_m_is_partymode.member_value = temp_m_is_partymode;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Client2Battle_SwitchMainControlHero : IMessage
	{
		private ProtoMemberUInt32 _m_hero_guid;	//主控英雄GUID

		public Msg_Client2Battle_SwitchMainControlHero()
		{
			_m_hero_guid = new ProtoMemberUInt32(1, true);
		}

		public Msg_Client2Battle_SwitchMainControlHero(uint __m_hero_guid)
		{
			_m_hero_guid = new ProtoMemberUInt32(1, true);
			_m_hero_guid.member_value = __m_hero_guid;
		}

		public uint m_hero_guid
		{
			get{ return _m_hero_guid.member_value; }
			set{ _m_hero_guid.member_value = value; }
		}
		public bool has_m_hero_guid
		{
			get{ return _m_hero_guid.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_hero_guid.Serialize(_m_hero_guid.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_hero_guid = 0;
			one_count = _m_hero_guid.ParseFrom(ref temp_m_hero_guid, ref int_stream);
			if (0 < one_count)
			{
					_m_hero_guid.member_value = temp_m_hero_guid;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Client2Battle_SyncUnitHp : IMessage
	{
		private ProtoMemberEmbedded<BattleAllHp> _m_allhps;	

		public Msg_Client2Battle_SyncUnitHp()
		{
			_m_allhps = new ProtoMemberEmbedded<BattleAllHp>(1, true);
			_m_allhps.member_value = new BattleAllHp();
		}

		public BattleAllHp m_allhps
		{
			get{ return _m_allhps.member_value as BattleAllHp; }
			set{ _m_allhps.member_value = value; }
		}
		public bool has_m_allhps
		{
			get{ return _m_allhps.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_allhps.Serialize(_m_allhps.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			BattleAllHp temp_m_allhps = new BattleAllHp();
			one_count = _m_allhps.ParseFrom(temp_m_allhps, ref int_stream);
			if (0 < one_count)
			{
					_m_allhps.member_value = temp_m_allhps;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Client2Battle_SyncUnitPos : IMessage
	{
		private ProtoMemberEmbeddedList<BattleLocation> _m_locations;	//生物位置

		public Msg_Client2Battle_SyncUnitPos()
		{
			_m_locations = new ProtoMemberEmbeddedList<BattleLocation>(1, false);
		}

		public System.Collections.Generic.List<BattleLocation> m_locations
		{
			get{ return _m_locations.member_value; }
		}
		public bool has_m_locations
		{
			get{ return _m_locations.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			foreach(BattleLocation one_member_value in _m_locations.member_value)
			{
				count += _m_locations.Serialize(one_member_value, ref out_stream);
			}

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			while (true)
			{
				BattleLocation one_member_value = new BattleLocation();
				one_count = _m_locations.ParseFrom(one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_locations.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			return count;
		}
	}

	public class Msg_Client2Center_Connect : IMessage
	{
		private ProtoMemberUInt32 _m_account_id;	// 账号id
		private ProtoMemberUInt32 _m_server_id;	// 所选服id
		private ProtoMemberUInt32 _m_key;	// 进入服务器的授权码key
		private ProtoMemberString _m_ip;	// 登陆ip（网关填）
		private ProtoMemberString _m_imei;	// 设备唯一标识（客户端填）

		public Msg_Client2Center_Connect()
		{
			_m_account_id = new ProtoMemberUInt32(1, true);
			_m_server_id = new ProtoMemberUInt32(2, true);
			_m_key = new ProtoMemberUInt32(3, true);
			_m_ip = new ProtoMemberString(4, false);
			_m_imei = new ProtoMemberString(5, false);
		}

		public Msg_Client2Center_Connect(uint __m_account_id, uint __m_server_id, uint __m_key, string __m_ip, string __m_imei)
		{
			_m_account_id = new ProtoMemberUInt32(1, true);
			_m_account_id.member_value = __m_account_id;
			_m_server_id = new ProtoMemberUInt32(2, true);
			_m_server_id.member_value = __m_server_id;
			_m_key = new ProtoMemberUInt32(3, true);
			_m_key.member_value = __m_key;
			_m_ip = new ProtoMemberString(4, false);
			_m_ip.member_value = __m_ip;
			_m_imei = new ProtoMemberString(5, false);
			_m_imei.member_value = __m_imei;
		}

		public uint m_account_id
		{
			get{ return _m_account_id.member_value; }
			set{ _m_account_id.member_value = value; }
		}
		public bool has_m_account_id
		{
			get{ return _m_account_id.has_value; }
		}

		public uint m_server_id
		{
			get{ return _m_server_id.member_value; }
			set{ _m_server_id.member_value = value; }
		}
		public bool has_m_server_id
		{
			get{ return _m_server_id.has_value; }
		}

		public uint m_key
		{
			get{ return _m_key.member_value; }
			set{ _m_key.member_value = value; }
		}
		public bool has_m_key
		{
			get{ return _m_key.has_value; }
		}

		public string m_ip
		{
			get{ return _m_ip.member_value; }
			set{ _m_ip.member_value = value; }
		}
		public bool has_m_ip
		{
			get{ return _m_ip.has_value; }
		}

		public string m_imei
		{
			get{ return _m_imei.member_value; }
			set{ _m_imei.member_value = value; }
		}
		public bool has_m_imei
		{
			get{ return _m_imei.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_account_id.Serialize(_m_account_id.member_value, ref out_stream);

			count += _m_server_id.Serialize(_m_server_id.member_value, ref out_stream);

			count += _m_key.Serialize(_m_key.member_value, ref out_stream);

			count += _m_ip.Serialize(_m_ip.member_value, ref out_stream);

			count += _m_imei.Serialize(_m_imei.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_account_id = 0;
			one_count = _m_account_id.ParseFrom(ref temp_m_account_id, ref int_stream);
			if (0 < one_count)
			{
					_m_account_id.member_value = temp_m_account_id;
					count = count + one_count;
			}

			uint temp_m_server_id = 0;
			one_count = _m_server_id.ParseFrom(ref temp_m_server_id, ref int_stream);
			if (0 < one_count)
			{
					_m_server_id.member_value = temp_m_server_id;
					count = count + one_count;
			}

			uint temp_m_key = 0;
			one_count = _m_key.ParseFrom(ref temp_m_key, ref int_stream);
			if (0 < one_count)
			{
					_m_key.member_value = temp_m_key;
					count = count + one_count;
			}

			string temp_m_ip = "";
			one_count = _m_ip.ParseFrom(ref temp_m_ip, ref int_stream);
			if (0 < one_count)
			{
					_m_ip.member_value = temp_m_ip;
					count = count + one_count;
			}

			string temp_m_imei = "";
			one_count = _m_imei.ParseFrom(ref temp_m_imei, ref int_stream);
			if (0 < one_count)
			{
					_m_imei.member_value = temp_m_imei;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Client2Chat_TeamMember_IpPort_Req : IMessage
	{
		private ProtoMemberUInt32 _m_account_id;	// 账号id
		private ProtoMemberUInt32 _m_server_id;	// 所选服id
		private ProtoMemberUInt32List _m_req_server_id;	// 所选服id
		private ProtoMemberUInt32List _m_req_account_id;	// 账号id

		public Msg_Client2Chat_TeamMember_IpPort_Req()
		{
			_m_account_id = new ProtoMemberUInt32(1, true);
			_m_server_id = new ProtoMemberUInt32(2, true);
			_m_req_server_id = new ProtoMemberUInt32List(3, false);
			_m_req_account_id = new ProtoMemberUInt32List(4, false);
		}

		public Msg_Client2Chat_TeamMember_IpPort_Req(uint __m_account_id, uint __m_server_id)
		{
			_m_account_id = new ProtoMemberUInt32(1, true);
			_m_account_id.member_value = __m_account_id;
			_m_server_id = new ProtoMemberUInt32(2, true);
			_m_server_id.member_value = __m_server_id;
			_m_req_server_id = new ProtoMemberUInt32List(3, false);
			_m_req_account_id = new ProtoMemberUInt32List(4, false);
		}

		public uint m_account_id
		{
			get{ return _m_account_id.member_value; }
			set{ _m_account_id.member_value = value; }
		}
		public bool has_m_account_id
		{
			get{ return _m_account_id.has_value; }
		}

		public uint m_server_id
		{
			get{ return _m_server_id.member_value; }
			set{ _m_server_id.member_value = value; }
		}
		public bool has_m_server_id
		{
			get{ return _m_server_id.has_value; }
		}

		public System.Collections.Generic.List<uint> m_req_server_id
		{
			get{ return _m_req_server_id.member_value; }
		}
		public bool has_m_req_server_id
		{
			get{ return _m_req_server_id.has_value; }
		}

		public System.Collections.Generic.List<uint> m_req_account_id
		{
			get{ return _m_req_account_id.member_value; }
		}
		public bool has_m_req_account_id
		{
			get{ return _m_req_account_id.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_account_id.Serialize(_m_account_id.member_value, ref out_stream);

			count += _m_server_id.Serialize(_m_server_id.member_value, ref out_stream);

			foreach(uint one_member_value in _m_req_server_id.member_value)
			{
				count += _m_req_server_id.Serialize(one_member_value, ref out_stream);
			}

			foreach(uint one_member_value in _m_req_account_id.member_value)
			{
				count += _m_req_account_id.Serialize(one_member_value, ref out_stream);
			}

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_account_id = 0;
			one_count = _m_account_id.ParseFrom(ref temp_m_account_id, ref int_stream);
			if (0 < one_count)
			{
					_m_account_id.member_value = temp_m_account_id;
					count = count + one_count;
			}

			uint temp_m_server_id = 0;
			one_count = _m_server_id.ParseFrom(ref temp_m_server_id, ref int_stream);
			if (0 < one_count)
			{
					_m_server_id.member_value = temp_m_server_id;
					count = count + one_count;
			}

			while (true)
			{
				uint one_member_value = 0;
				one_count = _m_req_server_id.ParseFrom(ref one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_req_server_id.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			while (true)
			{
				uint one_member_value = 0;
				one_count = _m_req_account_id.ParseFrom(ref one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_req_account_id.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			return count;
		}
	}

	public class Msg_Client2Chat_UdpConnect_Req : IMessage
	{
		private ProtoMemberUInt32 _m_account_id;	// 账号id
		private ProtoMemberUInt32 _m_server_id;	// 所选服id
		private ProtoMemberUInt32 _m_ip_lan;	// 内网IP
		private ProtoMemberUInt32 _m_port_lan;	// 内网port

		public Msg_Client2Chat_UdpConnect_Req()
		{
			_m_account_id = new ProtoMemberUInt32(1, true);
			_m_server_id = new ProtoMemberUInt32(2, true);
			_m_ip_lan = new ProtoMemberUInt32(3, false);
			_m_port_lan = new ProtoMemberUInt32(4, false);
		}

		public Msg_Client2Chat_UdpConnect_Req(uint __m_account_id, uint __m_server_id, uint __m_ip_lan, uint __m_port_lan)
		{
			_m_account_id = new ProtoMemberUInt32(1, true);
			_m_account_id.member_value = __m_account_id;
			_m_server_id = new ProtoMemberUInt32(2, true);
			_m_server_id.member_value = __m_server_id;
			_m_ip_lan = new ProtoMemberUInt32(3, false);
			_m_ip_lan.member_value = __m_ip_lan;
			_m_port_lan = new ProtoMemberUInt32(4, false);
			_m_port_lan.member_value = __m_port_lan;
		}

		public uint m_account_id
		{
			get{ return _m_account_id.member_value; }
			set{ _m_account_id.member_value = value; }
		}
		public bool has_m_account_id
		{
			get{ return _m_account_id.has_value; }
		}

		public uint m_server_id
		{
			get{ return _m_server_id.member_value; }
			set{ _m_server_id.member_value = value; }
		}
		public bool has_m_server_id
		{
			get{ return _m_server_id.has_value; }
		}

		public uint m_ip_lan
		{
			get{ return _m_ip_lan.member_value; }
			set{ _m_ip_lan.member_value = value; }
		}
		public bool has_m_ip_lan
		{
			get{ return _m_ip_lan.has_value; }
		}

		public uint m_port_lan
		{
			get{ return _m_port_lan.member_value; }
			set{ _m_port_lan.member_value = value; }
		}
		public bool has_m_port_lan
		{
			get{ return _m_port_lan.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_account_id.Serialize(_m_account_id.member_value, ref out_stream);

			count += _m_server_id.Serialize(_m_server_id.member_value, ref out_stream);

			count += _m_ip_lan.Serialize(_m_ip_lan.member_value, ref out_stream);

			count += _m_port_lan.Serialize(_m_port_lan.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_account_id = 0;
			one_count = _m_account_id.ParseFrom(ref temp_m_account_id, ref int_stream);
			if (0 < one_count)
			{
					_m_account_id.member_value = temp_m_account_id;
					count = count + one_count;
			}

			uint temp_m_server_id = 0;
			one_count = _m_server_id.ParseFrom(ref temp_m_server_id, ref int_stream);
			if (0 < one_count)
			{
					_m_server_id.member_value = temp_m_server_id;
					count = count + one_count;
			}

			uint temp_m_ip_lan = 0;
			one_count = _m_ip_lan.ParseFrom(ref temp_m_ip_lan, ref int_stream);
			if (0 < one_count)
			{
					_m_ip_lan.member_value = temp_m_ip_lan;
					count = count + one_count;
			}

			uint temp_m_port_lan = 0;
			one_count = _m_port_lan.ParseFrom(ref temp_m_port_lan, ref int_stream);
			if (0 < one_count)
			{
					_m_port_lan.member_value = temp_m_port_lan;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Client2Logic_Appearance_SetPlan_Req : IMessage
	{
		private ProtoMemberUInt32 _m_heroId;	//英雄ID
		private ProtoMemberEmbedded<HeroAppearancePlan> _m_plan;	//方案

		public Msg_Client2Logic_Appearance_SetPlan_Req()
		{
			_m_heroId = new ProtoMemberUInt32(1, true);
			_m_plan = new ProtoMemberEmbedded<HeroAppearancePlan>(2, true);
			_m_plan.member_value = new HeroAppearancePlan();
		}

		public Msg_Client2Logic_Appearance_SetPlan_Req(uint __m_heroId)
		{
			_m_heroId = new ProtoMemberUInt32(1, true);
			_m_heroId.member_value = __m_heroId;
			_m_plan = new ProtoMemberEmbedded<HeroAppearancePlan>(2, true);
			_m_plan.member_value = new HeroAppearancePlan();
		}

		public uint m_heroId
		{
			get{ return _m_heroId.member_value; }
			set{ _m_heroId.member_value = value; }
		}
		public bool has_m_heroId
		{
			get{ return _m_heroId.has_value; }
		}

		public HeroAppearancePlan m_plan
		{
			get{ return _m_plan.member_value as HeroAppearancePlan; }
			set{ _m_plan.member_value = value; }
		}
		public bool has_m_plan
		{
			get{ return _m_plan.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_heroId.Serialize(_m_heroId.member_value, ref out_stream);

			count += _m_plan.Serialize(_m_plan.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_heroId = 0;
			one_count = _m_heroId.ParseFrom(ref temp_m_heroId, ref int_stream);
			if (0 < one_count)
			{
					_m_heroId.member_value = temp_m_heroId;
					count = count + one_count;
			}

			HeroAppearancePlan temp_m_plan = new HeroAppearancePlan();
			one_count = _m_plan.ParseFrom(temp_m_plan, ref int_stream);
			if (0 < one_count)
			{
					_m_plan.member_value = temp_m_plan;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Client2Logic_ChangeToy_Req : IMessage
	{
		private ProtoMemberUInt32 _m_toy_type;	// 待使用的玩具模型

		public Msg_Client2Logic_ChangeToy_Req()
		{
			_m_toy_type = new ProtoMemberUInt32(1, true);
		}

		public Msg_Client2Logic_ChangeToy_Req(uint __m_toy_type)
		{
			_m_toy_type = new ProtoMemberUInt32(1, true);
			_m_toy_type.member_value = __m_toy_type;
		}

		public uint m_toy_type
		{
			get{ return _m_toy_type.member_value; }
			set{ _m_toy_type.member_value = value; }
		}
		public bool has_m_toy_type
		{
			get{ return _m_toy_type.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_toy_type.Serialize(_m_toy_type.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_toy_type = 0;
			one_count = _m_toy_type.ParseFrom(ref temp_m_toy_type, ref int_stream);
			if (0 < one_count)
			{
					_m_toy_type.member_value = temp_m_toy_type;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Client2Logic_Chat_Req : IMessage
	{
		private ProtoMemberUInt32 _m_type;	// 类型：0文字，1语音
		private ProtoMemberUInt32 _m_channel;	// 频道：0世界，1公会，2队伍，3私聊，4公告
		private ProtoMemberString _m_chat;	// 聊天内容
		private ProtoMemberUInt32 _m_target_account_id;	// 目标玩家角色id == 账号id
		private ProtoMemberUInt32 _m_target_server_id;	// 目标玩家所属服id

		public Msg_Client2Logic_Chat_Req()
		{
			_m_type = new ProtoMemberUInt32(1, true);
			_m_channel = new ProtoMemberUInt32(2, true);
			_m_chat = new ProtoMemberString(3, true);
			_m_target_account_id = new ProtoMemberUInt32(4, false);
			_m_target_server_id = new ProtoMemberUInt32(5, false);
		}

		public Msg_Client2Logic_Chat_Req(uint __m_type, uint __m_channel, string __m_chat, uint __m_target_account_id, uint __m_target_server_id)
		{
			_m_type = new ProtoMemberUInt32(1, true);
			_m_type.member_value = __m_type;
			_m_channel = new ProtoMemberUInt32(2, true);
			_m_channel.member_value = __m_channel;
			_m_chat = new ProtoMemberString(3, true);
			_m_chat.member_value = __m_chat;
			_m_target_account_id = new ProtoMemberUInt32(4, false);
			_m_target_account_id.member_value = __m_target_account_id;
			_m_target_server_id = new ProtoMemberUInt32(5, false);
			_m_target_server_id.member_value = __m_target_server_id;
		}

		public uint m_type
		{
			get{ return _m_type.member_value; }
			set{ _m_type.member_value = value; }
		}
		public bool has_m_type
		{
			get{ return _m_type.has_value; }
		}

		public uint m_channel
		{
			get{ return _m_channel.member_value; }
			set{ _m_channel.member_value = value; }
		}
		public bool has_m_channel
		{
			get{ return _m_channel.has_value; }
		}

		public string m_chat
		{
			get{ return _m_chat.member_value; }
			set{ _m_chat.member_value = value; }
		}
		public bool has_m_chat
		{
			get{ return _m_chat.has_value; }
		}

		public uint m_target_account_id
		{
			get{ return _m_target_account_id.member_value; }
			set{ _m_target_account_id.member_value = value; }
		}
		public bool has_m_target_account_id
		{
			get{ return _m_target_account_id.has_value; }
		}

		public uint m_target_server_id
		{
			get{ return _m_target_server_id.member_value; }
			set{ _m_target_server_id.member_value = value; }
		}
		public bool has_m_target_server_id
		{
			get{ return _m_target_server_id.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_type.Serialize(_m_type.member_value, ref out_stream);

			count += _m_channel.Serialize(_m_channel.member_value, ref out_stream);

			count += _m_chat.Serialize(_m_chat.member_value, ref out_stream);

			count += _m_target_account_id.Serialize(_m_target_account_id.member_value, ref out_stream);

			count += _m_target_server_id.Serialize(_m_target_server_id.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_type = 0;
			one_count = _m_type.ParseFrom(ref temp_m_type, ref int_stream);
			if (0 < one_count)
			{
					_m_type.member_value = temp_m_type;
					count = count + one_count;
			}

			uint temp_m_channel = 0;
			one_count = _m_channel.ParseFrom(ref temp_m_channel, ref int_stream);
			if (0 < one_count)
			{
					_m_channel.member_value = temp_m_channel;
					count = count + one_count;
			}

			string temp_m_chat = "";
			one_count = _m_chat.ParseFrom(ref temp_m_chat, ref int_stream);
			if (0 < one_count)
			{
					_m_chat.member_value = temp_m_chat;
					count = count + one_count;
			}

			uint temp_m_target_account_id = 0;
			one_count = _m_target_account_id.ParseFrom(ref temp_m_target_account_id, ref int_stream);
			if (0 < one_count)
			{
					_m_target_account_id.member_value = temp_m_target_account_id;
					count = count + one_count;
			}

			uint temp_m_target_server_id = 0;
			one_count = _m_target_server_id.ParseFrom(ref temp_m_target_server_id, ref int_stream);
			if (0 < one_count)
			{
					_m_target_server_id.member_value = temp_m_target_server_id;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Client2Logic_CheckPlayerName_Req : IMessage
	{
		private ProtoMemberString _m_player_name;	// 角色名

		public Msg_Client2Logic_CheckPlayerName_Req()
		{
			_m_player_name = new ProtoMemberString(1, true);
		}

		public Msg_Client2Logic_CheckPlayerName_Req(string __m_player_name)
		{
			_m_player_name = new ProtoMemberString(1, true);
			_m_player_name.member_value = __m_player_name;
		}

		public string m_player_name
		{
			get{ return _m_player_name.member_value; }
			set{ _m_player_name.member_value = value; }
		}
		public bool has_m_player_name
		{
			get{ return _m_player_name.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_player_name.Serialize(_m_player_name.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			string temp_m_player_name = "";
			one_count = _m_player_name.ParseFrom(ref temp_m_player_name, ref int_stream);
			if (0 < one_count)
			{
					_m_player_name.member_value = temp_m_player_name;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Client2Logic_CheckToyActivate_Req : IMessage
	{
		private ProtoMemberString _m_toy_guid;	// 激活的玩具唯一识别码
		private ProtoMemberString _m_toy_key;	// 激活的玩具密码
		private ProtoMemberUInt32 _m_toy_type;	// 激活的玩具类别

		public Msg_Client2Logic_CheckToyActivate_Req()
		{
			_m_toy_guid = new ProtoMemberString(1, true);
			_m_toy_key = new ProtoMemberString(2, true);
			_m_toy_type = new ProtoMemberUInt32(3, true);
		}

		public Msg_Client2Logic_CheckToyActivate_Req(string __m_toy_guid, string __m_toy_key, uint __m_toy_type)
		{
			_m_toy_guid = new ProtoMemberString(1, true);
			_m_toy_guid.member_value = __m_toy_guid;
			_m_toy_key = new ProtoMemberString(2, true);
			_m_toy_key.member_value = __m_toy_key;
			_m_toy_type = new ProtoMemberUInt32(3, true);
			_m_toy_type.member_value = __m_toy_type;
		}

		public string m_toy_guid
		{
			get{ return _m_toy_guid.member_value; }
			set{ _m_toy_guid.member_value = value; }
		}
		public bool has_m_toy_guid
		{
			get{ return _m_toy_guid.has_value; }
		}

		public string m_toy_key
		{
			get{ return _m_toy_key.member_value; }
			set{ _m_toy_key.member_value = value; }
		}
		public bool has_m_toy_key
		{
			get{ return _m_toy_key.has_value; }
		}

		public uint m_toy_type
		{
			get{ return _m_toy_type.member_value; }
			set{ _m_toy_type.member_value = value; }
		}
		public bool has_m_toy_type
		{
			get{ return _m_toy_type.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_toy_guid.Serialize(_m_toy_guid.member_value, ref out_stream);

			count += _m_toy_key.Serialize(_m_toy_key.member_value, ref out_stream);

			count += _m_toy_type.Serialize(_m_toy_type.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			string temp_m_toy_guid = "";
			one_count = _m_toy_guid.ParseFrom(ref temp_m_toy_guid, ref int_stream);
			if (0 < one_count)
			{
					_m_toy_guid.member_value = temp_m_toy_guid;
					count = count + one_count;
			}

			string temp_m_toy_key = "";
			one_count = _m_toy_key.ParseFrom(ref temp_m_toy_key, ref int_stream);
			if (0 < one_count)
			{
					_m_toy_key.member_value = temp_m_toy_key;
					count = count + one_count;
			}

			uint temp_m_toy_type = 0;
			one_count = _m_toy_type.ParseFrom(ref temp_m_toy_type, ref int_stream);
			if (0 < one_count)
			{
					_m_toy_type.member_value = temp_m_toy_type;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Client2Logic_Create_Player_Req : IMessage
	{
		private ProtoMemberString _m_name;	// 待创建的角色名称
		private ProtoMemberUInt32 _m_toy_type;	// 待创建的角色对应的模型数据

		public Msg_Client2Logic_Create_Player_Req()
		{
			_m_name = new ProtoMemberString(1, true);
			_m_toy_type = new ProtoMemberUInt32(2, true);
		}

		public Msg_Client2Logic_Create_Player_Req(string __m_name, uint __m_toy_type)
		{
			_m_name = new ProtoMemberString(1, true);
			_m_name.member_value = __m_name;
			_m_toy_type = new ProtoMemberUInt32(2, true);
			_m_toy_type.member_value = __m_toy_type;
		}

		public string m_name
		{
			get{ return _m_name.member_value; }
			set{ _m_name.member_value = value; }
		}
		public bool has_m_name
		{
			get{ return _m_name.has_value; }
		}

		public uint m_toy_type
		{
			get{ return _m_toy_type.member_value; }
			set{ _m_toy_type.member_value = value; }
		}
		public bool has_m_toy_type
		{
			get{ return _m_toy_type.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_name.Serialize(_m_name.member_value, ref out_stream);

			count += _m_toy_type.Serialize(_m_toy_type.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			string temp_m_name = "";
			one_count = _m_name.ParseFrom(ref temp_m_name, ref int_stream);
			if (0 < one_count)
			{
					_m_name.member_value = temp_m_name;
					count = count + one_count;
			}

			uint temp_m_toy_type = 0;
			one_count = _m_toy_type.ParseFrom(ref temp_m_toy_type, ref int_stream);
			if (0 < one_count)
			{
					_m_toy_type.member_value = temp_m_toy_type;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Client2Logic_DiaoWen_LvUp_Req : IMessage
	{
		private ProtoMemberEnum<PlayerDiaoWenType> _m_diaowen_type;	// 方案类型
		private ProtoMemberUInt32 _m_diaowen_plan_index;	// 方案序号0-2
		private ProtoMemberUInt32 _m_diaowen_plan_seat;	// 方案中镶嵌的位置0-6

		public Msg_Client2Logic_DiaoWen_LvUp_Req()
		{
			_m_diaowen_type = new ProtoMemberEnum<PlayerDiaoWenType>(1, true);
			_m_diaowen_plan_index = new ProtoMemberUInt32(2, true);
			_m_diaowen_plan_seat = new ProtoMemberUInt32(3, true);
		}

		public Msg_Client2Logic_DiaoWen_LvUp_Req(PlayerDiaoWenType __m_diaowen_type, uint __m_diaowen_plan_index, uint __m_diaowen_plan_seat)
		{
			_m_diaowen_type = new ProtoMemberEnum<PlayerDiaoWenType>(1, true);
			_m_diaowen_type.member_value = __m_diaowen_type;
			_m_diaowen_plan_index = new ProtoMemberUInt32(2, true);
			_m_diaowen_plan_index.member_value = __m_diaowen_plan_index;
			_m_diaowen_plan_seat = new ProtoMemberUInt32(3, true);
			_m_diaowen_plan_seat.member_value = __m_diaowen_plan_seat;
		}

		public PlayerDiaoWenType m_diaowen_type
		{
			get{ return _m_diaowen_type.member_value; }
			set{ _m_diaowen_type.member_value = value; }
		}
		public bool has_m_diaowen_type
		{
			get{ return _m_diaowen_type.has_value; }
		}

		public uint m_diaowen_plan_index
		{
			get{ return _m_diaowen_plan_index.member_value; }
			set{ _m_diaowen_plan_index.member_value = value; }
		}
		public bool has_m_diaowen_plan_index
		{
			get{ return _m_diaowen_plan_index.has_value; }
		}

		public uint m_diaowen_plan_seat
		{
			get{ return _m_diaowen_plan_seat.member_value; }
			set{ _m_diaowen_plan_seat.member_value = value; }
		}
		public bool has_m_diaowen_plan_seat
		{
			get{ return _m_diaowen_plan_seat.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_diaowen_type.Serialize((uint)_m_diaowen_type.member_value, ref out_stream);

			count += _m_diaowen_plan_index.Serialize(_m_diaowen_plan_index.member_value, ref out_stream);

			count += _m_diaowen_plan_seat.Serialize(_m_diaowen_plan_seat.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_diaowen_type = 0;
			one_count = _m_diaowen_type.ParseFrom(ref temp_m_diaowen_type, ref int_stream);
			if (0 < one_count)
			{
					_m_diaowen_type.member_value = (PlayerDiaoWenType)temp_m_diaowen_type;
					count = count + one_count;
			}

			uint temp_m_diaowen_plan_index = 0;
			one_count = _m_diaowen_plan_index.ParseFrom(ref temp_m_diaowen_plan_index, ref int_stream);
			if (0 < one_count)
			{
					_m_diaowen_plan_index.member_value = temp_m_diaowen_plan_index;
					count = count + one_count;
			}

			uint temp_m_diaowen_plan_seat = 0;
			one_count = _m_diaowen_plan_seat.ParseFrom(ref temp_m_diaowen_plan_seat, ref int_stream);
			if (0 < one_count)
			{
					_m_diaowen_plan_seat.member_value = temp_m_diaowen_plan_seat;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Client2Logic_DiaoWen_SetCurrPlan_Req : IMessage
	{
		private ProtoMemberEnum<PlayerDiaoWenType> _m_diaowen_type;	// 方案类型
		private ProtoMemberUInt32 _m_diaowen_plan_index;	// 方案序号0-2

		public Msg_Client2Logic_DiaoWen_SetCurrPlan_Req()
		{
			_m_diaowen_type = new ProtoMemberEnum<PlayerDiaoWenType>(1, true);
			_m_diaowen_plan_index = new ProtoMemberUInt32(2, true);
		}

		public Msg_Client2Logic_DiaoWen_SetCurrPlan_Req(PlayerDiaoWenType __m_diaowen_type, uint __m_diaowen_plan_index)
		{
			_m_diaowen_type = new ProtoMemberEnum<PlayerDiaoWenType>(1, true);
			_m_diaowen_type.member_value = __m_diaowen_type;
			_m_diaowen_plan_index = new ProtoMemberUInt32(2, true);
			_m_diaowen_plan_index.member_value = __m_diaowen_plan_index;
		}

		public PlayerDiaoWenType m_diaowen_type
		{
			get{ return _m_diaowen_type.member_value; }
			set{ _m_diaowen_type.member_value = value; }
		}
		public bool has_m_diaowen_type
		{
			get{ return _m_diaowen_type.has_value; }
		}

		public uint m_diaowen_plan_index
		{
			get{ return _m_diaowen_plan_index.member_value; }
			set{ _m_diaowen_plan_index.member_value = value; }
		}
		public bool has_m_diaowen_plan_index
		{
			get{ return _m_diaowen_plan_index.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_diaowen_type.Serialize((uint)_m_diaowen_type.member_value, ref out_stream);

			count += _m_diaowen_plan_index.Serialize(_m_diaowen_plan_index.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_diaowen_type = 0;
			one_count = _m_diaowen_type.ParseFrom(ref temp_m_diaowen_type, ref int_stream);
			if (0 < one_count)
			{
					_m_diaowen_type.member_value = (PlayerDiaoWenType)temp_m_diaowen_type;
					count = count + one_count;
			}

			uint temp_m_diaowen_plan_index = 0;
			one_count = _m_diaowen_plan_index.ParseFrom(ref temp_m_diaowen_plan_index, ref int_stream);
			if (0 < one_count)
			{
					_m_diaowen_plan_index.member_value = temp_m_diaowen_plan_index;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Client2Logic_DiaoWen_Set_Req : IMessage
	{
		private ProtoMemberEnum<PlayerDiaoWenType> _m_diaowen_type;	// 方案类型
		private ProtoMemberUInt32 _m_diaowen_plan_index;	// 方案序号0-2
		private ProtoMemberUInt32 _m_diaowen_plan_seat;	// 方案中镶嵌的位置0-6
		private ProtoMemberUInt32 _m_diaowen_bag_seat;	// 方案中镶嵌的雕文在雕纹背包中的位置

		public Msg_Client2Logic_DiaoWen_Set_Req()
		{
			_m_diaowen_type = new ProtoMemberEnum<PlayerDiaoWenType>(1, true);
			_m_diaowen_plan_index = new ProtoMemberUInt32(2, true);
			_m_diaowen_plan_seat = new ProtoMemberUInt32(3, true);
			_m_diaowen_bag_seat = new ProtoMemberUInt32(4, true);
		}

		public Msg_Client2Logic_DiaoWen_Set_Req(PlayerDiaoWenType __m_diaowen_type, uint __m_diaowen_plan_index, uint __m_diaowen_plan_seat, uint __m_diaowen_bag_seat)
		{
			_m_diaowen_type = new ProtoMemberEnum<PlayerDiaoWenType>(1, true);
			_m_diaowen_type.member_value = __m_diaowen_type;
			_m_diaowen_plan_index = new ProtoMemberUInt32(2, true);
			_m_diaowen_plan_index.member_value = __m_diaowen_plan_index;
			_m_diaowen_plan_seat = new ProtoMemberUInt32(3, true);
			_m_diaowen_plan_seat.member_value = __m_diaowen_plan_seat;
			_m_diaowen_bag_seat = new ProtoMemberUInt32(4, true);
			_m_diaowen_bag_seat.member_value = __m_diaowen_bag_seat;
		}

		public PlayerDiaoWenType m_diaowen_type
		{
			get{ return _m_diaowen_type.member_value; }
			set{ _m_diaowen_type.member_value = value; }
		}
		public bool has_m_diaowen_type
		{
			get{ return _m_diaowen_type.has_value; }
		}

		public uint m_diaowen_plan_index
		{
			get{ return _m_diaowen_plan_index.member_value; }
			set{ _m_diaowen_plan_index.member_value = value; }
		}
		public bool has_m_diaowen_plan_index
		{
			get{ return _m_diaowen_plan_index.has_value; }
		}

		public uint m_diaowen_plan_seat
		{
			get{ return _m_diaowen_plan_seat.member_value; }
			set{ _m_diaowen_plan_seat.member_value = value; }
		}
		public bool has_m_diaowen_plan_seat
		{
			get{ return _m_diaowen_plan_seat.has_value; }
		}

		public uint m_diaowen_bag_seat
		{
			get{ return _m_diaowen_bag_seat.member_value; }
			set{ _m_diaowen_bag_seat.member_value = value; }
		}
		public bool has_m_diaowen_bag_seat
		{
			get{ return _m_diaowen_bag_seat.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_diaowen_type.Serialize((uint)_m_diaowen_type.member_value, ref out_stream);

			count += _m_diaowen_plan_index.Serialize(_m_diaowen_plan_index.member_value, ref out_stream);

			count += _m_diaowen_plan_seat.Serialize(_m_diaowen_plan_seat.member_value, ref out_stream);

			count += _m_diaowen_bag_seat.Serialize(_m_diaowen_bag_seat.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_diaowen_type = 0;
			one_count = _m_diaowen_type.ParseFrom(ref temp_m_diaowen_type, ref int_stream);
			if (0 < one_count)
			{
					_m_diaowen_type.member_value = (PlayerDiaoWenType)temp_m_diaowen_type;
					count = count + one_count;
			}

			uint temp_m_diaowen_plan_index = 0;
			one_count = _m_diaowen_plan_index.ParseFrom(ref temp_m_diaowen_plan_index, ref int_stream);
			if (0 < one_count)
			{
					_m_diaowen_plan_index.member_value = temp_m_diaowen_plan_index;
					count = count + one_count;
			}

			uint temp_m_diaowen_plan_seat = 0;
			one_count = _m_diaowen_plan_seat.ParseFrom(ref temp_m_diaowen_plan_seat, ref int_stream);
			if (0 < one_count)
			{
					_m_diaowen_plan_seat.member_value = temp_m_diaowen_plan_seat;
					count = count + one_count;
			}

			uint temp_m_diaowen_bag_seat = 0;
			one_count = _m_diaowen_bag_seat.ParseFrom(ref temp_m_diaowen_bag_seat, ref int_stream);
			if (0 < one_count)
			{
					_m_diaowen_bag_seat.member_value = temp_m_diaowen_bag_seat;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Client2Logic_DiaoWen_UnSet_Req : IMessage
	{
		private ProtoMemberEnum<PlayerDiaoWenType> _m_diaowen_type;	// 方案类型
		private ProtoMemberUInt32 _m_diaowen_plan_index;	// 方案序号0-2
		private ProtoMemberUInt32 _m_diaowen_plan_seat;	// 方案中卸下的位置0-6

		public Msg_Client2Logic_DiaoWen_UnSet_Req()
		{
			_m_diaowen_type = new ProtoMemberEnum<PlayerDiaoWenType>(1, true);
			_m_diaowen_plan_index = new ProtoMemberUInt32(2, true);
			_m_diaowen_plan_seat = new ProtoMemberUInt32(3, true);
		}

		public Msg_Client2Logic_DiaoWen_UnSet_Req(PlayerDiaoWenType __m_diaowen_type, uint __m_diaowen_plan_index, uint __m_diaowen_plan_seat)
		{
			_m_diaowen_type = new ProtoMemberEnum<PlayerDiaoWenType>(1, true);
			_m_diaowen_type.member_value = __m_diaowen_type;
			_m_diaowen_plan_index = new ProtoMemberUInt32(2, true);
			_m_diaowen_plan_index.member_value = __m_diaowen_plan_index;
			_m_diaowen_plan_seat = new ProtoMemberUInt32(3, true);
			_m_diaowen_plan_seat.member_value = __m_diaowen_plan_seat;
		}

		public PlayerDiaoWenType m_diaowen_type
		{
			get{ return _m_diaowen_type.member_value; }
			set{ _m_diaowen_type.member_value = value; }
		}
		public bool has_m_diaowen_type
		{
			get{ return _m_diaowen_type.has_value; }
		}

		public uint m_diaowen_plan_index
		{
			get{ return _m_diaowen_plan_index.member_value; }
			set{ _m_diaowen_plan_index.member_value = value; }
		}
		public bool has_m_diaowen_plan_index
		{
			get{ return _m_diaowen_plan_index.has_value; }
		}

		public uint m_diaowen_plan_seat
		{
			get{ return _m_diaowen_plan_seat.member_value; }
			set{ _m_diaowen_plan_seat.member_value = value; }
		}
		public bool has_m_diaowen_plan_seat
		{
			get{ return _m_diaowen_plan_seat.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_diaowen_type.Serialize((uint)_m_diaowen_type.member_value, ref out_stream);

			count += _m_diaowen_plan_index.Serialize(_m_diaowen_plan_index.member_value, ref out_stream);

			count += _m_diaowen_plan_seat.Serialize(_m_diaowen_plan_seat.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_diaowen_type = 0;
			one_count = _m_diaowen_type.ParseFrom(ref temp_m_diaowen_type, ref int_stream);
			if (0 < one_count)
			{
					_m_diaowen_type.member_value = (PlayerDiaoWenType)temp_m_diaowen_type;
					count = count + one_count;
			}

			uint temp_m_diaowen_plan_index = 0;
			one_count = _m_diaowen_plan_index.ParseFrom(ref temp_m_diaowen_plan_index, ref int_stream);
			if (0 < one_count)
			{
					_m_diaowen_plan_index.member_value = temp_m_diaowen_plan_index;
					count = count + one_count;
			}

			uint temp_m_diaowen_plan_seat = 0;
			one_count = _m_diaowen_plan_seat.ParseFrom(ref temp_m_diaowen_plan_seat, ref int_stream);
			if (0 < one_count)
			{
					_m_diaowen_plan_seat.member_value = temp_m_diaowen_plan_seat;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Client2Logic_Firend_AddShield_Req : IMessage
	{
		private ProtoMemberUInt32 _m_account_id;	// 待屏蔽的玩家角色id == 账号id
		private ProtoMemberUInt32 _m_server_id;	// 待屏蔽的玩家服id
		private ProtoMemberUInt32 _m_toy_type;	// 待屏蔽的角色初始使用的玩具模型id
		private ProtoMemberString _m_name;	// 待屏蔽的角色名称

		public Msg_Client2Logic_Firend_AddShield_Req()
		{
			_m_account_id = new ProtoMemberUInt32(1, true);
			_m_server_id = new ProtoMemberUInt32(2, true);
			_m_toy_type = new ProtoMemberUInt32(3, true);
			_m_name = new ProtoMemberString(4, true);
		}

		public Msg_Client2Logic_Firend_AddShield_Req(uint __m_account_id, uint __m_server_id, uint __m_toy_type, string __m_name)
		{
			_m_account_id = new ProtoMemberUInt32(1, true);
			_m_account_id.member_value = __m_account_id;
			_m_server_id = new ProtoMemberUInt32(2, true);
			_m_server_id.member_value = __m_server_id;
			_m_toy_type = new ProtoMemberUInt32(3, true);
			_m_toy_type.member_value = __m_toy_type;
			_m_name = new ProtoMemberString(4, true);
			_m_name.member_value = __m_name;
		}

		public uint m_account_id
		{
			get{ return _m_account_id.member_value; }
			set{ _m_account_id.member_value = value; }
		}
		public bool has_m_account_id
		{
			get{ return _m_account_id.has_value; }
		}

		public uint m_server_id
		{
			get{ return _m_server_id.member_value; }
			set{ _m_server_id.member_value = value; }
		}
		public bool has_m_server_id
		{
			get{ return _m_server_id.has_value; }
		}

		public uint m_toy_type
		{
			get{ return _m_toy_type.member_value; }
			set{ _m_toy_type.member_value = value; }
		}
		public bool has_m_toy_type
		{
			get{ return _m_toy_type.has_value; }
		}

		public string m_name
		{
			get{ return _m_name.member_value; }
			set{ _m_name.member_value = value; }
		}
		public bool has_m_name
		{
			get{ return _m_name.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_account_id.Serialize(_m_account_id.member_value, ref out_stream);

			count += _m_server_id.Serialize(_m_server_id.member_value, ref out_stream);

			count += _m_toy_type.Serialize(_m_toy_type.member_value, ref out_stream);

			count += _m_name.Serialize(_m_name.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_account_id = 0;
			one_count = _m_account_id.ParseFrom(ref temp_m_account_id, ref int_stream);
			if (0 < one_count)
			{
					_m_account_id.member_value = temp_m_account_id;
					count = count + one_count;
			}

			uint temp_m_server_id = 0;
			one_count = _m_server_id.ParseFrom(ref temp_m_server_id, ref int_stream);
			if (0 < one_count)
			{
					_m_server_id.member_value = temp_m_server_id;
					count = count + one_count;
			}

			uint temp_m_toy_type = 0;
			one_count = _m_toy_type.ParseFrom(ref temp_m_toy_type, ref int_stream);
			if (0 < one_count)
			{
					_m_toy_type.member_value = temp_m_toy_type;
					count = count + one_count;
			}

			string temp_m_name = "";
			one_count = _m_name.ParseFrom(ref temp_m_name, ref int_stream);
			if (0 < one_count)
			{
					_m_name.member_value = temp_m_name;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Client2Logic_Firend_Add_Req : IMessage
	{
		private ProtoMemberBool _m_is_agree;	// true：同意，false：忽略
		private ProtoMemberEmbedded<PlayerId> _m_player_id;	// 目标玩家唯一id

		public Msg_Client2Logic_Firend_Add_Req()
		{
			_m_is_agree = new ProtoMemberBool(1, true);
			_m_player_id = new ProtoMemberEmbedded<PlayerId>(2, true);
			_m_player_id.member_value = new PlayerId();
		}

		public Msg_Client2Logic_Firend_Add_Req(bool __m_is_agree)
		{
			_m_is_agree = new ProtoMemberBool(1, true);
			_m_is_agree.member_value = __m_is_agree;
			_m_player_id = new ProtoMemberEmbedded<PlayerId>(2, true);
			_m_player_id.member_value = new PlayerId();
		}

		public bool m_is_agree
		{
			get{ return _m_is_agree.member_value; }
			set{ _m_is_agree.member_value = value; }
		}
		public bool has_m_is_agree
		{
			get{ return _m_is_agree.has_value; }
		}

		public PlayerId m_player_id
		{
			get{ return _m_player_id.member_value as PlayerId; }
			set{ _m_player_id.member_value = value; }
		}
		public bool has_m_player_id
		{
			get{ return _m_player_id.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_is_agree.Serialize(_m_is_agree.member_value, ref out_stream);

			count += _m_player_id.Serialize(_m_player_id.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			bool temp_m_is_agree = false;
			one_count = _m_is_agree.ParseFrom(ref temp_m_is_agree, ref int_stream);
			if (0 < one_count)
			{
					_m_is_agree.member_value = temp_m_is_agree;
					count = count + one_count;
			}

			PlayerId temp_m_player_id = new PlayerId();
			one_count = _m_player_id.ParseFrom(temp_m_player_id, ref int_stream);
			if (0 < one_count)
			{
					_m_player_id.member_value = temp_m_player_id;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Client2Logic_Firend_Application_Req : IMessage
	{
		private ProtoMemberEmbedded<PlayerId> _m_player_id;	// 目标玩家唯一id

		public Msg_Client2Logic_Firend_Application_Req()
		{
			_m_player_id = new ProtoMemberEmbedded<PlayerId>(1, true);
			_m_player_id.member_value = new PlayerId();
		}

		public PlayerId m_player_id
		{
			get{ return _m_player_id.member_value as PlayerId; }
			set{ _m_player_id.member_value = value; }
		}
		public bool has_m_player_id
		{
			get{ return _m_player_id.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_player_id.Serialize(_m_player_id.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			PlayerId temp_m_player_id = new PlayerId();
			one_count = _m_player_id.ParseFrom(temp_m_player_id, ref int_stream);
			if (0 < one_count)
			{
					_m_player_id.member_value = temp_m_player_id;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Client2Logic_Firend_Find_Req : IMessage
	{
		private ProtoMemberEmbedded<PlayerId> _m_player_id;	// 待查找的玩家唯一id

		public Msg_Client2Logic_Firend_Find_Req()
		{
			_m_player_id = new ProtoMemberEmbedded<PlayerId>(1, true);
			_m_player_id.member_value = new PlayerId();
		}

		public PlayerId m_player_id
		{
			get{ return _m_player_id.member_value as PlayerId; }
			set{ _m_player_id.member_value = value; }
		}
		public bool has_m_player_id
		{
			get{ return _m_player_id.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_player_id.Serialize(_m_player_id.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			PlayerId temp_m_player_id = new PlayerId();
			one_count = _m_player_id.ParseFrom(temp_m_player_id, ref int_stream);
			if (0 < one_count)
			{
					_m_player_id.member_value = temp_m_player_id;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Client2Logic_Firend_RemoveShield_Req : IMessage
	{
		private ProtoMemberUInt32 _m_account_id;	// 取消屏蔽的玩家角色id == 账号id
		private ProtoMemberUInt32 _m_server_id;	// 取消屏蔽的玩家服id

		public Msg_Client2Logic_Firend_RemoveShield_Req()
		{
			_m_account_id = new ProtoMemberUInt32(1, true);
			_m_server_id = new ProtoMemberUInt32(2, true);
		}

		public Msg_Client2Logic_Firend_RemoveShield_Req(uint __m_account_id, uint __m_server_id)
		{
			_m_account_id = new ProtoMemberUInt32(1, true);
			_m_account_id.member_value = __m_account_id;
			_m_server_id = new ProtoMemberUInt32(2, true);
			_m_server_id.member_value = __m_server_id;
		}

		public uint m_account_id
		{
			get{ return _m_account_id.member_value; }
			set{ _m_account_id.member_value = value; }
		}
		public bool has_m_account_id
		{
			get{ return _m_account_id.has_value; }
		}

		public uint m_server_id
		{
			get{ return _m_server_id.member_value; }
			set{ _m_server_id.member_value = value; }
		}
		public bool has_m_server_id
		{
			get{ return _m_server_id.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_account_id.Serialize(_m_account_id.member_value, ref out_stream);

			count += _m_server_id.Serialize(_m_server_id.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_account_id = 0;
			one_count = _m_account_id.ParseFrom(ref temp_m_account_id, ref int_stream);
			if (0 < one_count)
			{
					_m_account_id.member_value = temp_m_account_id;
					count = count + one_count;
			}

			uint temp_m_server_id = 0;
			one_count = _m_server_id.ParseFrom(ref temp_m_server_id, ref int_stream);
			if (0 < one_count)
			{
					_m_server_id.member_value = temp_m_server_id;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Client2Logic_Firend_Remove_Req : IMessage
	{
		private ProtoMemberEmbedded<PlayerId> _m_player_id;	// 目标玩家唯一id

		public Msg_Client2Logic_Firend_Remove_Req()
		{
			_m_player_id = new ProtoMemberEmbedded<PlayerId>(1, true);
			_m_player_id.member_value = new PlayerId();
		}

		public PlayerId m_player_id
		{
			get{ return _m_player_id.member_value as PlayerId; }
			set{ _m_player_id.member_value = value; }
		}
		public bool has_m_player_id
		{
			get{ return _m_player_id.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_player_id.Serialize(_m_player_id.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			PlayerId temp_m_player_id = new PlayerId();
			one_count = _m_player_id.ParseFrom(temp_m_player_id, ref int_stream);
			if (0 < one_count)
			{
					_m_player_id.member_value = temp_m_player_id;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Client2Logic_Firend_Update_Req : IMessage
	{
		private ProtoMemberEmbeddedList<PlayerId> _m_player_ids;	// 请求的好友id列表

		public Msg_Client2Logic_Firend_Update_Req()
		{
			_m_player_ids = new ProtoMemberEmbeddedList<PlayerId>(1, false);
		}

		public System.Collections.Generic.List<PlayerId> m_player_ids
		{
			get{ return _m_player_ids.member_value; }
		}
		public bool has_m_player_ids
		{
			get{ return _m_player_ids.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			foreach(PlayerId one_member_value in _m_player_ids.member_value)
			{
				count += _m_player_ids.Serialize(one_member_value, ref out_stream);
			}

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			while (true)
			{
				PlayerId one_member_value = new PlayerId();
				one_count = _m_player_ids.ParseFrom(one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_player_ids.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			return count;
		}
	}

	public class Msg_Client2Logic_GM_Req : IMessage
	{
		private ProtoMemberString _m_gm_cmd;	//GM命令

		public Msg_Client2Logic_GM_Req()
		{
			_m_gm_cmd = new ProtoMemberString(1, true);
		}

		public Msg_Client2Logic_GM_Req(string __m_gm_cmd)
		{
			_m_gm_cmd = new ProtoMemberString(1, true);
			_m_gm_cmd.member_value = __m_gm_cmd;
		}

		public string m_gm_cmd
		{
			get{ return _m_gm_cmd.member_value; }
			set{ _m_gm_cmd.member_value = value; }
		}
		public bool has_m_gm_cmd
		{
			get{ return _m_gm_cmd.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_gm_cmd.Serialize(_m_gm_cmd.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			string temp_m_gm_cmd = "";
			one_count = _m_gm_cmd.ParseFrom(ref temp_m_gm_cmd, ref int_stream);
			if (0 < one_count)
			{
					_m_gm_cmd.member_value = temp_m_gm_cmd;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Client2Logic_Hero_EquipmentUp_Req : IMessage
	{
		private ProtoMemberUInt32 _m_toy_type;	// 待升级的英雄
		private ProtoMemberUInt32 _m_equipment_index;	// 装备的位置0-3

		public Msg_Client2Logic_Hero_EquipmentUp_Req()
		{
			_m_toy_type = new ProtoMemberUInt32(1, true);
			_m_equipment_index = new ProtoMemberUInt32(2, true);
		}

		public Msg_Client2Logic_Hero_EquipmentUp_Req(uint __m_toy_type, uint __m_equipment_index)
		{
			_m_toy_type = new ProtoMemberUInt32(1, true);
			_m_toy_type.member_value = __m_toy_type;
			_m_equipment_index = new ProtoMemberUInt32(2, true);
			_m_equipment_index.member_value = __m_equipment_index;
		}

		public uint m_toy_type
		{
			get{ return _m_toy_type.member_value; }
			set{ _m_toy_type.member_value = value; }
		}
		public bool has_m_toy_type
		{
			get{ return _m_toy_type.has_value; }
		}

		public uint m_equipment_index
		{
			get{ return _m_equipment_index.member_value; }
			set{ _m_equipment_index.member_value = value; }
		}
		public bool has_m_equipment_index
		{
			get{ return _m_equipment_index.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_toy_type.Serialize(_m_toy_type.member_value, ref out_stream);

			count += _m_equipment_index.Serialize(_m_equipment_index.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_toy_type = 0;
			one_count = _m_toy_type.ParseFrom(ref temp_m_toy_type, ref int_stream);
			if (0 < one_count)
			{
					_m_toy_type.member_value = temp_m_toy_type;
					count = count + one_count;
			}

			uint temp_m_equipment_index = 0;
			one_count = _m_equipment_index.ParseFrom(ref temp_m_equipment_index, ref int_stream);
			if (0 < one_count)
			{
					_m_equipment_index.member_value = temp_m_equipment_index;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Client2Logic_Hero_QualityUp_Req : IMessage
	{
		private ProtoMemberUInt32 _m_toy_type;	// 待升级的英雄

		public Msg_Client2Logic_Hero_QualityUp_Req()
		{
			_m_toy_type = new ProtoMemberUInt32(1, true);
		}

		public Msg_Client2Logic_Hero_QualityUp_Req(uint __m_toy_type)
		{
			_m_toy_type = new ProtoMemberUInt32(1, true);
			_m_toy_type.member_value = __m_toy_type;
		}

		public uint m_toy_type
		{
			get{ return _m_toy_type.member_value; }
			set{ _m_toy_type.member_value = value; }
		}
		public bool has_m_toy_type
		{
			get{ return _m_toy_type.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_toy_type.Serialize(_m_toy_type.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_toy_type = 0;
			one_count = _m_toy_type.ParseFrom(ref temp_m_toy_type, ref int_stream);
			if (0 < one_count)
			{
					_m_toy_type.member_value = temp_m_toy_type;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Client2Logic_Hero_SkillSet_Req : IMessage
	{
		private ProtoMemberUInt32 _m_toy_type;	// 待设置的英雄
		private ProtoMemberUInt32 _m_skill_index;	// 技能的位置0-3
		private ProtoMemberUInt32 _m_skill_id;	// 技能的id

		public Msg_Client2Logic_Hero_SkillSet_Req()
		{
			_m_toy_type = new ProtoMemberUInt32(1, true);
			_m_skill_index = new ProtoMemberUInt32(2, true);
			_m_skill_id = new ProtoMemberUInt32(3, true);
		}

		public Msg_Client2Logic_Hero_SkillSet_Req(uint __m_toy_type, uint __m_skill_index, uint __m_skill_id)
		{
			_m_toy_type = new ProtoMemberUInt32(1, true);
			_m_toy_type.member_value = __m_toy_type;
			_m_skill_index = new ProtoMemberUInt32(2, true);
			_m_skill_index.member_value = __m_skill_index;
			_m_skill_id = new ProtoMemberUInt32(3, true);
			_m_skill_id.member_value = __m_skill_id;
		}

		public uint m_toy_type
		{
			get{ return _m_toy_type.member_value; }
			set{ _m_toy_type.member_value = value; }
		}
		public bool has_m_toy_type
		{
			get{ return _m_toy_type.has_value; }
		}

		public uint m_skill_index
		{
			get{ return _m_skill_index.member_value; }
			set{ _m_skill_index.member_value = value; }
		}
		public bool has_m_skill_index
		{
			get{ return _m_skill_index.has_value; }
		}

		public uint m_skill_id
		{
			get{ return _m_skill_id.member_value; }
			set{ _m_skill_id.member_value = value; }
		}
		public bool has_m_skill_id
		{
			get{ return _m_skill_id.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_toy_type.Serialize(_m_toy_type.member_value, ref out_stream);

			count += _m_skill_index.Serialize(_m_skill_index.member_value, ref out_stream);

			count += _m_skill_id.Serialize(_m_skill_id.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_toy_type = 0;
			one_count = _m_toy_type.ParseFrom(ref temp_m_toy_type, ref int_stream);
			if (0 < one_count)
			{
					_m_toy_type.member_value = temp_m_toy_type;
					count = count + one_count;
			}

			uint temp_m_skill_index = 0;
			one_count = _m_skill_index.ParseFrom(ref temp_m_skill_index, ref int_stream);
			if (0 < one_count)
			{
					_m_skill_index.member_value = temp_m_skill_index;
					count = count + one_count;
			}

			uint temp_m_skill_id = 0;
			one_count = _m_skill_id.ParseFrom(ref temp_m_skill_id, ref int_stream);
			if (0 < one_count)
			{
					_m_skill_id.member_value = temp_m_skill_id;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Client2Logic_In_Scene_Req : IMessage
	{
		private ProtoMemberUInt32 _m_world_id;	// 请求进入的地图id

		public Msg_Client2Logic_In_Scene_Req()
		{
			_m_world_id = new ProtoMemberUInt32(1, true);
		}

		public Msg_Client2Logic_In_Scene_Req(uint __m_world_id)
		{
			_m_world_id = new ProtoMemberUInt32(1, true);
			_m_world_id.member_value = __m_world_id;
		}

		public uint m_world_id
		{
			get{ return _m_world_id.member_value; }
			set{ _m_world_id.member_value = value; }
		}
		public bool has_m_world_id
		{
			get{ return _m_world_id.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_world_id.Serialize(_m_world_id.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_world_id = 0;
			one_count = _m_world_id.ParseFrom(ref temp_m_world_id, ref int_stream);
			if (0 < one_count)
			{
					_m_world_id.member_value = temp_m_world_id;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Client2Logic_Item_Decompose_Req : IMessage
	{
		private ProtoMemberUInt32 _m_item_id;	// 道具表id
		private ProtoMemberUInt32 _m_item_count;	// 分解数量

		public Msg_Client2Logic_Item_Decompose_Req()
		{
			_m_item_id = new ProtoMemberUInt32(1, true);
			_m_item_count = new ProtoMemberUInt32(2, true);
		}

		public Msg_Client2Logic_Item_Decompose_Req(uint __m_item_id, uint __m_item_count)
		{
			_m_item_id = new ProtoMemberUInt32(1, true);
			_m_item_id.member_value = __m_item_id;
			_m_item_count = new ProtoMemberUInt32(2, true);
			_m_item_count.member_value = __m_item_count;
		}

		public uint m_item_id
		{
			get{ return _m_item_id.member_value; }
			set{ _m_item_id.member_value = value; }
		}
		public bool has_m_item_id
		{
			get{ return _m_item_id.has_value; }
		}

		public uint m_item_count
		{
			get{ return _m_item_count.member_value; }
			set{ _m_item_count.member_value = value; }
		}
		public bool has_m_item_count
		{
			get{ return _m_item_count.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_item_id.Serialize(_m_item_id.member_value, ref out_stream);

			count += _m_item_count.Serialize(_m_item_count.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_item_id = 0;
			one_count = _m_item_id.ParseFrom(ref temp_m_item_id, ref int_stream);
			if (0 < one_count)
			{
					_m_item_id.member_value = temp_m_item_id;
					count = count + one_count;
			}

			uint temp_m_item_count = 0;
			one_count = _m_item_count.ParseFrom(ref temp_m_item_count, ref int_stream);
			if (0 < one_count)
			{
					_m_item_count.member_value = temp_m_item_count;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Client2Logic_Item_Use_Req : IMessage
	{
		private ProtoMemberUInt32 _m_item_id;	// 道具表id
		private ProtoMemberUInt32 _m_item_count;	// 使用数量
		private ProtoMemberUInt32 _m_toy_type;	// 指向英雄的道具的使用目标（没有则不填）

		public Msg_Client2Logic_Item_Use_Req()
		{
			_m_item_id = new ProtoMemberUInt32(1, true);
			_m_item_count = new ProtoMemberUInt32(2, true);
			_m_toy_type = new ProtoMemberUInt32(3, false);
		}

		public Msg_Client2Logic_Item_Use_Req(uint __m_item_id, uint __m_item_count, uint __m_toy_type)
		{
			_m_item_id = new ProtoMemberUInt32(1, true);
			_m_item_id.member_value = __m_item_id;
			_m_item_count = new ProtoMemberUInt32(2, true);
			_m_item_count.member_value = __m_item_count;
			_m_toy_type = new ProtoMemberUInt32(3, false);
			_m_toy_type.member_value = __m_toy_type;
		}

		public uint m_item_id
		{
			get{ return _m_item_id.member_value; }
			set{ _m_item_id.member_value = value; }
		}
		public bool has_m_item_id
		{
			get{ return _m_item_id.has_value; }
		}

		public uint m_item_count
		{
			get{ return _m_item_count.member_value; }
			set{ _m_item_count.member_value = value; }
		}
		public bool has_m_item_count
		{
			get{ return _m_item_count.has_value; }
		}

		public uint m_toy_type
		{
			get{ return _m_toy_type.member_value; }
			set{ _m_toy_type.member_value = value; }
		}
		public bool has_m_toy_type
		{
			get{ return _m_toy_type.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_item_id.Serialize(_m_item_id.member_value, ref out_stream);

			count += _m_item_count.Serialize(_m_item_count.member_value, ref out_stream);

			count += _m_toy_type.Serialize(_m_toy_type.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_item_id = 0;
			one_count = _m_item_id.ParseFrom(ref temp_m_item_id, ref int_stream);
			if (0 < one_count)
			{
					_m_item_id.member_value = temp_m_item_id;
					count = count + one_count;
			}

			uint temp_m_item_count = 0;
			one_count = _m_item_count.ParseFrom(ref temp_m_item_count, ref int_stream);
			if (0 < one_count)
			{
					_m_item_count.member_value = temp_m_item_count;
					count = count + one_count;
			}

			uint temp_m_toy_type = 0;
			one_count = _m_toy_type.ParseFrom(ref temp_m_toy_type, ref int_stream);
			if (0 < one_count)
			{
					_m_toy_type.member_value = temp_m_toy_type;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Client2Logic_Mail_Read_Req : IMessage
	{
		private ProtoMemberUInt32 _m_mail_id;	// 邮件唯一id

		public Msg_Client2Logic_Mail_Read_Req()
		{
			_m_mail_id = new ProtoMemberUInt32(1, true);
		}

		public Msg_Client2Logic_Mail_Read_Req(uint __m_mail_id)
		{
			_m_mail_id = new ProtoMemberUInt32(1, true);
			_m_mail_id.member_value = __m_mail_id;
		}

		public uint m_mail_id
		{
			get{ return _m_mail_id.member_value; }
			set{ _m_mail_id.member_value = value; }
		}
		public bool has_m_mail_id
		{
			get{ return _m_mail_id.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_mail_id.Serialize(_m_mail_id.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_mail_id = 0;
			one_count = _m_mail_id.ParseFrom(ref temp_m_mail_id, ref int_stream);
			if (0 < one_count)
			{
					_m_mail_id.member_value = temp_m_mail_id;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Client2Logic_Mail_Receive_Req : IMessage
	{
		private ProtoMemberUInt32 _m_mail_id;	// 邮件唯一id

		public Msg_Client2Logic_Mail_Receive_Req()
		{
			_m_mail_id = new ProtoMemberUInt32(1, true);
		}

		public Msg_Client2Logic_Mail_Receive_Req(uint __m_mail_id)
		{
			_m_mail_id = new ProtoMemberUInt32(1, true);
			_m_mail_id.member_value = __m_mail_id;
		}

		public uint m_mail_id
		{
			get{ return _m_mail_id.member_value; }
			set{ _m_mail_id.member_value = value; }
		}
		public bool has_m_mail_id
		{
			get{ return _m_mail_id.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_mail_id.Serialize(_m_mail_id.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_mail_id = 0;
			one_count = _m_mail_id.ParseFrom(ref temp_m_mail_id, ref int_stream);
			if (0 < one_count)
			{
					_m_mail_id.member_value = temp_m_mail_id;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Client2Logic_MainTask_Finsh_Req : IMessage
	{

		public Msg_Client2Logic_MainTask_Finsh_Req()
		{
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			return count;
		}
	}

	public class Msg_Client2Logic_MainTask_Next_Req : IMessage
	{

		public Msg_Client2Logic_MainTask_Next_Req()
		{
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			return count;
		}
	}

	public class Msg_Client2Logic_MainTask_Update_Req : IMessage
	{
		private ProtoMemberUInt32 _m_main_task_type;	// 任务类型
		private ProtoMemberUInt32 _m_main_target_id;	// 目标id

		public Msg_Client2Logic_MainTask_Update_Req()
		{
			_m_main_task_type = new ProtoMemberUInt32(1, true);
			_m_main_target_id = new ProtoMemberUInt32(2, true);
		}

		public Msg_Client2Logic_MainTask_Update_Req(uint __m_main_task_type, uint __m_main_target_id)
		{
			_m_main_task_type = new ProtoMemberUInt32(1, true);
			_m_main_task_type.member_value = __m_main_task_type;
			_m_main_target_id = new ProtoMemberUInt32(2, true);
			_m_main_target_id.member_value = __m_main_target_id;
		}

		public uint m_main_task_type
		{
			get{ return _m_main_task_type.member_value; }
			set{ _m_main_task_type.member_value = value; }
		}
		public bool has_m_main_task_type
		{
			get{ return _m_main_task_type.has_value; }
		}

		public uint m_main_target_id
		{
			get{ return _m_main_target_id.member_value; }
			set{ _m_main_target_id.member_value = value; }
		}
		public bool has_m_main_target_id
		{
			get{ return _m_main_target_id.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_main_task_type.Serialize(_m_main_task_type.member_value, ref out_stream);

			count += _m_main_target_id.Serialize(_m_main_target_id.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_main_task_type = 0;
			one_count = _m_main_task_type.ParseFrom(ref temp_m_main_task_type, ref int_stream);
			if (0 < one_count)
			{
					_m_main_task_type.member_value = temp_m_main_task_type;
					count = count + one_count;
			}

			uint temp_m_main_target_id = 0;
			one_count = _m_main_target_id.ParseFrom(ref temp_m_main_target_id, ref int_stream);
			if (0 < one_count)
			{
					_m_main_target_id.member_value = temp_m_main_target_id;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Client2Logic_Move_Req : IMessage
	{
		private ProtoMemberUInt32 _m_move_type;	// 移动方式
		private ProtoMemberEmbedded<PlayerPosInfo> _m_target_point;	// 目标点坐标

		public Msg_Client2Logic_Move_Req()
		{
			_m_move_type = new ProtoMemberUInt32(1, true);
			_m_target_point = new ProtoMemberEmbedded<PlayerPosInfo>(2, true);
			_m_target_point.member_value = new PlayerPosInfo();
		}

		public Msg_Client2Logic_Move_Req(uint __m_move_type)
		{
			_m_move_type = new ProtoMemberUInt32(1, true);
			_m_move_type.member_value = __m_move_type;
			_m_target_point = new ProtoMemberEmbedded<PlayerPosInfo>(2, true);
			_m_target_point.member_value = new PlayerPosInfo();
		}

		public uint m_move_type
		{
			get{ return _m_move_type.member_value; }
			set{ _m_move_type.member_value = value; }
		}
		public bool has_m_move_type
		{
			get{ return _m_move_type.has_value; }
		}

		public PlayerPosInfo m_target_point
		{
			get{ return _m_target_point.member_value as PlayerPosInfo; }
			set{ _m_target_point.member_value = value; }
		}
		public bool has_m_target_point
		{
			get{ return _m_target_point.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_move_type.Serialize(_m_move_type.member_value, ref out_stream);

			count += _m_target_point.Serialize(_m_target_point.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_move_type = 0;
			one_count = _m_move_type.ParseFrom(ref temp_m_move_type, ref int_stream);
			if (0 < one_count)
			{
					_m_move_type.member_value = temp_m_move_type;
					count = count + one_count;
			}

			PlayerPosInfo temp_m_target_point = new PlayerPosInfo();
			one_count = _m_target_point.ParseFrom(temp_m_target_point, ref int_stream);
			if (0 < one_count)
			{
					_m_target_point.member_value = temp_m_target_point;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Client2Logic_Out_Scene_Req : IMessage
	{

		public Msg_Client2Logic_Out_Scene_Req()
		{
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			return count;
		}
	}

	public class Msg_Client2Logic_PVE_CancelHero_Req : IMessage
	{
		private ProtoMemberUInt32 _m_seat_index;	// 更换的位置 0 - 3
		private ProtoMemberUInt32 _m_toy_type;	// 更换的玩具类型
		private ProtoMemberUInt32 _m_toy_sn;	// 是否使用实体玩具更换
		private ProtoMemberUInt32 _m_play_mode;	// 玩法id（PlayerTeamType）

		public Msg_Client2Logic_PVE_CancelHero_Req()
		{
			_m_seat_index = new ProtoMemberUInt32(1, true);
			_m_toy_type = new ProtoMemberUInt32(2, true);
			_m_toy_sn = new ProtoMemberUInt32(3, true);
			_m_play_mode = new ProtoMemberUInt32(4, false);
		}

		public Msg_Client2Logic_PVE_CancelHero_Req(uint __m_seat_index, uint __m_toy_type, uint __m_toy_sn, uint __m_play_mode)
		{
			_m_seat_index = new ProtoMemberUInt32(1, true);
			_m_seat_index.member_value = __m_seat_index;
			_m_toy_type = new ProtoMemberUInt32(2, true);
			_m_toy_type.member_value = __m_toy_type;
			_m_toy_sn = new ProtoMemberUInt32(3, true);
			_m_toy_sn.member_value = __m_toy_sn;
			_m_play_mode = new ProtoMemberUInt32(4, false);
			_m_play_mode.member_value = __m_play_mode;
		}

		public uint m_seat_index
		{
			get{ return _m_seat_index.member_value; }
			set{ _m_seat_index.member_value = value; }
		}
		public bool has_m_seat_index
		{
			get{ return _m_seat_index.has_value; }
		}

		public uint m_toy_type
		{
			get{ return _m_toy_type.member_value; }
			set{ _m_toy_type.member_value = value; }
		}
		public bool has_m_toy_type
		{
			get{ return _m_toy_type.has_value; }
		}

		public uint m_toy_sn
		{
			get{ return _m_toy_sn.member_value; }
			set{ _m_toy_sn.member_value = value; }
		}
		public bool has_m_toy_sn
		{
			get{ return _m_toy_sn.has_value; }
		}

		public uint m_play_mode
		{
			get{ return _m_play_mode.member_value; }
			set{ _m_play_mode.member_value = value; }
		}
		public bool has_m_play_mode
		{
			get{ return _m_play_mode.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_seat_index.Serialize(_m_seat_index.member_value, ref out_stream);

			count += _m_toy_type.Serialize(_m_toy_type.member_value, ref out_stream);

			count += _m_toy_sn.Serialize(_m_toy_sn.member_value, ref out_stream);

			count += _m_play_mode.Serialize(_m_play_mode.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_seat_index = 0;
			one_count = _m_seat_index.ParseFrom(ref temp_m_seat_index, ref int_stream);
			if (0 < one_count)
			{
					_m_seat_index.member_value = temp_m_seat_index;
					count = count + one_count;
			}

			uint temp_m_toy_type = 0;
			one_count = _m_toy_type.ParseFrom(ref temp_m_toy_type, ref int_stream);
			if (0 < one_count)
			{
					_m_toy_type.member_value = temp_m_toy_type;
					count = count + one_count;
			}

			uint temp_m_toy_sn = 0;
			one_count = _m_toy_sn.ParseFrom(ref temp_m_toy_sn, ref int_stream);
			if (0 < one_count)
			{
					_m_toy_sn.member_value = temp_m_toy_sn;
					count = count + one_count;
			}

			uint temp_m_play_mode = 0;
			one_count = _m_play_mode.ParseFrom(ref temp_m_play_mode, ref int_stream);
			if (0 < one_count)
			{
					_m_play_mode.member_value = temp_m_play_mode;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Client2Logic_PVE_CancelInvite_Req : IMessage
	{
		private ProtoMemberUInt32 _m_seat_index;	// 取消邀请的位置 0 - 3

		public Msg_Client2Logic_PVE_CancelInvite_Req()
		{
			_m_seat_index = new ProtoMemberUInt32(1, true);
		}

		public Msg_Client2Logic_PVE_CancelInvite_Req(uint __m_seat_index)
		{
			_m_seat_index = new ProtoMemberUInt32(1, true);
			_m_seat_index.member_value = __m_seat_index;
		}

		public uint m_seat_index
		{
			get{ return _m_seat_index.member_value; }
			set{ _m_seat_index.member_value = value; }
		}
		public bool has_m_seat_index
		{
			get{ return _m_seat_index.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_seat_index.Serialize(_m_seat_index.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_seat_index = 0;
			one_count = _m_seat_index.ParseFrom(ref temp_m_seat_index, ref int_stream);
			if (0 < one_count)
			{
					_m_seat_index.member_value = temp_m_seat_index;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Client2Logic_PVE_ChangeHero_Req : IMessage
	{
		private ProtoMemberUInt32 _m_seat_index;	// 更换的位置 0 - 3
		private ProtoMemberUInt32 _m_toy_type;	// 更换的玩具类型
		private ProtoMemberUInt32 _m_toy_sn;	// 是否使用实体玩具更换
		private ProtoMemberUInt32 _m_borrow_id;	// 是否使用系统借用英雄更换（为0则不是借用英雄，否则为robotattr的id）
		private ProtoMemberUInt32 _m_play_mode;	// 玩法id（PlayerTeamType）

		public Msg_Client2Logic_PVE_ChangeHero_Req()
		{
			_m_seat_index = new ProtoMemberUInt32(1, true);
			_m_toy_type = new ProtoMemberUInt32(2, true);
			_m_toy_sn = new ProtoMemberUInt32(3, true);
			_m_borrow_id = new ProtoMemberUInt32(4, true);
			_m_play_mode = new ProtoMemberUInt32(5, false);
		}

		public Msg_Client2Logic_PVE_ChangeHero_Req(uint __m_seat_index, uint __m_toy_type, uint __m_toy_sn, uint __m_borrow_id, uint __m_play_mode)
		{
			_m_seat_index = new ProtoMemberUInt32(1, true);
			_m_seat_index.member_value = __m_seat_index;
			_m_toy_type = new ProtoMemberUInt32(2, true);
			_m_toy_type.member_value = __m_toy_type;
			_m_toy_sn = new ProtoMemberUInt32(3, true);
			_m_toy_sn.member_value = __m_toy_sn;
			_m_borrow_id = new ProtoMemberUInt32(4, true);
			_m_borrow_id.member_value = __m_borrow_id;
			_m_play_mode = new ProtoMemberUInt32(5, false);
			_m_play_mode.member_value = __m_play_mode;
		}

		public uint m_seat_index
		{
			get{ return _m_seat_index.member_value; }
			set{ _m_seat_index.member_value = value; }
		}
		public bool has_m_seat_index
		{
			get{ return _m_seat_index.has_value; }
		}

		public uint m_toy_type
		{
			get{ return _m_toy_type.member_value; }
			set{ _m_toy_type.member_value = value; }
		}
		public bool has_m_toy_type
		{
			get{ return _m_toy_type.has_value; }
		}

		public uint m_toy_sn
		{
			get{ return _m_toy_sn.member_value; }
			set{ _m_toy_sn.member_value = value; }
		}
		public bool has_m_toy_sn
		{
			get{ return _m_toy_sn.has_value; }
		}

		public uint m_borrow_id
		{
			get{ return _m_borrow_id.member_value; }
			set{ _m_borrow_id.member_value = value; }
		}
		public bool has_m_borrow_id
		{
			get{ return _m_borrow_id.has_value; }
		}

		public uint m_play_mode
		{
			get{ return _m_play_mode.member_value; }
			set{ _m_play_mode.member_value = value; }
		}
		public bool has_m_play_mode
		{
			get{ return _m_play_mode.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_seat_index.Serialize(_m_seat_index.member_value, ref out_stream);

			count += _m_toy_type.Serialize(_m_toy_type.member_value, ref out_stream);

			count += _m_toy_sn.Serialize(_m_toy_sn.member_value, ref out_stream);

			count += _m_borrow_id.Serialize(_m_borrow_id.member_value, ref out_stream);

			count += _m_play_mode.Serialize(_m_play_mode.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_seat_index = 0;
			one_count = _m_seat_index.ParseFrom(ref temp_m_seat_index, ref int_stream);
			if (0 < one_count)
			{
					_m_seat_index.member_value = temp_m_seat_index;
					count = count + one_count;
			}

			uint temp_m_toy_type = 0;
			one_count = _m_toy_type.ParseFrom(ref temp_m_toy_type, ref int_stream);
			if (0 < one_count)
			{
					_m_toy_type.member_value = temp_m_toy_type;
					count = count + one_count;
			}

			uint temp_m_toy_sn = 0;
			one_count = _m_toy_sn.ParseFrom(ref temp_m_toy_sn, ref int_stream);
			if (0 < one_count)
			{
					_m_toy_sn.member_value = temp_m_toy_sn;
					count = count + one_count;
			}

			uint temp_m_borrow_id = 0;
			one_count = _m_borrow_id.ParseFrom(ref temp_m_borrow_id, ref int_stream);
			if (0 < one_count)
			{
					_m_borrow_id.member_value = temp_m_borrow_id;
					count = count + one_count;
			}

			uint temp_m_play_mode = 0;
			one_count = _m_play_mode.ParseFrom(ref temp_m_play_mode, ref int_stream);
			if (0 < one_count)
			{
					_m_play_mode.member_value = temp_m_play_mode;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Client2Logic_PVE_CreateTeam_Req : IMessage
	{
		private ProtoMemberUInt32 _m_toy_type;	// 创建队伍时使用的玩具
		private ProtoMemberUInt32 _m_toy_sn;	// 是否使用实体玩具创建的队伍

		public Msg_Client2Logic_PVE_CreateTeam_Req()
		{
			_m_toy_type = new ProtoMemberUInt32(1, true);
			_m_toy_sn = new ProtoMemberUInt32(2, true);
		}

		public Msg_Client2Logic_PVE_CreateTeam_Req(uint __m_toy_type, uint __m_toy_sn)
		{
			_m_toy_type = new ProtoMemberUInt32(1, true);
			_m_toy_type.member_value = __m_toy_type;
			_m_toy_sn = new ProtoMemberUInt32(2, true);
			_m_toy_sn.member_value = __m_toy_sn;
		}

		public uint m_toy_type
		{
			get{ return _m_toy_type.member_value; }
			set{ _m_toy_type.member_value = value; }
		}
		public bool has_m_toy_type
		{
			get{ return _m_toy_type.has_value; }
		}

		public uint m_toy_sn
		{
			get{ return _m_toy_sn.member_value; }
			set{ _m_toy_sn.member_value = value; }
		}
		public bool has_m_toy_sn
		{
			get{ return _m_toy_sn.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_toy_type.Serialize(_m_toy_type.member_value, ref out_stream);

			count += _m_toy_sn.Serialize(_m_toy_sn.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_toy_type = 0;
			one_count = _m_toy_type.ParseFrom(ref temp_m_toy_type, ref int_stream);
			if (0 < one_count)
			{
					_m_toy_type.member_value = temp_m_toy_type;
					count = count + one_count;
			}

			uint temp_m_toy_sn = 0;
			one_count = _m_toy_sn.ParseFrom(ref temp_m_toy_sn, ref int_stream);
			if (0 < one_count)
			{
					_m_toy_sn.member_value = temp_m_toy_sn;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Client2Logic_PVE_ExitTeam_Req : IMessage
	{

		public Msg_Client2Logic_PVE_ExitTeam_Req()
		{
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			return count;
		}
	}

	public class Msg_Client2Logic_PVE_Extreme_AttackBegin_Req : IMessage
	{
		private ProtoMemberUInt32 _m_hard_lv;	// 难度

		public Msg_Client2Logic_PVE_Extreme_AttackBegin_Req()
		{
			_m_hard_lv = new ProtoMemberUInt32(1, true);
		}

		public Msg_Client2Logic_PVE_Extreme_AttackBegin_Req(uint __m_hard_lv)
		{
			_m_hard_lv = new ProtoMemberUInt32(1, true);
			_m_hard_lv.member_value = __m_hard_lv;
		}

		public uint m_hard_lv
		{
			get{ return _m_hard_lv.member_value; }
			set{ _m_hard_lv.member_value = value; }
		}
		public bool has_m_hard_lv
		{
			get{ return _m_hard_lv.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_hard_lv.Serialize(_m_hard_lv.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_hard_lv = 0;
			one_count = _m_hard_lv.ParseFrom(ref temp_m_hard_lv, ref int_stream);
			if (0 < one_count)
			{
					_m_hard_lv.member_value = temp_m_hard_lv;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Client2Logic_PVE_HuntingChallenge_AttackBegin_Req : IMessage
	{
		private ProtoMemberUInt64 _m_client_time;	// 客户端用于校准的时间戳，服务端原样返回

		public Msg_Client2Logic_PVE_HuntingChallenge_AttackBegin_Req()
		{
			_m_client_time = new ProtoMemberUInt64(1, true);
		}

		public Msg_Client2Logic_PVE_HuntingChallenge_AttackBegin_Req(ulong __m_client_time)
		{
			_m_client_time = new ProtoMemberUInt64(1, true);
			_m_client_time.member_value = __m_client_time;
		}

		public ulong m_client_time
		{
			get{ return _m_client_time.member_value; }
			set{ _m_client_time.member_value = value; }
		}
		public bool has_m_client_time
		{
			get{ return _m_client_time.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_client_time.Serialize(_m_client_time.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			ulong temp_m_client_time = 0;
			one_count = _m_client_time.ParseFrom(ref temp_m_client_time, ref int_stream);
			if (0 < one_count)
			{
					_m_client_time.member_value = temp_m_client_time;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Client2Logic_PVE_HuntingChallenge_AttackEnd_Req : IMessage
	{

		public Msg_Client2Logic_PVE_HuntingChallenge_AttackEnd_Req()
		{
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			return count;
		}
	}

	public class Msg_Client2Logic_PVE_HuntingChapter_AttackBegin_Req : IMessage
	{
		private ProtoMemberUInt32 _m_chapter_id;	// PVE狩猎随机关卡时，指定随机关卡id

		public Msg_Client2Logic_PVE_HuntingChapter_AttackBegin_Req()
		{
			_m_chapter_id = new ProtoMemberUInt32(1, true);
		}

		public Msg_Client2Logic_PVE_HuntingChapter_AttackBegin_Req(uint __m_chapter_id)
		{
			_m_chapter_id = new ProtoMemberUInt32(1, true);
			_m_chapter_id.member_value = __m_chapter_id;
		}

		public uint m_chapter_id
		{
			get{ return _m_chapter_id.member_value; }
			set{ _m_chapter_id.member_value = value; }
		}
		public bool has_m_chapter_id
		{
			get{ return _m_chapter_id.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_chapter_id.Serialize(_m_chapter_id.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_chapter_id = 0;
			one_count = _m_chapter_id.ParseFrom(ref temp_m_chapter_id, ref int_stream);
			if (0 < one_count)
			{
					_m_chapter_id.member_value = temp_m_chapter_id;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Client2Logic_PVE_HuntingTest_AttackBegin_Req : IMessage
	{
		private ProtoMemberUInt32 _m_dungeon_id;	// PVE狩猎考试时，指定考试id

		public Msg_Client2Logic_PVE_HuntingTest_AttackBegin_Req()
		{
			_m_dungeon_id = new ProtoMemberUInt32(1, true);
		}

		public Msg_Client2Logic_PVE_HuntingTest_AttackBegin_Req(uint __m_dungeon_id)
		{
			_m_dungeon_id = new ProtoMemberUInt32(1, true);
			_m_dungeon_id.member_value = __m_dungeon_id;
		}

		public uint m_dungeon_id
		{
			get{ return _m_dungeon_id.member_value; }
			set{ _m_dungeon_id.member_value = value; }
		}
		public bool has_m_dungeon_id
		{
			get{ return _m_dungeon_id.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_dungeon_id.Serialize(_m_dungeon_id.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_dungeon_id = 0;
			one_count = _m_dungeon_id.ParseFrom(ref temp_m_dungeon_id, ref int_stream);
			if (0 < one_count)
			{
					_m_dungeon_id.member_value = temp_m_dungeon_id;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Client2Logic_PVE_Hunting_AttackBegin_Req : IMessage
	{
		private ProtoMemberUInt32 _m_point_id;	// 事件所在地图坐标点id

		public Msg_Client2Logic_PVE_Hunting_AttackBegin_Req()
		{
			_m_point_id = new ProtoMemberUInt32(1, true);
		}

		public Msg_Client2Logic_PVE_Hunting_AttackBegin_Req(uint __m_point_id)
		{
			_m_point_id = new ProtoMemberUInt32(1, true);
			_m_point_id.member_value = __m_point_id;
		}

		public uint m_point_id
		{
			get{ return _m_point_id.member_value; }
			set{ _m_point_id.member_value = value; }
		}
		public bool has_m_point_id
		{
			get{ return _m_point_id.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_point_id.Serialize(_m_point_id.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_point_id = 0;
			one_count = _m_point_id.ParseFrom(ref temp_m_point_id, ref int_stream);
			if (0 < one_count)
			{
					_m_point_id.member_value = temp_m_point_id;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Client2Logic_PVE_InviteFriend_Req : IMessage
	{
		private ProtoMemberUInt32 _m_friend_account_id;	// 被邀请的玩家id
		private ProtoMemberUInt32 _m_friend_server_id;	// 被邀请的玩家所属服id
		private ProtoMemberUInt32 _m_seat_index;	// 邀请的位置 0 - 3

		public Msg_Client2Logic_PVE_InviteFriend_Req()
		{
			_m_friend_account_id = new ProtoMemberUInt32(1, true);
			_m_friend_server_id = new ProtoMemberUInt32(2, true);
			_m_seat_index = new ProtoMemberUInt32(3, true);
		}

		public Msg_Client2Logic_PVE_InviteFriend_Req(uint __m_friend_account_id, uint __m_friend_server_id, uint __m_seat_index)
		{
			_m_friend_account_id = new ProtoMemberUInt32(1, true);
			_m_friend_account_id.member_value = __m_friend_account_id;
			_m_friend_server_id = new ProtoMemberUInt32(2, true);
			_m_friend_server_id.member_value = __m_friend_server_id;
			_m_seat_index = new ProtoMemberUInt32(3, true);
			_m_seat_index.member_value = __m_seat_index;
		}

		public uint m_friend_account_id
		{
			get{ return _m_friend_account_id.member_value; }
			set{ _m_friend_account_id.member_value = value; }
		}
		public bool has_m_friend_account_id
		{
			get{ return _m_friend_account_id.has_value; }
		}

		public uint m_friend_server_id
		{
			get{ return _m_friend_server_id.member_value; }
			set{ _m_friend_server_id.member_value = value; }
		}
		public bool has_m_friend_server_id
		{
			get{ return _m_friend_server_id.has_value; }
		}

		public uint m_seat_index
		{
			get{ return _m_seat_index.member_value; }
			set{ _m_seat_index.member_value = value; }
		}
		public bool has_m_seat_index
		{
			get{ return _m_seat_index.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_friend_account_id.Serialize(_m_friend_account_id.member_value, ref out_stream);

			count += _m_friend_server_id.Serialize(_m_friend_server_id.member_value, ref out_stream);

			count += _m_seat_index.Serialize(_m_seat_index.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_friend_account_id = 0;
			one_count = _m_friend_account_id.ParseFrom(ref temp_m_friend_account_id, ref int_stream);
			if (0 < one_count)
			{
					_m_friend_account_id.member_value = temp_m_friend_account_id;
					count = count + one_count;
			}

			uint temp_m_friend_server_id = 0;
			one_count = _m_friend_server_id.ParseFrom(ref temp_m_friend_server_id, ref int_stream);
			if (0 < one_count)
			{
					_m_friend_server_id.member_value = temp_m_friend_server_id;
					count = count + one_count;
			}

			uint temp_m_seat_index = 0;
			one_count = _m_seat_index.ParseFrom(ref temp_m_seat_index, ref int_stream);
			if (0 < one_count)
			{
					_m_seat_index.member_value = temp_m_seat_index;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Client2Logic_PVE_InviteGuest_Req : IMessage
	{
		private ProtoMemberUInt32 _m_friend_account_id;	// 被邀请的玩家id
		private ProtoMemberUInt32 _m_friend_server_id;	// 被邀请的玩家所属服id
		private ProtoMemberUInt32 _m_seat_index;	// 邀请的位置 0 - 3
		private ProtoMemberUInt32 _m_toy_type;	// 邀请的玩具类型
		private ProtoMemberUInt32 _m_toy_sn;	// 是否使用实体玩具

		public Msg_Client2Logic_PVE_InviteGuest_Req()
		{
			_m_friend_account_id = new ProtoMemberUInt32(1, true);
			_m_friend_server_id = new ProtoMemberUInt32(2, true);
			_m_seat_index = new ProtoMemberUInt32(3, true);
			_m_toy_type = new ProtoMemberUInt32(4, true);
			_m_toy_sn = new ProtoMemberUInt32(5, true);
		}

		public Msg_Client2Logic_PVE_InviteGuest_Req(uint __m_friend_account_id, uint __m_friend_server_id, uint __m_seat_index, uint __m_toy_type, uint __m_toy_sn)
		{
			_m_friend_account_id = new ProtoMemberUInt32(1, true);
			_m_friend_account_id.member_value = __m_friend_account_id;
			_m_friend_server_id = new ProtoMemberUInt32(2, true);
			_m_friend_server_id.member_value = __m_friend_server_id;
			_m_seat_index = new ProtoMemberUInt32(3, true);
			_m_seat_index.member_value = __m_seat_index;
			_m_toy_type = new ProtoMemberUInt32(4, true);
			_m_toy_type.member_value = __m_toy_type;
			_m_toy_sn = new ProtoMemberUInt32(5, true);
			_m_toy_sn.member_value = __m_toy_sn;
		}

		public uint m_friend_account_id
		{
			get{ return _m_friend_account_id.member_value; }
			set{ _m_friend_account_id.member_value = value; }
		}
		public bool has_m_friend_account_id
		{
			get{ return _m_friend_account_id.has_value; }
		}

		public uint m_friend_server_id
		{
			get{ return _m_friend_server_id.member_value; }
			set{ _m_friend_server_id.member_value = value; }
		}
		public bool has_m_friend_server_id
		{
			get{ return _m_friend_server_id.has_value; }
		}

		public uint m_seat_index
		{
			get{ return _m_seat_index.member_value; }
			set{ _m_seat_index.member_value = value; }
		}
		public bool has_m_seat_index
		{
			get{ return _m_seat_index.has_value; }
		}

		public uint m_toy_type
		{
			get{ return _m_toy_type.member_value; }
			set{ _m_toy_type.member_value = value; }
		}
		public bool has_m_toy_type
		{
			get{ return _m_toy_type.has_value; }
		}

		public uint m_toy_sn
		{
			get{ return _m_toy_sn.member_value; }
			set{ _m_toy_sn.member_value = value; }
		}
		public bool has_m_toy_sn
		{
			get{ return _m_toy_sn.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_friend_account_id.Serialize(_m_friend_account_id.member_value, ref out_stream);

			count += _m_friend_server_id.Serialize(_m_friend_server_id.member_value, ref out_stream);

			count += _m_seat_index.Serialize(_m_seat_index.member_value, ref out_stream);

			count += _m_toy_type.Serialize(_m_toy_type.member_value, ref out_stream);

			count += _m_toy_sn.Serialize(_m_toy_sn.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_friend_account_id = 0;
			one_count = _m_friend_account_id.ParseFrom(ref temp_m_friend_account_id, ref int_stream);
			if (0 < one_count)
			{
					_m_friend_account_id.member_value = temp_m_friend_account_id;
					count = count + one_count;
			}

			uint temp_m_friend_server_id = 0;
			one_count = _m_friend_server_id.ParseFrom(ref temp_m_friend_server_id, ref int_stream);
			if (0 < one_count)
			{
					_m_friend_server_id.member_value = temp_m_friend_server_id;
					count = count + one_count;
			}

			uint temp_m_seat_index = 0;
			one_count = _m_seat_index.ParseFrom(ref temp_m_seat_index, ref int_stream);
			if (0 < one_count)
			{
					_m_seat_index.member_value = temp_m_seat_index;
					count = count + one_count;
			}

			uint temp_m_toy_type = 0;
			one_count = _m_toy_type.ParseFrom(ref temp_m_toy_type, ref int_stream);
			if (0 < one_count)
			{
					_m_toy_type.member_value = temp_m_toy_type;
					count = count + one_count;
			}

			uint temp_m_toy_sn = 0;
			one_count = _m_toy_sn.ParseFrom(ref temp_m_toy_sn, ref int_stream);
			if (0 < one_count)
			{
					_m_toy_sn.member_value = temp_m_toy_sn;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Client2Logic_PVE_JoinTeam_Req : IMessage
	{
		private ProtoMemberUInt64 _m_team_id;	// 队伍id
		private ProtoMemberUInt32 _m_seat_index;	// 加入的位置 0 - 3
		private ProtoMemberUInt32 _m_res;	// 被邀请结果，（同意/拒绝）（LogicRes）
		private ProtoMemberUInt32 _m_toy_type;	// 同意加入队伍时使用的玩具，不填/填0/错误值均默认为主英雄
		private ProtoMemberUInt32 _m_refuse_reason;	// 拒绝理由

		public Msg_Client2Logic_PVE_JoinTeam_Req()
		{
			_m_team_id = new ProtoMemberUInt64(1, true);
			_m_seat_index = new ProtoMemberUInt32(2, true);
			_m_res = new ProtoMemberUInt32(3, true);
			_m_toy_type = new ProtoMemberUInt32(4, false);
			_m_refuse_reason = new ProtoMemberUInt32(5, false);
		}

		public Msg_Client2Logic_PVE_JoinTeam_Req(ulong __m_team_id, uint __m_seat_index, uint __m_res, uint __m_toy_type, uint __m_refuse_reason)
		{
			_m_team_id = new ProtoMemberUInt64(1, true);
			_m_team_id.member_value = __m_team_id;
			_m_seat_index = new ProtoMemberUInt32(2, true);
			_m_seat_index.member_value = __m_seat_index;
			_m_res = new ProtoMemberUInt32(3, true);
			_m_res.member_value = __m_res;
			_m_toy_type = new ProtoMemberUInt32(4, false);
			_m_toy_type.member_value = __m_toy_type;
			_m_refuse_reason = new ProtoMemberUInt32(5, false);
			_m_refuse_reason.member_value = __m_refuse_reason;
		}

		public ulong m_team_id
		{
			get{ return _m_team_id.member_value; }
			set{ _m_team_id.member_value = value; }
		}
		public bool has_m_team_id
		{
			get{ return _m_team_id.has_value; }
		}

		public uint m_seat_index
		{
			get{ return _m_seat_index.member_value; }
			set{ _m_seat_index.member_value = value; }
		}
		public bool has_m_seat_index
		{
			get{ return _m_seat_index.has_value; }
		}

		public uint m_res
		{
			get{ return _m_res.member_value; }
			set{ _m_res.member_value = value; }
		}
		public bool has_m_res
		{
			get{ return _m_res.has_value; }
		}

		public uint m_toy_type
		{
			get{ return _m_toy_type.member_value; }
			set{ _m_toy_type.member_value = value; }
		}
		public bool has_m_toy_type
		{
			get{ return _m_toy_type.has_value; }
		}

		public uint m_refuse_reason
		{
			get{ return _m_refuse_reason.member_value; }
			set{ _m_refuse_reason.member_value = value; }
		}
		public bool has_m_refuse_reason
		{
			get{ return _m_refuse_reason.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_team_id.Serialize(_m_team_id.member_value, ref out_stream);

			count += _m_seat_index.Serialize(_m_seat_index.member_value, ref out_stream);

			count += _m_res.Serialize(_m_res.member_value, ref out_stream);

			count += _m_toy_type.Serialize(_m_toy_type.member_value, ref out_stream);

			count += _m_refuse_reason.Serialize(_m_refuse_reason.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			ulong temp_m_team_id = 0;
			one_count = _m_team_id.ParseFrom(ref temp_m_team_id, ref int_stream);
			if (0 < one_count)
			{
					_m_team_id.member_value = temp_m_team_id;
					count = count + one_count;
			}

			uint temp_m_seat_index = 0;
			one_count = _m_seat_index.ParseFrom(ref temp_m_seat_index, ref int_stream);
			if (0 < one_count)
			{
					_m_seat_index.member_value = temp_m_seat_index;
					count = count + one_count;
			}

			uint temp_m_res = 0;
			one_count = _m_res.ParseFrom(ref temp_m_res, ref int_stream);
			if (0 < one_count)
			{
					_m_res.member_value = temp_m_res;
					count = count + one_count;
			}

			uint temp_m_toy_type = 0;
			one_count = _m_toy_type.ParseFrom(ref temp_m_toy_type, ref int_stream);
			if (0 < one_count)
			{
					_m_toy_type.member_value = temp_m_toy_type;
					count = count + one_count;
			}

			uint temp_m_refuse_reason = 0;
			one_count = _m_refuse_reason.ParseFrom(ref temp_m_refuse_reason, ref int_stream);
			if (0 < one_count)
			{
					_m_refuse_reason.member_value = temp_m_refuse_reason;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Client2Logic_PVE_KickTeam_Req : IMessage
	{
		private ProtoMemberUInt32 _m_kick_account_id;	// 被踢出的玩家id
		private ProtoMemberUInt32 _m_kick_server_id;	// 被踢出的玩家所属服id

		public Msg_Client2Logic_PVE_KickTeam_Req()
		{
			_m_kick_account_id = new ProtoMemberUInt32(1, true);
			_m_kick_server_id = new ProtoMemberUInt32(2, true);
		}

		public Msg_Client2Logic_PVE_KickTeam_Req(uint __m_kick_account_id, uint __m_kick_server_id)
		{
			_m_kick_account_id = new ProtoMemberUInt32(1, true);
			_m_kick_account_id.member_value = __m_kick_account_id;
			_m_kick_server_id = new ProtoMemberUInt32(2, true);
			_m_kick_server_id.member_value = __m_kick_server_id;
		}

		public uint m_kick_account_id
		{
			get{ return _m_kick_account_id.member_value; }
			set{ _m_kick_account_id.member_value = value; }
		}
		public bool has_m_kick_account_id
		{
			get{ return _m_kick_account_id.has_value; }
		}

		public uint m_kick_server_id
		{
			get{ return _m_kick_server_id.member_value; }
			set{ _m_kick_server_id.member_value = value; }
		}
		public bool has_m_kick_server_id
		{
			get{ return _m_kick_server_id.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_kick_account_id.Serialize(_m_kick_account_id.member_value, ref out_stream);

			count += _m_kick_server_id.Serialize(_m_kick_server_id.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_kick_account_id = 0;
			one_count = _m_kick_account_id.ParseFrom(ref temp_m_kick_account_id, ref int_stream);
			if (0 < one_count)
			{
					_m_kick_account_id.member_value = temp_m_kick_account_id;
					count = count + one_count;
			}

			uint temp_m_kick_server_id = 0;
			one_count = _m_kick_server_id.ParseFrom(ref temp_m_kick_server_id, ref int_stream);
			if (0 < one_count)
			{
					_m_kick_server_id.member_value = temp_m_kick_server_id;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Client2Logic_PVE_Ready_Req : IMessage
	{
		private ProtoMemberBool _m_ready;	// 是否准备， true：改为准备状态，false：改为非准备状态

		public Msg_Client2Logic_PVE_Ready_Req()
		{
			_m_ready = new ProtoMemberBool(1, true);
		}

		public Msg_Client2Logic_PVE_Ready_Req(bool __m_ready)
		{
			_m_ready = new ProtoMemberBool(1, true);
			_m_ready.member_value = __m_ready;
		}

		public bool m_ready
		{
			get{ return _m_ready.member_value; }
			set{ _m_ready.member_value = value; }
		}
		public bool has_m_ready
		{
			get{ return _m_ready.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_ready.Serialize(_m_ready.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			bool temp_m_ready = false;
			one_count = _m_ready.ParseFrom(ref temp_m_ready, ref int_stream);
			if (0 < one_count)
			{
					_m_ready.member_value = temp_m_ready;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Client2Logic_PVP_BattleField_Begin_Req : IMessage
	{
		private ProtoMemberUInt32 _m_play_model;	// 玩法id（PlayerTeamType）

		public Msg_Client2Logic_PVP_BattleField_Begin_Req()
		{
			_m_play_model = new ProtoMemberUInt32(1, true);
		}

		public Msg_Client2Logic_PVP_BattleField_Begin_Req(uint __m_play_model)
		{
			_m_play_model = new ProtoMemberUInt32(1, true);
			_m_play_model.member_value = __m_play_model;
		}

		public uint m_play_model
		{
			get{ return _m_play_model.member_value; }
			set{ _m_play_model.member_value = value; }
		}
		public bool has_m_play_model
		{
			get{ return _m_play_model.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_play_model.Serialize(_m_play_model.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_play_model = 0;
			one_count = _m_play_model.ParseFrom(ref temp_m_play_model, ref int_stream);
			if (0 < one_count)
			{
					_m_play_model.member_value = temp_m_play_model;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Client2Logic_PVP_BattleField_Cancel_Req : IMessage
	{
		private ProtoMemberUInt32 _m_play_model;	// 玩法id（PlayerTeamType）

		public Msg_Client2Logic_PVP_BattleField_Cancel_Req()
		{
			_m_play_model = new ProtoMemberUInt32(1, true);
		}

		public Msg_Client2Logic_PVP_BattleField_Cancel_Req(uint __m_play_model)
		{
			_m_play_model = new ProtoMemberUInt32(1, true);
			_m_play_model.member_value = __m_play_model;
		}

		public uint m_play_model
		{
			get{ return _m_play_model.member_value; }
			set{ _m_play_model.member_value = value; }
		}
		public bool has_m_play_model
		{
			get{ return _m_play_model.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_play_model.Serialize(_m_play_model.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_play_model = 0;
			one_count = _m_play_model.ParseFrom(ref temp_m_play_model, ref int_stream);
			if (0 < one_count)
			{
					_m_play_model.member_value = temp_m_play_model;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Client2Logic_PVP_Match_AttackBeginWithRobot_Req : IMessage
	{
		private ProtoMemberUInt32 _m_play_model;	// 玩法id（PlayerTeamType）

		public Msg_Client2Logic_PVP_Match_AttackBeginWithRobot_Req()
		{
			_m_play_model = new ProtoMemberUInt32(1, true);
		}

		public Msg_Client2Logic_PVP_Match_AttackBeginWithRobot_Req(uint __m_play_model)
		{
			_m_play_model = new ProtoMemberUInt32(1, true);
			_m_play_model.member_value = __m_play_model;
		}

		public uint m_play_model
		{
			get{ return _m_play_model.member_value; }
			set{ _m_play_model.member_value = value; }
		}
		public bool has_m_play_model
		{
			get{ return _m_play_model.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_play_model.Serialize(_m_play_model.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_play_model = 0;
			one_count = _m_play_model.ParseFrom(ref temp_m_play_model, ref int_stream);
			if (0 < one_count)
			{
					_m_play_model.member_value = temp_m_play_model;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Client2Logic_PVP_Match_AttackBegin_Req : IMessage
	{
		private ProtoMemberUInt32 _m_play_model;	// 玩法id（PlayerTeamType）

		public Msg_Client2Logic_PVP_Match_AttackBegin_Req()
		{
			_m_play_model = new ProtoMemberUInt32(1, true);
		}

		public Msg_Client2Logic_PVP_Match_AttackBegin_Req(uint __m_play_model)
		{
			_m_play_model = new ProtoMemberUInt32(1, true);
			_m_play_model.member_value = __m_play_model;
		}

		public uint m_play_model
		{
			get{ return _m_play_model.member_value; }
			set{ _m_play_model.member_value = value; }
		}
		public bool has_m_play_model
		{
			get{ return _m_play_model.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_play_model.Serialize(_m_play_model.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_play_model = 0;
			one_count = _m_play_model.ParseFrom(ref temp_m_play_model, ref int_stream);
			if (0 < one_count)
			{
					_m_play_model.member_value = temp_m_play_model;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Client2Logic_PVP_Match_Begin_Req : IMessage
	{
		private ProtoMemberUInt32 _m_play_model;	// 玩法id（PlayerTeamType）

		public Msg_Client2Logic_PVP_Match_Begin_Req()
		{
			_m_play_model = new ProtoMemberUInt32(1, true);
		}

		public Msg_Client2Logic_PVP_Match_Begin_Req(uint __m_play_model)
		{
			_m_play_model = new ProtoMemberUInt32(1, true);
			_m_play_model.member_value = __m_play_model;
		}

		public uint m_play_model
		{
			get{ return _m_play_model.member_value; }
			set{ _m_play_model.member_value = value; }
		}
		public bool has_m_play_model
		{
			get{ return _m_play_model.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_play_model.Serialize(_m_play_model.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_play_model = 0;
			one_count = _m_play_model.ParseFrom(ref temp_m_play_model, ref int_stream);
			if (0 < one_count)
			{
					_m_play_model.member_value = temp_m_play_model;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Client2Logic_PVP_Match_Cancel_Req : IMessage
	{
		private ProtoMemberUInt32 _m_play_model;	// 玩法id（PlayerTeamType）

		public Msg_Client2Logic_PVP_Match_Cancel_Req()
		{
			_m_play_model = new ProtoMemberUInt32(1, true);
		}

		public Msg_Client2Logic_PVP_Match_Cancel_Req(uint __m_play_model)
		{
			_m_play_model = new ProtoMemberUInt32(1, true);
			_m_play_model.member_value = __m_play_model;
		}

		public uint m_play_model
		{
			get{ return _m_play_model.member_value; }
			set{ _m_play_model.member_value = value; }
		}
		public bool has_m_play_model
		{
			get{ return _m_play_model.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_play_model.Serialize(_m_play_model.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_play_model = 0;
			one_count = _m_play_model.ParseFrom(ref temp_m_play_model, ref int_stream);
			if (0 < one_count)
			{
					_m_play_model.member_value = temp_m_play_model;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Client2Logic_PVP_UnionManor_AttackBegin_Req : IMessage
	{
		private ProtoMemberUInt32 _m_manor_id;	// 开战的公会领地

		public Msg_Client2Logic_PVP_UnionManor_AttackBegin_Req()
		{
			_m_manor_id = new ProtoMemberUInt32(1, true);
		}

		public Msg_Client2Logic_PVP_UnionManor_AttackBegin_Req(uint __m_manor_id)
		{
			_m_manor_id = new ProtoMemberUInt32(1, true);
			_m_manor_id.member_value = __m_manor_id;
		}

		public uint m_manor_id
		{
			get{ return _m_manor_id.member_value; }
			set{ _m_manor_id.member_value = value; }
		}
		public bool has_m_manor_id
		{
			get{ return _m_manor_id.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_manor_id.Serialize(_m_manor_id.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_manor_id = 0;
			one_count = _m_manor_id.ParseFrom(ref temp_m_manor_id, ref int_stream);
			if (0 < one_count)
			{
					_m_manor_id.member_value = temp_m_manor_id;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Client2Logic_Player_Data_Req : IMessage
	{
		private ProtoMemberUInt32 _m_role_index;	// 本服的第几个角色(一个账号,一个服,最多3个角色)
		private ProtoMemberString _m_ip;	// 登陆ip（网关填）
		private ProtoMemberString _m_imei;	// 设备唯一标识（客户端填）

		public Msg_Client2Logic_Player_Data_Req()
		{
			_m_role_index = new ProtoMemberUInt32(1, true);
			_m_ip = new ProtoMemberString(2, false);
			_m_imei = new ProtoMemberString(3, false);
		}

		public Msg_Client2Logic_Player_Data_Req(uint __m_role_index, string __m_ip, string __m_imei)
		{
			_m_role_index = new ProtoMemberUInt32(1, true);
			_m_role_index.member_value = __m_role_index;
			_m_ip = new ProtoMemberString(2, false);
			_m_ip.member_value = __m_ip;
			_m_imei = new ProtoMemberString(3, false);
			_m_imei.member_value = __m_imei;
		}

		public uint m_role_index
		{
			get{ return _m_role_index.member_value; }
			set{ _m_role_index.member_value = value; }
		}
		public bool has_m_role_index
		{
			get{ return _m_role_index.has_value; }
		}

		public string m_ip
		{
			get{ return _m_ip.member_value; }
			set{ _m_ip.member_value = value; }
		}
		public bool has_m_ip
		{
			get{ return _m_ip.has_value; }
		}

		public string m_imei
		{
			get{ return _m_imei.member_value; }
			set{ _m_imei.member_value = value; }
		}
		public bool has_m_imei
		{
			get{ return _m_imei.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_role_index.Serialize(_m_role_index.member_value, ref out_stream);

			count += _m_ip.Serialize(_m_ip.member_value, ref out_stream);

			count += _m_imei.Serialize(_m_imei.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_role_index = 0;
			one_count = _m_role_index.ParseFrom(ref temp_m_role_index, ref int_stream);
			if (0 < one_count)
			{
					_m_role_index.member_value = temp_m_role_index;
					count = count + one_count;
			}

			string temp_m_ip = "";
			one_count = _m_ip.ParseFrom(ref temp_m_ip, ref int_stream);
			if (0 < one_count)
			{
					_m_ip.member_value = temp_m_ip;
					count = count + one_count;
			}

			string temp_m_imei = "";
			one_count = _m_imei.ParseFrom(ref temp_m_imei, ref int_stream);
			if (0 < one_count)
			{
					_m_imei.member_value = temp_m_imei;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Client2Logic_Player_List_Req : IMessage
	{

		public Msg_Client2Logic_Player_List_Req()
		{
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			return count;
		}
	}

	public class Msg_Client2Logic_RandCard_Req : IMessage
	{
		private ProtoMemberUInt32 _m_index;	// 使用的卡牌的位置

		public Msg_Client2Logic_RandCard_Req()
		{
			_m_index = new ProtoMemberUInt32(1, true);
		}

		public Msg_Client2Logic_RandCard_Req(uint __m_index)
		{
			_m_index = new ProtoMemberUInt32(1, true);
			_m_index.member_value = __m_index;
		}

		public uint m_index
		{
			get{ return _m_index.member_value; }
			set{ _m_index.member_value = value; }
		}
		public bool has_m_index
		{
			get{ return _m_index.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_index.Serialize(_m_index.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_index = 0;
			one_count = _m_index.ParseFrom(ref temp_m_index, ref int_stream);
			if (0 < one_count)
			{
					_m_index.member_value = temp_m_index;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Client2Logic_SetPlayerName_Req : IMessage
	{
		private ProtoMemberString _m_player_name;	// 角色名

		public Msg_Client2Logic_SetPlayerName_Req()
		{
			_m_player_name = new ProtoMemberString(1, true);
		}

		public Msg_Client2Logic_SetPlayerName_Req(string __m_player_name)
		{
			_m_player_name = new ProtoMemberString(1, true);
			_m_player_name.member_value = __m_player_name;
		}

		public string m_player_name
		{
			get{ return _m_player_name.member_value; }
			set{ _m_player_name.member_value = value; }
		}
		public bool has_m_player_name
		{
			get{ return _m_player_name.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_player_name.Serialize(_m_player_name.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			string temp_m_player_name = "";
			one_count = _m_player_name.ParseFrom(ref temp_m_player_name, ref int_stream);
			if (0 < one_count)
			{
					_m_player_name.member_value = temp_m_player_name;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Client2Logic_Shop_Buy_Req : IMessage
	{
		private ProtoMemberEnum<ShopType> _m_shop_type;	// 商店类型
		private ProtoMemberUInt32 _m_buy_goods_id;	// 购买商店道具id
		private ProtoMemberUInt32 _m_buy_goods_count;	// 购买商店道具数量

		public Msg_Client2Logic_Shop_Buy_Req()
		{
			_m_shop_type = new ProtoMemberEnum<ShopType>(1, true);
			_m_buy_goods_id = new ProtoMemberUInt32(2, true);
			_m_buy_goods_count = new ProtoMemberUInt32(3, true);
		}

		public Msg_Client2Logic_Shop_Buy_Req(ShopType __m_shop_type, uint __m_buy_goods_id, uint __m_buy_goods_count)
		{
			_m_shop_type = new ProtoMemberEnum<ShopType>(1, true);
			_m_shop_type.member_value = __m_shop_type;
			_m_buy_goods_id = new ProtoMemberUInt32(2, true);
			_m_buy_goods_id.member_value = __m_buy_goods_id;
			_m_buy_goods_count = new ProtoMemberUInt32(3, true);
			_m_buy_goods_count.member_value = __m_buy_goods_count;
		}

		public ShopType m_shop_type
		{
			get{ return _m_shop_type.member_value; }
			set{ _m_shop_type.member_value = value; }
		}
		public bool has_m_shop_type
		{
			get{ return _m_shop_type.has_value; }
		}

		public uint m_buy_goods_id
		{
			get{ return _m_buy_goods_id.member_value; }
			set{ _m_buy_goods_id.member_value = value; }
		}
		public bool has_m_buy_goods_id
		{
			get{ return _m_buy_goods_id.has_value; }
		}

		public uint m_buy_goods_count
		{
			get{ return _m_buy_goods_count.member_value; }
			set{ _m_buy_goods_count.member_value = value; }
		}
		public bool has_m_buy_goods_count
		{
			get{ return _m_buy_goods_count.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_shop_type.Serialize((uint)_m_shop_type.member_value, ref out_stream);

			count += _m_buy_goods_id.Serialize(_m_buy_goods_id.member_value, ref out_stream);

			count += _m_buy_goods_count.Serialize(_m_buy_goods_count.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_shop_type = 0;
			one_count = _m_shop_type.ParseFrom(ref temp_m_shop_type, ref int_stream);
			if (0 < one_count)
			{
					_m_shop_type.member_value = (ShopType)temp_m_shop_type;
					count = count + one_count;
			}

			uint temp_m_buy_goods_id = 0;
			one_count = _m_buy_goods_id.ParseFrom(ref temp_m_buy_goods_id, ref int_stream);
			if (0 < one_count)
			{
					_m_buy_goods_id.member_value = temp_m_buy_goods_id;
					count = count + one_count;
			}

			uint temp_m_buy_goods_count = 0;
			one_count = _m_buy_goods_count.ParseFrom(ref temp_m_buy_goods_count, ref int_stream);
			if (0 < one_count)
			{
					_m_buy_goods_count.member_value = temp_m_buy_goods_count;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Client2Logic_Shop_ItemList_Req : IMessage
	{
		private ProtoMemberEnum<ShopType> _m_shop_type;	// 商店类型

		public Msg_Client2Logic_Shop_ItemList_Req()
		{
			_m_shop_type = new ProtoMemberEnum<ShopType>(1, true);
		}

		public Msg_Client2Logic_Shop_ItemList_Req(ShopType __m_shop_type)
		{
			_m_shop_type = new ProtoMemberEnum<ShopType>(1, true);
			_m_shop_type.member_value = __m_shop_type;
		}

		public ShopType m_shop_type
		{
			get{ return _m_shop_type.member_value; }
			set{ _m_shop_type.member_value = value; }
		}
		public bool has_m_shop_type
		{
			get{ return _m_shop_type.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_shop_type.Serialize((uint)_m_shop_type.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_shop_type = 0;
			one_count = _m_shop_type.ParseFrom(ref temp_m_shop_type, ref int_stream);
			if (0 < one_count)
			{
					_m_shop_type.member_value = (ShopType)temp_m_shop_type;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Client2Logic_StarChess_SelHero : IMessage
	{
		private ProtoMemberUInt32 _m_player_server_id;	
		private ProtoMemberUInt32 _m_player_account_id;	
		private ProtoMemberUInt32 _m_hero_index;	//0~2
		private ProtoMemberUInt32 _m_toy_type;	//英雄类型

		public Msg_Client2Logic_StarChess_SelHero()
		{
			_m_player_server_id = new ProtoMemberUInt32(1, true);
			_m_player_account_id = new ProtoMemberUInt32(2, true);
			_m_hero_index = new ProtoMemberUInt32(3, true);
			_m_toy_type = new ProtoMemberUInt32(4, true);
		}

		public Msg_Client2Logic_StarChess_SelHero(uint __m_player_server_id, uint __m_player_account_id, uint __m_hero_index, uint __m_toy_type)
		{
			_m_player_server_id = new ProtoMemberUInt32(1, true);
			_m_player_server_id.member_value = __m_player_server_id;
			_m_player_account_id = new ProtoMemberUInt32(2, true);
			_m_player_account_id.member_value = __m_player_account_id;
			_m_hero_index = new ProtoMemberUInt32(3, true);
			_m_hero_index.member_value = __m_hero_index;
			_m_toy_type = new ProtoMemberUInt32(4, true);
			_m_toy_type.member_value = __m_toy_type;
		}

		public uint m_player_server_id
		{
			get{ return _m_player_server_id.member_value; }
			set{ _m_player_server_id.member_value = value; }
		}
		public bool has_m_player_server_id
		{
			get{ return _m_player_server_id.has_value; }
		}

		public uint m_player_account_id
		{
			get{ return _m_player_account_id.member_value; }
			set{ _m_player_account_id.member_value = value; }
		}
		public bool has_m_player_account_id
		{
			get{ return _m_player_account_id.has_value; }
		}

		public uint m_hero_index
		{
			get{ return _m_hero_index.member_value; }
			set{ _m_hero_index.member_value = value; }
		}
		public bool has_m_hero_index
		{
			get{ return _m_hero_index.has_value; }
		}

		public uint m_toy_type
		{
			get{ return _m_toy_type.member_value; }
			set{ _m_toy_type.member_value = value; }
		}
		public bool has_m_toy_type
		{
			get{ return _m_toy_type.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_player_server_id.Serialize(_m_player_server_id.member_value, ref out_stream);

			count += _m_player_account_id.Serialize(_m_player_account_id.member_value, ref out_stream);

			count += _m_hero_index.Serialize(_m_hero_index.member_value, ref out_stream);

			count += _m_toy_type.Serialize(_m_toy_type.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_player_server_id = 0;
			one_count = _m_player_server_id.ParseFrom(ref temp_m_player_server_id, ref int_stream);
			if (0 < one_count)
			{
					_m_player_server_id.member_value = temp_m_player_server_id;
					count = count + one_count;
			}

			uint temp_m_player_account_id = 0;
			one_count = _m_player_account_id.ParseFrom(ref temp_m_player_account_id, ref int_stream);
			if (0 < one_count)
			{
					_m_player_account_id.member_value = temp_m_player_account_id;
					count = count + one_count;
			}

			uint temp_m_hero_index = 0;
			one_count = _m_hero_index.ParseFrom(ref temp_m_hero_index, ref int_stream);
			if (0 < one_count)
			{
					_m_hero_index.member_value = temp_m_hero_index;
					count = count + one_count;
			}

			uint temp_m_toy_type = 0;
			one_count = _m_toy_type.ParseFrom(ref temp_m_toy_type, ref int_stream);
			if (0 < one_count)
			{
					_m_toy_type.member_value = temp_m_toy_type;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Client2Logic_Statistics_Req : IMessage
	{
		private ProtoMemberEmbedded<PlayerId> _m_player_id;	// 目标玩家id

		public Msg_Client2Logic_Statistics_Req()
		{
			_m_player_id = new ProtoMemberEmbedded<PlayerId>(1, true);
			_m_player_id.member_value = new PlayerId();
		}

		public PlayerId m_player_id
		{
			get{ return _m_player_id.member_value as PlayerId; }
			set{ _m_player_id.member_value = value; }
		}
		public bool has_m_player_id
		{
			get{ return _m_player_id.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_player_id.Serialize(_m_player_id.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			PlayerId temp_m_player_id = new PlayerId();
			one_count = _m_player_id.ParseFrom(temp_m_player_id, ref int_stream);
			if (0 < one_count)
			{
					_m_player_id.member_value = temp_m_player_id;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Client2Logic_Talent_LvUp_Req : IMessage
	{
		private ProtoMemberEnum<PlayerTalentType> _m_talent_plan_type;	// 升级的方案类型
		private ProtoMemberUInt32 _m_talent_plan_index;	// 升级的方案序号0-2
		private ProtoMemberUInt32 _m_talent_id;	// 升级的天赋id

		public Msg_Client2Logic_Talent_LvUp_Req()
		{
			_m_talent_plan_type = new ProtoMemberEnum<PlayerTalentType>(1, true);
			_m_talent_plan_index = new ProtoMemberUInt32(2, true);
			_m_talent_id = new ProtoMemberUInt32(3, true);
		}

		public Msg_Client2Logic_Talent_LvUp_Req(PlayerTalentType __m_talent_plan_type, uint __m_talent_plan_index, uint __m_talent_id)
		{
			_m_talent_plan_type = new ProtoMemberEnum<PlayerTalentType>(1, true);
			_m_talent_plan_type.member_value = __m_talent_plan_type;
			_m_talent_plan_index = new ProtoMemberUInt32(2, true);
			_m_talent_plan_index.member_value = __m_talent_plan_index;
			_m_talent_id = new ProtoMemberUInt32(3, true);
			_m_talent_id.member_value = __m_talent_id;
		}

		public PlayerTalentType m_talent_plan_type
		{
			get{ return _m_talent_plan_type.member_value; }
			set{ _m_talent_plan_type.member_value = value; }
		}
		public bool has_m_talent_plan_type
		{
			get{ return _m_talent_plan_type.has_value; }
		}

		public uint m_talent_plan_index
		{
			get{ return _m_talent_plan_index.member_value; }
			set{ _m_talent_plan_index.member_value = value; }
		}
		public bool has_m_talent_plan_index
		{
			get{ return _m_talent_plan_index.has_value; }
		}

		public uint m_talent_id
		{
			get{ return _m_talent_id.member_value; }
			set{ _m_talent_id.member_value = value; }
		}
		public bool has_m_talent_id
		{
			get{ return _m_talent_id.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_talent_plan_type.Serialize((uint)_m_talent_plan_type.member_value, ref out_stream);

			count += _m_talent_plan_index.Serialize(_m_talent_plan_index.member_value, ref out_stream);

			count += _m_talent_id.Serialize(_m_talent_id.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_talent_plan_type = 0;
			one_count = _m_talent_plan_type.ParseFrom(ref temp_m_talent_plan_type, ref int_stream);
			if (0 < one_count)
			{
					_m_talent_plan_type.member_value = (PlayerTalentType)temp_m_talent_plan_type;
					count = count + one_count;
			}

			uint temp_m_talent_plan_index = 0;
			one_count = _m_talent_plan_index.ParseFrom(ref temp_m_talent_plan_index, ref int_stream);
			if (0 < one_count)
			{
					_m_talent_plan_index.member_value = temp_m_talent_plan_index;
					count = count + one_count;
			}

			uint temp_m_talent_id = 0;
			one_count = _m_talent_id.ParseFrom(ref temp_m_talent_id, ref int_stream);
			if (0 < one_count)
			{
					_m_talent_id.member_value = temp_m_talent_id;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Client2Logic_Talent_ReSet_Req : IMessage
	{
		private ProtoMemberEnum<PlayerTalentType> _m_talent_plan_type;	// 重置的方案类型
		private ProtoMemberUInt32 _m_talent_plan_index;	// 重置的方案序号0-2

		public Msg_Client2Logic_Talent_ReSet_Req()
		{
			_m_talent_plan_type = new ProtoMemberEnum<PlayerTalentType>(1, true);
			_m_talent_plan_index = new ProtoMemberUInt32(2, true);
		}

		public Msg_Client2Logic_Talent_ReSet_Req(PlayerTalentType __m_talent_plan_type, uint __m_talent_plan_index)
		{
			_m_talent_plan_type = new ProtoMemberEnum<PlayerTalentType>(1, true);
			_m_talent_plan_type.member_value = __m_talent_plan_type;
			_m_talent_plan_index = new ProtoMemberUInt32(2, true);
			_m_talent_plan_index.member_value = __m_talent_plan_index;
		}

		public PlayerTalentType m_talent_plan_type
		{
			get{ return _m_talent_plan_type.member_value; }
			set{ _m_talent_plan_type.member_value = value; }
		}
		public bool has_m_talent_plan_type
		{
			get{ return _m_talent_plan_type.has_value; }
		}

		public uint m_talent_plan_index
		{
			get{ return _m_talent_plan_index.member_value; }
			set{ _m_talent_plan_index.member_value = value; }
		}
		public bool has_m_talent_plan_index
		{
			get{ return _m_talent_plan_index.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_talent_plan_type.Serialize((uint)_m_talent_plan_type.member_value, ref out_stream);

			count += _m_talent_plan_index.Serialize(_m_talent_plan_index.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_talent_plan_type = 0;
			one_count = _m_talent_plan_type.ParseFrom(ref temp_m_talent_plan_type, ref int_stream);
			if (0 < one_count)
			{
					_m_talent_plan_type.member_value = (PlayerTalentType)temp_m_talent_plan_type;
					count = count + one_count;
			}

			uint temp_m_talent_plan_index = 0;
			one_count = _m_talent_plan_index.ParseFrom(ref temp_m_talent_plan_index, ref int_stream);
			if (0 < one_count)
			{
					_m_talent_plan_index.member_value = temp_m_talent_plan_index;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Client2Logic_Talent_SetCurrPlan_Req : IMessage
	{
		private ProtoMemberUInt32 _m_talent_plan_index;	// 指定的方案序号0-2

		public Msg_Client2Logic_Talent_SetCurrPlan_Req()
		{
			_m_talent_plan_index = new ProtoMemberUInt32(1, true);
		}

		public Msg_Client2Logic_Talent_SetCurrPlan_Req(uint __m_talent_plan_index)
		{
			_m_talent_plan_index = new ProtoMemberUInt32(1, true);
			_m_talent_plan_index.member_value = __m_talent_plan_index;
		}

		public uint m_talent_plan_index
		{
			get{ return _m_talent_plan_index.member_value; }
			set{ _m_talent_plan_index.member_value = value; }
		}
		public bool has_m_talent_plan_index
		{
			get{ return _m_talent_plan_index.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_talent_plan_index.Serialize(_m_talent_plan_index.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_talent_plan_index = 0;
			one_count = _m_talent_plan_index.ParseFrom(ref temp_m_talent_plan_index, ref int_stream);
			if (0 < one_count)
			{
					_m_talent_plan_index.member_value = temp_m_talent_plan_index;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Client2Logic_Task_Change_Req : IMessage
	{
		private ProtoMemberUInt32 _m_task_index;	// 要替换的任务序号

		public Msg_Client2Logic_Task_Change_Req()
		{
			_m_task_index = new ProtoMemberUInt32(1, true);
		}

		public Msg_Client2Logic_Task_Change_Req(uint __m_task_index)
		{
			_m_task_index = new ProtoMemberUInt32(1, true);
			_m_task_index.member_value = __m_task_index;
		}

		public uint m_task_index
		{
			get{ return _m_task_index.member_value; }
			set{ _m_task_index.member_value = value; }
		}
		public bool has_m_task_index
		{
			get{ return _m_task_index.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_task_index.Serialize(_m_task_index.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_task_index = 0;
			one_count = _m_task_index.ParseFrom(ref temp_m_task_index, ref int_stream);
			if (0 < one_count)
			{
					_m_task_index.member_value = temp_m_task_index;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Client2Logic_Task_Finsh_Req : IMessage
	{
		private ProtoMemberUInt32 _m_task_index;	// 要领取任务奖励的任务序号

		public Msg_Client2Logic_Task_Finsh_Req()
		{
			_m_task_index = new ProtoMemberUInt32(1, true);
		}

		public Msg_Client2Logic_Task_Finsh_Req(uint __m_task_index)
		{
			_m_task_index = new ProtoMemberUInt32(1, true);
			_m_task_index.member_value = __m_task_index;
		}

		public uint m_task_index
		{
			get{ return _m_task_index.member_value; }
			set{ _m_task_index.member_value = value; }
		}
		public bool has_m_task_index
		{
			get{ return _m_task_index.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_task_index.Serialize(_m_task_index.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_task_index = 0;
			one_count = _m_task_index.ParseFrom(ref temp_m_task_index, ref int_stream);
			if (0 < one_count)
			{
					_m_task_index.member_value = temp_m_task_index;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Client2Logic_Team_Time_Req : IMessage
	{

		public Msg_Client2Logic_Team_Time_Req()
		{
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			return count;
		}
	}

	public class Msg_Client2Logic_Team_UI_Req : IMessage
	{
		private ProtoMemberUInt32 _m_ui;	// ui
		private ProtoMemberBool _m_is_open;	// true：打开，false：关闭

		public Msg_Client2Logic_Team_UI_Req()
		{
			_m_ui = new ProtoMemberUInt32(1, true);
			_m_is_open = new ProtoMemberBool(2, true);
		}

		public Msg_Client2Logic_Team_UI_Req(uint __m_ui, bool __m_is_open)
		{
			_m_ui = new ProtoMemberUInt32(1, true);
			_m_ui.member_value = __m_ui;
			_m_is_open = new ProtoMemberBool(2, true);
			_m_is_open.member_value = __m_is_open;
		}

		public uint m_ui
		{
			get{ return _m_ui.member_value; }
			set{ _m_ui.member_value = value; }
		}
		public bool has_m_ui
		{
			get{ return _m_ui.has_value; }
		}

		public bool m_is_open
		{
			get{ return _m_is_open.member_value; }
			set{ _m_is_open.member_value = value; }
		}
		public bool has_m_is_open
		{
			get{ return _m_is_open.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_ui.Serialize(_m_ui.member_value, ref out_stream);

			count += _m_is_open.Serialize(_m_is_open.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_ui = 0;
			one_count = _m_ui.ParseFrom(ref temp_m_ui, ref int_stream);
			if (0 < one_count)
			{
					_m_ui.member_value = temp_m_ui;
					count = count + one_count;
			}

			bool temp_m_is_open = false;
			one_count = _m_is_open.ParseFrom(ref temp_m_is_open, ref int_stream);
			if (0 < one_count)
			{
					_m_is_open.member_value = temp_m_is_open;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Client2Logic_ToyActivate_Req : IMessage
	{
		private ProtoMemberString _m_toy_guid;	// 激活的玩具唯一识别码
		private ProtoMemberString _m_toy_key;	// 激活的玩具密码
		private ProtoMemberUInt32 _m_toy_type;	// 激活的玩具类别

		public Msg_Client2Logic_ToyActivate_Req()
		{
			_m_toy_guid = new ProtoMemberString(1, true);
			_m_toy_key = new ProtoMemberString(2, true);
			_m_toy_type = new ProtoMemberUInt32(3, true);
		}

		public Msg_Client2Logic_ToyActivate_Req(string __m_toy_guid, string __m_toy_key, uint __m_toy_type)
		{
			_m_toy_guid = new ProtoMemberString(1, true);
			_m_toy_guid.member_value = __m_toy_guid;
			_m_toy_key = new ProtoMemberString(2, true);
			_m_toy_key.member_value = __m_toy_key;
			_m_toy_type = new ProtoMemberUInt32(3, true);
			_m_toy_type.member_value = __m_toy_type;
		}

		public string m_toy_guid
		{
			get{ return _m_toy_guid.member_value; }
			set{ _m_toy_guid.member_value = value; }
		}
		public bool has_m_toy_guid
		{
			get{ return _m_toy_guid.has_value; }
		}

		public string m_toy_key
		{
			get{ return _m_toy_key.member_value; }
			set{ _m_toy_key.member_value = value; }
		}
		public bool has_m_toy_key
		{
			get{ return _m_toy_key.has_value; }
		}

		public uint m_toy_type
		{
			get{ return _m_toy_type.member_value; }
			set{ _m_toy_type.member_value = value; }
		}
		public bool has_m_toy_type
		{
			get{ return _m_toy_type.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_toy_guid.Serialize(_m_toy_guid.member_value, ref out_stream);

			count += _m_toy_key.Serialize(_m_toy_key.member_value, ref out_stream);

			count += _m_toy_type.Serialize(_m_toy_type.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			string temp_m_toy_guid = "";
			one_count = _m_toy_guid.ParseFrom(ref temp_m_toy_guid, ref int_stream);
			if (0 < one_count)
			{
					_m_toy_guid.member_value = temp_m_toy_guid;
					count = count + one_count;
			}

			string temp_m_toy_key = "";
			one_count = _m_toy_key.ParseFrom(ref temp_m_toy_key, ref int_stream);
			if (0 < one_count)
			{
					_m_toy_key.member_value = temp_m_toy_key;
					count = count + one_count;
			}

			uint temp_m_toy_type = 0;
			one_count = _m_toy_type.ParseFrom(ref temp_m_toy_type, ref int_stream);
			if (0 < one_count)
			{
					_m_toy_type.member_value = temp_m_toy_type;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Client2Union_ApplyList_Req : IMessage
	{

		public Msg_Client2Union_ApplyList_Req()
		{
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			return count;
		}
	}

	public class Msg_Client2Union_CheckUnionName_Req : IMessage
	{
		private ProtoMemberString _m_union_name;	// 公会名

		public Msg_Client2Union_CheckUnionName_Req()
		{
			_m_union_name = new ProtoMemberString(1, true);
		}

		public Msg_Client2Union_CheckUnionName_Req(string __m_union_name)
		{
			_m_union_name = new ProtoMemberString(1, true);
			_m_union_name.member_value = __m_union_name;
		}

		public string m_union_name
		{
			get{ return _m_union_name.member_value; }
			set{ _m_union_name.member_value = value; }
		}
		public bool has_m_union_name
		{
			get{ return _m_union_name.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_union_name.Serialize(_m_union_name.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			string temp_m_union_name = "";
			one_count = _m_union_name.ParseFrom(ref temp_m_union_name, ref int_stream);
			if (0 < one_count)
			{
					_m_union_name.member_value = temp_m_union_name;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Client2Union_RecommendList_Req : IMessage
	{

		public Msg_Client2Union_RecommendList_Req()
		{
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			return count;
		}
	}

	public class Msg_Client2Union_SetUnionName_Req : IMessage
	{
		private ProtoMemberString _m_union_name;	// 公会名

		public Msg_Client2Union_SetUnionName_Req()
		{
			_m_union_name = new ProtoMemberString(1, true);
		}

		public Msg_Client2Union_SetUnionName_Req(string __m_union_name)
		{
			_m_union_name = new ProtoMemberString(1, true);
			_m_union_name.member_value = __m_union_name;
		}

		public string m_union_name
		{
			get{ return _m_union_name.member_value; }
			set{ _m_union_name.member_value = value; }
		}
		public bool has_m_union_name
		{
			get{ return _m_union_name.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_union_name.Serialize(_m_union_name.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			string temp_m_union_name = "";
			one_count = _m_union_name.ParseFrom(ref temp_m_union_name, ref int_stream);
			if (0 < one_count)
			{
					_m_union_name.member_value = temp_m_union_name;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Client2Union_UnionApplicationList_Req : IMessage
	{
		private ProtoMemberUInt32 _m_last_account_id;	// 上次已收到的玩家列表的最后一个角色id == 账号id（填0表示从头开始）
		private ProtoMemberUInt32 _m_last_server_id;	

		public Msg_Client2Union_UnionApplicationList_Req()
		{
			_m_last_account_id = new ProtoMemberUInt32(1, false);
			_m_last_server_id = new ProtoMemberUInt32(2, false);
		}

		public Msg_Client2Union_UnionApplicationList_Req(uint __m_last_account_id, uint __m_last_server_id)
		{
			_m_last_account_id = new ProtoMemberUInt32(1, false);
			_m_last_account_id.member_value = __m_last_account_id;
			_m_last_server_id = new ProtoMemberUInt32(2, false);
			_m_last_server_id.member_value = __m_last_server_id;
		}

		public uint m_last_account_id
		{
			get{ return _m_last_account_id.member_value; }
			set{ _m_last_account_id.member_value = value; }
		}
		public bool has_m_last_account_id
		{
			get{ return _m_last_account_id.has_value; }
		}

		public uint m_last_server_id
		{
			get{ return _m_last_server_id.member_value; }
			set{ _m_last_server_id.member_value = value; }
		}
		public bool has_m_last_server_id
		{
			get{ return _m_last_server_id.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_last_account_id.Serialize(_m_last_account_id.member_value, ref out_stream);

			count += _m_last_server_id.Serialize(_m_last_server_id.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_last_account_id = 0;
			one_count = _m_last_account_id.ParseFrom(ref temp_m_last_account_id, ref int_stream);
			if (0 < one_count)
			{
					_m_last_account_id.member_value = temp_m_last_account_id;
					count = count + one_count;
			}

			uint temp_m_last_server_id = 0;
			one_count = _m_last_server_id.ParseFrom(ref temp_m_last_server_id, ref int_stream);
			if (0 < one_count)
			{
					_m_last_server_id.member_value = temp_m_last_server_id;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Client2Union_UnionChest_Get_Req : IMessage
	{
		private ProtoMemberUInt32 _m_chest_id;	// 待领取的宝箱id

		public Msg_Client2Union_UnionChest_Get_Req()
		{
			_m_chest_id = new ProtoMemberUInt32(1, true);
		}

		public Msg_Client2Union_UnionChest_Get_Req(uint __m_chest_id)
		{
			_m_chest_id = new ProtoMemberUInt32(1, true);
			_m_chest_id.member_value = __m_chest_id;
		}

		public uint m_chest_id
		{
			get{ return _m_chest_id.member_value; }
			set{ _m_chest_id.member_value = value; }
		}
		public bool has_m_chest_id
		{
			get{ return _m_chest_id.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_chest_id.Serialize(_m_chest_id.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_chest_id = 0;
			one_count = _m_chest_id.ParseFrom(ref temp_m_chest_id, ref int_stream);
			if (0 < one_count)
			{
					_m_chest_id.member_value = temp_m_chest_id;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Client2Union_UnionManor_Bid_Req : IMessage
	{
		private ProtoMemberUInt32 _m_manor_id;	// 宣战竞标领地id
		private ProtoMemberUInt32 _m_bid_money;	// 竞标金额

		public Msg_Client2Union_UnionManor_Bid_Req()
		{
			_m_manor_id = new ProtoMemberUInt32(1, true);
			_m_bid_money = new ProtoMemberUInt32(2, true);
		}

		public Msg_Client2Union_UnionManor_Bid_Req(uint __m_manor_id, uint __m_bid_money)
		{
			_m_manor_id = new ProtoMemberUInt32(1, true);
			_m_manor_id.member_value = __m_manor_id;
			_m_bid_money = new ProtoMemberUInt32(2, true);
			_m_bid_money.member_value = __m_bid_money;
		}

		public uint m_manor_id
		{
			get{ return _m_manor_id.member_value; }
			set{ _m_manor_id.member_value = value; }
		}
		public bool has_m_manor_id
		{
			get{ return _m_manor_id.has_value; }
		}

		public uint m_bid_money
		{
			get{ return _m_bid_money.member_value; }
			set{ _m_bid_money.member_value = value; }
		}
		public bool has_m_bid_money
		{
			get{ return _m_bid_money.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_manor_id.Serialize(_m_manor_id.member_value, ref out_stream);

			count += _m_bid_money.Serialize(_m_bid_money.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_manor_id = 0;
			one_count = _m_manor_id.ParseFrom(ref temp_m_manor_id, ref int_stream);
			if (0 < one_count)
			{
					_m_manor_id.member_value = temp_m_manor_id;
					count = count + one_count;
			}

			uint temp_m_bid_money = 0;
			one_count = _m_bid_money.ParseFrom(ref temp_m_bid_money, ref int_stream);
			if (0 < one_count)
			{
					_m_bid_money.member_value = temp_m_bid_money;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Client2Union_UnionPlayerOperator_Req : IMessage
	{
		private ProtoMemberUInt32 _m_account_id;	// 被操作公会成员/申请成员角色id == 账号id
		private ProtoMemberUInt32 _m_server_id;	// 被操作公会成员/申请成员所属服id
		private ProtoMemberEnum<UnionMemberOperatorType> _m_operator;	// 操作类型

		public Msg_Client2Union_UnionPlayerOperator_Req()
		{
			_m_account_id = new ProtoMemberUInt32(1, true);
			_m_server_id = new ProtoMemberUInt32(2, true);
			_m_operator = new ProtoMemberEnum<UnionMemberOperatorType>(3, true);
		}

		public Msg_Client2Union_UnionPlayerOperator_Req(uint __m_account_id, uint __m_server_id, UnionMemberOperatorType __m_operator)
		{
			_m_account_id = new ProtoMemberUInt32(1, true);
			_m_account_id.member_value = __m_account_id;
			_m_server_id = new ProtoMemberUInt32(2, true);
			_m_server_id.member_value = __m_server_id;
			_m_operator = new ProtoMemberEnum<UnionMemberOperatorType>(3, true);
			_m_operator.member_value = __m_operator;
		}

		public uint m_account_id
		{
			get{ return _m_account_id.member_value; }
			set{ _m_account_id.member_value = value; }
		}
		public bool has_m_account_id
		{
			get{ return _m_account_id.has_value; }
		}

		public uint m_server_id
		{
			get{ return _m_server_id.member_value; }
			set{ _m_server_id.member_value = value; }
		}
		public bool has_m_server_id
		{
			get{ return _m_server_id.has_value; }
		}

		public UnionMemberOperatorType m_operator
		{
			get{ return _m_operator.member_value; }
			set{ _m_operator.member_value = value; }
		}
		public bool has_m_operator
		{
			get{ return _m_operator.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_account_id.Serialize(_m_account_id.member_value, ref out_stream);

			count += _m_server_id.Serialize(_m_server_id.member_value, ref out_stream);

			count += _m_operator.Serialize((uint)_m_operator.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_account_id = 0;
			one_count = _m_account_id.ParseFrom(ref temp_m_account_id, ref int_stream);
			if (0 < one_count)
			{
					_m_account_id.member_value = temp_m_account_id;
					count = count + one_count;
			}

			uint temp_m_server_id = 0;
			one_count = _m_server_id.ParseFrom(ref temp_m_server_id, ref int_stream);
			if (0 < one_count)
			{
					_m_server_id.member_value = temp_m_server_id;
					count = count + one_count;
			}

			uint temp_m_operator = 0;
			one_count = _m_operator.ParseFrom(ref temp_m_operator, ref int_stream);
			if (0 < one_count)
			{
					_m_operator.member_value = (UnionMemberOperatorType)temp_m_operator;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Client2Union_UnionTechnology_LvUp_Req : IMessage
	{
		private ProtoMemberUInt32 _m_technology_id;	// 待升级的科技id

		public Msg_Client2Union_UnionTechnology_LvUp_Req()
		{
			_m_technology_id = new ProtoMemberUInt32(1, true);
		}

		public Msg_Client2Union_UnionTechnology_LvUp_Req(uint __m_technology_id)
		{
			_m_technology_id = new ProtoMemberUInt32(1, true);
			_m_technology_id.member_value = __m_technology_id;
		}

		public uint m_technology_id
		{
			get{ return _m_technology_id.member_value; }
			set{ _m_technology_id.member_value = value; }
		}
		public bool has_m_technology_id
		{
			get{ return _m_technology_id.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_technology_id.Serialize(_m_technology_id.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_technology_id = 0;
			one_count = _m_technology_id.ParseFrom(ref temp_m_technology_id, ref int_stream);
			if (0 < one_count)
			{
					_m_technology_id.member_value = temp_m_technology_id;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Client2Union_Union_Create_Req : IMessage
	{
		private ProtoMemberString _m_name;	// 公会名称

		public Msg_Client2Union_Union_Create_Req()
		{
			_m_name = new ProtoMemberString(1, true);
		}

		public Msg_Client2Union_Union_Create_Req(string __m_name)
		{
			_m_name = new ProtoMemberString(1, true);
			_m_name.member_value = __m_name;
		}

		public string m_name
		{
			get{ return _m_name.member_value; }
			set{ _m_name.member_value = value; }
		}
		public bool has_m_name
		{
			get{ return _m_name.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_name.Serialize(_m_name.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			string temp_m_name = "";
			one_count = _m_name.ParseFrom(ref temp_m_name, ref int_stream);
			if (0 < one_count)
			{
					_m_name.member_value = temp_m_name;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Client2Union_Union_Find_Req : IMessage
	{
		private ProtoMemberUInt64 _m_union_id;	// 公会id

		public Msg_Client2Union_Union_Find_Req()
		{
			_m_union_id = new ProtoMemberUInt64(1, true);
		}

		public Msg_Client2Union_Union_Find_Req(ulong __m_union_id)
		{
			_m_union_id = new ProtoMemberUInt64(1, true);
			_m_union_id.member_value = __m_union_id;
		}

		public ulong m_union_id
		{
			get{ return _m_union_id.member_value; }
			set{ _m_union_id.member_value = value; }
		}
		public bool has_m_union_id
		{
			get{ return _m_union_id.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_union_id.Serialize(_m_union_id.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			ulong temp_m_union_id = 0;
			one_count = _m_union_id.ParseFrom(ref temp_m_union_id, ref int_stream);
			if (0 < one_count)
			{
					_m_union_id.member_value = temp_m_union_id;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Client2Union_Union_Info_Req : IMessage
	{
		private ProtoMemberBool _m_full_req;	// true：请求全部数据，false：请求更新数据

		public Msg_Client2Union_Union_Info_Req()
		{
			_m_full_req = new ProtoMemberBool(1, true);
		}

		public Msg_Client2Union_Union_Info_Req(bool __m_full_req)
		{
			_m_full_req = new ProtoMemberBool(1, true);
			_m_full_req.member_value = __m_full_req;
		}

		public bool m_full_req
		{
			get{ return _m_full_req.member_value; }
			set{ _m_full_req.member_value = value; }
		}
		public bool has_m_full_req
		{
			get{ return _m_full_req.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_full_req.Serialize(_m_full_req.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			bool temp_m_full_req = false;
			one_count = _m_full_req.ParseFrom(ref temp_m_full_req, ref int_stream);
			if (0 < one_count)
			{
					_m_full_req.member_value = temp_m_full_req;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Client2Union_Union_Join_Req : IMessage
	{
		private ProtoMemberUInt64 _m_union_id;	// 公会id
		private ProtoMemberBool _m_type;	// true：申请加入，false：取消申请加入

		public Msg_Client2Union_Union_Join_Req()
		{
			_m_union_id = new ProtoMemberUInt64(1, true);
			_m_type = new ProtoMemberBool(2, true);
		}

		public Msg_Client2Union_Union_Join_Req(ulong __m_union_id, bool __m_type)
		{
			_m_union_id = new ProtoMemberUInt64(1, true);
			_m_union_id.member_value = __m_union_id;
			_m_type = new ProtoMemberBool(2, true);
			_m_type.member_value = __m_type;
		}

		public ulong m_union_id
		{
			get{ return _m_union_id.member_value; }
			set{ _m_union_id.member_value = value; }
		}
		public bool has_m_union_id
		{
			get{ return _m_union_id.has_value; }
		}

		public bool m_type
		{
			get{ return _m_type.member_value; }
			set{ _m_type.member_value = value; }
		}
		public bool has_m_type
		{
			get{ return _m_type.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_union_id.Serialize(_m_union_id.member_value, ref out_stream);

			count += _m_type.Serialize(_m_type.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			ulong temp_m_union_id = 0;
			one_count = _m_union_id.ParseFrom(ref temp_m_union_id, ref int_stream);
			if (0 < one_count)
			{
					_m_union_id.member_value = temp_m_union_id;
					count = count + one_count;
			}

			bool temp_m_type = false;
			one_count = _m_type.ParseFrom(ref temp_m_type, ref int_stream);
			if (0 < one_count)
			{
					_m_type.member_value = temp_m_type;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Client2Union_Union_MemberSet_Req : IMessage
	{
		private ProtoMemberBool _m_post_sticky;	// 公会个人设置：个人信息置顶

		public Msg_Client2Union_Union_MemberSet_Req()
		{
			_m_post_sticky = new ProtoMemberBool(1, false);
		}

		public Msg_Client2Union_Union_MemberSet_Req(bool __m_post_sticky)
		{
			_m_post_sticky = new ProtoMemberBool(1, false);
			_m_post_sticky.member_value = __m_post_sticky;
		}

		public bool m_post_sticky
		{
			get{ return _m_post_sticky.member_value; }
			set{ _m_post_sticky.member_value = value; }
		}
		public bool has_m_post_sticky
		{
			get{ return _m_post_sticky.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_post_sticky.Serialize(_m_post_sticky.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			bool temp_m_post_sticky = false;
			one_count = _m_post_sticky.ParseFrom(ref temp_m_post_sticky, ref int_stream);
			if (0 < one_count)
			{
					_m_post_sticky.member_value = temp_m_post_sticky;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Client2Union_Union_Set_Req : IMessage
	{
		private ProtoMemberString _m_badge;	// 公会徽章
		private ProtoMemberString _m_string;	// 公会宣言
		private ProtoMemberUInt32 _m_order_type;	// 公会设置：排序方式
		private ProtoMemberUInt32 _m_hunting_limit;	// 公会设置：申请条件：狩猎等级
		private ProtoMemberUInt32 _m_lv_limit;	// 公会设置：申请条件：英雄等级

		public Msg_Client2Union_Union_Set_Req()
		{
			_m_badge = new ProtoMemberString(1, false);
			_m_string = new ProtoMemberString(2, false);
			_m_order_type = new ProtoMemberUInt32(3, false);
			_m_hunting_limit = new ProtoMemberUInt32(4, false);
			_m_lv_limit = new ProtoMemberUInt32(5, false);
		}

		public Msg_Client2Union_Union_Set_Req(string __m_badge, string __m_string, uint __m_order_type, uint __m_hunting_limit, uint __m_lv_limit)
		{
			_m_badge = new ProtoMemberString(1, false);
			_m_badge.member_value = __m_badge;
			_m_string = new ProtoMemberString(2, false);
			_m_string.member_value = __m_string;
			_m_order_type = new ProtoMemberUInt32(3, false);
			_m_order_type.member_value = __m_order_type;
			_m_hunting_limit = new ProtoMemberUInt32(4, false);
			_m_hunting_limit.member_value = __m_hunting_limit;
			_m_lv_limit = new ProtoMemberUInt32(5, false);
			_m_lv_limit.member_value = __m_lv_limit;
		}

		public string m_badge
		{
			get{ return _m_badge.member_value; }
			set{ _m_badge.member_value = value; }
		}
		public bool has_m_badge
		{
			get{ return _m_badge.has_value; }
		}

		public string m_string
		{
			get{ return _m_string.member_value; }
			set{ _m_string.member_value = value; }
		}
		public bool has_m_string
		{
			get{ return _m_string.has_value; }
		}

		public uint m_order_type
		{
			get{ return _m_order_type.member_value; }
			set{ _m_order_type.member_value = value; }
		}
		public bool has_m_order_type
		{
			get{ return _m_order_type.has_value; }
		}

		public uint m_hunting_limit
		{
			get{ return _m_hunting_limit.member_value; }
			set{ _m_hunting_limit.member_value = value; }
		}
		public bool has_m_hunting_limit
		{
			get{ return _m_hunting_limit.has_value; }
		}

		public uint m_lv_limit
		{
			get{ return _m_lv_limit.member_value; }
			set{ _m_lv_limit.member_value = value; }
		}
		public bool has_m_lv_limit
		{
			get{ return _m_lv_limit.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_badge.Serialize(_m_badge.member_value, ref out_stream);

			count += _m_string.Serialize(_m_string.member_value, ref out_stream);

			count += _m_order_type.Serialize(_m_order_type.member_value, ref out_stream);

			count += _m_hunting_limit.Serialize(_m_hunting_limit.member_value, ref out_stream);

			count += _m_lv_limit.Serialize(_m_lv_limit.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			string temp_m_badge = "";
			one_count = _m_badge.ParseFrom(ref temp_m_badge, ref int_stream);
			if (0 < one_count)
			{
					_m_badge.member_value = temp_m_badge;
					count = count + one_count;
			}

			string temp_m_string = "";
			one_count = _m_string.ParseFrom(ref temp_m_string, ref int_stream);
			if (0 < one_count)
			{
					_m_string.member_value = temp_m_string;
					count = count + one_count;
			}

			uint temp_m_order_type = 0;
			one_count = _m_order_type.ParseFrom(ref temp_m_order_type, ref int_stream);
			if (0 < one_count)
			{
					_m_order_type.member_value = temp_m_order_type;
					count = count + one_count;
			}

			uint temp_m_hunting_limit = 0;
			one_count = _m_hunting_limit.ParseFrom(ref temp_m_hunting_limit, ref int_stream);
			if (0 < one_count)
			{
					_m_hunting_limit.member_value = temp_m_hunting_limit;
					count = count + one_count;
			}

			uint temp_m_lv_limit = 0;
			one_count = _m_lv_limit.ParseFrom(ref temp_m_lv_limit, ref int_stream);
			if (0 < one_count)
			{
					_m_lv_limit.member_value = temp_m_lv_limit;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Connect : IMessage
	{
		private ProtoMemberUInt32 _m_type;	// 连接方的类型，表明自己的身份（对应ServerType）
		private ProtoMemberUInt32 _m_id;	// 连接方的唯一id
		private ProtoMemberString _m_ip;	// 连接方的ip
		private ProtoMemberUInt32 _m_port;	// 连接方的port

		public Msg_Connect()
		{
			_m_type = new ProtoMemberUInt32(1, true);
			_m_id = new ProtoMemberUInt32(2, false);
			_m_ip = new ProtoMemberString(3, false);
			_m_port = new ProtoMemberUInt32(4, false);
		}

		public Msg_Connect(uint __m_type, uint __m_id, string __m_ip, uint __m_port)
		{
			_m_type = new ProtoMemberUInt32(1, true);
			_m_type.member_value = __m_type;
			_m_id = new ProtoMemberUInt32(2, false);
			_m_id.member_value = __m_id;
			_m_ip = new ProtoMemberString(3, false);
			_m_ip.member_value = __m_ip;
			_m_port = new ProtoMemberUInt32(4, false);
			_m_port.member_value = __m_port;
		}

		public uint m_type
		{
			get{ return _m_type.member_value; }
			set{ _m_type.member_value = value; }
		}
		public bool has_m_type
		{
			get{ return _m_type.has_value; }
		}

		public uint m_id
		{
			get{ return _m_id.member_value; }
			set{ _m_id.member_value = value; }
		}
		public bool has_m_id
		{
			get{ return _m_id.has_value; }
		}

		public string m_ip
		{
			get{ return _m_ip.member_value; }
			set{ _m_ip.member_value = value; }
		}
		public bool has_m_ip
		{
			get{ return _m_ip.has_value; }
		}

		public uint m_port
		{
			get{ return _m_port.member_value; }
			set{ _m_port.member_value = value; }
		}
		public bool has_m_port
		{
			get{ return _m_port.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_type.Serialize(_m_type.member_value, ref out_stream);

			count += _m_id.Serialize(_m_id.member_value, ref out_stream);

			count += _m_ip.Serialize(_m_ip.member_value, ref out_stream);

			count += _m_port.Serialize(_m_port.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_type = 0;
			one_count = _m_type.ParseFrom(ref temp_m_type, ref int_stream);
			if (0 < one_count)
			{
					_m_type.member_value = temp_m_type;
					count = count + one_count;
			}

			uint temp_m_id = 0;
			one_count = _m_id.ParseFrom(ref temp_m_id, ref int_stream);
			if (0 < one_count)
			{
					_m_id.member_value = temp_m_id;
					count = count + one_count;
			}

			string temp_m_ip = "";
			one_count = _m_ip.ParseFrom(ref temp_m_ip, ref int_stream);
			if (0 < one_count)
			{
					_m_ip.member_value = temp_m_ip;
					count = count + one_count;
			}

			uint temp_m_port = 0;
			one_count = _m_port.ParseFrom(ref temp_m_port, ref int_stream);
			if (0 < one_count)
			{
					_m_port.member_value = temp_m_port;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Gate2Logic_Player_Login_Req : IMessage
	{
		private ProtoMemberUInt32 _m_server_type;	// 网关类型（ServerType）
		private ProtoMemberString _m_ip;	// 登陆ip
		private ProtoMemberString _m_imei;	// 设备唯一标识

		public Msg_Gate2Logic_Player_Login_Req()
		{
			_m_server_type = new ProtoMemberUInt32(1, true);
			_m_ip = new ProtoMemberString(2, false);
			_m_imei = new ProtoMemberString(3, false);
		}

		public Msg_Gate2Logic_Player_Login_Req(uint __m_server_type, string __m_ip, string __m_imei)
		{
			_m_server_type = new ProtoMemberUInt32(1, true);
			_m_server_type.member_value = __m_server_type;
			_m_ip = new ProtoMemberString(2, false);
			_m_ip.member_value = __m_ip;
			_m_imei = new ProtoMemberString(3, false);
			_m_imei.member_value = __m_imei;
		}

		public uint m_server_type
		{
			get{ return _m_server_type.member_value; }
			set{ _m_server_type.member_value = value; }
		}
		public bool has_m_server_type
		{
			get{ return _m_server_type.has_value; }
		}

		public string m_ip
		{
			get{ return _m_ip.member_value; }
			set{ _m_ip.member_value = value; }
		}
		public bool has_m_ip
		{
			get{ return _m_ip.has_value; }
		}

		public string m_imei
		{
			get{ return _m_imei.member_value; }
			set{ _m_imei.member_value = value; }
		}
		public bool has_m_imei
		{
			get{ return _m_imei.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_server_type.Serialize(_m_server_type.member_value, ref out_stream);

			count += _m_ip.Serialize(_m_ip.member_value, ref out_stream);

			count += _m_imei.Serialize(_m_imei.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_server_type = 0;
			one_count = _m_server_type.ParseFrom(ref temp_m_server_type, ref int_stream);
			if (0 < one_count)
			{
					_m_server_type.member_value = temp_m_server_type;
					count = count + one_count;
			}

			string temp_m_ip = "";
			one_count = _m_ip.ParseFrom(ref temp_m_ip, ref int_stream);
			if (0 < one_count)
			{
					_m_ip.member_value = temp_m_ip;
					count = count + one_count;
			}

			string temp_m_imei = "";
			one_count = _m_imei.ParseFrom(ref temp_m_imei, ref int_stream);
			if (0 < one_count)
			{
					_m_imei.member_value = temp_m_imei;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Gate2Logic_Player_Out_Req : IMessage
	{
		private ProtoMemberUInt32 _m_server_type;	// 网关类型（ServerType）

		public Msg_Gate2Logic_Player_Out_Req()
		{
			_m_server_type = new ProtoMemberUInt32(1, true);
		}

		public Msg_Gate2Logic_Player_Out_Req(uint __m_server_type)
		{
			_m_server_type = new ProtoMemberUInt32(1, true);
			_m_server_type.member_value = __m_server_type;
		}

		public uint m_server_type
		{
			get{ return _m_server_type.member_value; }
			set{ _m_server_type.member_value = value; }
		}
		public bool has_m_server_type
		{
			get{ return _m_server_type.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_server_type.Serialize(_m_server_type.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_server_type = 0;
			one_count = _m_server_type.ParseFrom(ref temp_m_server_type, ref int_stream);
			if (0 < one_count)
			{
					_m_server_type.member_value = temp_m_server_type;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Gm2Logic_GM_Req : IMessage
	{
		private ProtoMemberUInt32 _m_type;	//命令枚举，对应GmMsgType
		private ProtoMemberUInt32 _m_playerId;	// 角色ID
		private ProtoMemberUInt32 _m_serverId;	// 服务器ID
		private ProtoMemberEmbedded<GmKeyValueList> _m_paramList;	//参数键值对列表

		public Msg_Gm2Logic_GM_Req()
		{
			_m_type = new ProtoMemberUInt32(1, true);
			_m_playerId = new ProtoMemberUInt32(2, false);
			_m_serverId = new ProtoMemberUInt32(3, false);
			_m_paramList = new ProtoMemberEmbedded<GmKeyValueList>(4, false);
			_m_paramList.member_value = new GmKeyValueList();
		}

		public Msg_Gm2Logic_GM_Req(uint __m_type, uint __m_playerId, uint __m_serverId)
		{
			_m_type = new ProtoMemberUInt32(1, true);
			_m_type.member_value = __m_type;
			_m_playerId = new ProtoMemberUInt32(2, false);
			_m_playerId.member_value = __m_playerId;
			_m_serverId = new ProtoMemberUInt32(3, false);
			_m_serverId.member_value = __m_serverId;
			_m_paramList = new ProtoMemberEmbedded<GmKeyValueList>(4, false);
			_m_paramList.member_value = new GmKeyValueList();
		}

		public uint m_type
		{
			get{ return _m_type.member_value; }
			set{ _m_type.member_value = value; }
		}
		public bool has_m_type
		{
			get{ return _m_type.has_value; }
		}

		public uint m_playerId
		{
			get{ return _m_playerId.member_value; }
			set{ _m_playerId.member_value = value; }
		}
		public bool has_m_playerId
		{
			get{ return _m_playerId.has_value; }
		}

		public uint m_serverId
		{
			get{ return _m_serverId.member_value; }
			set{ _m_serverId.member_value = value; }
		}
		public bool has_m_serverId
		{
			get{ return _m_serverId.has_value; }
		}

		public GmKeyValueList m_paramList
		{
			get{ return _m_paramList.member_value as GmKeyValueList; }
			set{ _m_paramList.member_value = value; }
		}
		public bool has_m_paramList
		{
			get{ return _m_paramList.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_type.Serialize(_m_type.member_value, ref out_stream);

			count += _m_playerId.Serialize(_m_playerId.member_value, ref out_stream);

			count += _m_serverId.Serialize(_m_serverId.member_value, ref out_stream);

			count += _m_paramList.Serialize(_m_paramList.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_type = 0;
			one_count = _m_type.ParseFrom(ref temp_m_type, ref int_stream);
			if (0 < one_count)
			{
					_m_type.member_value = temp_m_type;
					count = count + one_count;
			}

			uint temp_m_playerId = 0;
			one_count = _m_playerId.ParseFrom(ref temp_m_playerId, ref int_stream);
			if (0 < one_count)
			{
					_m_playerId.member_value = temp_m_playerId;
					count = count + one_count;
			}

			uint temp_m_serverId = 0;
			one_count = _m_serverId.ParseFrom(ref temp_m_serverId, ref int_stream);
			if (0 < one_count)
			{
					_m_serverId.member_value = temp_m_serverId;
					count = count + one_count;
			}

			GmKeyValueList temp_m_paramList = new GmKeyValueList();
			one_count = _m_paramList.ParseFrom(temp_m_paramList, ref int_stream);
			if (0 < one_count)
			{
					_m_paramList.member_value = temp_m_paramList;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Battle_PVE_Extreme_CancelHero_Req : IMessage
	{
		private ProtoMemberUInt32 _m_seat_index;	// 更换的位置 0 - 3
		private ProtoMemberUInt32 _m_toy_sn;	// 是否使用实体玩具取消

		public Msg_Logic2Battle_PVE_Extreme_CancelHero_Req()
		{
			_m_seat_index = new ProtoMemberUInt32(1, true);
			_m_toy_sn = new ProtoMemberUInt32(2, true);
		}

		public Msg_Logic2Battle_PVE_Extreme_CancelHero_Req(uint __m_seat_index, uint __m_toy_sn)
		{
			_m_seat_index = new ProtoMemberUInt32(1, true);
			_m_seat_index.member_value = __m_seat_index;
			_m_toy_sn = new ProtoMemberUInt32(2, true);
			_m_toy_sn.member_value = __m_toy_sn;
		}

		public uint m_seat_index
		{
			get{ return _m_seat_index.member_value; }
			set{ _m_seat_index.member_value = value; }
		}
		public bool has_m_seat_index
		{
			get{ return _m_seat_index.has_value; }
		}

		public uint m_toy_sn
		{
			get{ return _m_toy_sn.member_value; }
			set{ _m_toy_sn.member_value = value; }
		}
		public bool has_m_toy_sn
		{
			get{ return _m_toy_sn.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_seat_index.Serialize(_m_seat_index.member_value, ref out_stream);

			count += _m_toy_sn.Serialize(_m_toy_sn.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_seat_index = 0;
			one_count = _m_seat_index.ParseFrom(ref temp_m_seat_index, ref int_stream);
			if (0 < one_count)
			{
					_m_seat_index.member_value = temp_m_seat_index;
					count = count + one_count;
			}

			uint temp_m_toy_sn = 0;
			one_count = _m_toy_sn.ParseFrom(ref temp_m_toy_sn, ref int_stream);
			if (0 < one_count)
			{
					_m_toy_sn.member_value = temp_m_toy_sn;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Battle_PVE_Extreme_ChangeHero_Req : IMessage
	{
		private ProtoMemberUInt32 _m_seat_index;	// 更换的位置 0 - 3
		private ProtoMemberEmbedded<PlayerHeroInfo> _m_hero;	// 角色使用的玩具信息
		private ProtoMemberUInt32 _m_toy_sn;	// 是否使用实体玩具更换

		public Msg_Logic2Battle_PVE_Extreme_ChangeHero_Req()
		{
			_m_seat_index = new ProtoMemberUInt32(1, true);
			_m_hero = new ProtoMemberEmbedded<PlayerHeroInfo>(2, true);
			_m_hero.member_value = new PlayerHeroInfo();
			_m_toy_sn = new ProtoMemberUInt32(3, true);
		}

		public Msg_Logic2Battle_PVE_Extreme_ChangeHero_Req(uint __m_seat_index, uint __m_toy_sn)
		{
			_m_seat_index = new ProtoMemberUInt32(1, true);
			_m_seat_index.member_value = __m_seat_index;
			_m_hero = new ProtoMemberEmbedded<PlayerHeroInfo>(2, true);
			_m_hero.member_value = new PlayerHeroInfo();
			_m_toy_sn = new ProtoMemberUInt32(3, true);
			_m_toy_sn.member_value = __m_toy_sn;
		}

		public uint m_seat_index
		{
			get{ return _m_seat_index.member_value; }
			set{ _m_seat_index.member_value = value; }
		}
		public bool has_m_seat_index
		{
			get{ return _m_seat_index.has_value; }
		}

		public PlayerHeroInfo m_hero
		{
			get{ return _m_hero.member_value as PlayerHeroInfo; }
			set{ _m_hero.member_value = value; }
		}
		public bool has_m_hero
		{
			get{ return _m_hero.has_value; }
		}

		public uint m_toy_sn
		{
			get{ return _m_toy_sn.member_value; }
			set{ _m_toy_sn.member_value = value; }
		}
		public bool has_m_toy_sn
		{
			get{ return _m_toy_sn.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_seat_index.Serialize(_m_seat_index.member_value, ref out_stream);

			count += _m_hero.Serialize(_m_hero.member_value, ref out_stream);

			count += _m_toy_sn.Serialize(_m_toy_sn.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_seat_index = 0;
			one_count = _m_seat_index.ParseFrom(ref temp_m_seat_index, ref int_stream);
			if (0 < one_count)
			{
					_m_seat_index.member_value = temp_m_seat_index;
					count = count + one_count;
			}

			PlayerHeroInfo temp_m_hero = new PlayerHeroInfo();
			one_count = _m_hero.ParseFrom(temp_m_hero, ref int_stream);
			if (0 < one_count)
			{
					_m_hero.member_value = temp_m_hero;
					count = count + one_count;
			}

			uint temp_m_toy_sn = 0;
			one_count = _m_toy_sn.ParseFrom(ref temp_m_toy_sn, ref int_stream);
			if (0 < one_count)
			{
					_m_toy_sn.member_value = temp_m_toy_sn;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Battle_PVE_HuntingChallenge_AttackEnd_Req : IMessage
	{

		public Msg_Logic2Battle_PVE_HuntingChallenge_AttackEnd_Req()
		{
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			return count;
		}
	}

	public class Msg_Logic2Center_CheckToyActivate_Req : IMessage
	{
		private ProtoMemberString _m_toy_guid;	// 激活的玩具唯一识别码
		private ProtoMemberString _m_toy_key;	// 激活的玩具密码
		private ProtoMemberUInt32 _m_toy_type;	// 激活的玩具类别

		public Msg_Logic2Center_CheckToyActivate_Req()
		{
			_m_toy_guid = new ProtoMemberString(1, true);
			_m_toy_key = new ProtoMemberString(2, true);
			_m_toy_type = new ProtoMemberUInt32(3, true);
		}

		public Msg_Logic2Center_CheckToyActivate_Req(string __m_toy_guid, string __m_toy_key, uint __m_toy_type)
		{
			_m_toy_guid = new ProtoMemberString(1, true);
			_m_toy_guid.member_value = __m_toy_guid;
			_m_toy_key = new ProtoMemberString(2, true);
			_m_toy_key.member_value = __m_toy_key;
			_m_toy_type = new ProtoMemberUInt32(3, true);
			_m_toy_type.member_value = __m_toy_type;
		}

		public string m_toy_guid
		{
			get{ return _m_toy_guid.member_value; }
			set{ _m_toy_guid.member_value = value; }
		}
		public bool has_m_toy_guid
		{
			get{ return _m_toy_guid.has_value; }
		}

		public string m_toy_key
		{
			get{ return _m_toy_key.member_value; }
			set{ _m_toy_key.member_value = value; }
		}
		public bool has_m_toy_key
		{
			get{ return _m_toy_key.has_value; }
		}

		public uint m_toy_type
		{
			get{ return _m_toy_type.member_value; }
			set{ _m_toy_type.member_value = value; }
		}
		public bool has_m_toy_type
		{
			get{ return _m_toy_type.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_toy_guid.Serialize(_m_toy_guid.member_value, ref out_stream);

			count += _m_toy_key.Serialize(_m_toy_key.member_value, ref out_stream);

			count += _m_toy_type.Serialize(_m_toy_type.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			string temp_m_toy_guid = "";
			one_count = _m_toy_guid.ParseFrom(ref temp_m_toy_guid, ref int_stream);
			if (0 < one_count)
			{
					_m_toy_guid.member_value = temp_m_toy_guid;
					count = count + one_count;
			}

			string temp_m_toy_key = "";
			one_count = _m_toy_key.ParseFrom(ref temp_m_toy_key, ref int_stream);
			if (0 < one_count)
			{
					_m_toy_key.member_value = temp_m_toy_key;
					count = count + one_count;
			}

			uint temp_m_toy_type = 0;
			one_count = _m_toy_type.ParseFrom(ref temp_m_toy_type, ref int_stream);
			if (0 < one_count)
			{
					_m_toy_type.member_value = temp_m_toy_type;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Center_Create_Player_Req : IMessage
	{
		private ProtoMemberString _m_name;	// 待创建的角色名称
		private ProtoMemberUInt32 _m_create_toy_type;	// 待创建的角色对应的模型数据

		public Msg_Logic2Center_Create_Player_Req()
		{
			_m_name = new ProtoMemberString(1, true);
			_m_create_toy_type = new ProtoMemberUInt32(2, true);
		}

		public Msg_Logic2Center_Create_Player_Req(string __m_name, uint __m_create_toy_type)
		{
			_m_name = new ProtoMemberString(1, true);
			_m_name.member_value = __m_name;
			_m_create_toy_type = new ProtoMemberUInt32(2, true);
			_m_create_toy_type.member_value = __m_create_toy_type;
		}

		public string m_name
		{
			get{ return _m_name.member_value; }
			set{ _m_name.member_value = value; }
		}
		public bool has_m_name
		{
			get{ return _m_name.has_value; }
		}

		public uint m_create_toy_type
		{
			get{ return _m_create_toy_type.member_value; }
			set{ _m_create_toy_type.member_value = value; }
		}
		public bool has_m_create_toy_type
		{
			get{ return _m_create_toy_type.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_name.Serialize(_m_name.member_value, ref out_stream);

			count += _m_create_toy_type.Serialize(_m_create_toy_type.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			string temp_m_name = "";
			one_count = _m_name.ParseFrom(ref temp_m_name, ref int_stream);
			if (0 < one_count)
			{
					_m_name.member_value = temp_m_name;
					count = count + one_count;
			}

			uint temp_m_create_toy_type = 0;
			one_count = _m_create_toy_type.ParseFrom(ref temp_m_create_toy_type, ref int_stream);
			if (0 < one_count)
			{
					_m_create_toy_type.member_value = temp_m_create_toy_type;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Center_ToyActivate_Req : IMessage
	{
		private ProtoMemberString _m_toy_guid;	// 激活的玩具唯一识别码
		private ProtoMemberString _m_toy_key;	// 激活的玩具密码
		private ProtoMemberUInt32 _m_toy_type;	// 激活的玩具类别

		public Msg_Logic2Center_ToyActivate_Req()
		{
			_m_toy_guid = new ProtoMemberString(1, true);
			_m_toy_key = new ProtoMemberString(2, true);
			_m_toy_type = new ProtoMemberUInt32(3, true);
		}

		public Msg_Logic2Center_ToyActivate_Req(string __m_toy_guid, string __m_toy_key, uint __m_toy_type)
		{
			_m_toy_guid = new ProtoMemberString(1, true);
			_m_toy_guid.member_value = __m_toy_guid;
			_m_toy_key = new ProtoMemberString(2, true);
			_m_toy_key.member_value = __m_toy_key;
			_m_toy_type = new ProtoMemberUInt32(3, true);
			_m_toy_type.member_value = __m_toy_type;
		}

		public string m_toy_guid
		{
			get{ return _m_toy_guid.member_value; }
			set{ _m_toy_guid.member_value = value; }
		}
		public bool has_m_toy_guid
		{
			get{ return _m_toy_guid.has_value; }
		}

		public string m_toy_key
		{
			get{ return _m_toy_key.member_value; }
			set{ _m_toy_key.member_value = value; }
		}
		public bool has_m_toy_key
		{
			get{ return _m_toy_key.has_value; }
		}

		public uint m_toy_type
		{
			get{ return _m_toy_type.member_value; }
			set{ _m_toy_type.member_value = value; }
		}
		public bool has_m_toy_type
		{
			get{ return _m_toy_type.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_toy_guid.Serialize(_m_toy_guid.member_value, ref out_stream);

			count += _m_toy_key.Serialize(_m_toy_key.member_value, ref out_stream);

			count += _m_toy_type.Serialize(_m_toy_type.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			string temp_m_toy_guid = "";
			one_count = _m_toy_guid.ParseFrom(ref temp_m_toy_guid, ref int_stream);
			if (0 < one_count)
			{
					_m_toy_guid.member_value = temp_m_toy_guid;
					count = count + one_count;
			}

			string temp_m_toy_key = "";
			one_count = _m_toy_key.ParseFrom(ref temp_m_toy_key, ref int_stream);
			if (0 < one_count)
			{
					_m_toy_key.member_value = temp_m_toy_key;
					count = count + one_count;
			}

			uint temp_m_toy_type = 0;
			one_count = _m_toy_type.ParseFrom(ref temp_m_toy_type, ref int_stream);
			if (0 < one_count)
			{
					_m_toy_type.member_value = temp_m_toy_type;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Client_Appearance_SetPlan_Res : IMessage
	{
		private ProtoMemberUInt32 _m_heroId;	//英雄ID
		private ProtoMemberUInt32 _m_res;	// 验证结果（LogicRes）

		public Msg_Logic2Client_Appearance_SetPlan_Res()
		{
			_m_heroId = new ProtoMemberUInt32(1, true);
			_m_res = new ProtoMemberUInt32(2, true);
		}

		public Msg_Logic2Client_Appearance_SetPlan_Res(uint __m_heroId, uint __m_res)
		{
			_m_heroId = new ProtoMemberUInt32(1, true);
			_m_heroId.member_value = __m_heroId;
			_m_res = new ProtoMemberUInt32(2, true);
			_m_res.member_value = __m_res;
		}

		public uint m_heroId
		{
			get{ return _m_heroId.member_value; }
			set{ _m_heroId.member_value = value; }
		}
		public bool has_m_heroId
		{
			get{ return _m_heroId.has_value; }
		}

		public uint m_res
		{
			get{ return _m_res.member_value; }
			set{ _m_res.member_value = value; }
		}
		public bool has_m_res
		{
			get{ return _m_res.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_heroId.Serialize(_m_heroId.member_value, ref out_stream);

			count += _m_res.Serialize(_m_res.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_heroId = 0;
			one_count = _m_heroId.ParseFrom(ref temp_m_heroId, ref int_stream);
			if (0 < one_count)
			{
					_m_heroId.member_value = temp_m_heroId;
					count = count + one_count;
			}

			uint temp_m_res = 0;
			one_count = _m_res.ParseFrom(ref temp_m_res, ref int_stream);
			if (0 < one_count)
			{
					_m_res.member_value = temp_m_res;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Client_Appearance_update_Res : IMessage
	{
		private ProtoMemberEmbedded<PlayerAppearanceInfo> _m_changeData;	//变化数据

		public Msg_Logic2Client_Appearance_update_Res()
		{
			_m_changeData = new ProtoMemberEmbedded<PlayerAppearanceInfo>(1, true);
			_m_changeData.member_value = new PlayerAppearanceInfo();
		}

		public PlayerAppearanceInfo m_changeData
		{
			get{ return _m_changeData.member_value as PlayerAppearanceInfo; }
			set{ _m_changeData.member_value = value; }
		}
		public bool has_m_changeData
		{
			get{ return _m_changeData.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_changeData.Serialize(_m_changeData.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			PlayerAppearanceInfo temp_m_changeData = new PlayerAppearanceInfo();
			one_count = _m_changeData.ParseFrom(temp_m_changeData, ref int_stream);
			if (0 < one_count)
			{
					_m_changeData.member_value = temp_m_changeData;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Client_ChangeToy_Broadcast : IMessage
	{
		private ProtoMemberUInt32 _m_changetoy_player_id;	// 更换玩具的角色id
		private ProtoMemberUInt32 _m_changetoy_server_id;	// 更换玩具的角色所选服id
		private ProtoMemberUInt32 _m_toy_type;	// 更换的玩具模型

		public Msg_Logic2Client_ChangeToy_Broadcast()
		{
			_m_changetoy_player_id = new ProtoMemberUInt32(1, true);
			_m_changetoy_server_id = new ProtoMemberUInt32(2, true);
			_m_toy_type = new ProtoMemberUInt32(3, true);
		}

		public Msg_Logic2Client_ChangeToy_Broadcast(uint __m_changetoy_player_id, uint __m_changetoy_server_id, uint __m_toy_type)
		{
			_m_changetoy_player_id = new ProtoMemberUInt32(1, true);
			_m_changetoy_player_id.member_value = __m_changetoy_player_id;
			_m_changetoy_server_id = new ProtoMemberUInt32(2, true);
			_m_changetoy_server_id.member_value = __m_changetoy_server_id;
			_m_toy_type = new ProtoMemberUInt32(3, true);
			_m_toy_type.member_value = __m_toy_type;
		}

		public uint m_changetoy_player_id
		{
			get{ return _m_changetoy_player_id.member_value; }
			set{ _m_changetoy_player_id.member_value = value; }
		}
		public bool has_m_changetoy_player_id
		{
			get{ return _m_changetoy_player_id.has_value; }
		}

		public uint m_changetoy_server_id
		{
			get{ return _m_changetoy_server_id.member_value; }
			set{ _m_changetoy_server_id.member_value = value; }
		}
		public bool has_m_changetoy_server_id
		{
			get{ return _m_changetoy_server_id.has_value; }
		}

		public uint m_toy_type
		{
			get{ return _m_toy_type.member_value; }
			set{ _m_toy_type.member_value = value; }
		}
		public bool has_m_toy_type
		{
			get{ return _m_toy_type.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_changetoy_player_id.Serialize(_m_changetoy_player_id.member_value, ref out_stream);

			count += _m_changetoy_server_id.Serialize(_m_changetoy_server_id.member_value, ref out_stream);

			count += _m_toy_type.Serialize(_m_toy_type.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_changetoy_player_id = 0;
			one_count = _m_changetoy_player_id.ParseFrom(ref temp_m_changetoy_player_id, ref int_stream);
			if (0 < one_count)
			{
					_m_changetoy_player_id.member_value = temp_m_changetoy_player_id;
					count = count + one_count;
			}

			uint temp_m_changetoy_server_id = 0;
			one_count = _m_changetoy_server_id.ParseFrom(ref temp_m_changetoy_server_id, ref int_stream);
			if (0 < one_count)
			{
					_m_changetoy_server_id.member_value = temp_m_changetoy_server_id;
					count = count + one_count;
			}

			uint temp_m_toy_type = 0;
			one_count = _m_toy_type.ParseFrom(ref temp_m_toy_type, ref int_stream);
			if (0 < one_count)
			{
					_m_toy_type.member_value = temp_m_toy_type;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Client_ChangeToy_Res : IMessage
	{
		private ProtoMemberUInt32 _m_toy_type;	// 激活的玩具类别
		private ProtoMemberUInt32 _m_res;	// 使用结果：账号下未激活该玩具（LogicRes）

		public Msg_Logic2Client_ChangeToy_Res()
		{
			_m_toy_type = new ProtoMemberUInt32(1, true);
			_m_res = new ProtoMemberUInt32(2, true);
		}

		public Msg_Logic2Client_ChangeToy_Res(uint __m_toy_type, uint __m_res)
		{
			_m_toy_type = new ProtoMemberUInt32(1, true);
			_m_toy_type.member_value = __m_toy_type;
			_m_res = new ProtoMemberUInt32(2, true);
			_m_res.member_value = __m_res;
		}

		public uint m_toy_type
		{
			get{ return _m_toy_type.member_value; }
			set{ _m_toy_type.member_value = value; }
		}
		public bool has_m_toy_type
		{
			get{ return _m_toy_type.has_value; }
		}

		public uint m_res
		{
			get{ return _m_res.member_value; }
			set{ _m_res.member_value = value; }
		}
		public bool has_m_res
		{
			get{ return _m_res.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_toy_type.Serialize(_m_toy_type.member_value, ref out_stream);

			count += _m_res.Serialize(_m_res.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_toy_type = 0;
			one_count = _m_toy_type.ParseFrom(ref temp_m_toy_type, ref int_stream);
			if (0 < one_count)
			{
					_m_toy_type.member_value = temp_m_toy_type;
					count = count + one_count;
			}

			uint temp_m_res = 0;
			one_count = _m_res.ParseFrom(ref temp_m_res, ref int_stream);
			if (0 < one_count)
			{
					_m_res.member_value = temp_m_res;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Client_Chat_Broadcast : IMessage
	{
		private ProtoMemberUInt32 _m_type;	// 类型：0文字，1语音
		private ProtoMemberUInt32 _m_channel;	// 频道：0世界，1公会，2队伍，3私聊，4公告
		private ProtoMemberString _m_chat;	// 聊天内容
		private ProtoMemberUInt32 _m_sender_account_id;	// 发言玩家角色id == 账号id
		private ProtoMemberUInt32 _m_sender_server_id;	// 发言玩家所属服id
		private ProtoMemberString _m_sender_name;	// 发言玩家角色名称
		private ProtoMemberUInt32 _m_sender_toy_type;	// 发言玩家角色当前使用的玩具id，头像
		private ProtoMemberUInt32 _m_sender_hunting_lv;	// 发言玩家角色当前狩猎等级
		private ProtoMemberUInt64 _m_send_time;	// 发言时间

		public Msg_Logic2Client_Chat_Broadcast()
		{
			_m_type = new ProtoMemberUInt32(1, true);
			_m_channel = new ProtoMemberUInt32(2, true);
			_m_chat = new ProtoMemberString(3, true);
			_m_sender_account_id = new ProtoMemberUInt32(4, true);
			_m_sender_server_id = new ProtoMemberUInt32(5, true);
			_m_sender_name = new ProtoMemberString(6, true);
			_m_sender_toy_type = new ProtoMemberUInt32(7, true);
			_m_sender_hunting_lv = new ProtoMemberUInt32(8, true);
			_m_send_time = new ProtoMemberUInt64(9, true);
		}

		public Msg_Logic2Client_Chat_Broadcast(uint __m_type, uint __m_channel, string __m_chat, uint __m_sender_account_id, uint __m_sender_server_id, string __m_sender_name, uint __m_sender_toy_type, uint __m_sender_hunting_lv, ulong __m_send_time)
		{
			_m_type = new ProtoMemberUInt32(1, true);
			_m_type.member_value = __m_type;
			_m_channel = new ProtoMemberUInt32(2, true);
			_m_channel.member_value = __m_channel;
			_m_chat = new ProtoMemberString(3, true);
			_m_chat.member_value = __m_chat;
			_m_sender_account_id = new ProtoMemberUInt32(4, true);
			_m_sender_account_id.member_value = __m_sender_account_id;
			_m_sender_server_id = new ProtoMemberUInt32(5, true);
			_m_sender_server_id.member_value = __m_sender_server_id;
			_m_sender_name = new ProtoMemberString(6, true);
			_m_sender_name.member_value = __m_sender_name;
			_m_sender_toy_type = new ProtoMemberUInt32(7, true);
			_m_sender_toy_type.member_value = __m_sender_toy_type;
			_m_sender_hunting_lv = new ProtoMemberUInt32(8, true);
			_m_sender_hunting_lv.member_value = __m_sender_hunting_lv;
			_m_send_time = new ProtoMemberUInt64(9, true);
			_m_send_time.member_value = __m_send_time;
		}

		public uint m_type
		{
			get{ return _m_type.member_value; }
			set{ _m_type.member_value = value; }
		}
		public bool has_m_type
		{
			get{ return _m_type.has_value; }
		}

		public uint m_channel
		{
			get{ return _m_channel.member_value; }
			set{ _m_channel.member_value = value; }
		}
		public bool has_m_channel
		{
			get{ return _m_channel.has_value; }
		}

		public string m_chat
		{
			get{ return _m_chat.member_value; }
			set{ _m_chat.member_value = value; }
		}
		public bool has_m_chat
		{
			get{ return _m_chat.has_value; }
		}

		public uint m_sender_account_id
		{
			get{ return _m_sender_account_id.member_value; }
			set{ _m_sender_account_id.member_value = value; }
		}
		public bool has_m_sender_account_id
		{
			get{ return _m_sender_account_id.has_value; }
		}

		public uint m_sender_server_id
		{
			get{ return _m_sender_server_id.member_value; }
			set{ _m_sender_server_id.member_value = value; }
		}
		public bool has_m_sender_server_id
		{
			get{ return _m_sender_server_id.has_value; }
		}

		public string m_sender_name
		{
			get{ return _m_sender_name.member_value; }
			set{ _m_sender_name.member_value = value; }
		}
		public bool has_m_sender_name
		{
			get{ return _m_sender_name.has_value; }
		}

		public uint m_sender_toy_type
		{
			get{ return _m_sender_toy_type.member_value; }
			set{ _m_sender_toy_type.member_value = value; }
		}
		public bool has_m_sender_toy_type
		{
			get{ return _m_sender_toy_type.has_value; }
		}

		public uint m_sender_hunting_lv
		{
			get{ return _m_sender_hunting_lv.member_value; }
			set{ _m_sender_hunting_lv.member_value = value; }
		}
		public bool has_m_sender_hunting_lv
		{
			get{ return _m_sender_hunting_lv.has_value; }
		}

		public ulong m_send_time
		{
			get{ return _m_send_time.member_value; }
			set{ _m_send_time.member_value = value; }
		}
		public bool has_m_send_time
		{
			get{ return _m_send_time.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_type.Serialize(_m_type.member_value, ref out_stream);

			count += _m_channel.Serialize(_m_channel.member_value, ref out_stream);

			count += _m_chat.Serialize(_m_chat.member_value, ref out_stream);

			count += _m_sender_account_id.Serialize(_m_sender_account_id.member_value, ref out_stream);

			count += _m_sender_server_id.Serialize(_m_sender_server_id.member_value, ref out_stream);

			count += _m_sender_name.Serialize(_m_sender_name.member_value, ref out_stream);

			count += _m_sender_toy_type.Serialize(_m_sender_toy_type.member_value, ref out_stream);

			count += _m_sender_hunting_lv.Serialize(_m_sender_hunting_lv.member_value, ref out_stream);

			count += _m_send_time.Serialize(_m_send_time.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_type = 0;
			one_count = _m_type.ParseFrom(ref temp_m_type, ref int_stream);
			if (0 < one_count)
			{
					_m_type.member_value = temp_m_type;
					count = count + one_count;
			}

			uint temp_m_channel = 0;
			one_count = _m_channel.ParseFrom(ref temp_m_channel, ref int_stream);
			if (0 < one_count)
			{
					_m_channel.member_value = temp_m_channel;
					count = count + one_count;
			}

			string temp_m_chat = "";
			one_count = _m_chat.ParseFrom(ref temp_m_chat, ref int_stream);
			if (0 < one_count)
			{
					_m_chat.member_value = temp_m_chat;
					count = count + one_count;
			}

			uint temp_m_sender_account_id = 0;
			one_count = _m_sender_account_id.ParseFrom(ref temp_m_sender_account_id, ref int_stream);
			if (0 < one_count)
			{
					_m_sender_account_id.member_value = temp_m_sender_account_id;
					count = count + one_count;
			}

			uint temp_m_sender_server_id = 0;
			one_count = _m_sender_server_id.ParseFrom(ref temp_m_sender_server_id, ref int_stream);
			if (0 < one_count)
			{
					_m_sender_server_id.member_value = temp_m_sender_server_id;
					count = count + one_count;
			}

			string temp_m_sender_name = "";
			one_count = _m_sender_name.ParseFrom(ref temp_m_sender_name, ref int_stream);
			if (0 < one_count)
			{
					_m_sender_name.member_value = temp_m_sender_name;
					count = count + one_count;
			}

			uint temp_m_sender_toy_type = 0;
			one_count = _m_sender_toy_type.ParseFrom(ref temp_m_sender_toy_type, ref int_stream);
			if (0 < one_count)
			{
					_m_sender_toy_type.member_value = temp_m_sender_toy_type;
					count = count + one_count;
			}

			uint temp_m_sender_hunting_lv = 0;
			one_count = _m_sender_hunting_lv.ParseFrom(ref temp_m_sender_hunting_lv, ref int_stream);
			if (0 < one_count)
			{
					_m_sender_hunting_lv.member_value = temp_m_sender_hunting_lv;
					count = count + one_count;
			}

			ulong temp_m_send_time = 0;
			one_count = _m_send_time.ParseFrom(ref temp_m_send_time, ref int_stream);
			if (0 < one_count)
			{
					_m_send_time.member_value = temp_m_send_time;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Client_CheckPlayerName_Res : IMessage
	{
		private ProtoMemberUInt32 _m_res;	// 验证角色名返回结果（LogicRes）

		public Msg_Logic2Client_CheckPlayerName_Res()
		{
			_m_res = new ProtoMemberUInt32(1, true);
		}

		public Msg_Logic2Client_CheckPlayerName_Res(uint __m_res)
		{
			_m_res = new ProtoMemberUInt32(1, true);
			_m_res.member_value = __m_res;
		}

		public uint m_res
		{
			get{ return _m_res.member_value; }
			set{ _m_res.member_value = value; }
		}
		public bool has_m_res
		{
			get{ return _m_res.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_res.Serialize(_m_res.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_res = 0;
			one_count = _m_res.ParseFrom(ref temp_m_res, ref int_stream);
			if (0 < one_count)
			{
					_m_res.member_value = temp_m_res;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Client_CheckToyActivate_Res : IMessage
	{
		private ProtoMemberString _m_toy_guid;	// 激活的玩具唯一识别码
		private ProtoMemberUInt32 _m_toy_type;	// 激活的玩具类别
		private ProtoMemberUInt32 _m_account_id;	// 玩具对应账号id，0则为不存在绑定的账号
		private ProtoMemberUInt32 _m_res;	// 检查结果（LogicRes）

		public Msg_Logic2Client_CheckToyActivate_Res()
		{
			_m_toy_guid = new ProtoMemberString(1, true);
			_m_toy_type = new ProtoMemberUInt32(2, true);
			_m_account_id = new ProtoMemberUInt32(3, true);
			_m_res = new ProtoMemberUInt32(4, true);
		}

		public Msg_Logic2Client_CheckToyActivate_Res(string __m_toy_guid, uint __m_toy_type, uint __m_account_id, uint __m_res)
		{
			_m_toy_guid = new ProtoMemberString(1, true);
			_m_toy_guid.member_value = __m_toy_guid;
			_m_toy_type = new ProtoMemberUInt32(2, true);
			_m_toy_type.member_value = __m_toy_type;
			_m_account_id = new ProtoMemberUInt32(3, true);
			_m_account_id.member_value = __m_account_id;
			_m_res = new ProtoMemberUInt32(4, true);
			_m_res.member_value = __m_res;
		}

		public string m_toy_guid
		{
			get{ return _m_toy_guid.member_value; }
			set{ _m_toy_guid.member_value = value; }
		}
		public bool has_m_toy_guid
		{
			get{ return _m_toy_guid.has_value; }
		}

		public uint m_toy_type
		{
			get{ return _m_toy_type.member_value; }
			set{ _m_toy_type.member_value = value; }
		}
		public bool has_m_toy_type
		{
			get{ return _m_toy_type.has_value; }
		}

		public uint m_account_id
		{
			get{ return _m_account_id.member_value; }
			set{ _m_account_id.member_value = value; }
		}
		public bool has_m_account_id
		{
			get{ return _m_account_id.has_value; }
		}

		public uint m_res
		{
			get{ return _m_res.member_value; }
			set{ _m_res.member_value = value; }
		}
		public bool has_m_res
		{
			get{ return _m_res.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_toy_guid.Serialize(_m_toy_guid.member_value, ref out_stream);

			count += _m_toy_type.Serialize(_m_toy_type.member_value, ref out_stream);

			count += _m_account_id.Serialize(_m_account_id.member_value, ref out_stream);

			count += _m_res.Serialize(_m_res.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			string temp_m_toy_guid = "";
			one_count = _m_toy_guid.ParseFrom(ref temp_m_toy_guid, ref int_stream);
			if (0 < one_count)
			{
					_m_toy_guid.member_value = temp_m_toy_guid;
					count = count + one_count;
			}

			uint temp_m_toy_type = 0;
			one_count = _m_toy_type.ParseFrom(ref temp_m_toy_type, ref int_stream);
			if (0 < one_count)
			{
					_m_toy_type.member_value = temp_m_toy_type;
					count = count + one_count;
			}

			uint temp_m_account_id = 0;
			one_count = _m_account_id.ParseFrom(ref temp_m_account_id, ref int_stream);
			if (0 < one_count)
			{
					_m_account_id.member_value = temp_m_account_id;
					count = count + one_count;
			}

			uint temp_m_res = 0;
			one_count = _m_res.ParseFrom(ref temp_m_res, ref int_stream);
			if (0 < one_count)
			{
					_m_res.member_value = temp_m_res;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Client_Create_Player_Res : IMessage
	{
		private ProtoMemberUInt32 _m_res;	// 创建角色结果（LogicRes）

		public Msg_Logic2Client_Create_Player_Res()
		{
			_m_res = new ProtoMemberUInt32(1, true);
		}

		public Msg_Logic2Client_Create_Player_Res(uint __m_res)
		{
			_m_res = new ProtoMemberUInt32(1, true);
			_m_res.member_value = __m_res;
		}

		public uint m_res
		{
			get{ return _m_res.member_value; }
			set{ _m_res.member_value = value; }
		}
		public bool has_m_res
		{
			get{ return _m_res.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_res.Serialize(_m_res.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_res = 0;
			one_count = _m_res.ParseFrom(ref temp_m_res, ref int_stream);
			if (0 < one_count)
			{
					_m_res.member_value = temp_m_res;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Client_DiaoWen_LvUp_Res : IMessage
	{
		private ProtoMemberEnum<PlayerDiaoWenType> _m_diaowen_type;	// 方案类型
		private ProtoMemberUInt32 _m_diaowen_plan_index;	// 方案序号0-2
		private ProtoMemberUInt32 _m_diaowen_plan_seat;	// 方案中镶嵌的位置0-6
		private ProtoMemberUInt32 _m_res;	// 升级结果（LogicRes）

		public Msg_Logic2Client_DiaoWen_LvUp_Res()
		{
			_m_diaowen_type = new ProtoMemberEnum<PlayerDiaoWenType>(1, true);
			_m_diaowen_plan_index = new ProtoMemberUInt32(2, true);
			_m_diaowen_plan_seat = new ProtoMemberUInt32(3, true);
			_m_res = new ProtoMemberUInt32(4, true);
		}

		public Msg_Logic2Client_DiaoWen_LvUp_Res(PlayerDiaoWenType __m_diaowen_type, uint __m_diaowen_plan_index, uint __m_diaowen_plan_seat, uint __m_res)
		{
			_m_diaowen_type = new ProtoMemberEnum<PlayerDiaoWenType>(1, true);
			_m_diaowen_type.member_value = __m_diaowen_type;
			_m_diaowen_plan_index = new ProtoMemberUInt32(2, true);
			_m_diaowen_plan_index.member_value = __m_diaowen_plan_index;
			_m_diaowen_plan_seat = new ProtoMemberUInt32(3, true);
			_m_diaowen_plan_seat.member_value = __m_diaowen_plan_seat;
			_m_res = new ProtoMemberUInt32(4, true);
			_m_res.member_value = __m_res;
		}

		public PlayerDiaoWenType m_diaowen_type
		{
			get{ return _m_diaowen_type.member_value; }
			set{ _m_diaowen_type.member_value = value; }
		}
		public bool has_m_diaowen_type
		{
			get{ return _m_diaowen_type.has_value; }
		}

		public uint m_diaowen_plan_index
		{
			get{ return _m_diaowen_plan_index.member_value; }
			set{ _m_diaowen_plan_index.member_value = value; }
		}
		public bool has_m_diaowen_plan_index
		{
			get{ return _m_diaowen_plan_index.has_value; }
		}

		public uint m_diaowen_plan_seat
		{
			get{ return _m_diaowen_plan_seat.member_value; }
			set{ _m_diaowen_plan_seat.member_value = value; }
		}
		public bool has_m_diaowen_plan_seat
		{
			get{ return _m_diaowen_plan_seat.has_value; }
		}

		public uint m_res
		{
			get{ return _m_res.member_value; }
			set{ _m_res.member_value = value; }
		}
		public bool has_m_res
		{
			get{ return _m_res.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_diaowen_type.Serialize((uint)_m_diaowen_type.member_value, ref out_stream);

			count += _m_diaowen_plan_index.Serialize(_m_diaowen_plan_index.member_value, ref out_stream);

			count += _m_diaowen_plan_seat.Serialize(_m_diaowen_plan_seat.member_value, ref out_stream);

			count += _m_res.Serialize(_m_res.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_diaowen_type = 0;
			one_count = _m_diaowen_type.ParseFrom(ref temp_m_diaowen_type, ref int_stream);
			if (0 < one_count)
			{
					_m_diaowen_type.member_value = (PlayerDiaoWenType)temp_m_diaowen_type;
					count = count + one_count;
			}

			uint temp_m_diaowen_plan_index = 0;
			one_count = _m_diaowen_plan_index.ParseFrom(ref temp_m_diaowen_plan_index, ref int_stream);
			if (0 < one_count)
			{
					_m_diaowen_plan_index.member_value = temp_m_diaowen_plan_index;
					count = count + one_count;
			}

			uint temp_m_diaowen_plan_seat = 0;
			one_count = _m_diaowen_plan_seat.ParseFrom(ref temp_m_diaowen_plan_seat, ref int_stream);
			if (0 < one_count)
			{
					_m_diaowen_plan_seat.member_value = temp_m_diaowen_plan_seat;
					count = count + one_count;
			}

			uint temp_m_res = 0;
			one_count = _m_res.ParseFrom(ref temp_m_res, ref int_stream);
			if (0 < one_count)
			{
					_m_res.member_value = temp_m_res;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Client_DiaoWen_SetCurrPlan_Res : IMessage
	{
		private ProtoMemberEnum<PlayerDiaoWenType> _m_diaowen_type;	// 方案类型
		private ProtoMemberUInt32 _m_diaowen_plan_index;	// 方案序号0-2
		private ProtoMemberUInt32 _m_res;	// 指定结果（LogicRes）

		public Msg_Logic2Client_DiaoWen_SetCurrPlan_Res()
		{
			_m_diaowen_type = new ProtoMemberEnum<PlayerDiaoWenType>(1, true);
			_m_diaowen_plan_index = new ProtoMemberUInt32(2, true);
			_m_res = new ProtoMemberUInt32(3, true);
		}

		public Msg_Logic2Client_DiaoWen_SetCurrPlan_Res(PlayerDiaoWenType __m_diaowen_type, uint __m_diaowen_plan_index, uint __m_res)
		{
			_m_diaowen_type = new ProtoMemberEnum<PlayerDiaoWenType>(1, true);
			_m_diaowen_type.member_value = __m_diaowen_type;
			_m_diaowen_plan_index = new ProtoMemberUInt32(2, true);
			_m_diaowen_plan_index.member_value = __m_diaowen_plan_index;
			_m_res = new ProtoMemberUInt32(3, true);
			_m_res.member_value = __m_res;
		}

		public PlayerDiaoWenType m_diaowen_type
		{
			get{ return _m_diaowen_type.member_value; }
			set{ _m_diaowen_type.member_value = value; }
		}
		public bool has_m_diaowen_type
		{
			get{ return _m_diaowen_type.has_value; }
		}

		public uint m_diaowen_plan_index
		{
			get{ return _m_diaowen_plan_index.member_value; }
			set{ _m_diaowen_plan_index.member_value = value; }
		}
		public bool has_m_diaowen_plan_index
		{
			get{ return _m_diaowen_plan_index.has_value; }
		}

		public uint m_res
		{
			get{ return _m_res.member_value; }
			set{ _m_res.member_value = value; }
		}
		public bool has_m_res
		{
			get{ return _m_res.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_diaowen_type.Serialize((uint)_m_diaowen_type.member_value, ref out_stream);

			count += _m_diaowen_plan_index.Serialize(_m_diaowen_plan_index.member_value, ref out_stream);

			count += _m_res.Serialize(_m_res.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_diaowen_type = 0;
			one_count = _m_diaowen_type.ParseFrom(ref temp_m_diaowen_type, ref int_stream);
			if (0 < one_count)
			{
					_m_diaowen_type.member_value = (PlayerDiaoWenType)temp_m_diaowen_type;
					count = count + one_count;
			}

			uint temp_m_diaowen_plan_index = 0;
			one_count = _m_diaowen_plan_index.ParseFrom(ref temp_m_diaowen_plan_index, ref int_stream);
			if (0 < one_count)
			{
					_m_diaowen_plan_index.member_value = temp_m_diaowen_plan_index;
					count = count + one_count;
			}

			uint temp_m_res = 0;
			one_count = _m_res.ParseFrom(ref temp_m_res, ref int_stream);
			if (0 < one_count)
			{
					_m_res.member_value = temp_m_res;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Client_DiaoWen_Set_Res : IMessage
	{
		private ProtoMemberEnum<PlayerDiaoWenType> _m_diaowen_type;	// 方案类型
		private ProtoMemberUInt32 _m_diaowen_plan_index;	// 方案序号0-2
		private ProtoMemberUInt32 _m_diaowen_plan_seat;	// 方案中镶嵌的位置0-6
		private ProtoMemberUInt32 _m_diaowen_bag_seat;	// 方案中镶嵌的雕文在雕纹背包中的位置
		private ProtoMemberUInt32 _m_res;	// 镶嵌结果（LogicRes）

		public Msg_Logic2Client_DiaoWen_Set_Res()
		{
			_m_diaowen_type = new ProtoMemberEnum<PlayerDiaoWenType>(1, true);
			_m_diaowen_plan_index = new ProtoMemberUInt32(2, true);
			_m_diaowen_plan_seat = new ProtoMemberUInt32(3, true);
			_m_diaowen_bag_seat = new ProtoMemberUInt32(4, true);
			_m_res = new ProtoMemberUInt32(5, true);
		}

		public Msg_Logic2Client_DiaoWen_Set_Res(PlayerDiaoWenType __m_diaowen_type, uint __m_diaowen_plan_index, uint __m_diaowen_plan_seat, uint __m_diaowen_bag_seat, uint __m_res)
		{
			_m_diaowen_type = new ProtoMemberEnum<PlayerDiaoWenType>(1, true);
			_m_diaowen_type.member_value = __m_diaowen_type;
			_m_diaowen_plan_index = new ProtoMemberUInt32(2, true);
			_m_diaowen_plan_index.member_value = __m_diaowen_plan_index;
			_m_diaowen_plan_seat = new ProtoMemberUInt32(3, true);
			_m_diaowen_plan_seat.member_value = __m_diaowen_plan_seat;
			_m_diaowen_bag_seat = new ProtoMemberUInt32(4, true);
			_m_diaowen_bag_seat.member_value = __m_diaowen_bag_seat;
			_m_res = new ProtoMemberUInt32(5, true);
			_m_res.member_value = __m_res;
		}

		public PlayerDiaoWenType m_diaowen_type
		{
			get{ return _m_diaowen_type.member_value; }
			set{ _m_diaowen_type.member_value = value; }
		}
		public bool has_m_diaowen_type
		{
			get{ return _m_diaowen_type.has_value; }
		}

		public uint m_diaowen_plan_index
		{
			get{ return _m_diaowen_plan_index.member_value; }
			set{ _m_diaowen_plan_index.member_value = value; }
		}
		public bool has_m_diaowen_plan_index
		{
			get{ return _m_diaowen_plan_index.has_value; }
		}

		public uint m_diaowen_plan_seat
		{
			get{ return _m_diaowen_plan_seat.member_value; }
			set{ _m_diaowen_plan_seat.member_value = value; }
		}
		public bool has_m_diaowen_plan_seat
		{
			get{ return _m_diaowen_plan_seat.has_value; }
		}

		public uint m_diaowen_bag_seat
		{
			get{ return _m_diaowen_bag_seat.member_value; }
			set{ _m_diaowen_bag_seat.member_value = value; }
		}
		public bool has_m_diaowen_bag_seat
		{
			get{ return _m_diaowen_bag_seat.has_value; }
		}

		public uint m_res
		{
			get{ return _m_res.member_value; }
			set{ _m_res.member_value = value; }
		}
		public bool has_m_res
		{
			get{ return _m_res.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_diaowen_type.Serialize((uint)_m_diaowen_type.member_value, ref out_stream);

			count += _m_diaowen_plan_index.Serialize(_m_diaowen_plan_index.member_value, ref out_stream);

			count += _m_diaowen_plan_seat.Serialize(_m_diaowen_plan_seat.member_value, ref out_stream);

			count += _m_diaowen_bag_seat.Serialize(_m_diaowen_bag_seat.member_value, ref out_stream);

			count += _m_res.Serialize(_m_res.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_diaowen_type = 0;
			one_count = _m_diaowen_type.ParseFrom(ref temp_m_diaowen_type, ref int_stream);
			if (0 < one_count)
			{
					_m_diaowen_type.member_value = (PlayerDiaoWenType)temp_m_diaowen_type;
					count = count + one_count;
			}

			uint temp_m_diaowen_plan_index = 0;
			one_count = _m_diaowen_plan_index.ParseFrom(ref temp_m_diaowen_plan_index, ref int_stream);
			if (0 < one_count)
			{
					_m_diaowen_plan_index.member_value = temp_m_diaowen_plan_index;
					count = count + one_count;
			}

			uint temp_m_diaowen_plan_seat = 0;
			one_count = _m_diaowen_plan_seat.ParseFrom(ref temp_m_diaowen_plan_seat, ref int_stream);
			if (0 < one_count)
			{
					_m_diaowen_plan_seat.member_value = temp_m_diaowen_plan_seat;
					count = count + one_count;
			}

			uint temp_m_diaowen_bag_seat = 0;
			one_count = _m_diaowen_bag_seat.ParseFrom(ref temp_m_diaowen_bag_seat, ref int_stream);
			if (0 < one_count)
			{
					_m_diaowen_bag_seat.member_value = temp_m_diaowen_bag_seat;
					count = count + one_count;
			}

			uint temp_m_res = 0;
			one_count = _m_res.ParseFrom(ref temp_m_res, ref int_stream);
			if (0 < one_count)
			{
					_m_res.member_value = temp_m_res;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Client_DiaoWen_UnSet_Res : IMessage
	{
		private ProtoMemberEnum<PlayerDiaoWenType> _m_diaowen_type;	// 方案类型
		private ProtoMemberUInt32 _m_diaowen_plan_index;	// 方案序号0-2
		private ProtoMemberUInt32 _m_diaowen_plan_seat;	// 方案中卸下的位置0-6
		private ProtoMemberUInt32 _m_res;	// 卸下结果（LogicRes）

		public Msg_Logic2Client_DiaoWen_UnSet_Res()
		{
			_m_diaowen_type = new ProtoMemberEnum<PlayerDiaoWenType>(1, true);
			_m_diaowen_plan_index = new ProtoMemberUInt32(2, true);
			_m_diaowen_plan_seat = new ProtoMemberUInt32(3, true);
			_m_res = new ProtoMemberUInt32(4, true);
		}

		public Msg_Logic2Client_DiaoWen_UnSet_Res(PlayerDiaoWenType __m_diaowen_type, uint __m_diaowen_plan_index, uint __m_diaowen_plan_seat, uint __m_res)
		{
			_m_diaowen_type = new ProtoMemberEnum<PlayerDiaoWenType>(1, true);
			_m_diaowen_type.member_value = __m_diaowen_type;
			_m_diaowen_plan_index = new ProtoMemberUInt32(2, true);
			_m_diaowen_plan_index.member_value = __m_diaowen_plan_index;
			_m_diaowen_plan_seat = new ProtoMemberUInt32(3, true);
			_m_diaowen_plan_seat.member_value = __m_diaowen_plan_seat;
			_m_res = new ProtoMemberUInt32(4, true);
			_m_res.member_value = __m_res;
		}

		public PlayerDiaoWenType m_diaowen_type
		{
			get{ return _m_diaowen_type.member_value; }
			set{ _m_diaowen_type.member_value = value; }
		}
		public bool has_m_diaowen_type
		{
			get{ return _m_diaowen_type.has_value; }
		}

		public uint m_diaowen_plan_index
		{
			get{ return _m_diaowen_plan_index.member_value; }
			set{ _m_diaowen_plan_index.member_value = value; }
		}
		public bool has_m_diaowen_plan_index
		{
			get{ return _m_diaowen_plan_index.has_value; }
		}

		public uint m_diaowen_plan_seat
		{
			get{ return _m_diaowen_plan_seat.member_value; }
			set{ _m_diaowen_plan_seat.member_value = value; }
		}
		public bool has_m_diaowen_plan_seat
		{
			get{ return _m_diaowen_plan_seat.has_value; }
		}

		public uint m_res
		{
			get{ return _m_res.member_value; }
			set{ _m_res.member_value = value; }
		}
		public bool has_m_res
		{
			get{ return _m_res.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_diaowen_type.Serialize((uint)_m_diaowen_type.member_value, ref out_stream);

			count += _m_diaowen_plan_index.Serialize(_m_diaowen_plan_index.member_value, ref out_stream);

			count += _m_diaowen_plan_seat.Serialize(_m_diaowen_plan_seat.member_value, ref out_stream);

			count += _m_res.Serialize(_m_res.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_diaowen_type = 0;
			one_count = _m_diaowen_type.ParseFrom(ref temp_m_diaowen_type, ref int_stream);
			if (0 < one_count)
			{
					_m_diaowen_type.member_value = (PlayerDiaoWenType)temp_m_diaowen_type;
					count = count + one_count;
			}

			uint temp_m_diaowen_plan_index = 0;
			one_count = _m_diaowen_plan_index.ParseFrom(ref temp_m_diaowen_plan_index, ref int_stream);
			if (0 < one_count)
			{
					_m_diaowen_plan_index.member_value = temp_m_diaowen_plan_index;
					count = count + one_count;
			}

			uint temp_m_diaowen_plan_seat = 0;
			one_count = _m_diaowen_plan_seat.ParseFrom(ref temp_m_diaowen_plan_seat, ref int_stream);
			if (0 < one_count)
			{
					_m_diaowen_plan_seat.member_value = temp_m_diaowen_plan_seat;
					count = count + one_count;
			}

			uint temp_m_res = 0;
			one_count = _m_res.ParseFrom(ref temp_m_res, ref int_stream);
			if (0 < one_count)
			{
					_m_res.member_value = temp_m_res;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Client_DiaoWen_Update_Res : IMessage
	{
		private ProtoMemberEmbedded<PlayerDiaoWenBag> _m_update_diaowens;	// 变更的雕文列表

		public Msg_Logic2Client_DiaoWen_Update_Res()
		{
			_m_update_diaowens = new ProtoMemberEmbedded<PlayerDiaoWenBag>(1, false);
			_m_update_diaowens.member_value = new PlayerDiaoWenBag();
		}

		public PlayerDiaoWenBag m_update_diaowens
		{
			get{ return _m_update_diaowens.member_value as PlayerDiaoWenBag; }
			set{ _m_update_diaowens.member_value = value; }
		}
		public bool has_m_update_diaowens
		{
			get{ return _m_update_diaowens.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_update_diaowens.Serialize(_m_update_diaowens.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			PlayerDiaoWenBag temp_m_update_diaowens = new PlayerDiaoWenBag();
			one_count = _m_update_diaowens.ParseFrom(temp_m_update_diaowens, ref int_stream);
			if (0 < one_count)
			{
					_m_update_diaowens.member_value = temp_m_update_diaowens;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Client_Event_Broadcast : IMessage
	{
		private ProtoMemberEmbedded<PlayerHuntingEventList> _m_event_list;	// 更新的事件信息

		public Msg_Logic2Client_Event_Broadcast()
		{
			_m_event_list = new ProtoMemberEmbedded<PlayerHuntingEventList>(1, true);
			_m_event_list.member_value = new PlayerHuntingEventList();
		}

		public PlayerHuntingEventList m_event_list
		{
			get{ return _m_event_list.member_value as PlayerHuntingEventList; }
			set{ _m_event_list.member_value = value; }
		}
		public bool has_m_event_list
		{
			get{ return _m_event_list.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_event_list.Serialize(_m_event_list.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			PlayerHuntingEventList temp_m_event_list = new PlayerHuntingEventList();
			one_count = _m_event_list.ParseFrom(temp_m_event_list, ref int_stream);
			if (0 < one_count)
			{
					_m_event_list.member_value = temp_m_event_list;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Client_Firend_AddShield_Res : IMessage
	{
		private ProtoMemberUInt32 _m_account_id;	// 待屏蔽的玩家角色id == 账号id
		private ProtoMemberUInt32 _m_server_id;	// 待屏蔽的玩家服id
		private ProtoMemberUInt32 _m_toy_type;	// 待屏蔽的角色初始使用的玩具模型id
		private ProtoMemberString _m_name;	// 待屏蔽的角色名称
		private ProtoMemberUInt64 _m_time;	// 屏蔽时间
		private ProtoMemberUInt32 _m_res;	// 屏蔽结果（LogicRes）

		public Msg_Logic2Client_Firend_AddShield_Res()
		{
			_m_account_id = new ProtoMemberUInt32(1, true);
			_m_server_id = new ProtoMemberUInt32(2, true);
			_m_toy_type = new ProtoMemberUInt32(3, true);
			_m_name = new ProtoMemberString(4, true);
			_m_time = new ProtoMemberUInt64(5, true);
			_m_res = new ProtoMemberUInt32(6, true);
		}

		public Msg_Logic2Client_Firend_AddShield_Res(uint __m_account_id, uint __m_server_id, uint __m_toy_type, string __m_name, ulong __m_time, uint __m_res)
		{
			_m_account_id = new ProtoMemberUInt32(1, true);
			_m_account_id.member_value = __m_account_id;
			_m_server_id = new ProtoMemberUInt32(2, true);
			_m_server_id.member_value = __m_server_id;
			_m_toy_type = new ProtoMemberUInt32(3, true);
			_m_toy_type.member_value = __m_toy_type;
			_m_name = new ProtoMemberString(4, true);
			_m_name.member_value = __m_name;
			_m_time = new ProtoMemberUInt64(5, true);
			_m_time.member_value = __m_time;
			_m_res = new ProtoMemberUInt32(6, true);
			_m_res.member_value = __m_res;
		}

		public uint m_account_id
		{
			get{ return _m_account_id.member_value; }
			set{ _m_account_id.member_value = value; }
		}
		public bool has_m_account_id
		{
			get{ return _m_account_id.has_value; }
		}

		public uint m_server_id
		{
			get{ return _m_server_id.member_value; }
			set{ _m_server_id.member_value = value; }
		}
		public bool has_m_server_id
		{
			get{ return _m_server_id.has_value; }
		}

		public uint m_toy_type
		{
			get{ return _m_toy_type.member_value; }
			set{ _m_toy_type.member_value = value; }
		}
		public bool has_m_toy_type
		{
			get{ return _m_toy_type.has_value; }
		}

		public string m_name
		{
			get{ return _m_name.member_value; }
			set{ _m_name.member_value = value; }
		}
		public bool has_m_name
		{
			get{ return _m_name.has_value; }
		}

		public ulong m_time
		{
			get{ return _m_time.member_value; }
			set{ _m_time.member_value = value; }
		}
		public bool has_m_time
		{
			get{ return _m_time.has_value; }
		}

		public uint m_res
		{
			get{ return _m_res.member_value; }
			set{ _m_res.member_value = value; }
		}
		public bool has_m_res
		{
			get{ return _m_res.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_account_id.Serialize(_m_account_id.member_value, ref out_stream);

			count += _m_server_id.Serialize(_m_server_id.member_value, ref out_stream);

			count += _m_toy_type.Serialize(_m_toy_type.member_value, ref out_stream);

			count += _m_name.Serialize(_m_name.member_value, ref out_stream);

			count += _m_time.Serialize(_m_time.member_value, ref out_stream);

			count += _m_res.Serialize(_m_res.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_account_id = 0;
			one_count = _m_account_id.ParseFrom(ref temp_m_account_id, ref int_stream);
			if (0 < one_count)
			{
					_m_account_id.member_value = temp_m_account_id;
					count = count + one_count;
			}

			uint temp_m_server_id = 0;
			one_count = _m_server_id.ParseFrom(ref temp_m_server_id, ref int_stream);
			if (0 < one_count)
			{
					_m_server_id.member_value = temp_m_server_id;
					count = count + one_count;
			}

			uint temp_m_toy_type = 0;
			one_count = _m_toy_type.ParseFrom(ref temp_m_toy_type, ref int_stream);
			if (0 < one_count)
			{
					_m_toy_type.member_value = temp_m_toy_type;
					count = count + one_count;
			}

			string temp_m_name = "";
			one_count = _m_name.ParseFrom(ref temp_m_name, ref int_stream);
			if (0 < one_count)
			{
					_m_name.member_value = temp_m_name;
					count = count + one_count;
			}

			ulong temp_m_time = 0;
			one_count = _m_time.ParseFrom(ref temp_m_time, ref int_stream);
			if (0 < one_count)
			{
					_m_time.member_value = temp_m_time;
					count = count + one_count;
			}

			uint temp_m_res = 0;
			one_count = _m_res.ParseFrom(ref temp_m_res, ref int_stream);
			if (0 < one_count)
			{
					_m_res.member_value = temp_m_res;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Client_Firend_Add_Res : IMessage
	{
		private ProtoMemberUInt32 _m_res;	// 添加结果（LogicRes）
		private ProtoMemberEmbedded<PlayerId> _m_player_id;	// 目标玩家唯一id

		public Msg_Logic2Client_Firend_Add_Res()
		{
			_m_res = new ProtoMemberUInt32(1, true);
			_m_player_id = new ProtoMemberEmbedded<PlayerId>(2, false);
			_m_player_id.member_value = new PlayerId();
		}

		public Msg_Logic2Client_Firend_Add_Res(uint __m_res)
		{
			_m_res = new ProtoMemberUInt32(1, true);
			_m_res.member_value = __m_res;
			_m_player_id = new ProtoMemberEmbedded<PlayerId>(2, false);
			_m_player_id.member_value = new PlayerId();
		}

		public uint m_res
		{
			get{ return _m_res.member_value; }
			set{ _m_res.member_value = value; }
		}
		public bool has_m_res
		{
			get{ return _m_res.has_value; }
		}

		public PlayerId m_player_id
		{
			get{ return _m_player_id.member_value as PlayerId; }
			set{ _m_player_id.member_value = value; }
		}
		public bool has_m_player_id
		{
			get{ return _m_player_id.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_res.Serialize(_m_res.member_value, ref out_stream);

			count += _m_player_id.Serialize(_m_player_id.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_res = 0;
			one_count = _m_res.ParseFrom(ref temp_m_res, ref int_stream);
			if (0 < one_count)
			{
					_m_res.member_value = temp_m_res;
					count = count + one_count;
			}

			PlayerId temp_m_player_id = new PlayerId();
			one_count = _m_player_id.ParseFrom(temp_m_player_id, ref int_stream);
			if (0 < one_count)
			{
					_m_player_id.member_value = temp_m_player_id;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Client_Firend_ApplicationUpdate_Res : IMessage
	{
		private ProtoMemberEmbedded<PlayerFriendInfo> _m_player_info;	// 新增的好友申请

		public Msg_Logic2Client_Firend_ApplicationUpdate_Res()
		{
			_m_player_info = new ProtoMemberEmbedded<PlayerFriendInfo>(1, true);
			_m_player_info.member_value = new PlayerFriendInfo();
		}

		public PlayerFriendInfo m_player_info
		{
			get{ return _m_player_info.member_value as PlayerFriendInfo; }
			set{ _m_player_info.member_value = value; }
		}
		public bool has_m_player_info
		{
			get{ return _m_player_info.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_player_info.Serialize(_m_player_info.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			PlayerFriendInfo temp_m_player_info = new PlayerFriendInfo();
			one_count = _m_player_info.ParseFrom(temp_m_player_info, ref int_stream);
			if (0 < one_count)
			{
					_m_player_info.member_value = temp_m_player_info;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Client_Firend_Application_Res : IMessage
	{
		private ProtoMemberEmbedded<PlayerId> _m_player_id;	// 目标玩家唯一id
		private ProtoMemberUInt32 _m_res;	// 申请结果（LogicRes）

		public Msg_Logic2Client_Firend_Application_Res()
		{
			_m_player_id = new ProtoMemberEmbedded<PlayerId>(1, true);
			_m_player_id.member_value = new PlayerId();
			_m_res = new ProtoMemberUInt32(2, true);
		}

		public Msg_Logic2Client_Firend_Application_Res(uint __m_res)
		{
			_m_player_id = new ProtoMemberEmbedded<PlayerId>(1, true);
			_m_player_id.member_value = new PlayerId();
			_m_res = new ProtoMemberUInt32(2, true);
			_m_res.member_value = __m_res;
		}

		public PlayerId m_player_id
		{
			get{ return _m_player_id.member_value as PlayerId; }
			set{ _m_player_id.member_value = value; }
		}
		public bool has_m_player_id
		{
			get{ return _m_player_id.has_value; }
		}

		public uint m_res
		{
			get{ return _m_res.member_value; }
			set{ _m_res.member_value = value; }
		}
		public bool has_m_res
		{
			get{ return _m_res.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_player_id.Serialize(_m_player_id.member_value, ref out_stream);

			count += _m_res.Serialize(_m_res.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			PlayerId temp_m_player_id = new PlayerId();
			one_count = _m_player_id.ParseFrom(temp_m_player_id, ref int_stream);
			if (0 < one_count)
			{
					_m_player_id.member_value = temp_m_player_id;
					count = count + one_count;
			}

			uint temp_m_res = 0;
			one_count = _m_res.ParseFrom(ref temp_m_res, ref int_stream);
			if (0 < one_count)
			{
					_m_res.member_value = temp_m_res;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Client_Firend_Count_Update_Res : IMessage
	{
		private ProtoMemberUInt32 _m_max_friend_count;	// 好友数量上限
		private ProtoMemberUInt32 _m_max_application_count;	// 申请数量上限

		public Msg_Logic2Client_Firend_Count_Update_Res()
		{
			_m_max_friend_count = new ProtoMemberUInt32(1, true);
			_m_max_application_count = new ProtoMemberUInt32(2, true);
		}

		public Msg_Logic2Client_Firend_Count_Update_Res(uint __m_max_friend_count, uint __m_max_application_count)
		{
			_m_max_friend_count = new ProtoMemberUInt32(1, true);
			_m_max_friend_count.member_value = __m_max_friend_count;
			_m_max_application_count = new ProtoMemberUInt32(2, true);
			_m_max_application_count.member_value = __m_max_application_count;
		}

		public uint m_max_friend_count
		{
			get{ return _m_max_friend_count.member_value; }
			set{ _m_max_friend_count.member_value = value; }
		}
		public bool has_m_max_friend_count
		{
			get{ return _m_max_friend_count.has_value; }
		}

		public uint m_max_application_count
		{
			get{ return _m_max_application_count.member_value; }
			set{ _m_max_application_count.member_value = value; }
		}
		public bool has_m_max_application_count
		{
			get{ return _m_max_application_count.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_max_friend_count.Serialize(_m_max_friend_count.member_value, ref out_stream);

			count += _m_max_application_count.Serialize(_m_max_application_count.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_max_friend_count = 0;
			one_count = _m_max_friend_count.ParseFrom(ref temp_m_max_friend_count, ref int_stream);
			if (0 < one_count)
			{
					_m_max_friend_count.member_value = temp_m_max_friend_count;
					count = count + one_count;
			}

			uint temp_m_max_application_count = 0;
			one_count = _m_max_application_count.ParseFrom(ref temp_m_max_application_count, ref int_stream);
			if (0 < one_count)
			{
					_m_max_application_count.member_value = temp_m_max_application_count;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Client_Firend_Find_Res : IMessage
	{
		private ProtoMemberEmbeddedList<PlayerFriendInfo> _m_players;	// 查找结果
		private ProtoMemberBoolList _m_is_application;	// 对应的玩家是否已申请

		public Msg_Logic2Client_Firend_Find_Res()
		{
			_m_players = new ProtoMemberEmbeddedList<PlayerFriendInfo>(1, false);
			_m_is_application = new ProtoMemberBoolList(2, false);
		}

		public System.Collections.Generic.List<PlayerFriendInfo> m_players
		{
			get{ return _m_players.member_value; }
		}
		public bool has_m_players
		{
			get{ return _m_players.has_value; }
		}

		public System.Collections.Generic.List<bool> m_is_application
		{
			get{ return _m_is_application.member_value; }
		}
		public bool has_m_is_application
		{
			get{ return _m_is_application.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			foreach(PlayerFriendInfo one_member_value in _m_players.member_value)
			{
				count += _m_players.Serialize(one_member_value, ref out_stream);
			}

			foreach(bool one_member_value in _m_is_application.member_value)
			{
				count += _m_is_application.Serialize(one_member_value, ref out_stream);
			}

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			while (true)
			{
				PlayerFriendInfo one_member_value = new PlayerFriendInfo();
				one_count = _m_players.ParseFrom(one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_players.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			while (true)
			{
				bool one_member_value = false;
				one_count = _m_is_application.ParseFrom(ref one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_is_application.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			return count;
		}
	}

	public class Msg_Logic2Client_Firend_PlayerUpdate_Res : IMessage
	{
		private ProtoMemberEmbedded<PlayerFriendInfo> _m_player_info;	// 新增的好友

		public Msg_Logic2Client_Firend_PlayerUpdate_Res()
		{
			_m_player_info = new ProtoMemberEmbedded<PlayerFriendInfo>(1, true);
			_m_player_info.member_value = new PlayerFriendInfo();
		}

		public PlayerFriendInfo m_player_info
		{
			get{ return _m_player_info.member_value as PlayerFriendInfo; }
			set{ _m_player_info.member_value = value; }
		}
		public bool has_m_player_info
		{
			get{ return _m_player_info.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_player_info.Serialize(_m_player_info.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			PlayerFriendInfo temp_m_player_info = new PlayerFriendInfo();
			one_count = _m_player_info.ParseFrom(temp_m_player_info, ref int_stream);
			if (0 < one_count)
			{
					_m_player_info.member_value = temp_m_player_info;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Client_Firend_RemoveShield_Res : IMessage
	{
		private ProtoMemberUInt32 _m_account_id;	// 取消屏蔽的玩家角色id == 账号id
		private ProtoMemberUInt32 _m_server_id;	// 取消屏蔽的玩家服id
		private ProtoMemberUInt32 _m_res;	// 取消屏蔽结果（LogicRes）

		public Msg_Logic2Client_Firend_RemoveShield_Res()
		{
			_m_account_id = new ProtoMemberUInt32(1, true);
			_m_server_id = new ProtoMemberUInt32(2, true);
			_m_res = new ProtoMemberUInt32(3, true);
		}

		public Msg_Logic2Client_Firend_RemoveShield_Res(uint __m_account_id, uint __m_server_id, uint __m_res)
		{
			_m_account_id = new ProtoMemberUInt32(1, true);
			_m_account_id.member_value = __m_account_id;
			_m_server_id = new ProtoMemberUInt32(2, true);
			_m_server_id.member_value = __m_server_id;
			_m_res = new ProtoMemberUInt32(3, true);
			_m_res.member_value = __m_res;
		}

		public uint m_account_id
		{
			get{ return _m_account_id.member_value; }
			set{ _m_account_id.member_value = value; }
		}
		public bool has_m_account_id
		{
			get{ return _m_account_id.has_value; }
		}

		public uint m_server_id
		{
			get{ return _m_server_id.member_value; }
			set{ _m_server_id.member_value = value; }
		}
		public bool has_m_server_id
		{
			get{ return _m_server_id.has_value; }
		}

		public uint m_res
		{
			get{ return _m_res.member_value; }
			set{ _m_res.member_value = value; }
		}
		public bool has_m_res
		{
			get{ return _m_res.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_account_id.Serialize(_m_account_id.member_value, ref out_stream);

			count += _m_server_id.Serialize(_m_server_id.member_value, ref out_stream);

			count += _m_res.Serialize(_m_res.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_account_id = 0;
			one_count = _m_account_id.ParseFrom(ref temp_m_account_id, ref int_stream);
			if (0 < one_count)
			{
					_m_account_id.member_value = temp_m_account_id;
					count = count + one_count;
			}

			uint temp_m_server_id = 0;
			one_count = _m_server_id.ParseFrom(ref temp_m_server_id, ref int_stream);
			if (0 < one_count)
			{
					_m_server_id.member_value = temp_m_server_id;
					count = count + one_count;
			}

			uint temp_m_res = 0;
			one_count = _m_res.ParseFrom(ref temp_m_res, ref int_stream);
			if (0 < one_count)
			{
					_m_res.member_value = temp_m_res;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Client_Firend_Remove_Res : IMessage
	{
		private ProtoMemberEmbedded<PlayerId> _m_remove_id;	// 被删除玩家唯一id

		public Msg_Logic2Client_Firend_Remove_Res()
		{
			_m_remove_id = new ProtoMemberEmbedded<PlayerId>(1, true);
			_m_remove_id.member_value = new PlayerId();
		}

		public PlayerId m_remove_id
		{
			get{ return _m_remove_id.member_value as PlayerId; }
			set{ _m_remove_id.member_value = value; }
		}
		public bool has_m_remove_id
		{
			get{ return _m_remove_id.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_remove_id.Serialize(_m_remove_id.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			PlayerId temp_m_remove_id = new PlayerId();
			one_count = _m_remove_id.ParseFrom(temp_m_remove_id, ref int_stream);
			if (0 < one_count)
			{
					_m_remove_id.member_value = temp_m_remove_id;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Client_Firend_Update_Res : IMessage
	{
		private ProtoMemberEmbeddedList<PlayerFriendInfo> _m_player_infos;	// 好友信息列表

		public Msg_Logic2Client_Firend_Update_Res()
		{
			_m_player_infos = new ProtoMemberEmbeddedList<PlayerFriendInfo>(1, false);
		}

		public System.Collections.Generic.List<PlayerFriendInfo> m_player_infos
		{
			get{ return _m_player_infos.member_value; }
		}
		public bool has_m_player_infos
		{
			get{ return _m_player_infos.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			foreach(PlayerFriendInfo one_member_value in _m_player_infos.member_value)
			{
				count += _m_player_infos.Serialize(one_member_value, ref out_stream);
			}

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			while (true)
			{
				PlayerFriendInfo one_member_value = new PlayerFriendInfo();
				one_count = _m_player_infos.ParseFrom(one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_player_infos.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			return count;
		}
	}

	public class Msg_Logic2Client_Hero_EquipmentUp_Res : IMessage
	{
		private ProtoMemberUInt32 _m_toy_type;	// 待升级的英雄
		private ProtoMemberUInt32 _m_equipment_index;	// 装备的位置0-3
		private ProtoMemberUInt32 _m_res;	// 升级结果（LogicRes）

		public Msg_Logic2Client_Hero_EquipmentUp_Res()
		{
			_m_toy_type = new ProtoMemberUInt32(1, true);
			_m_equipment_index = new ProtoMemberUInt32(2, true);
			_m_res = new ProtoMemberUInt32(3, true);
		}

		public Msg_Logic2Client_Hero_EquipmentUp_Res(uint __m_toy_type, uint __m_equipment_index, uint __m_res)
		{
			_m_toy_type = new ProtoMemberUInt32(1, true);
			_m_toy_type.member_value = __m_toy_type;
			_m_equipment_index = new ProtoMemberUInt32(2, true);
			_m_equipment_index.member_value = __m_equipment_index;
			_m_res = new ProtoMemberUInt32(3, true);
			_m_res.member_value = __m_res;
		}

		public uint m_toy_type
		{
			get{ return _m_toy_type.member_value; }
			set{ _m_toy_type.member_value = value; }
		}
		public bool has_m_toy_type
		{
			get{ return _m_toy_type.has_value; }
		}

		public uint m_equipment_index
		{
			get{ return _m_equipment_index.member_value; }
			set{ _m_equipment_index.member_value = value; }
		}
		public bool has_m_equipment_index
		{
			get{ return _m_equipment_index.has_value; }
		}

		public uint m_res
		{
			get{ return _m_res.member_value; }
			set{ _m_res.member_value = value; }
		}
		public bool has_m_res
		{
			get{ return _m_res.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_toy_type.Serialize(_m_toy_type.member_value, ref out_stream);

			count += _m_equipment_index.Serialize(_m_equipment_index.member_value, ref out_stream);

			count += _m_res.Serialize(_m_res.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_toy_type = 0;
			one_count = _m_toy_type.ParseFrom(ref temp_m_toy_type, ref int_stream);
			if (0 < one_count)
			{
					_m_toy_type.member_value = temp_m_toy_type;
					count = count + one_count;
			}

			uint temp_m_equipment_index = 0;
			one_count = _m_equipment_index.ParseFrom(ref temp_m_equipment_index, ref int_stream);
			if (0 < one_count)
			{
					_m_equipment_index.member_value = temp_m_equipment_index;
					count = count + one_count;
			}

			uint temp_m_res = 0;
			one_count = _m_res.ParseFrom(ref temp_m_res, ref int_stream);
			if (0 < one_count)
			{
					_m_res.member_value = temp_m_res;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Client_Hero_QualityUp_Res : IMessage
	{
		private ProtoMemberUInt32 _m_toy_type;	// 待升级的英雄
		private ProtoMemberUInt32 _m_res;	// 升级结果（LogicRes）

		public Msg_Logic2Client_Hero_QualityUp_Res()
		{
			_m_toy_type = new ProtoMemberUInt32(1, true);
			_m_res = new ProtoMemberUInt32(2, true);
		}

		public Msg_Logic2Client_Hero_QualityUp_Res(uint __m_toy_type, uint __m_res)
		{
			_m_toy_type = new ProtoMemberUInt32(1, true);
			_m_toy_type.member_value = __m_toy_type;
			_m_res = new ProtoMemberUInt32(2, true);
			_m_res.member_value = __m_res;
		}

		public uint m_toy_type
		{
			get{ return _m_toy_type.member_value; }
			set{ _m_toy_type.member_value = value; }
		}
		public bool has_m_toy_type
		{
			get{ return _m_toy_type.has_value; }
		}

		public uint m_res
		{
			get{ return _m_res.member_value; }
			set{ _m_res.member_value = value; }
		}
		public bool has_m_res
		{
			get{ return _m_res.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_toy_type.Serialize(_m_toy_type.member_value, ref out_stream);

			count += _m_res.Serialize(_m_res.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_toy_type = 0;
			one_count = _m_toy_type.ParseFrom(ref temp_m_toy_type, ref int_stream);
			if (0 < one_count)
			{
					_m_toy_type.member_value = temp_m_toy_type;
					count = count + one_count;
			}

			uint temp_m_res = 0;
			one_count = _m_res.ParseFrom(ref temp_m_res, ref int_stream);
			if (0 < one_count)
			{
					_m_res.member_value = temp_m_res;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Client_Hero_SkillSet_Res : IMessage
	{
		private ProtoMemberUInt32 _m_toy_type;	// 待设置的英雄
		private ProtoMemberUInt32 _m_skill_index;	// 技能的位置0-3
		private ProtoMemberUInt32 _m_skill_id;	// 技能的id
		private ProtoMemberUInt32 _m_res;	// 升级结果（LogicRes）

		public Msg_Logic2Client_Hero_SkillSet_Res()
		{
			_m_toy_type = new ProtoMemberUInt32(1, true);
			_m_skill_index = new ProtoMemberUInt32(2, true);
			_m_skill_id = new ProtoMemberUInt32(3, true);
			_m_res = new ProtoMemberUInt32(4, true);
		}

		public Msg_Logic2Client_Hero_SkillSet_Res(uint __m_toy_type, uint __m_skill_index, uint __m_skill_id, uint __m_res)
		{
			_m_toy_type = new ProtoMemberUInt32(1, true);
			_m_toy_type.member_value = __m_toy_type;
			_m_skill_index = new ProtoMemberUInt32(2, true);
			_m_skill_index.member_value = __m_skill_index;
			_m_skill_id = new ProtoMemberUInt32(3, true);
			_m_skill_id.member_value = __m_skill_id;
			_m_res = new ProtoMemberUInt32(4, true);
			_m_res.member_value = __m_res;
		}

		public uint m_toy_type
		{
			get{ return _m_toy_type.member_value; }
			set{ _m_toy_type.member_value = value; }
		}
		public bool has_m_toy_type
		{
			get{ return _m_toy_type.has_value; }
		}

		public uint m_skill_index
		{
			get{ return _m_skill_index.member_value; }
			set{ _m_skill_index.member_value = value; }
		}
		public bool has_m_skill_index
		{
			get{ return _m_skill_index.has_value; }
		}

		public uint m_skill_id
		{
			get{ return _m_skill_id.member_value; }
			set{ _m_skill_id.member_value = value; }
		}
		public bool has_m_skill_id
		{
			get{ return _m_skill_id.has_value; }
		}

		public uint m_res
		{
			get{ return _m_res.member_value; }
			set{ _m_res.member_value = value; }
		}
		public bool has_m_res
		{
			get{ return _m_res.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_toy_type.Serialize(_m_toy_type.member_value, ref out_stream);

			count += _m_skill_index.Serialize(_m_skill_index.member_value, ref out_stream);

			count += _m_skill_id.Serialize(_m_skill_id.member_value, ref out_stream);

			count += _m_res.Serialize(_m_res.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_toy_type = 0;
			one_count = _m_toy_type.ParseFrom(ref temp_m_toy_type, ref int_stream);
			if (0 < one_count)
			{
					_m_toy_type.member_value = temp_m_toy_type;
					count = count + one_count;
			}

			uint temp_m_skill_index = 0;
			one_count = _m_skill_index.ParseFrom(ref temp_m_skill_index, ref int_stream);
			if (0 < one_count)
			{
					_m_skill_index.member_value = temp_m_skill_index;
					count = count + one_count;
			}

			uint temp_m_skill_id = 0;
			one_count = _m_skill_id.ParseFrom(ref temp_m_skill_id, ref int_stream);
			if (0 < one_count)
			{
					_m_skill_id.member_value = temp_m_skill_id;
					count = count + one_count;
			}

			uint temp_m_res = 0;
			one_count = _m_res.ParseFrom(ref temp_m_res, ref int_stream);
			if (0 < one_count)
			{
					_m_res.member_value = temp_m_res;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Client_Hero_Update_Res : IMessage
	{
		private ProtoMemberEmbedded<PlayerHeroList> _m_heros;	// 角色英雄列表

		public Msg_Logic2Client_Hero_Update_Res()
		{
			_m_heros = new ProtoMemberEmbedded<PlayerHeroList>(1, false);
			_m_heros.member_value = new PlayerHeroList();
		}

		public PlayerHeroList m_heros
		{
			get{ return _m_heros.member_value as PlayerHeroList; }
			set{ _m_heros.member_value = value; }
		}
		public bool has_m_heros
		{
			get{ return _m_heros.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_heros.Serialize(_m_heros.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			PlayerHeroList temp_m_heros = new PlayerHeroList();
			one_count = _m_heros.ParseFrom(temp_m_heros, ref int_stream);
			if (0 < one_count)
			{
					_m_heros.member_value = temp_m_heros;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Client_In_Scene_Broadcast : IMessage
	{
		private ProtoMemberEmbeddedList<PlayerShow> _m_new_player;	// 进入场景的新角色显示信息

		public Msg_Logic2Client_In_Scene_Broadcast()
		{
			_m_new_player = new ProtoMemberEmbeddedList<PlayerShow>(1, false);
		}

		public System.Collections.Generic.List<PlayerShow> m_new_player
		{
			get{ return _m_new_player.member_value; }
		}
		public bool has_m_new_player
		{
			get{ return _m_new_player.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			foreach(PlayerShow one_member_value in _m_new_player.member_value)
			{
				count += _m_new_player.Serialize(one_member_value, ref out_stream);
			}

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			while (true)
			{
				PlayerShow one_member_value = new PlayerShow();
				one_count = _m_new_player.ParseFrom(one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_new_player.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			return count;
		}
	}

	public class Msg_Logic2Client_In_Scene_Res : IMessage
	{
		private ProtoMemberUInt32 _m_world_id;	// 请求进入的地图id
		private ProtoMemberEmbeddedList<PlayerShow> _m_other_players;	// 返回场景中的其他玩家显示信息列表

		public Msg_Logic2Client_In_Scene_Res()
		{
			_m_world_id = new ProtoMemberUInt32(1, true);
			_m_other_players = new ProtoMemberEmbeddedList<PlayerShow>(2, false);
		}

		public Msg_Logic2Client_In_Scene_Res(uint __m_world_id)
		{
			_m_world_id = new ProtoMemberUInt32(1, true);
			_m_world_id.member_value = __m_world_id;
			_m_other_players = new ProtoMemberEmbeddedList<PlayerShow>(2, false);
		}

		public uint m_world_id
		{
			get{ return _m_world_id.member_value; }
			set{ _m_world_id.member_value = value; }
		}
		public bool has_m_world_id
		{
			get{ return _m_world_id.has_value; }
		}

		public System.Collections.Generic.List<PlayerShow> m_other_players
		{
			get{ return _m_other_players.member_value; }
		}
		public bool has_m_other_players
		{
			get{ return _m_other_players.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_world_id.Serialize(_m_world_id.member_value, ref out_stream);

			foreach(PlayerShow one_member_value in _m_other_players.member_value)
			{
				count += _m_other_players.Serialize(one_member_value, ref out_stream);
			}

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_world_id = 0;
			one_count = _m_world_id.ParseFrom(ref temp_m_world_id, ref int_stream);
			if (0 < one_count)
			{
					_m_world_id.member_value = temp_m_world_id;
					count = count + one_count;
			}

			while (true)
			{
				PlayerShow one_member_value = new PlayerShow();
				one_count = _m_other_players.ParseFrom(one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_other_players.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			return count;
		}
	}

	public class Msg_Logic2Client_Instance_Update_Res : IMessage
	{
		private ProtoMemberUInt32 _m_instance_model;	// 0娱乐模式，1精英模式（对应enum InstanceType）
		private ProtoMemberEmbedded<PlayerInstanceInfo> _m_instance_info;	// 当前信息

		public Msg_Logic2Client_Instance_Update_Res()
		{
			_m_instance_model = new ProtoMemberUInt32(1, true);
			_m_instance_info = new ProtoMemberEmbedded<PlayerInstanceInfo>(2, true);
			_m_instance_info.member_value = new PlayerInstanceInfo();
		}

		public Msg_Logic2Client_Instance_Update_Res(uint __m_instance_model)
		{
			_m_instance_model = new ProtoMemberUInt32(1, true);
			_m_instance_model.member_value = __m_instance_model;
			_m_instance_info = new ProtoMemberEmbedded<PlayerInstanceInfo>(2, true);
			_m_instance_info.member_value = new PlayerInstanceInfo();
		}

		public uint m_instance_model
		{
			get{ return _m_instance_model.member_value; }
			set{ _m_instance_model.member_value = value; }
		}
		public bool has_m_instance_model
		{
			get{ return _m_instance_model.has_value; }
		}

		public PlayerInstanceInfo m_instance_info
		{
			get{ return _m_instance_info.member_value as PlayerInstanceInfo; }
			set{ _m_instance_info.member_value = value; }
		}
		public bool has_m_instance_info
		{
			get{ return _m_instance_info.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_instance_model.Serialize(_m_instance_model.member_value, ref out_stream);

			count += _m_instance_info.Serialize(_m_instance_info.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_instance_model = 0;
			one_count = _m_instance_model.ParseFrom(ref temp_m_instance_model, ref int_stream);
			if (0 < one_count)
			{
					_m_instance_model.member_value = temp_m_instance_model;
					count = count + one_count;
			}

			PlayerInstanceInfo temp_m_instance_info = new PlayerInstanceInfo();
			one_count = _m_instance_info.ParseFrom(temp_m_instance_info, ref int_stream);
			if (0 < one_count)
			{
					_m_instance_info.member_value = temp_m_instance_info;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Client_Item_Decompose_Res : IMessage
	{
		private ProtoMemberUInt32 _m_res;	// 道具分解结果（LogicRes）

		public Msg_Logic2Client_Item_Decompose_Res()
		{
			_m_res = new ProtoMemberUInt32(1, true);
		}

		public Msg_Logic2Client_Item_Decompose_Res(uint __m_res)
		{
			_m_res = new ProtoMemberUInt32(1, true);
			_m_res.member_value = __m_res;
		}

		public uint m_res
		{
			get{ return _m_res.member_value; }
			set{ _m_res.member_value = value; }
		}
		public bool has_m_res
		{
			get{ return _m_res.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_res.Serialize(_m_res.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_res = 0;
			one_count = _m_res.ParseFrom(ref temp_m_res, ref int_stream);
			if (0 < one_count)
			{
					_m_res.member_value = temp_m_res;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Client_Item_Update_Res : IMessage
	{
		private ProtoMemberEmbedded<PlayerItemList> _m_update_items;	// 变更的道具列表

		public Msg_Logic2Client_Item_Update_Res()
		{
			_m_update_items = new ProtoMemberEmbedded<PlayerItemList>(1, false);
			_m_update_items.member_value = new PlayerItemList();
		}

		public PlayerItemList m_update_items
		{
			get{ return _m_update_items.member_value as PlayerItemList; }
			set{ _m_update_items.member_value = value; }
		}
		public bool has_m_update_items
		{
			get{ return _m_update_items.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_update_items.Serialize(_m_update_items.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			PlayerItemList temp_m_update_items = new PlayerItemList();
			one_count = _m_update_items.ParseFrom(temp_m_update_items, ref int_stream);
			if (0 < one_count)
			{
					_m_update_items.member_value = temp_m_update_items;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Client_Item_Use_Res : IMessage
	{
		private ProtoMemberUInt32 _m_res;	// 道具使用结果（LogicRes）
		private ProtoMemberUInt32 _m_item_id;	// 被使用的道具id
		private ProtoMemberUInt32List _m_get_item_id;	// 使用后获得的道具id
		private ProtoMemberUInt32List _m_get_item_count;	// 使用后获得的道具数量
		private ProtoMemberUInt32List _m_chest_id;	// 道具所对应宝箱id

		public Msg_Logic2Client_Item_Use_Res()
		{
			_m_res = new ProtoMemberUInt32(1, true);
			_m_item_id = new ProtoMemberUInt32(2, true);
			_m_get_item_id = new ProtoMemberUInt32List(3, false);
			_m_get_item_count = new ProtoMemberUInt32List(4, false);
			_m_chest_id = new ProtoMemberUInt32List(5, false);
		}

		public Msg_Logic2Client_Item_Use_Res(uint __m_res, uint __m_item_id)
		{
			_m_res = new ProtoMemberUInt32(1, true);
			_m_res.member_value = __m_res;
			_m_item_id = new ProtoMemberUInt32(2, true);
			_m_item_id.member_value = __m_item_id;
			_m_get_item_id = new ProtoMemberUInt32List(3, false);
			_m_get_item_count = new ProtoMemberUInt32List(4, false);
			_m_chest_id = new ProtoMemberUInt32List(5, false);
		}

		public uint m_res
		{
			get{ return _m_res.member_value; }
			set{ _m_res.member_value = value; }
		}
		public bool has_m_res
		{
			get{ return _m_res.has_value; }
		}

		public uint m_item_id
		{
			get{ return _m_item_id.member_value; }
			set{ _m_item_id.member_value = value; }
		}
		public bool has_m_item_id
		{
			get{ return _m_item_id.has_value; }
		}

		public System.Collections.Generic.List<uint> m_get_item_id
		{
			get{ return _m_get_item_id.member_value; }
		}
		public bool has_m_get_item_id
		{
			get{ return _m_get_item_id.has_value; }
		}

		public System.Collections.Generic.List<uint> m_get_item_count
		{
			get{ return _m_get_item_count.member_value; }
		}
		public bool has_m_get_item_count
		{
			get{ return _m_get_item_count.has_value; }
		}

		public System.Collections.Generic.List<uint> m_chest_id
		{
			get{ return _m_chest_id.member_value; }
		}
		public bool has_m_chest_id
		{
			get{ return _m_chest_id.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_res.Serialize(_m_res.member_value, ref out_stream);

			count += _m_item_id.Serialize(_m_item_id.member_value, ref out_stream);

			foreach(uint one_member_value in _m_get_item_id.member_value)
			{
				count += _m_get_item_id.Serialize(one_member_value, ref out_stream);
			}

			foreach(uint one_member_value in _m_get_item_count.member_value)
			{
				count += _m_get_item_count.Serialize(one_member_value, ref out_stream);
			}

			foreach(uint one_member_value in _m_chest_id.member_value)
			{
				count += _m_chest_id.Serialize(one_member_value, ref out_stream);
			}

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_res = 0;
			one_count = _m_res.ParseFrom(ref temp_m_res, ref int_stream);
			if (0 < one_count)
			{
					_m_res.member_value = temp_m_res;
					count = count + one_count;
			}

			uint temp_m_item_id = 0;
			one_count = _m_item_id.ParseFrom(ref temp_m_item_id, ref int_stream);
			if (0 < one_count)
			{
					_m_item_id.member_value = temp_m_item_id;
					count = count + one_count;
			}

			while (true)
			{
				uint one_member_value = 0;
				one_count = _m_get_item_id.ParseFrom(ref one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_get_item_id.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			while (true)
			{
				uint one_member_value = 0;
				one_count = _m_get_item_count.ParseFrom(ref one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_get_item_count.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			while (true)
			{
				uint one_member_value = 0;
				one_count = _m_chest_id.ParseFrom(ref one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_chest_id.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			return count;
		}
	}

	public class Msg_Logic2Client_LvExp_Update_Res : IMessage
	{
		private ProtoMemberUInt32 _m_lv;	// 等级
		private ProtoMemberUInt32 _m_exp;	// 经验

		public Msg_Logic2Client_LvExp_Update_Res()
		{
			_m_lv = new ProtoMemberUInt32(1, true);
			_m_exp = new ProtoMemberUInt32(2, true);
		}

		public Msg_Logic2Client_LvExp_Update_Res(uint __m_lv, uint __m_exp)
		{
			_m_lv = new ProtoMemberUInt32(1, true);
			_m_lv.member_value = __m_lv;
			_m_exp = new ProtoMemberUInt32(2, true);
			_m_exp.member_value = __m_exp;
		}

		public uint m_lv
		{
			get{ return _m_lv.member_value; }
			set{ _m_lv.member_value = value; }
		}
		public bool has_m_lv
		{
			get{ return _m_lv.has_value; }
		}

		public uint m_exp
		{
			get{ return _m_exp.member_value; }
			set{ _m_exp.member_value = value; }
		}
		public bool has_m_exp
		{
			get{ return _m_exp.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_lv.Serialize(_m_lv.member_value, ref out_stream);

			count += _m_exp.Serialize(_m_exp.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_lv = 0;
			one_count = _m_lv.ParseFrom(ref temp_m_lv, ref int_stream);
			if (0 < one_count)
			{
					_m_lv.member_value = temp_m_lv;
					count = count + one_count;
			}

			uint temp_m_exp = 0;
			one_count = _m_exp.ParseFrom(ref temp_m_exp, ref int_stream);
			if (0 < one_count)
			{
					_m_exp.member_value = temp_m_exp;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Client_Mail_Add_Res : IMessage
	{
		private ProtoMemberEmbedded<PlayerMailList> _m_mails;	// 新增邮件列表

		public Msg_Logic2Client_Mail_Add_Res()
		{
			_m_mails = new ProtoMemberEmbedded<PlayerMailList>(1, false);
			_m_mails.member_value = new PlayerMailList();
		}

		public PlayerMailList m_mails
		{
			get{ return _m_mails.member_value as PlayerMailList; }
			set{ _m_mails.member_value = value; }
		}
		public bool has_m_mails
		{
			get{ return _m_mails.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_mails.Serialize(_m_mails.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			PlayerMailList temp_m_mails = new PlayerMailList();
			one_count = _m_mails.ParseFrom(temp_m_mails, ref int_stream);
			if (0 < one_count)
			{
					_m_mails.member_value = temp_m_mails;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Client_Mail_Read_Res : IMessage
	{
		private ProtoMemberUInt32 _m_mail_id;	// 邮件唯一id
		private ProtoMemberUInt32 _m_res;	// 操作结果（LogicRes）

		public Msg_Logic2Client_Mail_Read_Res()
		{
			_m_mail_id = new ProtoMemberUInt32(1, true);
			_m_res = new ProtoMemberUInt32(2, true);
		}

		public Msg_Logic2Client_Mail_Read_Res(uint __m_mail_id, uint __m_res)
		{
			_m_mail_id = new ProtoMemberUInt32(1, true);
			_m_mail_id.member_value = __m_mail_id;
			_m_res = new ProtoMemberUInt32(2, true);
			_m_res.member_value = __m_res;
		}

		public uint m_mail_id
		{
			get{ return _m_mail_id.member_value; }
			set{ _m_mail_id.member_value = value; }
		}
		public bool has_m_mail_id
		{
			get{ return _m_mail_id.has_value; }
		}

		public uint m_res
		{
			get{ return _m_res.member_value; }
			set{ _m_res.member_value = value; }
		}
		public bool has_m_res
		{
			get{ return _m_res.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_mail_id.Serialize(_m_mail_id.member_value, ref out_stream);

			count += _m_res.Serialize(_m_res.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_mail_id = 0;
			one_count = _m_mail_id.ParseFrom(ref temp_m_mail_id, ref int_stream);
			if (0 < one_count)
			{
					_m_mail_id.member_value = temp_m_mail_id;
					count = count + one_count;
			}

			uint temp_m_res = 0;
			one_count = _m_res.ParseFrom(ref temp_m_res, ref int_stream);
			if (0 < one_count)
			{
					_m_res.member_value = temp_m_res;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Client_Mail_Receive_Res : IMessage
	{
		private ProtoMemberUInt32 _m_mail_id;	// 邮件唯一id
		private ProtoMemberUInt32 _m_res;	// 操作结果（LogicRes）

		public Msg_Logic2Client_Mail_Receive_Res()
		{
			_m_mail_id = new ProtoMemberUInt32(1, true);
			_m_res = new ProtoMemberUInt32(2, true);
		}

		public Msg_Logic2Client_Mail_Receive_Res(uint __m_mail_id, uint __m_res)
		{
			_m_mail_id = new ProtoMemberUInt32(1, true);
			_m_mail_id.member_value = __m_mail_id;
			_m_res = new ProtoMemberUInt32(2, true);
			_m_res.member_value = __m_res;
		}

		public uint m_mail_id
		{
			get{ return _m_mail_id.member_value; }
			set{ _m_mail_id.member_value = value; }
		}
		public bool has_m_mail_id
		{
			get{ return _m_mail_id.has_value; }
		}

		public uint m_res
		{
			get{ return _m_res.member_value; }
			set{ _m_res.member_value = value; }
		}
		public bool has_m_res
		{
			get{ return _m_res.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_mail_id.Serialize(_m_mail_id.member_value, ref out_stream);

			count += _m_res.Serialize(_m_res.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_mail_id = 0;
			one_count = _m_mail_id.ParseFrom(ref temp_m_mail_id, ref int_stream);
			if (0 < one_count)
			{
					_m_mail_id.member_value = temp_m_mail_id;
					count = count + one_count;
			}

			uint temp_m_res = 0;
			one_count = _m_res.ParseFrom(ref temp_m_res, ref int_stream);
			if (0 < one_count)
			{
					_m_res.member_value = temp_m_res;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Client_MainTask_Finsh_Res : IMessage
	{
		private ProtoMemberUInt32 _m_res;	// 领取奖励结果（成功/失败）（LogicRes）

		public Msg_Logic2Client_MainTask_Finsh_Res()
		{
			_m_res = new ProtoMemberUInt32(1, true);
		}

		public Msg_Logic2Client_MainTask_Finsh_Res(uint __m_res)
		{
			_m_res = new ProtoMemberUInt32(1, true);
			_m_res.member_value = __m_res;
		}

		public uint m_res
		{
			get{ return _m_res.member_value; }
			set{ _m_res.member_value = value; }
		}
		public bool has_m_res
		{
			get{ return _m_res.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_res.Serialize(_m_res.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_res = 0;
			one_count = _m_res.ParseFrom(ref temp_m_res, ref int_stream);
			if (0 < one_count)
			{
					_m_res.member_value = temp_m_res;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Client_MainTask_Next_Res : IMessage
	{
		private ProtoMemberUInt32 _m_res;	// 领取奖励结果（成功/失败）（LogicRes）

		public Msg_Logic2Client_MainTask_Next_Res()
		{
			_m_res = new ProtoMemberUInt32(1, true);
		}

		public Msg_Logic2Client_MainTask_Next_Res(uint __m_res)
		{
			_m_res = new ProtoMemberUInt32(1, true);
			_m_res.member_value = __m_res;
		}

		public uint m_res
		{
			get{ return _m_res.member_value; }
			set{ _m_res.member_value = value; }
		}
		public bool has_m_res
		{
			get{ return _m_res.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_res.Serialize(_m_res.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_res = 0;
			one_count = _m_res.ParseFrom(ref temp_m_res, ref int_stream);
			if (0 < one_count)
			{
					_m_res.member_value = temp_m_res;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Client_MainTask_Update_Res : IMessage
	{
		private ProtoMemberEmbedded<PlayerMainTaskInfo> _m_main_task;	// 主线任务信息

		public Msg_Logic2Client_MainTask_Update_Res()
		{
			_m_main_task = new ProtoMemberEmbedded<PlayerMainTaskInfo>(1, true);
			_m_main_task.member_value = new PlayerMainTaskInfo();
		}

		public PlayerMainTaskInfo m_main_task
		{
			get{ return _m_main_task.member_value as PlayerMainTaskInfo; }
			set{ _m_main_task.member_value = value; }
		}
		public bool has_m_main_task
		{
			get{ return _m_main_task.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_main_task.Serialize(_m_main_task.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			PlayerMainTaskInfo temp_m_main_task = new PlayerMainTaskInfo();
			one_count = _m_main_task.ParseFrom(temp_m_main_task, ref int_stream);
			if (0 < one_count)
			{
					_m_main_task.member_value = temp_m_main_task;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Client_Move_Broadcast : IMessage
	{
		private ProtoMemberUInt32 _m_move_player_id;	// 移动的角色id
		private ProtoMemberUInt32 _m_move_server_id;	// 移动的角色所选服id
		private ProtoMemberUInt32 _m_move_type;	// 移动方式
		private ProtoMemberEmbedded<PlayerPosInfo> _m_target_point;	// 目标点坐标

		public Msg_Logic2Client_Move_Broadcast()
		{
			_m_move_player_id = new ProtoMemberUInt32(1, true);
			_m_move_server_id = new ProtoMemberUInt32(2, true);
			_m_move_type = new ProtoMemberUInt32(3, true);
			_m_target_point = new ProtoMemberEmbedded<PlayerPosInfo>(4, true);
			_m_target_point.member_value = new PlayerPosInfo();
		}

		public Msg_Logic2Client_Move_Broadcast(uint __m_move_player_id, uint __m_move_server_id, uint __m_move_type)
		{
			_m_move_player_id = new ProtoMemberUInt32(1, true);
			_m_move_player_id.member_value = __m_move_player_id;
			_m_move_server_id = new ProtoMemberUInt32(2, true);
			_m_move_server_id.member_value = __m_move_server_id;
			_m_move_type = new ProtoMemberUInt32(3, true);
			_m_move_type.member_value = __m_move_type;
			_m_target_point = new ProtoMemberEmbedded<PlayerPosInfo>(4, true);
			_m_target_point.member_value = new PlayerPosInfo();
		}

		public uint m_move_player_id
		{
			get{ return _m_move_player_id.member_value; }
			set{ _m_move_player_id.member_value = value; }
		}
		public bool has_m_move_player_id
		{
			get{ return _m_move_player_id.has_value; }
		}

		public uint m_move_server_id
		{
			get{ return _m_move_server_id.member_value; }
			set{ _m_move_server_id.member_value = value; }
		}
		public bool has_m_move_server_id
		{
			get{ return _m_move_server_id.has_value; }
		}

		public uint m_move_type
		{
			get{ return _m_move_type.member_value; }
			set{ _m_move_type.member_value = value; }
		}
		public bool has_m_move_type
		{
			get{ return _m_move_type.has_value; }
		}

		public PlayerPosInfo m_target_point
		{
			get{ return _m_target_point.member_value as PlayerPosInfo; }
			set{ _m_target_point.member_value = value; }
		}
		public bool has_m_target_point
		{
			get{ return _m_target_point.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_move_player_id.Serialize(_m_move_player_id.member_value, ref out_stream);

			count += _m_move_server_id.Serialize(_m_move_server_id.member_value, ref out_stream);

			count += _m_move_type.Serialize(_m_move_type.member_value, ref out_stream);

			count += _m_target_point.Serialize(_m_target_point.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_move_player_id = 0;
			one_count = _m_move_player_id.ParseFrom(ref temp_m_move_player_id, ref int_stream);
			if (0 < one_count)
			{
					_m_move_player_id.member_value = temp_m_move_player_id;
					count = count + one_count;
			}

			uint temp_m_move_server_id = 0;
			one_count = _m_move_server_id.ParseFrom(ref temp_m_move_server_id, ref int_stream);
			if (0 < one_count)
			{
					_m_move_server_id.member_value = temp_m_move_server_id;
					count = count + one_count;
			}

			uint temp_m_move_type = 0;
			one_count = _m_move_type.ParseFrom(ref temp_m_move_type, ref int_stream);
			if (0 < one_count)
			{
					_m_move_type.member_value = temp_m_move_type;
					count = count + one_count;
			}

			PlayerPosInfo temp_m_target_point = new PlayerPosInfo();
			one_count = _m_target_point.ParseFrom(temp_m_target_point, ref int_stream);
			if (0 < one_count)
			{
					_m_target_point.member_value = temp_m_target_point;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Client_Out_Scene_Broadcast : IMessage
	{
		private ProtoMemberEmbeddedList<PlayerId> _m_exit_player;	// 退出场景的角色

		public Msg_Logic2Client_Out_Scene_Broadcast()
		{
			_m_exit_player = new ProtoMemberEmbeddedList<PlayerId>(1, false);
		}

		public System.Collections.Generic.List<PlayerId> m_exit_player
		{
			get{ return _m_exit_player.member_value; }
		}
		public bool has_m_exit_player
		{
			get{ return _m_exit_player.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			foreach(PlayerId one_member_value in _m_exit_player.member_value)
			{
				count += _m_exit_player.Serialize(one_member_value, ref out_stream);
			}

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			while (true)
			{
				PlayerId one_member_value = new PlayerId();
				one_count = _m_exit_player.ParseFrom(one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_exit_player.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			return count;
		}
	}

	public class Msg_Logic2Client_Out_Scene_Res : IMessage
	{

		public Msg_Logic2Client_Out_Scene_Res()
		{
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			return count;
		}
	}

	public class Msg_Logic2Client_PVE_BeInviteFriend_Req : IMessage
	{
		private ProtoMemberUInt64 _m_team_id;	// 所要加入的战斗局/队伍id
		private ProtoMemberString _m_leader_name;	// 房主/队长名称
		private ProtoMemberUInt32 _m_seat_index;	// 邀请的位置 0 - 3

		public Msg_Logic2Client_PVE_BeInviteFriend_Req()
		{
			_m_team_id = new ProtoMemberUInt64(1, true);
			_m_leader_name = new ProtoMemberString(2, true);
			_m_seat_index = new ProtoMemberUInt32(3, true);
		}

		public Msg_Logic2Client_PVE_BeInviteFriend_Req(ulong __m_team_id, string __m_leader_name, uint __m_seat_index)
		{
			_m_team_id = new ProtoMemberUInt64(1, true);
			_m_team_id.member_value = __m_team_id;
			_m_leader_name = new ProtoMemberString(2, true);
			_m_leader_name.member_value = __m_leader_name;
			_m_seat_index = new ProtoMemberUInt32(3, true);
			_m_seat_index.member_value = __m_seat_index;
		}

		public ulong m_team_id
		{
			get{ return _m_team_id.member_value; }
			set{ _m_team_id.member_value = value; }
		}
		public bool has_m_team_id
		{
			get{ return _m_team_id.has_value; }
		}

		public string m_leader_name
		{
			get{ return _m_leader_name.member_value; }
			set{ _m_leader_name.member_value = value; }
		}
		public bool has_m_leader_name
		{
			get{ return _m_leader_name.has_value; }
		}

		public uint m_seat_index
		{
			get{ return _m_seat_index.member_value; }
			set{ _m_seat_index.member_value = value; }
		}
		public bool has_m_seat_index
		{
			get{ return _m_seat_index.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_team_id.Serialize(_m_team_id.member_value, ref out_stream);

			count += _m_leader_name.Serialize(_m_leader_name.member_value, ref out_stream);

			count += _m_seat_index.Serialize(_m_seat_index.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			ulong temp_m_team_id = 0;
			one_count = _m_team_id.ParseFrom(ref temp_m_team_id, ref int_stream);
			if (0 < one_count)
			{
					_m_team_id.member_value = temp_m_team_id;
					count = count + one_count;
			}

			string temp_m_leader_name = "";
			one_count = _m_leader_name.ParseFrom(ref temp_m_leader_name, ref int_stream);
			if (0 < one_count)
			{
					_m_leader_name.member_value = temp_m_leader_name;
					count = count + one_count;
			}

			uint temp_m_seat_index = 0;
			one_count = _m_seat_index.ParseFrom(ref temp_m_seat_index, ref int_stream);
			if (0 < one_count)
			{
					_m_seat_index.member_value = temp_m_seat_index;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Client_PVE_CancelHero_Res : IMessage
	{
		private ProtoMemberUInt32 _m_res;	// 取消玩具的结果（LogicRes）

		public Msg_Logic2Client_PVE_CancelHero_Res()
		{
			_m_res = new ProtoMemberUInt32(1, true);
		}

		public Msg_Logic2Client_PVE_CancelHero_Res(uint __m_res)
		{
			_m_res = new ProtoMemberUInt32(1, true);
			_m_res.member_value = __m_res;
		}

		public uint m_res
		{
			get{ return _m_res.member_value; }
			set{ _m_res.member_value = value; }
		}
		public bool has_m_res
		{
			get{ return _m_res.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_res.Serialize(_m_res.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_res = 0;
			one_count = _m_res.ParseFrom(ref temp_m_res, ref int_stream);
			if (0 < one_count)
			{
					_m_res.member_value = temp_m_res;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Client_PVE_CancelTeam_Broadcast : IMessage
	{

		public Msg_Logic2Client_PVE_CancelTeam_Broadcast()
		{
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			return count;
		}
	}

	public class Msg_Logic2Client_PVE_ChangeHero_Res : IMessage
	{
		private ProtoMemberUInt32 _m_res;	// 更换玩具的结果（LogicRes）

		public Msg_Logic2Client_PVE_ChangeHero_Res()
		{
			_m_res = new ProtoMemberUInt32(1, true);
		}

		public Msg_Logic2Client_PVE_ChangeHero_Res(uint __m_res)
		{
			_m_res = new ProtoMemberUInt32(1, true);
			_m_res.member_value = __m_res;
		}

		public uint m_res
		{
			get{ return _m_res.member_value; }
			set{ _m_res.member_value = value; }
		}
		public bool has_m_res
		{
			get{ return _m_res.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_res.Serialize(_m_res.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_res = 0;
			one_count = _m_res.ParseFrom(ref temp_m_res, ref int_stream);
			if (0 < one_count)
			{
					_m_res.member_value = temp_m_res;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Client_PVE_ExitTeam_Broadcast : IMessage
	{
		private ProtoMemberUInt32 _m_exit_account_id;	// 退出的玩家id
		private ProtoMemberUInt32 _m_exit_server_id;	// 退出的玩家所属服id

		public Msg_Logic2Client_PVE_ExitTeam_Broadcast()
		{
			_m_exit_account_id = new ProtoMemberUInt32(1, true);
			_m_exit_server_id = new ProtoMemberUInt32(2, true);
		}

		public Msg_Logic2Client_PVE_ExitTeam_Broadcast(uint __m_exit_account_id, uint __m_exit_server_id)
		{
			_m_exit_account_id = new ProtoMemberUInt32(1, true);
			_m_exit_account_id.member_value = __m_exit_account_id;
			_m_exit_server_id = new ProtoMemberUInt32(2, true);
			_m_exit_server_id.member_value = __m_exit_server_id;
		}

		public uint m_exit_account_id
		{
			get{ return _m_exit_account_id.member_value; }
			set{ _m_exit_account_id.member_value = value; }
		}
		public bool has_m_exit_account_id
		{
			get{ return _m_exit_account_id.has_value; }
		}

		public uint m_exit_server_id
		{
			get{ return _m_exit_server_id.member_value; }
			set{ _m_exit_server_id.member_value = value; }
		}
		public bool has_m_exit_server_id
		{
			get{ return _m_exit_server_id.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_exit_account_id.Serialize(_m_exit_account_id.member_value, ref out_stream);

			count += _m_exit_server_id.Serialize(_m_exit_server_id.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_exit_account_id = 0;
			one_count = _m_exit_account_id.ParseFrom(ref temp_m_exit_account_id, ref int_stream);
			if (0 < one_count)
			{
					_m_exit_account_id.member_value = temp_m_exit_account_id;
					count = count + one_count;
			}

			uint temp_m_exit_server_id = 0;
			one_count = _m_exit_server_id.ParseFrom(ref temp_m_exit_server_id, ref int_stream);
			if (0 < one_count)
			{
					_m_exit_server_id.member_value = temp_m_exit_server_id;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Client_PVE_Extreme_AttackEnd_Res : IMessage
	{
		private ProtoMemberEnum<BattleSvrRes> _m_res;	// 战斗结果（胜利/失败）
		private ProtoMemberEmbedded<PlayerExtremeInfo> _m_update_extreme;	// 更新极限试炼信息

		public Msg_Logic2Client_PVE_Extreme_AttackEnd_Res()
		{
			_m_res = new ProtoMemberEnum<BattleSvrRes>(1, true);
			_m_update_extreme = new ProtoMemberEmbedded<PlayerExtremeInfo>(2, true);
			_m_update_extreme.member_value = new PlayerExtremeInfo();
		}

		public Msg_Logic2Client_PVE_Extreme_AttackEnd_Res(BattleSvrRes __m_res)
		{
			_m_res = new ProtoMemberEnum<BattleSvrRes>(1, true);
			_m_res.member_value = __m_res;
			_m_update_extreme = new ProtoMemberEmbedded<PlayerExtremeInfo>(2, true);
			_m_update_extreme.member_value = new PlayerExtremeInfo();
		}

		public BattleSvrRes m_res
		{
			get{ return _m_res.member_value; }
			set{ _m_res.member_value = value; }
		}
		public bool has_m_res
		{
			get{ return _m_res.has_value; }
		}

		public PlayerExtremeInfo m_update_extreme
		{
			get{ return _m_update_extreme.member_value as PlayerExtremeInfo; }
			set{ _m_update_extreme.member_value = value; }
		}
		public bool has_m_update_extreme
		{
			get{ return _m_update_extreme.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_res.Serialize((uint)_m_res.member_value, ref out_stream);

			count += _m_update_extreme.Serialize(_m_update_extreme.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_res = 0;
			one_count = _m_res.ParseFrom(ref temp_m_res, ref int_stream);
			if (0 < one_count)
			{
					_m_res.member_value = (BattleSvrRes)temp_m_res;
					count = count + one_count;
			}

			PlayerExtremeInfo temp_m_update_extreme = new PlayerExtremeInfo();
			one_count = _m_update_extreme.ParseFrom(temp_m_update_extreme, ref int_stream);
			if (0 < one_count)
			{
					_m_update_extreme.member_value = temp_m_update_extreme;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Client_PVE_Extreme_Temp1 : IMessage
	{

		public Msg_Logic2Client_PVE_Extreme_Temp1()
		{
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			return count;
		}
	}

	public class Msg_Logic2Client_PVE_HuntingChallenge_AttackBegin_Broadcast : IMessage
	{
		private ProtoMemberUInt64 _m_client_time;	// 客户端用于校准的时间戳，服务端原样返回
		private ProtoMemberUInt64 _m_begin_time;	// 起始时间
		private ProtoMemberUInt32 _m_second;	// 剩余秒数
		private ProtoMemberUInt32 _m_score;	// 总积分

		public Msg_Logic2Client_PVE_HuntingChallenge_AttackBegin_Broadcast()
		{
			_m_client_time = new ProtoMemberUInt64(1, true);
			_m_begin_time = new ProtoMemberUInt64(2, true);
			_m_second = new ProtoMemberUInt32(3, true);
			_m_score = new ProtoMemberUInt32(4, true);
		}

		public Msg_Logic2Client_PVE_HuntingChallenge_AttackBegin_Broadcast(ulong __m_client_time, ulong __m_begin_time, uint __m_second, uint __m_score)
		{
			_m_client_time = new ProtoMemberUInt64(1, true);
			_m_client_time.member_value = __m_client_time;
			_m_begin_time = new ProtoMemberUInt64(2, true);
			_m_begin_time.member_value = __m_begin_time;
			_m_second = new ProtoMemberUInt32(3, true);
			_m_second.member_value = __m_second;
			_m_score = new ProtoMemberUInt32(4, true);
			_m_score.member_value = __m_score;
		}

		public ulong m_client_time
		{
			get{ return _m_client_time.member_value; }
			set{ _m_client_time.member_value = value; }
		}
		public bool has_m_client_time
		{
			get{ return _m_client_time.has_value; }
		}

		public ulong m_begin_time
		{
			get{ return _m_begin_time.member_value; }
			set{ _m_begin_time.member_value = value; }
		}
		public bool has_m_begin_time
		{
			get{ return _m_begin_time.has_value; }
		}

		public uint m_second
		{
			get{ return _m_second.member_value; }
			set{ _m_second.member_value = value; }
		}
		public bool has_m_second
		{
			get{ return _m_second.has_value; }
		}

		public uint m_score
		{
			get{ return _m_score.member_value; }
			set{ _m_score.member_value = value; }
		}
		public bool has_m_score
		{
			get{ return _m_score.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_client_time.Serialize(_m_client_time.member_value, ref out_stream);

			count += _m_begin_time.Serialize(_m_begin_time.member_value, ref out_stream);

			count += _m_second.Serialize(_m_second.member_value, ref out_stream);

			count += _m_score.Serialize(_m_score.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			ulong temp_m_client_time = 0;
			one_count = _m_client_time.ParseFrom(ref temp_m_client_time, ref int_stream);
			if (0 < one_count)
			{
					_m_client_time.member_value = temp_m_client_time;
					count = count + one_count;
			}

			ulong temp_m_begin_time = 0;
			one_count = _m_begin_time.ParseFrom(ref temp_m_begin_time, ref int_stream);
			if (0 < one_count)
			{
					_m_begin_time.member_value = temp_m_begin_time;
					count = count + one_count;
			}

			uint temp_m_second = 0;
			one_count = _m_second.ParseFrom(ref temp_m_second, ref int_stream);
			if (0 < one_count)
			{
					_m_second.member_value = temp_m_second;
					count = count + one_count;
			}

			uint temp_m_score = 0;
			one_count = _m_score.ParseFrom(ref temp_m_score, ref int_stream);
			if (0 < one_count)
			{
					_m_score.member_value = temp_m_score;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Client_PVE_HuntingChallenge_AttackEnd_Broadcast : IMessage
	{
		private ProtoMemberEnum<BattleSvrRes> _m_res;	// 战斗结果（胜利/失败）
		private ProtoMemberEmbeddedList<PlayerHeroInfo> _m_hero_list;	// 英雄列表
		private ProtoMemberUInt32 _m_hero_exp_base;	// 基础经验
		private ProtoMemberUInt32 _m_hero_exp_card;	// 卡牌加成经验
		private ProtoMemberUInt32 _m_hero_exp_union;	// 公会加成经验
		private ProtoMemberUInt32List _m_item_ids;	// 道具列表
		private ProtoMemberUInt32List _m_item_count_base;	// 基础奖励
		private ProtoMemberUInt32List _m_item_count_card;	// 卡牌加成奖励
		private ProtoMemberUInt32 _m_score;	// 总积分
		private ProtoMemberUInt32 _m_res_lv;	// 战斗结果评级

		public Msg_Logic2Client_PVE_HuntingChallenge_AttackEnd_Broadcast()
		{
			_m_res = new ProtoMemberEnum<BattleSvrRes>(1, true);
			_m_hero_list = new ProtoMemberEmbeddedList<PlayerHeroInfo>(2, false);
			_m_hero_exp_base = new ProtoMemberUInt32(3, true);
			_m_hero_exp_card = new ProtoMemberUInt32(4, true);
			_m_hero_exp_union = new ProtoMemberUInt32(5, true);
			_m_item_ids = new ProtoMemberUInt32List(6, false);
			_m_item_count_base = new ProtoMemberUInt32List(7, false);
			_m_item_count_card = new ProtoMemberUInt32List(8, false);
			_m_score = new ProtoMemberUInt32(9, true);
			_m_res_lv = new ProtoMemberUInt32(10, true);
		}

		public Msg_Logic2Client_PVE_HuntingChallenge_AttackEnd_Broadcast(BattleSvrRes __m_res, uint __m_hero_exp_base, uint __m_hero_exp_card, uint __m_hero_exp_union, uint __m_score, uint __m_res_lv)
		{
			_m_res = new ProtoMemberEnum<BattleSvrRes>(1, true);
			_m_res.member_value = __m_res;
			_m_hero_list = new ProtoMemberEmbeddedList<PlayerHeroInfo>(2, false);
			_m_hero_exp_base = new ProtoMemberUInt32(3, true);
			_m_hero_exp_base.member_value = __m_hero_exp_base;
			_m_hero_exp_card = new ProtoMemberUInt32(4, true);
			_m_hero_exp_card.member_value = __m_hero_exp_card;
			_m_hero_exp_union = new ProtoMemberUInt32(5, true);
			_m_hero_exp_union.member_value = __m_hero_exp_union;
			_m_item_ids = new ProtoMemberUInt32List(6, false);
			_m_item_count_base = new ProtoMemberUInt32List(7, false);
			_m_item_count_card = new ProtoMemberUInt32List(8, false);
			_m_score = new ProtoMemberUInt32(9, true);
			_m_score.member_value = __m_score;
			_m_res_lv = new ProtoMemberUInt32(10, true);
			_m_res_lv.member_value = __m_res_lv;
		}

		public BattleSvrRes m_res
		{
			get{ return _m_res.member_value; }
			set{ _m_res.member_value = value; }
		}
		public bool has_m_res
		{
			get{ return _m_res.has_value; }
		}

		public System.Collections.Generic.List<PlayerHeroInfo> m_hero_list
		{
			get{ return _m_hero_list.member_value; }
		}
		public bool has_m_hero_list
		{
			get{ return _m_hero_list.has_value; }
		}

		public uint m_hero_exp_base
		{
			get{ return _m_hero_exp_base.member_value; }
			set{ _m_hero_exp_base.member_value = value; }
		}
		public bool has_m_hero_exp_base
		{
			get{ return _m_hero_exp_base.has_value; }
		}

		public uint m_hero_exp_card
		{
			get{ return _m_hero_exp_card.member_value; }
			set{ _m_hero_exp_card.member_value = value; }
		}
		public bool has_m_hero_exp_card
		{
			get{ return _m_hero_exp_card.has_value; }
		}

		public uint m_hero_exp_union
		{
			get{ return _m_hero_exp_union.member_value; }
			set{ _m_hero_exp_union.member_value = value; }
		}
		public bool has_m_hero_exp_union
		{
			get{ return _m_hero_exp_union.has_value; }
		}

		public System.Collections.Generic.List<uint> m_item_ids
		{
			get{ return _m_item_ids.member_value; }
		}
		public bool has_m_item_ids
		{
			get{ return _m_item_ids.has_value; }
		}

		public System.Collections.Generic.List<uint> m_item_count_base
		{
			get{ return _m_item_count_base.member_value; }
		}
		public bool has_m_item_count_base
		{
			get{ return _m_item_count_base.has_value; }
		}

		public System.Collections.Generic.List<uint> m_item_count_card
		{
			get{ return _m_item_count_card.member_value; }
		}
		public bool has_m_item_count_card
		{
			get{ return _m_item_count_card.has_value; }
		}

		public uint m_score
		{
			get{ return _m_score.member_value; }
			set{ _m_score.member_value = value; }
		}
		public bool has_m_score
		{
			get{ return _m_score.has_value; }
		}

		public uint m_res_lv
		{
			get{ return _m_res_lv.member_value; }
			set{ _m_res_lv.member_value = value; }
		}
		public bool has_m_res_lv
		{
			get{ return _m_res_lv.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_res.Serialize((uint)_m_res.member_value, ref out_stream);

			foreach(PlayerHeroInfo one_member_value in _m_hero_list.member_value)
			{
				count += _m_hero_list.Serialize(one_member_value, ref out_stream);
			}

			count += _m_hero_exp_base.Serialize(_m_hero_exp_base.member_value, ref out_stream);

			count += _m_hero_exp_card.Serialize(_m_hero_exp_card.member_value, ref out_stream);

			count += _m_hero_exp_union.Serialize(_m_hero_exp_union.member_value, ref out_stream);

			foreach(uint one_member_value in _m_item_ids.member_value)
			{
				count += _m_item_ids.Serialize(one_member_value, ref out_stream);
			}

			foreach(uint one_member_value in _m_item_count_base.member_value)
			{
				count += _m_item_count_base.Serialize(one_member_value, ref out_stream);
			}

			foreach(uint one_member_value in _m_item_count_card.member_value)
			{
				count += _m_item_count_card.Serialize(one_member_value, ref out_stream);
			}

			count += _m_score.Serialize(_m_score.member_value, ref out_stream);

			count += _m_res_lv.Serialize(_m_res_lv.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_res = 0;
			one_count = _m_res.ParseFrom(ref temp_m_res, ref int_stream);
			if (0 < one_count)
			{
					_m_res.member_value = (BattleSvrRes)temp_m_res;
					count = count + one_count;
			}

			while (true)
			{
				PlayerHeroInfo one_member_value = new PlayerHeroInfo();
				one_count = _m_hero_list.ParseFrom(one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_hero_list.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			uint temp_m_hero_exp_base = 0;
			one_count = _m_hero_exp_base.ParseFrom(ref temp_m_hero_exp_base, ref int_stream);
			if (0 < one_count)
			{
					_m_hero_exp_base.member_value = temp_m_hero_exp_base;
					count = count + one_count;
			}

			uint temp_m_hero_exp_card = 0;
			one_count = _m_hero_exp_card.ParseFrom(ref temp_m_hero_exp_card, ref int_stream);
			if (0 < one_count)
			{
					_m_hero_exp_card.member_value = temp_m_hero_exp_card;
					count = count + one_count;
			}

			uint temp_m_hero_exp_union = 0;
			one_count = _m_hero_exp_union.ParseFrom(ref temp_m_hero_exp_union, ref int_stream);
			if (0 < one_count)
			{
					_m_hero_exp_union.member_value = temp_m_hero_exp_union;
					count = count + one_count;
			}

			while (true)
			{
				uint one_member_value = 0;
				one_count = _m_item_ids.ParseFrom(ref one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_item_ids.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			while (true)
			{
				uint one_member_value = 0;
				one_count = _m_item_count_base.ParseFrom(ref one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_item_count_base.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			while (true)
			{
				uint one_member_value = 0;
				one_count = _m_item_count_card.ParseFrom(ref one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_item_count_card.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			uint temp_m_score = 0;
			one_count = _m_score.ParseFrom(ref temp_m_score, ref int_stream);
			if (0 < one_count)
			{
					_m_score.member_value = temp_m_score;
					count = count + one_count;
			}

			uint temp_m_res_lv = 0;
			one_count = _m_res_lv.ParseFrom(ref temp_m_res_lv, ref int_stream);
			if (0 < one_count)
			{
					_m_res_lv.member_value = temp_m_res_lv;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Client_PVE_HuntingChallenge_Mid_Broadcast : IMessage
	{
		private ProtoMemberUInt64 _m_update_time;	// 本次更新时服务器时间
		private ProtoMemberUInt32 _m_second;	// 剩余秒数
		private ProtoMemberUInt32 _m_score;	// 总积分

		public Msg_Logic2Client_PVE_HuntingChallenge_Mid_Broadcast()
		{
			_m_update_time = new ProtoMemberUInt64(1, true);
			_m_second = new ProtoMemberUInt32(2, true);
			_m_score = new ProtoMemberUInt32(3, true);
		}

		public Msg_Logic2Client_PVE_HuntingChallenge_Mid_Broadcast(ulong __m_update_time, uint __m_second, uint __m_score)
		{
			_m_update_time = new ProtoMemberUInt64(1, true);
			_m_update_time.member_value = __m_update_time;
			_m_second = new ProtoMemberUInt32(2, true);
			_m_second.member_value = __m_second;
			_m_score = new ProtoMemberUInt32(3, true);
			_m_score.member_value = __m_score;
		}

		public ulong m_update_time
		{
			get{ return _m_update_time.member_value; }
			set{ _m_update_time.member_value = value; }
		}
		public bool has_m_update_time
		{
			get{ return _m_update_time.has_value; }
		}

		public uint m_second
		{
			get{ return _m_second.member_value; }
			set{ _m_second.member_value = value; }
		}
		public bool has_m_second
		{
			get{ return _m_second.has_value; }
		}

		public uint m_score
		{
			get{ return _m_score.member_value; }
			set{ _m_score.member_value = value; }
		}
		public bool has_m_score
		{
			get{ return _m_score.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_update_time.Serialize(_m_update_time.member_value, ref out_stream);

			count += _m_second.Serialize(_m_second.member_value, ref out_stream);

			count += _m_score.Serialize(_m_score.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			ulong temp_m_update_time = 0;
			one_count = _m_update_time.ParseFrom(ref temp_m_update_time, ref int_stream);
			if (0 < one_count)
			{
					_m_update_time.member_value = temp_m_update_time;
					count = count + one_count;
			}

			uint temp_m_second = 0;
			one_count = _m_second.ParseFrom(ref temp_m_second, ref int_stream);
			if (0 < one_count)
			{
					_m_second.member_value = temp_m_second;
					count = count + one_count;
			}

			uint temp_m_score = 0;
			one_count = _m_score.ParseFrom(ref temp_m_score, ref int_stream);
			if (0 < one_count)
			{
					_m_score.member_value = temp_m_score;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Client_PVE_HuntingChapter_AttackEnd_Res : IMessage
	{
		private ProtoMemberEnum<BattleSvrRes> _m_res;	// 战斗结果（胜利/失败）
		private ProtoMemberEmbeddedList<PlayerHeroInfo> _m_hero_list;	// 英雄列表
		private ProtoMemberUInt32 _m_hero_exp_base;	// 基础经验
		private ProtoMemberUInt32 _m_hero_exp_card;	// 卡牌加成经验
		private ProtoMemberUInt32 _m_hero_exp_union;	// 公会加成经验
		private ProtoMemberUInt32List _m_item_ids;	// 道具列表
		private ProtoMemberUInt32List _m_item_count_base;	// 基础奖励
		private ProtoMemberUInt32List _m_item_count_card;	// 卡牌加成奖励
		private ProtoMemberUInt32 _m_chapter_id;	// 随机关卡id

		public Msg_Logic2Client_PVE_HuntingChapter_AttackEnd_Res()
		{
			_m_res = new ProtoMemberEnum<BattleSvrRes>(1, true);
			_m_hero_list = new ProtoMemberEmbeddedList<PlayerHeroInfo>(2, false);
			_m_hero_exp_base = new ProtoMemberUInt32(3, true);
			_m_hero_exp_card = new ProtoMemberUInt32(4, true);
			_m_hero_exp_union = new ProtoMemberUInt32(5, true);
			_m_item_ids = new ProtoMemberUInt32List(6, false);
			_m_item_count_base = new ProtoMemberUInt32List(7, false);
			_m_item_count_card = new ProtoMemberUInt32List(8, false);
			_m_chapter_id = new ProtoMemberUInt32(9, true);
		}

		public Msg_Logic2Client_PVE_HuntingChapter_AttackEnd_Res(BattleSvrRes __m_res, uint __m_hero_exp_base, uint __m_hero_exp_card, uint __m_hero_exp_union, uint __m_chapter_id)
		{
			_m_res = new ProtoMemberEnum<BattleSvrRes>(1, true);
			_m_res.member_value = __m_res;
			_m_hero_list = new ProtoMemberEmbeddedList<PlayerHeroInfo>(2, false);
			_m_hero_exp_base = new ProtoMemberUInt32(3, true);
			_m_hero_exp_base.member_value = __m_hero_exp_base;
			_m_hero_exp_card = new ProtoMemberUInt32(4, true);
			_m_hero_exp_card.member_value = __m_hero_exp_card;
			_m_hero_exp_union = new ProtoMemberUInt32(5, true);
			_m_hero_exp_union.member_value = __m_hero_exp_union;
			_m_item_ids = new ProtoMemberUInt32List(6, false);
			_m_item_count_base = new ProtoMemberUInt32List(7, false);
			_m_item_count_card = new ProtoMemberUInt32List(8, false);
			_m_chapter_id = new ProtoMemberUInt32(9, true);
			_m_chapter_id.member_value = __m_chapter_id;
		}

		public BattleSvrRes m_res
		{
			get{ return _m_res.member_value; }
			set{ _m_res.member_value = value; }
		}
		public bool has_m_res
		{
			get{ return _m_res.has_value; }
		}

		public System.Collections.Generic.List<PlayerHeroInfo> m_hero_list
		{
			get{ return _m_hero_list.member_value; }
		}
		public bool has_m_hero_list
		{
			get{ return _m_hero_list.has_value; }
		}

		public uint m_hero_exp_base
		{
			get{ return _m_hero_exp_base.member_value; }
			set{ _m_hero_exp_base.member_value = value; }
		}
		public bool has_m_hero_exp_base
		{
			get{ return _m_hero_exp_base.has_value; }
		}

		public uint m_hero_exp_card
		{
			get{ return _m_hero_exp_card.member_value; }
			set{ _m_hero_exp_card.member_value = value; }
		}
		public bool has_m_hero_exp_card
		{
			get{ return _m_hero_exp_card.has_value; }
		}

		public uint m_hero_exp_union
		{
			get{ return _m_hero_exp_union.member_value; }
			set{ _m_hero_exp_union.member_value = value; }
		}
		public bool has_m_hero_exp_union
		{
			get{ return _m_hero_exp_union.has_value; }
		}

		public System.Collections.Generic.List<uint> m_item_ids
		{
			get{ return _m_item_ids.member_value; }
		}
		public bool has_m_item_ids
		{
			get{ return _m_item_ids.has_value; }
		}

		public System.Collections.Generic.List<uint> m_item_count_base
		{
			get{ return _m_item_count_base.member_value; }
		}
		public bool has_m_item_count_base
		{
			get{ return _m_item_count_base.has_value; }
		}

		public System.Collections.Generic.List<uint> m_item_count_card
		{
			get{ return _m_item_count_card.member_value; }
		}
		public bool has_m_item_count_card
		{
			get{ return _m_item_count_card.has_value; }
		}

		public uint m_chapter_id
		{
			get{ return _m_chapter_id.member_value; }
			set{ _m_chapter_id.member_value = value; }
		}
		public bool has_m_chapter_id
		{
			get{ return _m_chapter_id.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_res.Serialize((uint)_m_res.member_value, ref out_stream);

			foreach(PlayerHeroInfo one_member_value in _m_hero_list.member_value)
			{
				count += _m_hero_list.Serialize(one_member_value, ref out_stream);
			}

			count += _m_hero_exp_base.Serialize(_m_hero_exp_base.member_value, ref out_stream);

			count += _m_hero_exp_card.Serialize(_m_hero_exp_card.member_value, ref out_stream);

			count += _m_hero_exp_union.Serialize(_m_hero_exp_union.member_value, ref out_stream);

			foreach(uint one_member_value in _m_item_ids.member_value)
			{
				count += _m_item_ids.Serialize(one_member_value, ref out_stream);
			}

			foreach(uint one_member_value in _m_item_count_base.member_value)
			{
				count += _m_item_count_base.Serialize(one_member_value, ref out_stream);
			}

			foreach(uint one_member_value in _m_item_count_card.member_value)
			{
				count += _m_item_count_card.Serialize(one_member_value, ref out_stream);
			}

			count += _m_chapter_id.Serialize(_m_chapter_id.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_res = 0;
			one_count = _m_res.ParseFrom(ref temp_m_res, ref int_stream);
			if (0 < one_count)
			{
					_m_res.member_value = (BattleSvrRes)temp_m_res;
					count = count + one_count;
			}

			while (true)
			{
				PlayerHeroInfo one_member_value = new PlayerHeroInfo();
				one_count = _m_hero_list.ParseFrom(one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_hero_list.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			uint temp_m_hero_exp_base = 0;
			one_count = _m_hero_exp_base.ParseFrom(ref temp_m_hero_exp_base, ref int_stream);
			if (0 < one_count)
			{
					_m_hero_exp_base.member_value = temp_m_hero_exp_base;
					count = count + one_count;
			}

			uint temp_m_hero_exp_card = 0;
			one_count = _m_hero_exp_card.ParseFrom(ref temp_m_hero_exp_card, ref int_stream);
			if (0 < one_count)
			{
					_m_hero_exp_card.member_value = temp_m_hero_exp_card;
					count = count + one_count;
			}

			uint temp_m_hero_exp_union = 0;
			one_count = _m_hero_exp_union.ParseFrom(ref temp_m_hero_exp_union, ref int_stream);
			if (0 < one_count)
			{
					_m_hero_exp_union.member_value = temp_m_hero_exp_union;
					count = count + one_count;
			}

			while (true)
			{
				uint one_member_value = 0;
				one_count = _m_item_ids.ParseFrom(ref one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_item_ids.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			while (true)
			{
				uint one_member_value = 0;
				one_count = _m_item_count_base.ParseFrom(ref one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_item_count_base.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			while (true)
			{
				uint one_member_value = 0;
				one_count = _m_item_count_card.ParseFrom(ref one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_item_count_card.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			uint temp_m_chapter_id = 0;
			one_count = _m_chapter_id.ParseFrom(ref temp_m_chapter_id, ref int_stream);
			if (0 < one_count)
			{
					_m_chapter_id.member_value = temp_m_chapter_id;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Client_PVE_HuntingTest_AttackEnd_Res : IMessage
	{
		private ProtoMemberUInt32 _m_test_id;	// 考试id
		private ProtoMemberEnum<BattleSvrRes> _m_res;	// 战斗结果（胜利/失败）
		private ProtoMemberUInt32 _m_star;	// 获得的星数
		private ProtoMemberUInt32 _m_lv;	// 新的狩猎等级
		private ProtoMemberEmbeddedList<PlayerHeroInfo> _m_update_hero_list;	// 更新英雄经验奖励（只有自己的，队友的按默认值显示）
		private ProtoMemberEmbedded<PlayerItemList> _m_update_items;	// 更新道具奖励

		public Msg_Logic2Client_PVE_HuntingTest_AttackEnd_Res()
		{
			_m_test_id = new ProtoMemberUInt32(1, true);
			_m_res = new ProtoMemberEnum<BattleSvrRes>(2, true);
			_m_star = new ProtoMemberUInt32(3, true);
			_m_lv = new ProtoMemberUInt32(4, true);
			_m_update_hero_list = new ProtoMemberEmbeddedList<PlayerHeroInfo>(5, false);
			_m_update_items = new ProtoMemberEmbedded<PlayerItemList>(6, false);
			_m_update_items.member_value = new PlayerItemList();
		}

		public Msg_Logic2Client_PVE_HuntingTest_AttackEnd_Res(uint __m_test_id, BattleSvrRes __m_res, uint __m_star, uint __m_lv)
		{
			_m_test_id = new ProtoMemberUInt32(1, true);
			_m_test_id.member_value = __m_test_id;
			_m_res = new ProtoMemberEnum<BattleSvrRes>(2, true);
			_m_res.member_value = __m_res;
			_m_star = new ProtoMemberUInt32(3, true);
			_m_star.member_value = __m_star;
			_m_lv = new ProtoMemberUInt32(4, true);
			_m_lv.member_value = __m_lv;
			_m_update_hero_list = new ProtoMemberEmbeddedList<PlayerHeroInfo>(5, false);
			_m_update_items = new ProtoMemberEmbedded<PlayerItemList>(6, false);
			_m_update_items.member_value = new PlayerItemList();
		}

		public uint m_test_id
		{
			get{ return _m_test_id.member_value; }
			set{ _m_test_id.member_value = value; }
		}
		public bool has_m_test_id
		{
			get{ return _m_test_id.has_value; }
		}

		public BattleSvrRes m_res
		{
			get{ return _m_res.member_value; }
			set{ _m_res.member_value = value; }
		}
		public bool has_m_res
		{
			get{ return _m_res.has_value; }
		}

		public uint m_star
		{
			get{ return _m_star.member_value; }
			set{ _m_star.member_value = value; }
		}
		public bool has_m_star
		{
			get{ return _m_star.has_value; }
		}

		public uint m_lv
		{
			get{ return _m_lv.member_value; }
			set{ _m_lv.member_value = value; }
		}
		public bool has_m_lv
		{
			get{ return _m_lv.has_value; }
		}

		public System.Collections.Generic.List<PlayerHeroInfo> m_update_hero_list
		{
			get{ return _m_update_hero_list.member_value; }
		}
		public bool has_m_update_hero_list
		{
			get{ return _m_update_hero_list.has_value; }
		}

		public PlayerItemList m_update_items
		{
			get{ return _m_update_items.member_value as PlayerItemList; }
			set{ _m_update_items.member_value = value; }
		}
		public bool has_m_update_items
		{
			get{ return _m_update_items.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_test_id.Serialize(_m_test_id.member_value, ref out_stream);

			count += _m_res.Serialize((uint)_m_res.member_value, ref out_stream);

			count += _m_star.Serialize(_m_star.member_value, ref out_stream);

			count += _m_lv.Serialize(_m_lv.member_value, ref out_stream);

			foreach(PlayerHeroInfo one_member_value in _m_update_hero_list.member_value)
			{
				count += _m_update_hero_list.Serialize(one_member_value, ref out_stream);
			}

			count += _m_update_items.Serialize(_m_update_items.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_test_id = 0;
			one_count = _m_test_id.ParseFrom(ref temp_m_test_id, ref int_stream);
			if (0 < one_count)
			{
					_m_test_id.member_value = temp_m_test_id;
					count = count + one_count;
			}

			uint temp_m_res = 0;
			one_count = _m_res.ParseFrom(ref temp_m_res, ref int_stream);
			if (0 < one_count)
			{
					_m_res.member_value = (BattleSvrRes)temp_m_res;
					count = count + one_count;
			}

			uint temp_m_star = 0;
			one_count = _m_star.ParseFrom(ref temp_m_star, ref int_stream);
			if (0 < one_count)
			{
					_m_star.member_value = temp_m_star;
					count = count + one_count;
			}

			uint temp_m_lv = 0;
			one_count = _m_lv.ParseFrom(ref temp_m_lv, ref int_stream);
			if (0 < one_count)
			{
					_m_lv.member_value = temp_m_lv;
					count = count + one_count;
			}

			while (true)
			{
				PlayerHeroInfo one_member_value = new PlayerHeroInfo();
				one_count = _m_update_hero_list.ParseFrom(one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_update_hero_list.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			PlayerItemList temp_m_update_items = new PlayerItemList();
			one_count = _m_update_items.ParseFrom(temp_m_update_items, ref int_stream);
			if (0 < one_count)
			{
					_m_update_items.member_value = temp_m_update_items;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Client_PVE_Hunting_AttackEnd_Res : IMessage
	{
		private ProtoMemberEnum<BattleSvrRes> _m_res;	// 战斗结果（胜利/失败）
		private ProtoMemberEmbeddedList<PlayerHeroInfo> _m_hero_list;	// 英雄列表
		private ProtoMemberUInt32 _m_hero_exp_base;	// 基础经验
		private ProtoMemberUInt32 _m_hero_exp_card;	// 卡牌加成经验
		private ProtoMemberUInt32 _m_hero_exp_union;	// 公会加成经验
		private ProtoMemberUInt32List _m_item_ids;	// 道具列表
		private ProtoMemberUInt32List _m_item_count_base;	// 基础奖励
		private ProtoMemberUInt32List _m_item_count_card;	// 卡牌加成奖励

		public Msg_Logic2Client_PVE_Hunting_AttackEnd_Res()
		{
			_m_res = new ProtoMemberEnum<BattleSvrRes>(1, true);
			_m_hero_list = new ProtoMemberEmbeddedList<PlayerHeroInfo>(2, false);
			_m_hero_exp_base = new ProtoMemberUInt32(3, true);
			_m_hero_exp_card = new ProtoMemberUInt32(4, true);
			_m_hero_exp_union = new ProtoMemberUInt32(5, true);
			_m_item_ids = new ProtoMemberUInt32List(6, false);
			_m_item_count_base = new ProtoMemberUInt32List(7, false);
			_m_item_count_card = new ProtoMemberUInt32List(8, false);
		}

		public Msg_Logic2Client_PVE_Hunting_AttackEnd_Res(BattleSvrRes __m_res, uint __m_hero_exp_base, uint __m_hero_exp_card, uint __m_hero_exp_union)
		{
			_m_res = new ProtoMemberEnum<BattleSvrRes>(1, true);
			_m_res.member_value = __m_res;
			_m_hero_list = new ProtoMemberEmbeddedList<PlayerHeroInfo>(2, false);
			_m_hero_exp_base = new ProtoMemberUInt32(3, true);
			_m_hero_exp_base.member_value = __m_hero_exp_base;
			_m_hero_exp_card = new ProtoMemberUInt32(4, true);
			_m_hero_exp_card.member_value = __m_hero_exp_card;
			_m_hero_exp_union = new ProtoMemberUInt32(5, true);
			_m_hero_exp_union.member_value = __m_hero_exp_union;
			_m_item_ids = new ProtoMemberUInt32List(6, false);
			_m_item_count_base = new ProtoMemberUInt32List(7, false);
			_m_item_count_card = new ProtoMemberUInt32List(8, false);
		}

		public BattleSvrRes m_res
		{
			get{ return _m_res.member_value; }
			set{ _m_res.member_value = value; }
		}
		public bool has_m_res
		{
			get{ return _m_res.has_value; }
		}

		public System.Collections.Generic.List<PlayerHeroInfo> m_hero_list
		{
			get{ return _m_hero_list.member_value; }
		}
		public bool has_m_hero_list
		{
			get{ return _m_hero_list.has_value; }
		}

		public uint m_hero_exp_base
		{
			get{ return _m_hero_exp_base.member_value; }
			set{ _m_hero_exp_base.member_value = value; }
		}
		public bool has_m_hero_exp_base
		{
			get{ return _m_hero_exp_base.has_value; }
		}

		public uint m_hero_exp_card
		{
			get{ return _m_hero_exp_card.member_value; }
			set{ _m_hero_exp_card.member_value = value; }
		}
		public bool has_m_hero_exp_card
		{
			get{ return _m_hero_exp_card.has_value; }
		}

		public uint m_hero_exp_union
		{
			get{ return _m_hero_exp_union.member_value; }
			set{ _m_hero_exp_union.member_value = value; }
		}
		public bool has_m_hero_exp_union
		{
			get{ return _m_hero_exp_union.has_value; }
		}

		public System.Collections.Generic.List<uint> m_item_ids
		{
			get{ return _m_item_ids.member_value; }
		}
		public bool has_m_item_ids
		{
			get{ return _m_item_ids.has_value; }
		}

		public System.Collections.Generic.List<uint> m_item_count_base
		{
			get{ return _m_item_count_base.member_value; }
		}
		public bool has_m_item_count_base
		{
			get{ return _m_item_count_base.has_value; }
		}

		public System.Collections.Generic.List<uint> m_item_count_card
		{
			get{ return _m_item_count_card.member_value; }
		}
		public bool has_m_item_count_card
		{
			get{ return _m_item_count_card.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_res.Serialize((uint)_m_res.member_value, ref out_stream);

			foreach(PlayerHeroInfo one_member_value in _m_hero_list.member_value)
			{
				count += _m_hero_list.Serialize(one_member_value, ref out_stream);
			}

			count += _m_hero_exp_base.Serialize(_m_hero_exp_base.member_value, ref out_stream);

			count += _m_hero_exp_card.Serialize(_m_hero_exp_card.member_value, ref out_stream);

			count += _m_hero_exp_union.Serialize(_m_hero_exp_union.member_value, ref out_stream);

			foreach(uint one_member_value in _m_item_ids.member_value)
			{
				count += _m_item_ids.Serialize(one_member_value, ref out_stream);
			}

			foreach(uint one_member_value in _m_item_count_base.member_value)
			{
				count += _m_item_count_base.Serialize(one_member_value, ref out_stream);
			}

			foreach(uint one_member_value in _m_item_count_card.member_value)
			{
				count += _m_item_count_card.Serialize(one_member_value, ref out_stream);
			}

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_res = 0;
			one_count = _m_res.ParseFrom(ref temp_m_res, ref int_stream);
			if (0 < one_count)
			{
					_m_res.member_value = (BattleSvrRes)temp_m_res;
					count = count + one_count;
			}

			while (true)
			{
				PlayerHeroInfo one_member_value = new PlayerHeroInfo();
				one_count = _m_hero_list.ParseFrom(one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_hero_list.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			uint temp_m_hero_exp_base = 0;
			one_count = _m_hero_exp_base.ParseFrom(ref temp_m_hero_exp_base, ref int_stream);
			if (0 < one_count)
			{
					_m_hero_exp_base.member_value = temp_m_hero_exp_base;
					count = count + one_count;
			}

			uint temp_m_hero_exp_card = 0;
			one_count = _m_hero_exp_card.ParseFrom(ref temp_m_hero_exp_card, ref int_stream);
			if (0 < one_count)
			{
					_m_hero_exp_card.member_value = temp_m_hero_exp_card;
					count = count + one_count;
			}

			uint temp_m_hero_exp_union = 0;
			one_count = _m_hero_exp_union.ParseFrom(ref temp_m_hero_exp_union, ref int_stream);
			if (0 < one_count)
			{
					_m_hero_exp_union.member_value = temp_m_hero_exp_union;
					count = count + one_count;
			}

			while (true)
			{
				uint one_member_value = 0;
				one_count = _m_item_ids.ParseFrom(ref one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_item_ids.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			while (true)
			{
				uint one_member_value = 0;
				one_count = _m_item_count_base.ParseFrom(ref one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_item_count_base.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			while (true)
			{
				uint one_member_value = 0;
				one_count = _m_item_count_card.ParseFrom(ref one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_item_count_card.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			return count;
		}
	}

	public class Msg_Logic2Client_PVE_InviteFriend_Res : IMessage
	{
		private ProtoMemberUInt32 _m_friend_account_id;	// 被邀请的玩家id
		private ProtoMemberUInt32 _m_friend_server_id;	// 被邀请的玩家所属服id
		private ProtoMemberUInt32 _m_res;	// 邀请结果，（比如玩家已经处于队伍中，不能被邀请）（LogicRes）

		public Msg_Logic2Client_PVE_InviteFriend_Res()
		{
			_m_friend_account_id = new ProtoMemberUInt32(1, true);
			_m_friend_server_id = new ProtoMemberUInt32(2, true);
			_m_res = new ProtoMemberUInt32(3, true);
		}

		public Msg_Logic2Client_PVE_InviteFriend_Res(uint __m_friend_account_id, uint __m_friend_server_id, uint __m_res)
		{
			_m_friend_account_id = new ProtoMemberUInt32(1, true);
			_m_friend_account_id.member_value = __m_friend_account_id;
			_m_friend_server_id = new ProtoMemberUInt32(2, true);
			_m_friend_server_id.member_value = __m_friend_server_id;
			_m_res = new ProtoMemberUInt32(3, true);
			_m_res.member_value = __m_res;
		}

		public uint m_friend_account_id
		{
			get{ return _m_friend_account_id.member_value; }
			set{ _m_friend_account_id.member_value = value; }
		}
		public bool has_m_friend_account_id
		{
			get{ return _m_friend_account_id.has_value; }
		}

		public uint m_friend_server_id
		{
			get{ return _m_friend_server_id.member_value; }
			set{ _m_friend_server_id.member_value = value; }
		}
		public bool has_m_friend_server_id
		{
			get{ return _m_friend_server_id.has_value; }
		}

		public uint m_res
		{
			get{ return _m_res.member_value; }
			set{ _m_res.member_value = value; }
		}
		public bool has_m_res
		{
			get{ return _m_res.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_friend_account_id.Serialize(_m_friend_account_id.member_value, ref out_stream);

			count += _m_friend_server_id.Serialize(_m_friend_server_id.member_value, ref out_stream);

			count += _m_res.Serialize(_m_res.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_friend_account_id = 0;
			one_count = _m_friend_account_id.ParseFrom(ref temp_m_friend_account_id, ref int_stream);
			if (0 < one_count)
			{
					_m_friend_account_id.member_value = temp_m_friend_account_id;
					count = count + one_count;
			}

			uint temp_m_friend_server_id = 0;
			one_count = _m_friend_server_id.ParseFrom(ref temp_m_friend_server_id, ref int_stream);
			if (0 < one_count)
			{
					_m_friend_server_id.member_value = temp_m_friend_server_id;
					count = count + one_count;
			}

			uint temp_m_res = 0;
			one_count = _m_res.ParseFrom(ref temp_m_res, ref int_stream);
			if (0 < one_count)
			{
					_m_res.member_value = temp_m_res;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Client_PVE_InviteGuest_Res : IMessage
	{
		private ProtoMemberUInt32 _m_friend_account_id;	// 被邀请的玩家id
		private ProtoMemberUInt32 _m_friend_server_id;	// 被邀请的玩家所属服id
		private ProtoMemberUInt32 _m_res;	// 邀请结果（LogicRes）

		public Msg_Logic2Client_PVE_InviteGuest_Res()
		{
			_m_friend_account_id = new ProtoMemberUInt32(1, true);
			_m_friend_server_id = new ProtoMemberUInt32(2, true);
			_m_res = new ProtoMemberUInt32(3, true);
		}

		public Msg_Logic2Client_PVE_InviteGuest_Res(uint __m_friend_account_id, uint __m_friend_server_id, uint __m_res)
		{
			_m_friend_account_id = new ProtoMemberUInt32(1, true);
			_m_friend_account_id.member_value = __m_friend_account_id;
			_m_friend_server_id = new ProtoMemberUInt32(2, true);
			_m_friend_server_id.member_value = __m_friend_server_id;
			_m_res = new ProtoMemberUInt32(3, true);
			_m_res.member_value = __m_res;
		}

		public uint m_friend_account_id
		{
			get{ return _m_friend_account_id.member_value; }
			set{ _m_friend_account_id.member_value = value; }
		}
		public bool has_m_friend_account_id
		{
			get{ return _m_friend_account_id.has_value; }
		}

		public uint m_friend_server_id
		{
			get{ return _m_friend_server_id.member_value; }
			set{ _m_friend_server_id.member_value = value; }
		}
		public bool has_m_friend_server_id
		{
			get{ return _m_friend_server_id.has_value; }
		}

		public uint m_res
		{
			get{ return _m_res.member_value; }
			set{ _m_res.member_value = value; }
		}
		public bool has_m_res
		{
			get{ return _m_res.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_friend_account_id.Serialize(_m_friend_account_id.member_value, ref out_stream);

			count += _m_friend_server_id.Serialize(_m_friend_server_id.member_value, ref out_stream);

			count += _m_res.Serialize(_m_res.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_friend_account_id = 0;
			one_count = _m_friend_account_id.ParseFrom(ref temp_m_friend_account_id, ref int_stream);
			if (0 < one_count)
			{
					_m_friend_account_id.member_value = temp_m_friend_account_id;
					count = count + one_count;
			}

			uint temp_m_friend_server_id = 0;
			one_count = _m_friend_server_id.ParseFrom(ref temp_m_friend_server_id, ref int_stream);
			if (0 < one_count)
			{
					_m_friend_server_id.member_value = temp_m_friend_server_id;
					count = count + one_count;
			}

			uint temp_m_res = 0;
			one_count = _m_res.ParseFrom(ref temp_m_res, ref int_stream);
			if (0 < one_count)
			{
					_m_res.member_value = temp_m_res;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Client_PVE_JoinTeam_Res : IMessage
	{
		private ProtoMemberUInt32 _m_res;	// 加入结果（LogicRes）

		public Msg_Logic2Client_PVE_JoinTeam_Res()
		{
			_m_res = new ProtoMemberUInt32(1, true);
		}

		public Msg_Logic2Client_PVE_JoinTeam_Res(uint __m_res)
		{
			_m_res = new ProtoMemberUInt32(1, true);
			_m_res.member_value = __m_res;
		}

		public uint m_res
		{
			get{ return _m_res.member_value; }
			set{ _m_res.member_value = value; }
		}
		public bool has_m_res
		{
			get{ return _m_res.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_res.Serialize(_m_res.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_res = 0;
			one_count = _m_res.ParseFrom(ref temp_m_res, ref int_stream);
			if (0 < one_count)
			{
					_m_res.member_value = temp_m_res;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Client_PVE_KickTeam_Broadcast : IMessage
	{
		private ProtoMemberUInt32 _m_kick_account_id;	// 被踢出的玩家id
		private ProtoMemberUInt32 _m_kick_server_id;	// 被踢出的玩家所属服id

		public Msg_Logic2Client_PVE_KickTeam_Broadcast()
		{
			_m_kick_account_id = new ProtoMemberUInt32(1, true);
			_m_kick_server_id = new ProtoMemberUInt32(2, true);
		}

		public Msg_Logic2Client_PVE_KickTeam_Broadcast(uint __m_kick_account_id, uint __m_kick_server_id)
		{
			_m_kick_account_id = new ProtoMemberUInt32(1, true);
			_m_kick_account_id.member_value = __m_kick_account_id;
			_m_kick_server_id = new ProtoMemberUInt32(2, true);
			_m_kick_server_id.member_value = __m_kick_server_id;
		}

		public uint m_kick_account_id
		{
			get{ return _m_kick_account_id.member_value; }
			set{ _m_kick_account_id.member_value = value; }
		}
		public bool has_m_kick_account_id
		{
			get{ return _m_kick_account_id.has_value; }
		}

		public uint m_kick_server_id
		{
			get{ return _m_kick_server_id.member_value; }
			set{ _m_kick_server_id.member_value = value; }
		}
		public bool has_m_kick_server_id
		{
			get{ return _m_kick_server_id.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_kick_account_id.Serialize(_m_kick_account_id.member_value, ref out_stream);

			count += _m_kick_server_id.Serialize(_m_kick_server_id.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_kick_account_id = 0;
			one_count = _m_kick_account_id.ParseFrom(ref temp_m_kick_account_id, ref int_stream);
			if (0 < one_count)
			{
					_m_kick_account_id.member_value = temp_m_kick_account_id;
					count = count + one_count;
			}

			uint temp_m_kick_server_id = 0;
			one_count = _m_kick_server_id.ParseFrom(ref temp_m_kick_server_id, ref int_stream);
			if (0 < one_count)
			{
					_m_kick_server_id.member_value = temp_m_kick_server_id;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Client_PVE_Refuse_Res : IMessage
	{
		private ProtoMemberUInt32 _m_friend_account_id;	// 被邀请的玩家id
		private ProtoMemberUInt32 _m_friend_server_id;	// 被邀请的玩家所属服id
		private ProtoMemberUInt32 _m_res;	// 拒绝理由（客户端自定义枚举）

		public Msg_Logic2Client_PVE_Refuse_Res()
		{
			_m_friend_account_id = new ProtoMemberUInt32(1, true);
			_m_friend_server_id = new ProtoMemberUInt32(2, true);
			_m_res = new ProtoMemberUInt32(3, true);
		}

		public Msg_Logic2Client_PVE_Refuse_Res(uint __m_friend_account_id, uint __m_friend_server_id, uint __m_res)
		{
			_m_friend_account_id = new ProtoMemberUInt32(1, true);
			_m_friend_account_id.member_value = __m_friend_account_id;
			_m_friend_server_id = new ProtoMemberUInt32(2, true);
			_m_friend_server_id.member_value = __m_friend_server_id;
			_m_res = new ProtoMemberUInt32(3, true);
			_m_res.member_value = __m_res;
		}

		public uint m_friend_account_id
		{
			get{ return _m_friend_account_id.member_value; }
			set{ _m_friend_account_id.member_value = value; }
		}
		public bool has_m_friend_account_id
		{
			get{ return _m_friend_account_id.has_value; }
		}

		public uint m_friend_server_id
		{
			get{ return _m_friend_server_id.member_value; }
			set{ _m_friend_server_id.member_value = value; }
		}
		public bool has_m_friend_server_id
		{
			get{ return _m_friend_server_id.has_value; }
		}

		public uint m_res
		{
			get{ return _m_res.member_value; }
			set{ _m_res.member_value = value; }
		}
		public bool has_m_res
		{
			get{ return _m_res.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_friend_account_id.Serialize(_m_friend_account_id.member_value, ref out_stream);

			count += _m_friend_server_id.Serialize(_m_friend_server_id.member_value, ref out_stream);

			count += _m_res.Serialize(_m_res.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_friend_account_id = 0;
			one_count = _m_friend_account_id.ParseFrom(ref temp_m_friend_account_id, ref int_stream);
			if (0 < one_count)
			{
					_m_friend_account_id.member_value = temp_m_friend_account_id;
					count = count + one_count;
			}

			uint temp_m_friend_server_id = 0;
			one_count = _m_friend_server_id.ParseFrom(ref temp_m_friend_server_id, ref int_stream);
			if (0 < one_count)
			{
					_m_friend_server_id.member_value = temp_m_friend_server_id;
					count = count + one_count;
			}

			uint temp_m_res = 0;
			one_count = _m_res.ParseFrom(ref temp_m_res, ref int_stream);
			if (0 < one_count)
			{
					_m_res.member_value = temp_m_res;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Client_PVE_TeamInfo_Broadcast : IMessage
	{
		private ProtoMemberEmbedded<PlayerTeam> _m_team;	// 队伍信息

		public Msg_Logic2Client_PVE_TeamInfo_Broadcast()
		{
			_m_team = new ProtoMemberEmbedded<PlayerTeam>(1, true);
			_m_team.member_value = new PlayerTeam();
		}

		public PlayerTeam m_team
		{
			get{ return _m_team.member_value as PlayerTeam; }
			set{ _m_team.member_value = value; }
		}
		public bool has_m_team
		{
			get{ return _m_team.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_team.Serialize(_m_team.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			PlayerTeam temp_m_team = new PlayerTeam();
			one_count = _m_team.ParseFrom(temp_m_team, ref int_stream);
			if (0 < one_count)
			{
					_m_team.member_value = temp_m_team;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Client_PVP_BattleField_MidExit_Res : IMessage
	{
		private ProtoMemberUInt64 _m_last_midexit;	// 中途退出时间

		public Msg_Logic2Client_PVP_BattleField_MidExit_Res()
		{
			_m_last_midexit = new ProtoMemberUInt64(1, true);
		}

		public Msg_Logic2Client_PVP_BattleField_MidExit_Res(ulong __m_last_midexit)
		{
			_m_last_midexit = new ProtoMemberUInt64(1, true);
			_m_last_midexit.member_value = __m_last_midexit;
		}

		public ulong m_last_midexit
		{
			get{ return _m_last_midexit.member_value; }
			set{ _m_last_midexit.member_value = value; }
		}
		public bool has_m_last_midexit
		{
			get{ return _m_last_midexit.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_last_midexit.Serialize(_m_last_midexit.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			ulong temp_m_last_midexit = 0;
			one_count = _m_last_midexit.ParseFrom(ref temp_m_last_midexit, ref int_stream);
			if (0 < one_count)
			{
					_m_last_midexit.member_value = temp_m_last_midexit;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Client_PVP_Chess_AttackEnd_Res : IMessage
	{
		private ProtoMemberEnum<BattleSvrRes> _m_res;	// 战斗结果（胜利/失败）
		private ProtoMemberUInt32 _m_used_time;	// 本局使用的时间
		private ProtoMemberUInt32 _m_used_dice;	// 本局使用的骰子数
		private ProtoMemberUInt32 _m_res_lv;	// 本局战斗结果评级
		private ProtoMemberUInt32 _m_lv;	// 召唤师等级
		private ProtoMemberUInt32 _m_exp;	// 召唤师经验
		private ProtoMemberEmbedded<PlayerItemList> _m_update_items;	// 更新道具奖励
		private ProtoMemberEmbedded<PlayerStarChessInfo> _m_update_star_chess;	// 更新星空迷棋积分

		public Msg_Logic2Client_PVP_Chess_AttackEnd_Res()
		{
			_m_res = new ProtoMemberEnum<BattleSvrRes>(1, true);
			_m_used_time = new ProtoMemberUInt32(2, true);
			_m_used_dice = new ProtoMemberUInt32(3, true);
			_m_res_lv = new ProtoMemberUInt32(4, true);
			_m_lv = new ProtoMemberUInt32(5, true);
			_m_exp = new ProtoMemberUInt32(6, true);
			_m_update_items = new ProtoMemberEmbedded<PlayerItemList>(7, false);
			_m_update_items.member_value = new PlayerItemList();
			_m_update_star_chess = new ProtoMemberEmbedded<PlayerStarChessInfo>(8, true);
			_m_update_star_chess.member_value = new PlayerStarChessInfo();
		}

		public Msg_Logic2Client_PVP_Chess_AttackEnd_Res(BattleSvrRes __m_res, uint __m_used_time, uint __m_used_dice, uint __m_res_lv, uint __m_lv, uint __m_exp)
		{
			_m_res = new ProtoMemberEnum<BattleSvrRes>(1, true);
			_m_res.member_value = __m_res;
			_m_used_time = new ProtoMemberUInt32(2, true);
			_m_used_time.member_value = __m_used_time;
			_m_used_dice = new ProtoMemberUInt32(3, true);
			_m_used_dice.member_value = __m_used_dice;
			_m_res_lv = new ProtoMemberUInt32(4, true);
			_m_res_lv.member_value = __m_res_lv;
			_m_lv = new ProtoMemberUInt32(5, true);
			_m_lv.member_value = __m_lv;
			_m_exp = new ProtoMemberUInt32(6, true);
			_m_exp.member_value = __m_exp;
			_m_update_items = new ProtoMemberEmbedded<PlayerItemList>(7, false);
			_m_update_items.member_value = new PlayerItemList();
			_m_update_star_chess = new ProtoMemberEmbedded<PlayerStarChessInfo>(8, true);
			_m_update_star_chess.member_value = new PlayerStarChessInfo();
		}

		public BattleSvrRes m_res
		{
			get{ return _m_res.member_value; }
			set{ _m_res.member_value = value; }
		}
		public bool has_m_res
		{
			get{ return _m_res.has_value; }
		}

		public uint m_used_time
		{
			get{ return _m_used_time.member_value; }
			set{ _m_used_time.member_value = value; }
		}
		public bool has_m_used_time
		{
			get{ return _m_used_time.has_value; }
		}

		public uint m_used_dice
		{
			get{ return _m_used_dice.member_value; }
			set{ _m_used_dice.member_value = value; }
		}
		public bool has_m_used_dice
		{
			get{ return _m_used_dice.has_value; }
		}

		public uint m_res_lv
		{
			get{ return _m_res_lv.member_value; }
			set{ _m_res_lv.member_value = value; }
		}
		public bool has_m_res_lv
		{
			get{ return _m_res_lv.has_value; }
		}

		public uint m_lv
		{
			get{ return _m_lv.member_value; }
			set{ _m_lv.member_value = value; }
		}
		public bool has_m_lv
		{
			get{ return _m_lv.has_value; }
		}

		public uint m_exp
		{
			get{ return _m_exp.member_value; }
			set{ _m_exp.member_value = value; }
		}
		public bool has_m_exp
		{
			get{ return _m_exp.has_value; }
		}

		public PlayerItemList m_update_items
		{
			get{ return _m_update_items.member_value as PlayerItemList; }
			set{ _m_update_items.member_value = value; }
		}
		public bool has_m_update_items
		{
			get{ return _m_update_items.has_value; }
		}

		public PlayerStarChessInfo m_update_star_chess
		{
			get{ return _m_update_star_chess.member_value as PlayerStarChessInfo; }
			set{ _m_update_star_chess.member_value = value; }
		}
		public bool has_m_update_star_chess
		{
			get{ return _m_update_star_chess.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_res.Serialize((uint)_m_res.member_value, ref out_stream);

			count += _m_used_time.Serialize(_m_used_time.member_value, ref out_stream);

			count += _m_used_dice.Serialize(_m_used_dice.member_value, ref out_stream);

			count += _m_res_lv.Serialize(_m_res_lv.member_value, ref out_stream);

			count += _m_lv.Serialize(_m_lv.member_value, ref out_stream);

			count += _m_exp.Serialize(_m_exp.member_value, ref out_stream);

			count += _m_update_items.Serialize(_m_update_items.member_value, ref out_stream);

			count += _m_update_star_chess.Serialize(_m_update_star_chess.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_res = 0;
			one_count = _m_res.ParseFrom(ref temp_m_res, ref int_stream);
			if (0 < one_count)
			{
					_m_res.member_value = (BattleSvrRes)temp_m_res;
					count = count + one_count;
			}

			uint temp_m_used_time = 0;
			one_count = _m_used_time.ParseFrom(ref temp_m_used_time, ref int_stream);
			if (0 < one_count)
			{
					_m_used_time.member_value = temp_m_used_time;
					count = count + one_count;
			}

			uint temp_m_used_dice = 0;
			one_count = _m_used_dice.ParseFrom(ref temp_m_used_dice, ref int_stream);
			if (0 < one_count)
			{
					_m_used_dice.member_value = temp_m_used_dice;
					count = count + one_count;
			}

			uint temp_m_res_lv = 0;
			one_count = _m_res_lv.ParseFrom(ref temp_m_res_lv, ref int_stream);
			if (0 < one_count)
			{
					_m_res_lv.member_value = temp_m_res_lv;
					count = count + one_count;
			}

			uint temp_m_lv = 0;
			one_count = _m_lv.ParseFrom(ref temp_m_lv, ref int_stream);
			if (0 < one_count)
			{
					_m_lv.member_value = temp_m_lv;
					count = count + one_count;
			}

			uint temp_m_exp = 0;
			one_count = _m_exp.ParseFrom(ref temp_m_exp, ref int_stream);
			if (0 < one_count)
			{
					_m_exp.member_value = temp_m_exp;
					count = count + one_count;
			}

			PlayerItemList temp_m_update_items = new PlayerItemList();
			one_count = _m_update_items.ParseFrom(temp_m_update_items, ref int_stream);
			if (0 < one_count)
			{
					_m_update_items.member_value = temp_m_update_items;
					count = count + one_count;
			}

			PlayerStarChessInfo temp_m_update_star_chess = new PlayerStarChessInfo();
			one_count = _m_update_star_chess.ParseFrom(temp_m_update_star_chess, ref int_stream);
			if (0 < one_count)
			{
					_m_update_star_chess.member_value = temp_m_update_star_chess;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Client_PVP_IndianaJones_AttackEnd_Res : IMessage
	{
		private ProtoMemberEnum<BattleSvrRes> _m_res;	// 战斗结果（胜利/失败）

		public Msg_Logic2Client_PVP_IndianaJones_AttackEnd_Res()
		{
			_m_res = new ProtoMemberEnum<BattleSvrRes>(1, true);
		}

		public Msg_Logic2Client_PVP_IndianaJones_AttackEnd_Res(BattleSvrRes __m_res)
		{
			_m_res = new ProtoMemberEnum<BattleSvrRes>(1, true);
			_m_res.member_value = __m_res;
		}

		public BattleSvrRes m_res
		{
			get{ return _m_res.member_value; }
			set{ _m_res.member_value = value; }
		}
		public bool has_m_res
		{
			get{ return _m_res.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_res.Serialize((uint)_m_res.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_res = 0;
			one_count = _m_res.ParseFrom(ref temp_m_res, ref int_stream);
			if (0 < one_count)
			{
					_m_res.member_value = (BattleSvrRes)temp_m_res;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Client_PVP_Match_AttackEnd_Res : IMessage
	{
		private ProtoMemberEnum<BattleSvrRes> _m_res;	// 战斗结果（胜利/失败）
		private ProtoMemberUInt32 _m_star;	// 获得的星数
		private ProtoMemberEmbedded<PlayerPVPMatch> _m_update_pvp_match;	// 更新匹配段位积分

		public Msg_Logic2Client_PVP_Match_AttackEnd_Res()
		{
			_m_res = new ProtoMemberEnum<BattleSvrRes>(1, true);
			_m_star = new ProtoMemberUInt32(2, true);
			_m_update_pvp_match = new ProtoMemberEmbedded<PlayerPVPMatch>(3, true);
			_m_update_pvp_match.member_value = new PlayerPVPMatch();
		}

		public Msg_Logic2Client_PVP_Match_AttackEnd_Res(BattleSvrRes __m_res, uint __m_star)
		{
			_m_res = new ProtoMemberEnum<BattleSvrRes>(1, true);
			_m_res.member_value = __m_res;
			_m_star = new ProtoMemberUInt32(2, true);
			_m_star.member_value = __m_star;
			_m_update_pvp_match = new ProtoMemberEmbedded<PlayerPVPMatch>(3, true);
			_m_update_pvp_match.member_value = new PlayerPVPMatch();
		}

		public BattleSvrRes m_res
		{
			get{ return _m_res.member_value; }
			set{ _m_res.member_value = value; }
		}
		public bool has_m_res
		{
			get{ return _m_res.has_value; }
		}

		public uint m_star
		{
			get{ return _m_star.member_value; }
			set{ _m_star.member_value = value; }
		}
		public bool has_m_star
		{
			get{ return _m_star.has_value; }
		}

		public PlayerPVPMatch m_update_pvp_match
		{
			get{ return _m_update_pvp_match.member_value as PlayerPVPMatch; }
			set{ _m_update_pvp_match.member_value = value; }
		}
		public bool has_m_update_pvp_match
		{
			get{ return _m_update_pvp_match.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_res.Serialize((uint)_m_res.member_value, ref out_stream);

			count += _m_star.Serialize(_m_star.member_value, ref out_stream);

			count += _m_update_pvp_match.Serialize(_m_update_pvp_match.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_res = 0;
			one_count = _m_res.ParseFrom(ref temp_m_res, ref int_stream);
			if (0 < one_count)
			{
					_m_res.member_value = (BattleSvrRes)temp_m_res;
					count = count + one_count;
			}

			uint temp_m_star = 0;
			one_count = _m_star.ParseFrom(ref temp_m_star, ref int_stream);
			if (0 < one_count)
			{
					_m_star.member_value = temp_m_star;
					count = count + one_count;
			}

			PlayerPVPMatch temp_m_update_pvp_match = new PlayerPVPMatch();
			one_count = _m_update_pvp_match.ParseFrom(temp_m_update_pvp_match, ref int_stream);
			if (0 < one_count)
			{
					_m_update_pvp_match.member_value = temp_m_update_pvp_match;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Client_PVP_Match_Begin_Broadcast : IMessage
	{
		private ProtoMemberUInt32 _m_play_model;	// 玩法id（PlayerTeamType）

		public Msg_Logic2Client_PVP_Match_Begin_Broadcast()
		{
			_m_play_model = new ProtoMemberUInt32(1, true);
		}

		public Msg_Logic2Client_PVP_Match_Begin_Broadcast(uint __m_play_model)
		{
			_m_play_model = new ProtoMemberUInt32(1, true);
			_m_play_model.member_value = __m_play_model;
		}

		public uint m_play_model
		{
			get{ return _m_play_model.member_value; }
			set{ _m_play_model.member_value = value; }
		}
		public bool has_m_play_model
		{
			get{ return _m_play_model.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_play_model.Serialize(_m_play_model.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_play_model = 0;
			one_count = _m_play_model.ParseFrom(ref temp_m_play_model, ref int_stream);
			if (0 < one_count)
			{
					_m_play_model.member_value = temp_m_play_model;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Client_PVP_MoutainKing_AttackEnd_Res : IMessage
	{
		private ProtoMemberEnum<BattleSvrRes> _m_res;	// 战斗结果（胜利/失败）
		private ProtoMemberUInt32 _m_star;	// 获得的星数
		private ProtoMemberEmbedded<PlayerMoutainKingInfo> _m_update_moutain_king;	// 更新山丘之王信息

		public Msg_Logic2Client_PVP_MoutainKing_AttackEnd_Res()
		{
			_m_res = new ProtoMemberEnum<BattleSvrRes>(1, true);
			_m_star = new ProtoMemberUInt32(2, true);
			_m_update_moutain_king = new ProtoMemberEmbedded<PlayerMoutainKingInfo>(3, true);
			_m_update_moutain_king.member_value = new PlayerMoutainKingInfo();
		}

		public Msg_Logic2Client_PVP_MoutainKing_AttackEnd_Res(BattleSvrRes __m_res, uint __m_star)
		{
			_m_res = new ProtoMemberEnum<BattleSvrRes>(1, true);
			_m_res.member_value = __m_res;
			_m_star = new ProtoMemberUInt32(2, true);
			_m_star.member_value = __m_star;
			_m_update_moutain_king = new ProtoMemberEmbedded<PlayerMoutainKingInfo>(3, true);
			_m_update_moutain_king.member_value = new PlayerMoutainKingInfo();
		}

		public BattleSvrRes m_res
		{
			get{ return _m_res.member_value; }
			set{ _m_res.member_value = value; }
		}
		public bool has_m_res
		{
			get{ return _m_res.has_value; }
		}

		public uint m_star
		{
			get{ return _m_star.member_value; }
			set{ _m_star.member_value = value; }
		}
		public bool has_m_star
		{
			get{ return _m_star.has_value; }
		}

		public PlayerMoutainKingInfo m_update_moutain_king
		{
			get{ return _m_update_moutain_king.member_value as PlayerMoutainKingInfo; }
			set{ _m_update_moutain_king.member_value = value; }
		}
		public bool has_m_update_moutain_king
		{
			get{ return _m_update_moutain_king.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_res.Serialize((uint)_m_res.member_value, ref out_stream);

			count += _m_star.Serialize(_m_star.member_value, ref out_stream);

			count += _m_update_moutain_king.Serialize(_m_update_moutain_king.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_res = 0;
			one_count = _m_res.ParseFrom(ref temp_m_res, ref int_stream);
			if (0 < one_count)
			{
					_m_res.member_value = (BattleSvrRes)temp_m_res;
					count = count + one_count;
			}

			uint temp_m_star = 0;
			one_count = _m_star.ParseFrom(ref temp_m_star, ref int_stream);
			if (0 < one_count)
			{
					_m_star.member_value = temp_m_star;
					count = count + one_count;
			}

			PlayerMoutainKingInfo temp_m_update_moutain_king = new PlayerMoutainKingInfo();
			one_count = _m_update_moutain_king.ParseFrom(temp_m_update_moutain_king, ref int_stream);
			if (0 < one_count)
			{
					_m_update_moutain_king.member_value = temp_m_update_moutain_king;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Client_PVP_TortoiseHare_AttackEnd_Res : IMessage
	{
		private ProtoMemberEnum<BattleSvrRes> _m_res;	// 战斗结果（胜利/失败）

		public Msg_Logic2Client_PVP_TortoiseHare_AttackEnd_Res()
		{
			_m_res = new ProtoMemberEnum<BattleSvrRes>(1, true);
		}

		public Msg_Logic2Client_PVP_TortoiseHare_AttackEnd_Res(BattleSvrRes __m_res)
		{
			_m_res = new ProtoMemberEnum<BattleSvrRes>(1, true);
			_m_res.member_value = __m_res;
		}

		public BattleSvrRes m_res
		{
			get{ return _m_res.member_value; }
			set{ _m_res.member_value = value; }
		}
		public bool has_m_res
		{
			get{ return _m_res.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_res.Serialize((uint)_m_res.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_res = 0;
			one_count = _m_res.ParseFrom(ref temp_m_res, ref int_stream);
			if (0 < one_count)
			{
					_m_res.member_value = (BattleSvrRes)temp_m_res;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Client_Player_Data_Res : IMessage
	{
		private ProtoMemberEmbedded<Player> _m_player;	// 返回角色信息

		public Msg_Logic2Client_Player_Data_Res()
		{
			_m_player = new ProtoMemberEmbedded<Player>(1, true);
			_m_player.member_value = new Player();
		}

		public Player m_player
		{
			get{ return _m_player.member_value as Player; }
			set{ _m_player.member_value = value; }
		}
		public bool has_m_player
		{
			get{ return _m_player.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_player.Serialize(_m_player.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			Player temp_m_player = new Player();
			one_count = _m_player.ParseFrom(temp_m_player, ref int_stream);
			if (0 < one_count)
			{
					_m_player.member_value = temp_m_player;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Client_Player_List_Res : IMessage
	{
		private ProtoMemberEmbedded<PlayerList> _m_player_list;	// 返回角色列表

		public Msg_Logic2Client_Player_List_Res()
		{
			_m_player_list = new ProtoMemberEmbedded<PlayerList>(1, true);
			_m_player_list.member_value = new PlayerList();
		}

		public PlayerList m_player_list
		{
			get{ return _m_player_list.member_value as PlayerList; }
			set{ _m_player_list.member_value = value; }
		}
		public bool has_m_player_list
		{
			get{ return _m_player_list.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_player_list.Serialize(_m_player_list.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			PlayerList temp_m_player_list = new PlayerList();
			one_count = _m_player_list.ParseFrom(temp_m_player_list, ref int_stream);
			if (0 < one_count)
			{
					_m_player_list.member_value = temp_m_player_list;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Client_RandCard_Res : IMessage
	{
		private ProtoMemberUInt32 _m_res;	// 抽卡结果（LogicRes）
		private ProtoMemberUInt32 _m_rand_count;	// 当前剩余抽卡次数
		private ProtoMemberEmbeddedList<PlayerCardInfo> _m_rand_card_list;	// 随机的卡牌列表，固定4张

		public Msg_Logic2Client_RandCard_Res()
		{
			_m_res = new ProtoMemberUInt32(1, true);
			_m_rand_count = new ProtoMemberUInt32(2, true);
			_m_rand_card_list = new ProtoMemberEmbeddedList<PlayerCardInfo>(3, false);
		}

		public Msg_Logic2Client_RandCard_Res(uint __m_res, uint __m_rand_count)
		{
			_m_res = new ProtoMemberUInt32(1, true);
			_m_res.member_value = __m_res;
			_m_rand_count = new ProtoMemberUInt32(2, true);
			_m_rand_count.member_value = __m_rand_count;
			_m_rand_card_list = new ProtoMemberEmbeddedList<PlayerCardInfo>(3, false);
		}

		public uint m_res
		{
			get{ return _m_res.member_value; }
			set{ _m_res.member_value = value; }
		}
		public bool has_m_res
		{
			get{ return _m_res.has_value; }
		}

		public uint m_rand_count
		{
			get{ return _m_rand_count.member_value; }
			set{ _m_rand_count.member_value = value; }
		}
		public bool has_m_rand_count
		{
			get{ return _m_rand_count.has_value; }
		}

		public System.Collections.Generic.List<PlayerCardInfo> m_rand_card_list
		{
			get{ return _m_rand_card_list.member_value; }
		}
		public bool has_m_rand_card_list
		{
			get{ return _m_rand_card_list.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_res.Serialize(_m_res.member_value, ref out_stream);

			count += _m_rand_count.Serialize(_m_rand_count.member_value, ref out_stream);

			foreach(PlayerCardInfo one_member_value in _m_rand_card_list.member_value)
			{
				count += _m_rand_card_list.Serialize(one_member_value, ref out_stream);
			}

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_res = 0;
			one_count = _m_res.ParseFrom(ref temp_m_res, ref int_stream);
			if (0 < one_count)
			{
					_m_res.member_value = temp_m_res;
					count = count + one_count;
			}

			uint temp_m_rand_count = 0;
			one_count = _m_rand_count.ParseFrom(ref temp_m_rand_count, ref int_stream);
			if (0 < one_count)
			{
					_m_rand_count.member_value = temp_m_rand_count;
					count = count + one_count;
			}

			while (true)
			{
				PlayerCardInfo one_member_value = new PlayerCardInfo();
				one_count = _m_rand_card_list.ParseFrom(one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_rand_card_list.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			return count;
		}
	}

	public class Msg_Logic2Client_SetPlayerName_Res : IMessage
	{
		private ProtoMemberString _m_player_name;	// 角色名
		private ProtoMemberUInt32 _m_res;	// 设置角色名结果（LogicRes）

		public Msg_Logic2Client_SetPlayerName_Res()
		{
			_m_player_name = new ProtoMemberString(1, true);
			_m_res = new ProtoMemberUInt32(2, true);
		}

		public Msg_Logic2Client_SetPlayerName_Res(string __m_player_name, uint __m_res)
		{
			_m_player_name = new ProtoMemberString(1, true);
			_m_player_name.member_value = __m_player_name;
			_m_res = new ProtoMemberUInt32(2, true);
			_m_res.member_value = __m_res;
		}

		public string m_player_name
		{
			get{ return _m_player_name.member_value; }
			set{ _m_player_name.member_value = value; }
		}
		public bool has_m_player_name
		{
			get{ return _m_player_name.has_value; }
		}

		public uint m_res
		{
			get{ return _m_res.member_value; }
			set{ _m_res.member_value = value; }
		}
		public bool has_m_res
		{
			get{ return _m_res.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_player_name.Serialize(_m_player_name.member_value, ref out_stream);

			count += _m_res.Serialize(_m_res.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			string temp_m_player_name = "";
			one_count = _m_player_name.ParseFrom(ref temp_m_player_name, ref int_stream);
			if (0 < one_count)
			{
					_m_player_name.member_value = temp_m_player_name;
					count = count + one_count;
			}

			uint temp_m_res = 0;
			one_count = _m_res.ParseFrom(ref temp_m_res, ref int_stream);
			if (0 < one_count)
			{
					_m_res.member_value = temp_m_res;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Client_Shop_Buy_Res : IMessage
	{
		private ProtoMemberEnum<ShopType> _m_shop_type;	// 商店类型
		private ProtoMemberUInt32 _m_buy_goods_id;	// 购买商店道具id
		private ProtoMemberUInt32 _m_buy_goods_count;	// 购买商店道具数量
		private ProtoMemberUInt32 _m_res;	// 购买结果（LogicRes）

		public Msg_Logic2Client_Shop_Buy_Res()
		{
			_m_shop_type = new ProtoMemberEnum<ShopType>(1, true);
			_m_buy_goods_id = new ProtoMemberUInt32(2, true);
			_m_buy_goods_count = new ProtoMemberUInt32(3, true);
			_m_res = new ProtoMemberUInt32(4, true);
		}

		public Msg_Logic2Client_Shop_Buy_Res(ShopType __m_shop_type, uint __m_buy_goods_id, uint __m_buy_goods_count, uint __m_res)
		{
			_m_shop_type = new ProtoMemberEnum<ShopType>(1, true);
			_m_shop_type.member_value = __m_shop_type;
			_m_buy_goods_id = new ProtoMemberUInt32(2, true);
			_m_buy_goods_id.member_value = __m_buy_goods_id;
			_m_buy_goods_count = new ProtoMemberUInt32(3, true);
			_m_buy_goods_count.member_value = __m_buy_goods_count;
			_m_res = new ProtoMemberUInt32(4, true);
			_m_res.member_value = __m_res;
		}

		public ShopType m_shop_type
		{
			get{ return _m_shop_type.member_value; }
			set{ _m_shop_type.member_value = value; }
		}
		public bool has_m_shop_type
		{
			get{ return _m_shop_type.has_value; }
		}

		public uint m_buy_goods_id
		{
			get{ return _m_buy_goods_id.member_value; }
			set{ _m_buy_goods_id.member_value = value; }
		}
		public bool has_m_buy_goods_id
		{
			get{ return _m_buy_goods_id.has_value; }
		}

		public uint m_buy_goods_count
		{
			get{ return _m_buy_goods_count.member_value; }
			set{ _m_buy_goods_count.member_value = value; }
		}
		public bool has_m_buy_goods_count
		{
			get{ return _m_buy_goods_count.has_value; }
		}

		public uint m_res
		{
			get{ return _m_res.member_value; }
			set{ _m_res.member_value = value; }
		}
		public bool has_m_res
		{
			get{ return _m_res.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_shop_type.Serialize((uint)_m_shop_type.member_value, ref out_stream);

			count += _m_buy_goods_id.Serialize(_m_buy_goods_id.member_value, ref out_stream);

			count += _m_buy_goods_count.Serialize(_m_buy_goods_count.member_value, ref out_stream);

			count += _m_res.Serialize(_m_res.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_shop_type = 0;
			one_count = _m_shop_type.ParseFrom(ref temp_m_shop_type, ref int_stream);
			if (0 < one_count)
			{
					_m_shop_type.member_value = (ShopType)temp_m_shop_type;
					count = count + one_count;
			}

			uint temp_m_buy_goods_id = 0;
			one_count = _m_buy_goods_id.ParseFrom(ref temp_m_buy_goods_id, ref int_stream);
			if (0 < one_count)
			{
					_m_buy_goods_id.member_value = temp_m_buy_goods_id;
					count = count + one_count;
			}

			uint temp_m_buy_goods_count = 0;
			one_count = _m_buy_goods_count.ParseFrom(ref temp_m_buy_goods_count, ref int_stream);
			if (0 < one_count)
			{
					_m_buy_goods_count.member_value = temp_m_buy_goods_count;
					count = count + one_count;
			}

			uint temp_m_res = 0;
			one_count = _m_res.ParseFrom(ref temp_m_res, ref int_stream);
			if (0 < one_count)
			{
					_m_res.member_value = temp_m_res;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Client_Shop_ItemList_Res : IMessage
	{
		private ProtoMemberEnum<ShopType> _m_shop_type;	// 商店类型
		private ProtoMemberUInt32 _m_res;	// 刷新结果（LogicRes）
		private ProtoMemberEmbedded<PlayerShopInfo> _m_shop_info;	// 刷新成功时商店道具列表

		public Msg_Logic2Client_Shop_ItemList_Res()
		{
			_m_shop_type = new ProtoMemberEnum<ShopType>(1, true);
			_m_res = new ProtoMemberUInt32(2, true);
			_m_shop_info = new ProtoMemberEmbedded<PlayerShopInfo>(3, false);
			_m_shop_info.member_value = new PlayerShopInfo();
		}

		public Msg_Logic2Client_Shop_ItemList_Res(ShopType __m_shop_type, uint __m_res)
		{
			_m_shop_type = new ProtoMemberEnum<ShopType>(1, true);
			_m_shop_type.member_value = __m_shop_type;
			_m_res = new ProtoMemberUInt32(2, true);
			_m_res.member_value = __m_res;
			_m_shop_info = new ProtoMemberEmbedded<PlayerShopInfo>(3, false);
			_m_shop_info.member_value = new PlayerShopInfo();
		}

		public ShopType m_shop_type
		{
			get{ return _m_shop_type.member_value; }
			set{ _m_shop_type.member_value = value; }
		}
		public bool has_m_shop_type
		{
			get{ return _m_shop_type.has_value; }
		}

		public uint m_res
		{
			get{ return _m_res.member_value; }
			set{ _m_res.member_value = value; }
		}
		public bool has_m_res
		{
			get{ return _m_res.has_value; }
		}

		public PlayerShopInfo m_shop_info
		{
			get{ return _m_shop_info.member_value as PlayerShopInfo; }
			set{ _m_shop_info.member_value = value; }
		}
		public bool has_m_shop_info
		{
			get{ return _m_shop_info.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_shop_type.Serialize((uint)_m_shop_type.member_value, ref out_stream);

			count += _m_res.Serialize(_m_res.member_value, ref out_stream);

			count += _m_shop_info.Serialize(_m_shop_info.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_shop_type = 0;
			one_count = _m_shop_type.ParseFrom(ref temp_m_shop_type, ref int_stream);
			if (0 < one_count)
			{
					_m_shop_type.member_value = (ShopType)temp_m_shop_type;
					count = count + one_count;
			}

			uint temp_m_res = 0;
			one_count = _m_res.ParseFrom(ref temp_m_res, ref int_stream);
			if (0 < one_count)
			{
					_m_res.member_value = temp_m_res;
					count = count + one_count;
			}

			PlayerShopInfo temp_m_shop_info = new PlayerShopInfo();
			one_count = _m_shop_info.ParseFrom(temp_m_shop_info, ref int_stream);
			if (0 < one_count)
			{
					_m_shop_info.member_value = temp_m_shop_info;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Client_Statistics_Res : IMessage
	{
		private ProtoMemberEmbedded<PlayerId> _m_player_id;	// 目标玩家id
		private ProtoMemberBool _m_exists;	// 目标是否存在数据
		private ProtoMemberEmbedded<PlayerStatisticsList> _m_statistics;	// 统计数据列表

		public Msg_Logic2Client_Statistics_Res()
		{
			_m_player_id = new ProtoMemberEmbedded<PlayerId>(1, true);
			_m_player_id.member_value = new PlayerId();
			_m_exists = new ProtoMemberBool(2, true);
			_m_statistics = new ProtoMemberEmbedded<PlayerStatisticsList>(3, true);
			_m_statistics.member_value = new PlayerStatisticsList();
		}

		public Msg_Logic2Client_Statistics_Res(bool __m_exists)
		{
			_m_player_id = new ProtoMemberEmbedded<PlayerId>(1, true);
			_m_player_id.member_value = new PlayerId();
			_m_exists = new ProtoMemberBool(2, true);
			_m_exists.member_value = __m_exists;
			_m_statistics = new ProtoMemberEmbedded<PlayerStatisticsList>(3, true);
			_m_statistics.member_value = new PlayerStatisticsList();
		}

		public PlayerId m_player_id
		{
			get{ return _m_player_id.member_value as PlayerId; }
			set{ _m_player_id.member_value = value; }
		}
		public bool has_m_player_id
		{
			get{ return _m_player_id.has_value; }
		}

		public bool m_exists
		{
			get{ return _m_exists.member_value; }
			set{ _m_exists.member_value = value; }
		}
		public bool has_m_exists
		{
			get{ return _m_exists.has_value; }
		}

		public PlayerStatisticsList m_statistics
		{
			get{ return _m_statistics.member_value as PlayerStatisticsList; }
			set{ _m_statistics.member_value = value; }
		}
		public bool has_m_statistics
		{
			get{ return _m_statistics.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_player_id.Serialize(_m_player_id.member_value, ref out_stream);

			count += _m_exists.Serialize(_m_exists.member_value, ref out_stream);

			count += _m_statistics.Serialize(_m_statistics.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			PlayerId temp_m_player_id = new PlayerId();
			one_count = _m_player_id.ParseFrom(temp_m_player_id, ref int_stream);
			if (0 < one_count)
			{
					_m_player_id.member_value = temp_m_player_id;
					count = count + one_count;
			}

			bool temp_m_exists = false;
			one_count = _m_exists.ParseFrom(ref temp_m_exists, ref int_stream);
			if (0 < one_count)
			{
					_m_exists.member_value = temp_m_exists;
					count = count + one_count;
			}

			PlayerStatisticsList temp_m_statistics = new PlayerStatisticsList();
			one_count = _m_statistics.ParseFrom(temp_m_statistics, ref int_stream);
			if (0 < one_count)
			{
					_m_statistics.member_value = temp_m_statistics;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Client_Statistics_Update_Res : IMessage
	{
		private ProtoMemberEmbeddedList<PlayerStatisticsInfo> _m_update_statistics_list;	// 变更的统计数据列表

		public Msg_Logic2Client_Statistics_Update_Res()
		{
			_m_update_statistics_list = new ProtoMemberEmbeddedList<PlayerStatisticsInfo>(1, false);
		}

		public System.Collections.Generic.List<PlayerStatisticsInfo> m_update_statistics_list
		{
			get{ return _m_update_statistics_list.member_value; }
		}
		public bool has_m_update_statistics_list
		{
			get{ return _m_update_statistics_list.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			foreach(PlayerStatisticsInfo one_member_value in _m_update_statistics_list.member_value)
			{
				count += _m_update_statistics_list.Serialize(one_member_value, ref out_stream);
			}

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			while (true)
			{
				PlayerStatisticsInfo one_member_value = new PlayerStatisticsInfo();
				one_count = _m_update_statistics_list.ParseFrom(one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_update_statistics_list.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			return count;
		}
	}

	public class Msg_Logic2Client_Strength_Res : IMessage
	{
		private ProtoMemberUInt32 _m_strength;	// 体力值

		public Msg_Logic2Client_Strength_Res()
		{
			_m_strength = new ProtoMemberUInt32(1, true);
		}

		public Msg_Logic2Client_Strength_Res(uint __m_strength)
		{
			_m_strength = new ProtoMemberUInt32(1, true);
			_m_strength.member_value = __m_strength;
		}

		public uint m_strength
		{
			get{ return _m_strength.member_value; }
			set{ _m_strength.member_value = value; }
		}
		public bool has_m_strength
		{
			get{ return _m_strength.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_strength.Serialize(_m_strength.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_strength = 0;
			one_count = _m_strength.ParseFrom(ref temp_m_strength, ref int_stream);
			if (0 < one_count)
			{
					_m_strength.member_value = temp_m_strength;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Client_Talent_LvUp_Res : IMessage
	{
		private ProtoMemberEnum<PlayerTalentType> _m_talent_plan_type;	// 升级的方案类型
		private ProtoMemberUInt32 _m_talent_plan_index;	// 升级的方案序号0-2
		private ProtoMemberUInt32 _m_talent_id;	// 升级的天赋id
		private ProtoMemberUInt32 _m_talent_lv;	// 升级后的天赋等级
		private ProtoMemberUInt32 _m_res;	// 升级结果（LogicRes）

		public Msg_Logic2Client_Talent_LvUp_Res()
		{
			_m_talent_plan_type = new ProtoMemberEnum<PlayerTalentType>(1, true);
			_m_talent_plan_index = new ProtoMemberUInt32(2, true);
			_m_talent_id = new ProtoMemberUInt32(3, true);
			_m_talent_lv = new ProtoMemberUInt32(4, true);
			_m_res = new ProtoMemberUInt32(5, true);
		}

		public Msg_Logic2Client_Talent_LvUp_Res(PlayerTalentType __m_talent_plan_type, uint __m_talent_plan_index, uint __m_talent_id, uint __m_talent_lv, uint __m_res)
		{
			_m_talent_plan_type = new ProtoMemberEnum<PlayerTalentType>(1, true);
			_m_talent_plan_type.member_value = __m_talent_plan_type;
			_m_talent_plan_index = new ProtoMemberUInt32(2, true);
			_m_talent_plan_index.member_value = __m_talent_plan_index;
			_m_talent_id = new ProtoMemberUInt32(3, true);
			_m_talent_id.member_value = __m_talent_id;
			_m_talent_lv = new ProtoMemberUInt32(4, true);
			_m_talent_lv.member_value = __m_talent_lv;
			_m_res = new ProtoMemberUInt32(5, true);
			_m_res.member_value = __m_res;
		}

		public PlayerTalentType m_talent_plan_type
		{
			get{ return _m_talent_plan_type.member_value; }
			set{ _m_talent_plan_type.member_value = value; }
		}
		public bool has_m_talent_plan_type
		{
			get{ return _m_talent_plan_type.has_value; }
		}

		public uint m_talent_plan_index
		{
			get{ return _m_talent_plan_index.member_value; }
			set{ _m_talent_plan_index.member_value = value; }
		}
		public bool has_m_talent_plan_index
		{
			get{ return _m_talent_plan_index.has_value; }
		}

		public uint m_talent_id
		{
			get{ return _m_talent_id.member_value; }
			set{ _m_talent_id.member_value = value; }
		}
		public bool has_m_talent_id
		{
			get{ return _m_talent_id.has_value; }
		}

		public uint m_talent_lv
		{
			get{ return _m_talent_lv.member_value; }
			set{ _m_talent_lv.member_value = value; }
		}
		public bool has_m_talent_lv
		{
			get{ return _m_talent_lv.has_value; }
		}

		public uint m_res
		{
			get{ return _m_res.member_value; }
			set{ _m_res.member_value = value; }
		}
		public bool has_m_res
		{
			get{ return _m_res.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_talent_plan_type.Serialize((uint)_m_talent_plan_type.member_value, ref out_stream);

			count += _m_talent_plan_index.Serialize(_m_talent_plan_index.member_value, ref out_stream);

			count += _m_talent_id.Serialize(_m_talent_id.member_value, ref out_stream);

			count += _m_talent_lv.Serialize(_m_talent_lv.member_value, ref out_stream);

			count += _m_res.Serialize(_m_res.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_talent_plan_type = 0;
			one_count = _m_talent_plan_type.ParseFrom(ref temp_m_talent_plan_type, ref int_stream);
			if (0 < one_count)
			{
					_m_talent_plan_type.member_value = (PlayerTalentType)temp_m_talent_plan_type;
					count = count + one_count;
			}

			uint temp_m_talent_plan_index = 0;
			one_count = _m_talent_plan_index.ParseFrom(ref temp_m_talent_plan_index, ref int_stream);
			if (0 < one_count)
			{
					_m_talent_plan_index.member_value = temp_m_talent_plan_index;
					count = count + one_count;
			}

			uint temp_m_talent_id = 0;
			one_count = _m_talent_id.ParseFrom(ref temp_m_talent_id, ref int_stream);
			if (0 < one_count)
			{
					_m_talent_id.member_value = temp_m_talent_id;
					count = count + one_count;
			}

			uint temp_m_talent_lv = 0;
			one_count = _m_talent_lv.ParseFrom(ref temp_m_talent_lv, ref int_stream);
			if (0 < one_count)
			{
					_m_talent_lv.member_value = temp_m_talent_lv;
					count = count + one_count;
			}

			uint temp_m_res = 0;
			one_count = _m_res.ParseFrom(ref temp_m_res, ref int_stream);
			if (0 < one_count)
			{
					_m_res.member_value = temp_m_res;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Client_Talent_ReSet_Res : IMessage
	{
		private ProtoMemberEnum<PlayerTalentType> _m_talent_plan_type;	// 重置的方案类型
		private ProtoMemberUInt32 _m_talent_plan_index;	// 重置的方案序号0-2
		private ProtoMemberUInt32 _m_res;	// 重置结果（LogicRes）

		public Msg_Logic2Client_Talent_ReSet_Res()
		{
			_m_talent_plan_type = new ProtoMemberEnum<PlayerTalentType>(1, true);
			_m_talent_plan_index = new ProtoMemberUInt32(2, true);
			_m_res = new ProtoMemberUInt32(3, true);
		}

		public Msg_Logic2Client_Talent_ReSet_Res(PlayerTalentType __m_talent_plan_type, uint __m_talent_plan_index, uint __m_res)
		{
			_m_talent_plan_type = new ProtoMemberEnum<PlayerTalentType>(1, true);
			_m_talent_plan_type.member_value = __m_talent_plan_type;
			_m_talent_plan_index = new ProtoMemberUInt32(2, true);
			_m_talent_plan_index.member_value = __m_talent_plan_index;
			_m_res = new ProtoMemberUInt32(3, true);
			_m_res.member_value = __m_res;
		}

		public PlayerTalentType m_talent_plan_type
		{
			get{ return _m_talent_plan_type.member_value; }
			set{ _m_talent_plan_type.member_value = value; }
		}
		public bool has_m_talent_plan_type
		{
			get{ return _m_talent_plan_type.has_value; }
		}

		public uint m_talent_plan_index
		{
			get{ return _m_talent_plan_index.member_value; }
			set{ _m_talent_plan_index.member_value = value; }
		}
		public bool has_m_talent_plan_index
		{
			get{ return _m_talent_plan_index.has_value; }
		}

		public uint m_res
		{
			get{ return _m_res.member_value; }
			set{ _m_res.member_value = value; }
		}
		public bool has_m_res
		{
			get{ return _m_res.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_talent_plan_type.Serialize((uint)_m_talent_plan_type.member_value, ref out_stream);

			count += _m_talent_plan_index.Serialize(_m_talent_plan_index.member_value, ref out_stream);

			count += _m_res.Serialize(_m_res.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_talent_plan_type = 0;
			one_count = _m_talent_plan_type.ParseFrom(ref temp_m_talent_plan_type, ref int_stream);
			if (0 < one_count)
			{
					_m_talent_plan_type.member_value = (PlayerTalentType)temp_m_talent_plan_type;
					count = count + one_count;
			}

			uint temp_m_talent_plan_index = 0;
			one_count = _m_talent_plan_index.ParseFrom(ref temp_m_talent_plan_index, ref int_stream);
			if (0 < one_count)
			{
					_m_talent_plan_index.member_value = temp_m_talent_plan_index;
					count = count + one_count;
			}

			uint temp_m_res = 0;
			one_count = _m_res.ParseFrom(ref temp_m_res, ref int_stream);
			if (0 < one_count)
			{
					_m_res.member_value = temp_m_res;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Client_Talent_SetCurrPlan_Res : IMessage
	{
		private ProtoMemberUInt32 _m_talent_plan_index;	// 指定的方案序号0-2
		private ProtoMemberUInt32 _m_res;	// 指定结果（LogicRes）

		public Msg_Logic2Client_Talent_SetCurrPlan_Res()
		{
			_m_talent_plan_index = new ProtoMemberUInt32(1, true);
			_m_res = new ProtoMemberUInt32(2, true);
		}

		public Msg_Logic2Client_Talent_SetCurrPlan_Res(uint __m_talent_plan_index, uint __m_res)
		{
			_m_talent_plan_index = new ProtoMemberUInt32(1, true);
			_m_talent_plan_index.member_value = __m_talent_plan_index;
			_m_res = new ProtoMemberUInt32(2, true);
			_m_res.member_value = __m_res;
		}

		public uint m_talent_plan_index
		{
			get{ return _m_talent_plan_index.member_value; }
			set{ _m_talent_plan_index.member_value = value; }
		}
		public bool has_m_talent_plan_index
		{
			get{ return _m_talent_plan_index.has_value; }
		}

		public uint m_res
		{
			get{ return _m_res.member_value; }
			set{ _m_res.member_value = value; }
		}
		public bool has_m_res
		{
			get{ return _m_res.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_talent_plan_index.Serialize(_m_talent_plan_index.member_value, ref out_stream);

			count += _m_res.Serialize(_m_res.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_talent_plan_index = 0;
			one_count = _m_talent_plan_index.ParseFrom(ref temp_m_talent_plan_index, ref int_stream);
			if (0 < one_count)
			{
					_m_talent_plan_index.member_value = temp_m_talent_plan_index;
					count = count + one_count;
			}

			uint temp_m_res = 0;
			one_count = _m_res.ParseFrom(ref temp_m_res, ref int_stream);
			if (0 < one_count)
			{
					_m_res.member_value = temp_m_res;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Client_Talent_Update_Res : IMessage
	{
		private ProtoMemberUInt32 _m_talent_points;	// 当前总天赋点

		public Msg_Logic2Client_Talent_Update_Res()
		{
			_m_talent_points = new ProtoMemberUInt32(1, true);
		}

		public Msg_Logic2Client_Talent_Update_Res(uint __m_talent_points)
		{
			_m_talent_points = new ProtoMemberUInt32(1, true);
			_m_talent_points.member_value = __m_talent_points;
		}

		public uint m_talent_points
		{
			get{ return _m_talent_points.member_value; }
			set{ _m_talent_points.member_value = value; }
		}
		public bool has_m_talent_points
		{
			get{ return _m_talent_points.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_talent_points.Serialize(_m_talent_points.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_talent_points = 0;
			one_count = _m_talent_points.ParseFrom(ref temp_m_talent_points, ref int_stream);
			if (0 < one_count)
			{
					_m_talent_points.member_value = temp_m_talent_points;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Client_Task_Change_Res : IMessage
	{
		private ProtoMemberUInt32 _m_res;	// 替换结果（LogicRes）

		public Msg_Logic2Client_Task_Change_Res()
		{
			_m_res = new ProtoMemberUInt32(1, true);
		}

		public Msg_Logic2Client_Task_Change_Res(uint __m_res)
		{
			_m_res = new ProtoMemberUInt32(1, true);
			_m_res.member_value = __m_res;
		}

		public uint m_res
		{
			get{ return _m_res.member_value; }
			set{ _m_res.member_value = value; }
		}
		public bool has_m_res
		{
			get{ return _m_res.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_res.Serialize(_m_res.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_res = 0;
			one_count = _m_res.ParseFrom(ref temp_m_res, ref int_stream);
			if (0 < one_count)
			{
					_m_res.member_value = temp_m_res;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Client_Task_Finsh_Res : IMessage
	{
		private ProtoMemberUInt32 _m_res;	// 领取任务奖励结果（LogicRes）
		private ProtoMemberUInt32 _m_task_index;	// 领取任务奖励的任务序号

		public Msg_Logic2Client_Task_Finsh_Res()
		{
			_m_res = new ProtoMemberUInt32(1, true);
			_m_task_index = new ProtoMemberUInt32(2, true);
		}

		public Msg_Logic2Client_Task_Finsh_Res(uint __m_res, uint __m_task_index)
		{
			_m_res = new ProtoMemberUInt32(1, true);
			_m_res.member_value = __m_res;
			_m_task_index = new ProtoMemberUInt32(2, true);
			_m_task_index.member_value = __m_task_index;
		}

		public uint m_res
		{
			get{ return _m_res.member_value; }
			set{ _m_res.member_value = value; }
		}
		public bool has_m_res
		{
			get{ return _m_res.has_value; }
		}

		public uint m_task_index
		{
			get{ return _m_task_index.member_value; }
			set{ _m_task_index.member_value = value; }
		}
		public bool has_m_task_index
		{
			get{ return _m_task_index.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_res.Serialize(_m_res.member_value, ref out_stream);

			count += _m_task_index.Serialize(_m_task_index.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_res = 0;
			one_count = _m_res.ParseFrom(ref temp_m_res, ref int_stream);
			if (0 < one_count)
			{
					_m_res.member_value = temp_m_res;
					count = count + one_count;
			}

			uint temp_m_task_index = 0;
			one_count = _m_task_index.ParseFrom(ref temp_m_task_index, ref int_stream);
			if (0 < one_count)
			{
					_m_task_index.member_value = temp_m_task_index;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Client_Task_Update_Res : IMessage
	{
		private ProtoMemberEmbedded<PlayerDailyTaskList> _m_daily_tasks;	// 变更的任务列表

		public Msg_Logic2Client_Task_Update_Res()
		{
			_m_daily_tasks = new ProtoMemberEmbedded<PlayerDailyTaskList>(1, false);
			_m_daily_tasks.member_value = new PlayerDailyTaskList();
		}

		public PlayerDailyTaskList m_daily_tasks
		{
			get{ return _m_daily_tasks.member_value as PlayerDailyTaskList; }
			set{ _m_daily_tasks.member_value = value; }
		}
		public bool has_m_daily_tasks
		{
			get{ return _m_daily_tasks.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_daily_tasks.Serialize(_m_daily_tasks.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			PlayerDailyTaskList temp_m_daily_tasks = new PlayerDailyTaskList();
			one_count = _m_daily_tasks.ParseFrom(temp_m_daily_tasks, ref int_stream);
			if (0 < one_count)
			{
					_m_daily_tasks.member_value = temp_m_daily_tasks;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Client_Team_Broadcast : IMessage
	{
		private ProtoMemberEmbeddedList<TeamSeat> _m_seat;	// 阵容信息列表

		public Msg_Logic2Client_Team_Broadcast()
		{
			_m_seat = new ProtoMemberEmbeddedList<TeamSeat>(1, false);
		}

		public System.Collections.Generic.List<TeamSeat> m_seat
		{
			get{ return _m_seat.member_value; }
		}
		public bool has_m_seat
		{
			get{ return _m_seat.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			foreach(TeamSeat one_member_value in _m_seat.member_value)
			{
				count += _m_seat.Serialize(one_member_value, ref out_stream);
			}

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			while (true)
			{
				TeamSeat one_member_value = new TeamSeat();
				one_count = _m_seat.ParseFrom(one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_seat.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			return count;
		}
	}

	public class Msg_Logic2Client_Team_Time_Res : IMessage
	{
		private ProtoMemberUInt32 _m_year;	//年
		private ProtoMemberUInt32 _m_month;	//月
		private ProtoMemberUInt32 _m_day;	//日

		public Msg_Logic2Client_Team_Time_Res()
		{
			_m_year = new ProtoMemberUInt32(1, true);
			_m_month = new ProtoMemberUInt32(2, true);
			_m_day = new ProtoMemberUInt32(3, true);
		}

		public Msg_Logic2Client_Team_Time_Res(uint __m_year, uint __m_month, uint __m_day)
		{
			_m_year = new ProtoMemberUInt32(1, true);
			_m_year.member_value = __m_year;
			_m_month = new ProtoMemberUInt32(2, true);
			_m_month.member_value = __m_month;
			_m_day = new ProtoMemberUInt32(3, true);
			_m_day.member_value = __m_day;
		}

		public uint m_year
		{
			get{ return _m_year.member_value; }
			set{ _m_year.member_value = value; }
		}
		public bool has_m_year
		{
			get{ return _m_year.has_value; }
		}

		public uint m_month
		{
			get{ return _m_month.member_value; }
			set{ _m_month.member_value = value; }
		}
		public bool has_m_month
		{
			get{ return _m_month.has_value; }
		}

		public uint m_day
		{
			get{ return _m_day.member_value; }
			set{ _m_day.member_value = value; }
		}
		public bool has_m_day
		{
			get{ return _m_day.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_year.Serialize(_m_year.member_value, ref out_stream);

			count += _m_month.Serialize(_m_month.member_value, ref out_stream);

			count += _m_day.Serialize(_m_day.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_year = 0;
			one_count = _m_year.ParseFrom(ref temp_m_year, ref int_stream);
			if (0 < one_count)
			{
					_m_year.member_value = temp_m_year;
					count = count + one_count;
			}

			uint temp_m_month = 0;
			one_count = _m_month.ParseFrom(ref temp_m_month, ref int_stream);
			if (0 < one_count)
			{
					_m_month.member_value = temp_m_month;
					count = count + one_count;
			}

			uint temp_m_day = 0;
			one_count = _m_day.ParseFrom(ref temp_m_day, ref int_stream);
			if (0 < one_count)
			{
					_m_day.member_value = temp_m_day;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Client_Team_UI_Broadcast : IMessage
	{
		private ProtoMemberUInt32 _m_ui;	// ui
		private ProtoMemberBool _m_is_open;	// true：打开，false：关闭

		public Msg_Logic2Client_Team_UI_Broadcast()
		{
			_m_ui = new ProtoMemberUInt32(1, true);
			_m_is_open = new ProtoMemberBool(2, true);
		}

		public Msg_Logic2Client_Team_UI_Broadcast(uint __m_ui, bool __m_is_open)
		{
			_m_ui = new ProtoMemberUInt32(1, true);
			_m_ui.member_value = __m_ui;
			_m_is_open = new ProtoMemberBool(2, true);
			_m_is_open.member_value = __m_is_open;
		}

		public uint m_ui
		{
			get{ return _m_ui.member_value; }
			set{ _m_ui.member_value = value; }
		}
		public bool has_m_ui
		{
			get{ return _m_ui.has_value; }
		}

		public bool m_is_open
		{
			get{ return _m_is_open.member_value; }
			set{ _m_is_open.member_value = value; }
		}
		public bool has_m_is_open
		{
			get{ return _m_is_open.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_ui.Serialize(_m_ui.member_value, ref out_stream);

			count += _m_is_open.Serialize(_m_is_open.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_ui = 0;
			one_count = _m_ui.ParseFrom(ref temp_m_ui, ref int_stream);
			if (0 < one_count)
			{
					_m_ui.member_value = temp_m_ui;
					count = count + one_count;
			}

			bool temp_m_is_open = false;
			one_count = _m_is_open.ParseFrom(ref temp_m_is_open, ref int_stream);
			if (0 < one_count)
			{
					_m_is_open.member_value = temp_m_is_open;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Client_ToyActivate_Res : IMessage
	{
		private ProtoMemberString _m_toy_guid;	// 激活的玩具唯一识别码
		private ProtoMemberUInt32 _m_toy_type;	// 激活的玩具类别
		private ProtoMemberUInt32 _m_res;	// 激活验证结果（LogicRes）

		public Msg_Logic2Client_ToyActivate_Res()
		{
			_m_toy_guid = new ProtoMemberString(1, true);
			_m_toy_type = new ProtoMemberUInt32(2, true);
			_m_res = new ProtoMemberUInt32(3, true);
		}

		public Msg_Logic2Client_ToyActivate_Res(string __m_toy_guid, uint __m_toy_type, uint __m_res)
		{
			_m_toy_guid = new ProtoMemberString(1, true);
			_m_toy_guid.member_value = __m_toy_guid;
			_m_toy_type = new ProtoMemberUInt32(2, true);
			_m_toy_type.member_value = __m_toy_type;
			_m_res = new ProtoMemberUInt32(3, true);
			_m_res.member_value = __m_res;
		}

		public string m_toy_guid
		{
			get{ return _m_toy_guid.member_value; }
			set{ _m_toy_guid.member_value = value; }
		}
		public bool has_m_toy_guid
		{
			get{ return _m_toy_guid.has_value; }
		}

		public uint m_toy_type
		{
			get{ return _m_toy_type.member_value; }
			set{ _m_toy_type.member_value = value; }
		}
		public bool has_m_toy_type
		{
			get{ return _m_toy_type.has_value; }
		}

		public uint m_res
		{
			get{ return _m_res.member_value; }
			set{ _m_res.member_value = value; }
		}
		public bool has_m_res
		{
			get{ return _m_res.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_toy_guid.Serialize(_m_toy_guid.member_value, ref out_stream);

			count += _m_toy_type.Serialize(_m_toy_type.member_value, ref out_stream);

			count += _m_res.Serialize(_m_res.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			string temp_m_toy_guid = "";
			one_count = _m_toy_guid.ParseFrom(ref temp_m_toy_guid, ref int_stream);
			if (0 < one_count)
			{
					_m_toy_guid.member_value = temp_m_toy_guid;
					count = count + one_count;
			}

			uint temp_m_toy_type = 0;
			one_count = _m_toy_type.ParseFrom(ref temp_m_toy_type, ref int_stream);
			if (0 < one_count)
			{
					_m_toy_type.member_value = temp_m_toy_type;
					count = count + one_count;
			}

			uint temp_m_res = 0;
			one_count = _m_res.ParseFrom(ref temp_m_res, ref int_stream);
			if (0 < one_count)
			{
					_m_res.member_value = temp_m_res;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Client_Update_DataContainer : IMessage
	{
		private ProtoMemberEmbedded<DataContainerMsg> _m_dcmsg;	//数据容器包

		public Msg_Logic2Client_Update_DataContainer()
		{
			_m_dcmsg = new ProtoMemberEmbedded<DataContainerMsg>(1, true);
			_m_dcmsg.member_value = new DataContainerMsg();
		}

		public DataContainerMsg m_dcmsg
		{
			get{ return _m_dcmsg.member_value as DataContainerMsg; }
			set{ _m_dcmsg.member_value = value; }
		}
		public bool has_m_dcmsg
		{
			get{ return _m_dcmsg.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_dcmsg.Serialize(_m_dcmsg.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			DataContainerMsg temp_m_dcmsg = new DataContainerMsg();
			one_count = _m_dcmsg.ParseFrom(temp_m_dcmsg, ref int_stream);
			if (0 < one_count)
			{
					_m_dcmsg.member_value = temp_m_dcmsg;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Gate_Player_Kickout_Req : IMessage
	{

		public Msg_Logic2Gate_Player_Kickout_Req()
		{
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			return count;
		}
	}

	public class Msg_Logic2Gm_GM_Res : IMessage
	{
		private ProtoMemberUInt32 _m_type;	//命令枚举，对应GmMsgType
		private ProtoMemberUInt32 _m_playerId;	// 角色ID
		private ProtoMemberUInt32 _m_serverId;	// 服务器ID
		private ProtoMemberEmbedded<GmKeyValueList> _m_RetInfo;	//结果键值对列表
		private ProtoMemberEnum<GM_Error_code> _m_nRet;	//结果

		public Msg_Logic2Gm_GM_Res()
		{
			_m_type = new ProtoMemberUInt32(1, true);
			_m_playerId = new ProtoMemberUInt32(2, false);
			_m_serverId = new ProtoMemberUInt32(3, false);
			_m_RetInfo = new ProtoMemberEmbedded<GmKeyValueList>(4, false);
			_m_RetInfo.member_value = new GmKeyValueList();
			_m_nRet = new ProtoMemberEnum<GM_Error_code>(5, false);
		}

		public Msg_Logic2Gm_GM_Res(uint __m_type, uint __m_playerId, uint __m_serverId, GM_Error_code __m_nRet)
		{
			_m_type = new ProtoMemberUInt32(1, true);
			_m_type.member_value = __m_type;
			_m_playerId = new ProtoMemberUInt32(2, false);
			_m_playerId.member_value = __m_playerId;
			_m_serverId = new ProtoMemberUInt32(3, false);
			_m_serverId.member_value = __m_serverId;
			_m_RetInfo = new ProtoMemberEmbedded<GmKeyValueList>(4, false);
			_m_RetInfo.member_value = new GmKeyValueList();
			_m_nRet = new ProtoMemberEnum<GM_Error_code>(5, false);
			_m_nRet.member_value = __m_nRet;
		}

		public uint m_type
		{
			get{ return _m_type.member_value; }
			set{ _m_type.member_value = value; }
		}
		public bool has_m_type
		{
			get{ return _m_type.has_value; }
		}

		public uint m_playerId
		{
			get{ return _m_playerId.member_value; }
			set{ _m_playerId.member_value = value; }
		}
		public bool has_m_playerId
		{
			get{ return _m_playerId.has_value; }
		}

		public uint m_serverId
		{
			get{ return _m_serverId.member_value; }
			set{ _m_serverId.member_value = value; }
		}
		public bool has_m_serverId
		{
			get{ return _m_serverId.has_value; }
		}

		public GmKeyValueList m_RetInfo
		{
			get{ return _m_RetInfo.member_value as GmKeyValueList; }
			set{ _m_RetInfo.member_value = value; }
		}
		public bool has_m_RetInfo
		{
			get{ return _m_RetInfo.has_value; }
		}

		public GM_Error_code m_nRet
		{
			get{ return _m_nRet.member_value; }
			set{ _m_nRet.member_value = value; }
		}
		public bool has_m_nRet
		{
			get{ return _m_nRet.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_type.Serialize(_m_type.member_value, ref out_stream);

			count += _m_playerId.Serialize(_m_playerId.member_value, ref out_stream);

			count += _m_serverId.Serialize(_m_serverId.member_value, ref out_stream);

			count += _m_RetInfo.Serialize(_m_RetInfo.member_value, ref out_stream);

			count += _m_nRet.Serialize((uint)_m_nRet.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_type = 0;
			one_count = _m_type.ParseFrom(ref temp_m_type, ref int_stream);
			if (0 < one_count)
			{
					_m_type.member_value = temp_m_type;
					count = count + one_count;
			}

			uint temp_m_playerId = 0;
			one_count = _m_playerId.ParseFrom(ref temp_m_playerId, ref int_stream);
			if (0 < one_count)
			{
					_m_playerId.member_value = temp_m_playerId;
					count = count + one_count;
			}

			uint temp_m_serverId = 0;
			one_count = _m_serverId.ParseFrom(ref temp_m_serverId, ref int_stream);
			if (0 < one_count)
			{
					_m_serverId.member_value = temp_m_serverId;
					count = count + one_count;
			}

			GmKeyValueList temp_m_RetInfo = new GmKeyValueList();
			one_count = _m_RetInfo.ParseFrom(temp_m_RetInfo, ref int_stream);
			if (0 < one_count)
			{
					_m_RetInfo.member_value = temp_m_RetInfo;
					count = count + one_count;
			}

			uint temp_m_nRet = 0;
			one_count = _m_nRet.ParseFrom(ref temp_m_nRet, ref int_stream);
			if (0 < one_count)
			{
					_m_nRet.member_value = (GM_Error_code)temp_m_nRet;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Log_Write_Req : IMessage
	{
		private ProtoMemberEmbedded<PlayerLogList> _m_logs;	//日志信息	

		public Msg_Logic2Log_Write_Req()
		{
			_m_logs = new ProtoMemberEmbedded<PlayerLogList>(1, false);
			_m_logs.member_value = new PlayerLogList();
		}

		public PlayerLogList m_logs
		{
			get{ return _m_logs.member_value as PlayerLogList; }
			set{ _m_logs.member_value = value; }
		}
		public bool has_m_logs
		{
			get{ return _m_logs.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_logs.Serialize(_m_logs.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			PlayerLogList temp_m_logs = new PlayerLogList();
			one_count = _m_logs.ParseFrom(temp_m_logs, ref int_stream);
			if (0 < one_count)
			{
					_m_logs.member_value = temp_m_logs;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Logic_Chat_Req : IMessage
	{
		private ProtoMemberUInt32 _m_type;	// 类型：0文字，1语音
		private ProtoMemberUInt32 _m_channel;	// 频道：0世界，1公会，2队伍，3私聊，4公告
		private ProtoMemberString _m_chat;	// 聊天内容
		private ProtoMemberUInt32 _m_sender_account_id;	// 发言玩家角色id == 账号id
		private ProtoMemberUInt32 _m_sender_server_id;	// 发言玩家所属服id
		private ProtoMemberString _m_sender_name;	// 发言玩家角色名称
		private ProtoMemberUInt32 _m_sender_toy_type;	// 发言玩家角色当前使用的玩具id，头像
		private ProtoMemberUInt32 _m_sender_hunting_lv;	// 发言玩家角色当前狩猎等级
		private ProtoMemberUInt64 _m_send_time;	// 发言时间
		private ProtoMemberUInt32 _m_target_account_id;	// 目标玩家角色id == 账号id
		private ProtoMemberUInt32 _m_target_server_id;	// 目标玩家所属服id

		public Msg_Logic2Logic_Chat_Req()
		{
			_m_type = new ProtoMemberUInt32(1, true);
			_m_channel = new ProtoMemberUInt32(2, true);
			_m_chat = new ProtoMemberString(3, true);
			_m_sender_account_id = new ProtoMemberUInt32(4, true);
			_m_sender_server_id = new ProtoMemberUInt32(5, true);
			_m_sender_name = new ProtoMemberString(6, true);
			_m_sender_toy_type = new ProtoMemberUInt32(7, true);
			_m_sender_hunting_lv = new ProtoMemberUInt32(8, true);
			_m_send_time = new ProtoMemberUInt64(9, true);
			_m_target_account_id = new ProtoMemberUInt32(10, true);
			_m_target_server_id = new ProtoMemberUInt32(11, true);
		}

		public Msg_Logic2Logic_Chat_Req(uint __m_type, uint __m_channel, string __m_chat, uint __m_sender_account_id, uint __m_sender_server_id, string __m_sender_name, uint __m_sender_toy_type, uint __m_sender_hunting_lv, ulong __m_send_time, uint __m_target_account_id, uint __m_target_server_id)
		{
			_m_type = new ProtoMemberUInt32(1, true);
			_m_type.member_value = __m_type;
			_m_channel = new ProtoMemberUInt32(2, true);
			_m_channel.member_value = __m_channel;
			_m_chat = new ProtoMemberString(3, true);
			_m_chat.member_value = __m_chat;
			_m_sender_account_id = new ProtoMemberUInt32(4, true);
			_m_sender_account_id.member_value = __m_sender_account_id;
			_m_sender_server_id = new ProtoMemberUInt32(5, true);
			_m_sender_server_id.member_value = __m_sender_server_id;
			_m_sender_name = new ProtoMemberString(6, true);
			_m_sender_name.member_value = __m_sender_name;
			_m_sender_toy_type = new ProtoMemberUInt32(7, true);
			_m_sender_toy_type.member_value = __m_sender_toy_type;
			_m_sender_hunting_lv = new ProtoMemberUInt32(8, true);
			_m_sender_hunting_lv.member_value = __m_sender_hunting_lv;
			_m_send_time = new ProtoMemberUInt64(9, true);
			_m_send_time.member_value = __m_send_time;
			_m_target_account_id = new ProtoMemberUInt32(10, true);
			_m_target_account_id.member_value = __m_target_account_id;
			_m_target_server_id = new ProtoMemberUInt32(11, true);
			_m_target_server_id.member_value = __m_target_server_id;
		}

		public uint m_type
		{
			get{ return _m_type.member_value; }
			set{ _m_type.member_value = value; }
		}
		public bool has_m_type
		{
			get{ return _m_type.has_value; }
		}

		public uint m_channel
		{
			get{ return _m_channel.member_value; }
			set{ _m_channel.member_value = value; }
		}
		public bool has_m_channel
		{
			get{ return _m_channel.has_value; }
		}

		public string m_chat
		{
			get{ return _m_chat.member_value; }
			set{ _m_chat.member_value = value; }
		}
		public bool has_m_chat
		{
			get{ return _m_chat.has_value; }
		}

		public uint m_sender_account_id
		{
			get{ return _m_sender_account_id.member_value; }
			set{ _m_sender_account_id.member_value = value; }
		}
		public bool has_m_sender_account_id
		{
			get{ return _m_sender_account_id.has_value; }
		}

		public uint m_sender_server_id
		{
			get{ return _m_sender_server_id.member_value; }
			set{ _m_sender_server_id.member_value = value; }
		}
		public bool has_m_sender_server_id
		{
			get{ return _m_sender_server_id.has_value; }
		}

		public string m_sender_name
		{
			get{ return _m_sender_name.member_value; }
			set{ _m_sender_name.member_value = value; }
		}
		public bool has_m_sender_name
		{
			get{ return _m_sender_name.has_value; }
		}

		public uint m_sender_toy_type
		{
			get{ return _m_sender_toy_type.member_value; }
			set{ _m_sender_toy_type.member_value = value; }
		}
		public bool has_m_sender_toy_type
		{
			get{ return _m_sender_toy_type.has_value; }
		}

		public uint m_sender_hunting_lv
		{
			get{ return _m_sender_hunting_lv.member_value; }
			set{ _m_sender_hunting_lv.member_value = value; }
		}
		public bool has_m_sender_hunting_lv
		{
			get{ return _m_sender_hunting_lv.has_value; }
		}

		public ulong m_send_time
		{
			get{ return _m_send_time.member_value; }
			set{ _m_send_time.member_value = value; }
		}
		public bool has_m_send_time
		{
			get{ return _m_send_time.has_value; }
		}

		public uint m_target_account_id
		{
			get{ return _m_target_account_id.member_value; }
			set{ _m_target_account_id.member_value = value; }
		}
		public bool has_m_target_account_id
		{
			get{ return _m_target_account_id.has_value; }
		}

		public uint m_target_server_id
		{
			get{ return _m_target_server_id.member_value; }
			set{ _m_target_server_id.member_value = value; }
		}
		public bool has_m_target_server_id
		{
			get{ return _m_target_server_id.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_type.Serialize(_m_type.member_value, ref out_stream);

			count += _m_channel.Serialize(_m_channel.member_value, ref out_stream);

			count += _m_chat.Serialize(_m_chat.member_value, ref out_stream);

			count += _m_sender_account_id.Serialize(_m_sender_account_id.member_value, ref out_stream);

			count += _m_sender_server_id.Serialize(_m_sender_server_id.member_value, ref out_stream);

			count += _m_sender_name.Serialize(_m_sender_name.member_value, ref out_stream);

			count += _m_sender_toy_type.Serialize(_m_sender_toy_type.member_value, ref out_stream);

			count += _m_sender_hunting_lv.Serialize(_m_sender_hunting_lv.member_value, ref out_stream);

			count += _m_send_time.Serialize(_m_send_time.member_value, ref out_stream);

			count += _m_target_account_id.Serialize(_m_target_account_id.member_value, ref out_stream);

			count += _m_target_server_id.Serialize(_m_target_server_id.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_type = 0;
			one_count = _m_type.ParseFrom(ref temp_m_type, ref int_stream);
			if (0 < one_count)
			{
					_m_type.member_value = temp_m_type;
					count = count + one_count;
			}

			uint temp_m_channel = 0;
			one_count = _m_channel.ParseFrom(ref temp_m_channel, ref int_stream);
			if (0 < one_count)
			{
					_m_channel.member_value = temp_m_channel;
					count = count + one_count;
			}

			string temp_m_chat = "";
			one_count = _m_chat.ParseFrom(ref temp_m_chat, ref int_stream);
			if (0 < one_count)
			{
					_m_chat.member_value = temp_m_chat;
					count = count + one_count;
			}

			uint temp_m_sender_account_id = 0;
			one_count = _m_sender_account_id.ParseFrom(ref temp_m_sender_account_id, ref int_stream);
			if (0 < one_count)
			{
					_m_sender_account_id.member_value = temp_m_sender_account_id;
					count = count + one_count;
			}

			uint temp_m_sender_server_id = 0;
			one_count = _m_sender_server_id.ParseFrom(ref temp_m_sender_server_id, ref int_stream);
			if (0 < one_count)
			{
					_m_sender_server_id.member_value = temp_m_sender_server_id;
					count = count + one_count;
			}

			string temp_m_sender_name = "";
			one_count = _m_sender_name.ParseFrom(ref temp_m_sender_name, ref int_stream);
			if (0 < one_count)
			{
					_m_sender_name.member_value = temp_m_sender_name;
					count = count + one_count;
			}

			uint temp_m_sender_toy_type = 0;
			one_count = _m_sender_toy_type.ParseFrom(ref temp_m_sender_toy_type, ref int_stream);
			if (0 < one_count)
			{
					_m_sender_toy_type.member_value = temp_m_sender_toy_type;
					count = count + one_count;
			}

			uint temp_m_sender_hunting_lv = 0;
			one_count = _m_sender_hunting_lv.ParseFrom(ref temp_m_sender_hunting_lv, ref int_stream);
			if (0 < one_count)
			{
					_m_sender_hunting_lv.member_value = temp_m_sender_hunting_lv;
					count = count + one_count;
			}

			ulong temp_m_send_time = 0;
			one_count = _m_send_time.ParseFrom(ref temp_m_send_time, ref int_stream);
			if (0 < one_count)
			{
					_m_send_time.member_value = temp_m_send_time;
					count = count + one_count;
			}

			uint temp_m_target_account_id = 0;
			one_count = _m_target_account_id.ParseFrom(ref temp_m_target_account_id, ref int_stream);
			if (0 < one_count)
			{
					_m_target_account_id.member_value = temp_m_target_account_id;
					count = count + one_count;
			}

			uint temp_m_target_server_id = 0;
			one_count = _m_target_server_id.ParseFrom(ref temp_m_target_server_id, ref int_stream);
			if (0 < one_count)
			{
					_m_target_server_id.member_value = temp_m_target_server_id;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Logic_Firend_Add_Req : IMessage
	{
		private ProtoMemberEmbedded<PlayerFriendInfo> _m_player_info;	// 请求方的基础信息
		private ProtoMemberEmbedded<PlayerId> _m_player_id;	// 目标玩家唯一id

		public Msg_Logic2Logic_Firend_Add_Req()
		{
			_m_player_info = new ProtoMemberEmbedded<PlayerFriendInfo>(1, true);
			_m_player_info.member_value = new PlayerFriendInfo();
			_m_player_id = new ProtoMemberEmbedded<PlayerId>(2, true);
			_m_player_id.member_value = new PlayerId();
		}

		public PlayerFriendInfo m_player_info
		{
			get{ return _m_player_info.member_value as PlayerFriendInfo; }
			set{ _m_player_info.member_value = value; }
		}
		public bool has_m_player_info
		{
			get{ return _m_player_info.has_value; }
		}

		public PlayerId m_player_id
		{
			get{ return _m_player_id.member_value as PlayerId; }
			set{ _m_player_id.member_value = value; }
		}
		public bool has_m_player_id
		{
			get{ return _m_player_id.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_player_info.Serialize(_m_player_info.member_value, ref out_stream);

			count += _m_player_id.Serialize(_m_player_id.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			PlayerFriendInfo temp_m_player_info = new PlayerFriendInfo();
			one_count = _m_player_info.ParseFrom(temp_m_player_info, ref int_stream);
			if (0 < one_count)
			{
					_m_player_info.member_value = temp_m_player_info;
					count = count + one_count;
			}

			PlayerId temp_m_player_id = new PlayerId();
			one_count = _m_player_id.ParseFrom(temp_m_player_id, ref int_stream);
			if (0 < one_count)
			{
					_m_player_id.member_value = temp_m_player_id;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Logic_Firend_Add_Res : IMessage
	{
		private ProtoMemberUInt32 _m_res;	// 添加结果（LogicRes）
		private ProtoMemberEmbedded<PlayerFriendInfo> _m_player_info;	// 目标方的基础信息

		public Msg_Logic2Logic_Firend_Add_Res()
		{
			_m_res = new ProtoMemberUInt32(1, true);
			_m_player_info = new ProtoMemberEmbedded<PlayerFriendInfo>(2, false);
			_m_player_info.member_value = new PlayerFriendInfo();
		}

		public Msg_Logic2Logic_Firend_Add_Res(uint __m_res)
		{
			_m_res = new ProtoMemberUInt32(1, true);
			_m_res.member_value = __m_res;
			_m_player_info = new ProtoMemberEmbedded<PlayerFriendInfo>(2, false);
			_m_player_info.member_value = new PlayerFriendInfo();
		}

		public uint m_res
		{
			get{ return _m_res.member_value; }
			set{ _m_res.member_value = value; }
		}
		public bool has_m_res
		{
			get{ return _m_res.has_value; }
		}

		public PlayerFriendInfo m_player_info
		{
			get{ return _m_player_info.member_value as PlayerFriendInfo; }
			set{ _m_player_info.member_value = value; }
		}
		public bool has_m_player_info
		{
			get{ return _m_player_info.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_res.Serialize(_m_res.member_value, ref out_stream);

			count += _m_player_info.Serialize(_m_player_info.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_res = 0;
			one_count = _m_res.ParseFrom(ref temp_m_res, ref int_stream);
			if (0 < one_count)
			{
					_m_res.member_value = temp_m_res;
					count = count + one_count;
			}

			PlayerFriendInfo temp_m_player_info = new PlayerFriendInfo();
			one_count = _m_player_info.ParseFrom(temp_m_player_info, ref int_stream);
			if (0 < one_count)
			{
					_m_player_info.member_value = temp_m_player_info;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Logic_Firend_Application_Req : IMessage
	{
		private ProtoMemberEmbedded<PlayerFriendInfo> _m_player_info;	// 请求方的基础信息
		private ProtoMemberEmbedded<PlayerId> _m_player_id;	// 目标玩家唯一id

		public Msg_Logic2Logic_Firend_Application_Req()
		{
			_m_player_info = new ProtoMemberEmbedded<PlayerFriendInfo>(1, true);
			_m_player_info.member_value = new PlayerFriendInfo();
			_m_player_id = new ProtoMemberEmbedded<PlayerId>(2, true);
			_m_player_id.member_value = new PlayerId();
		}

		public PlayerFriendInfo m_player_info
		{
			get{ return _m_player_info.member_value as PlayerFriendInfo; }
			set{ _m_player_info.member_value = value; }
		}
		public bool has_m_player_info
		{
			get{ return _m_player_info.has_value; }
		}

		public PlayerId m_player_id
		{
			get{ return _m_player_id.member_value as PlayerId; }
			set{ _m_player_id.member_value = value; }
		}
		public bool has_m_player_id
		{
			get{ return _m_player_id.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_player_info.Serialize(_m_player_info.member_value, ref out_stream);

			count += _m_player_id.Serialize(_m_player_id.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			PlayerFriendInfo temp_m_player_info = new PlayerFriendInfo();
			one_count = _m_player_info.ParseFrom(temp_m_player_info, ref int_stream);
			if (0 < one_count)
			{
					_m_player_info.member_value = temp_m_player_info;
					count = count + one_count;
			}

			PlayerId temp_m_player_id = new PlayerId();
			one_count = _m_player_id.ParseFrom(temp_m_player_id, ref int_stream);
			if (0 < one_count)
			{
					_m_player_id.member_value = temp_m_player_id;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Logic_Firend_Application_Res : IMessage
	{
		private ProtoMemberEmbedded<PlayerId> _m_player_id;	// 目标玩家唯一id
		private ProtoMemberUInt32 _m_res;	// 申请结果（LogicRes）

		public Msg_Logic2Logic_Firend_Application_Res()
		{
			_m_player_id = new ProtoMemberEmbedded<PlayerId>(1, true);
			_m_player_id.member_value = new PlayerId();
			_m_res = new ProtoMemberUInt32(2, true);
		}

		public Msg_Logic2Logic_Firend_Application_Res(uint __m_res)
		{
			_m_player_id = new ProtoMemberEmbedded<PlayerId>(1, true);
			_m_player_id.member_value = new PlayerId();
			_m_res = new ProtoMemberUInt32(2, true);
			_m_res.member_value = __m_res;
		}

		public PlayerId m_player_id
		{
			get{ return _m_player_id.member_value as PlayerId; }
			set{ _m_player_id.member_value = value; }
		}
		public bool has_m_player_id
		{
			get{ return _m_player_id.has_value; }
		}

		public uint m_res
		{
			get{ return _m_res.member_value; }
			set{ _m_res.member_value = value; }
		}
		public bool has_m_res
		{
			get{ return _m_res.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_player_id.Serialize(_m_player_id.member_value, ref out_stream);

			count += _m_res.Serialize(_m_res.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			PlayerId temp_m_player_id = new PlayerId();
			one_count = _m_player_id.ParseFrom(temp_m_player_id, ref int_stream);
			if (0 < one_count)
			{
					_m_player_id.member_value = temp_m_player_id;
					count = count + one_count;
			}

			uint temp_m_res = 0;
			one_count = _m_res.ParseFrom(ref temp_m_res, ref int_stream);
			if (0 < one_count)
			{
					_m_res.member_value = temp_m_res;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Logic_Firend_Find_Req : IMessage
	{
		private ProtoMemberEmbedded<PlayerId> _m_player_id;	// 待加载的玩家唯一id

		public Msg_Logic2Logic_Firend_Find_Req()
		{
			_m_player_id = new ProtoMemberEmbedded<PlayerId>(1, true);
			_m_player_id.member_value = new PlayerId();
		}

		public PlayerId m_player_id
		{
			get{ return _m_player_id.member_value as PlayerId; }
			set{ _m_player_id.member_value = value; }
		}
		public bool has_m_player_id
		{
			get{ return _m_player_id.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_player_id.Serialize(_m_player_id.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			PlayerId temp_m_player_id = new PlayerId();
			one_count = _m_player_id.ParseFrom(temp_m_player_id, ref int_stream);
			if (0 < one_count)
			{
					_m_player_id.member_value = temp_m_player_id;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Logic_Firend_Find_Res : IMessage
	{
		private ProtoMemberEmbeddedList<PlayerFriendInfo> _m_players;	// 查找结果
		private ProtoMemberBoolList _m_is_application;	// 对应的玩家是否已申请

		public Msg_Logic2Logic_Firend_Find_Res()
		{
			_m_players = new ProtoMemberEmbeddedList<PlayerFriendInfo>(1, false);
			_m_is_application = new ProtoMemberBoolList(2, false);
		}

		public System.Collections.Generic.List<PlayerFriendInfo> m_players
		{
			get{ return _m_players.member_value; }
		}
		public bool has_m_players
		{
			get{ return _m_players.has_value; }
		}

		public System.Collections.Generic.List<bool> m_is_application
		{
			get{ return _m_is_application.member_value; }
		}
		public bool has_m_is_application
		{
			get{ return _m_is_application.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			foreach(PlayerFriendInfo one_member_value in _m_players.member_value)
			{
				count += _m_players.Serialize(one_member_value, ref out_stream);
			}

			foreach(bool one_member_value in _m_is_application.member_value)
			{
				count += _m_is_application.Serialize(one_member_value, ref out_stream);
			}

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			while (true)
			{
				PlayerFriendInfo one_member_value = new PlayerFriendInfo();
				one_count = _m_players.ParseFrom(one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_players.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			while (true)
			{
				bool one_member_value = false;
				one_count = _m_is_application.ParseFrom(ref one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_is_application.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			return count;
		}
	}

	public class Msg_Logic2Logic_Firend_Remove_Req : IMessage
	{
		private ProtoMemberEmbedded<PlayerId> _m_player_id;	// 目标玩家唯一id

		public Msg_Logic2Logic_Firend_Remove_Req()
		{
			_m_player_id = new ProtoMemberEmbedded<PlayerId>(1, true);
			_m_player_id.member_value = new PlayerId();
		}

		public PlayerId m_player_id
		{
			get{ return _m_player_id.member_value as PlayerId; }
			set{ _m_player_id.member_value = value; }
		}
		public bool has_m_player_id
		{
			get{ return _m_player_id.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_player_id.Serialize(_m_player_id.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			PlayerId temp_m_player_id = new PlayerId();
			one_count = _m_player_id.ParseFrom(temp_m_player_id, ref int_stream);
			if (0 < one_count)
			{
					_m_player_id.member_value = temp_m_player_id;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Logic_Firend_Update_Req : IMessage
	{
		private ProtoMemberEmbedded<PlayerId> _m_player_id;	// 请求的好友id

		public Msg_Logic2Logic_Firend_Update_Req()
		{
			_m_player_id = new ProtoMemberEmbedded<PlayerId>(1, true);
			_m_player_id.member_value = new PlayerId();
		}

		public PlayerId m_player_id
		{
			get{ return _m_player_id.member_value as PlayerId; }
			set{ _m_player_id.member_value = value; }
		}
		public bool has_m_player_id
		{
			get{ return _m_player_id.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_player_id.Serialize(_m_player_id.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			PlayerId temp_m_player_id = new PlayerId();
			one_count = _m_player_id.ParseFrom(temp_m_player_id, ref int_stream);
			if (0 < one_count)
			{
					_m_player_id.member_value = temp_m_player_id;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Logic_Firend_Update_Res : IMessage
	{
		private ProtoMemberEmbedded<PlayerFriendInfo> _m_player_info;	// 好友信息

		public Msg_Logic2Logic_Firend_Update_Res()
		{
			_m_player_info = new ProtoMemberEmbedded<PlayerFriendInfo>(1, true);
			_m_player_info.member_value = new PlayerFriendInfo();
		}

		public PlayerFriendInfo m_player_info
		{
			get{ return _m_player_info.member_value as PlayerFriendInfo; }
			set{ _m_player_info.member_value = value; }
		}
		public bool has_m_player_info
		{
			get{ return _m_player_info.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_player_info.Serialize(_m_player_info.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			PlayerFriendInfo temp_m_player_info = new PlayerFriendInfo();
			one_count = _m_player_info.ParseFrom(temp_m_player_info, ref int_stream);
			if (0 < one_count)
			{
					_m_player_info.member_value = temp_m_player_info;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Logic_PVE_HuntingChallenge_AttackEnd_Req : IMessage
	{
		private ProtoMemberUInt32 _m_map_id;	// 狩猎急速挑战地图id
		private ProtoMemberUInt32 _m_hunting_lv;	// 队伍狩猎等级
		private ProtoMemberUInt32 _m_score;	// 最终积分
		private ProtoMemberBool _m_is_boss_killed;	// boss是否已杀
		private ProtoMemberUInt32List _m_toy_type;	// 参战英雄id

		public Msg_Logic2Logic_PVE_HuntingChallenge_AttackEnd_Req()
		{
			_m_map_id = new ProtoMemberUInt32(1, true);
			_m_hunting_lv = new ProtoMemberUInt32(2, true);
			_m_score = new ProtoMemberUInt32(3, true);
			_m_is_boss_killed = new ProtoMemberBool(4, true);
			_m_toy_type = new ProtoMemberUInt32List(5, false);
		}

		public Msg_Logic2Logic_PVE_HuntingChallenge_AttackEnd_Req(uint __m_map_id, uint __m_hunting_lv, uint __m_score, bool __m_is_boss_killed)
		{
			_m_map_id = new ProtoMemberUInt32(1, true);
			_m_map_id.member_value = __m_map_id;
			_m_hunting_lv = new ProtoMemberUInt32(2, true);
			_m_hunting_lv.member_value = __m_hunting_lv;
			_m_score = new ProtoMemberUInt32(3, true);
			_m_score.member_value = __m_score;
			_m_is_boss_killed = new ProtoMemberBool(4, true);
			_m_is_boss_killed.member_value = __m_is_boss_killed;
			_m_toy_type = new ProtoMemberUInt32List(5, false);
		}

		public uint m_map_id
		{
			get{ return _m_map_id.member_value; }
			set{ _m_map_id.member_value = value; }
		}
		public bool has_m_map_id
		{
			get{ return _m_map_id.has_value; }
		}

		public uint m_hunting_lv
		{
			get{ return _m_hunting_lv.member_value; }
			set{ _m_hunting_lv.member_value = value; }
		}
		public bool has_m_hunting_lv
		{
			get{ return _m_hunting_lv.has_value; }
		}

		public uint m_score
		{
			get{ return _m_score.member_value; }
			set{ _m_score.member_value = value; }
		}
		public bool has_m_score
		{
			get{ return _m_score.has_value; }
		}

		public bool m_is_boss_killed
		{
			get{ return _m_is_boss_killed.member_value; }
			set{ _m_is_boss_killed.member_value = value; }
		}
		public bool has_m_is_boss_killed
		{
			get{ return _m_is_boss_killed.has_value; }
		}

		public System.Collections.Generic.List<uint> m_toy_type
		{
			get{ return _m_toy_type.member_value; }
		}
		public bool has_m_toy_type
		{
			get{ return _m_toy_type.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_map_id.Serialize(_m_map_id.member_value, ref out_stream);

			count += _m_hunting_lv.Serialize(_m_hunting_lv.member_value, ref out_stream);

			count += _m_score.Serialize(_m_score.member_value, ref out_stream);

			count += _m_is_boss_killed.Serialize(_m_is_boss_killed.member_value, ref out_stream);

			foreach(uint one_member_value in _m_toy_type.member_value)
			{
				count += _m_toy_type.Serialize(one_member_value, ref out_stream);
			}

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_map_id = 0;
			one_count = _m_map_id.ParseFrom(ref temp_m_map_id, ref int_stream);
			if (0 < one_count)
			{
					_m_map_id.member_value = temp_m_map_id;
					count = count + one_count;
			}

			uint temp_m_hunting_lv = 0;
			one_count = _m_hunting_lv.ParseFrom(ref temp_m_hunting_lv, ref int_stream);
			if (0 < one_count)
			{
					_m_hunting_lv.member_value = temp_m_hunting_lv;
					count = count + one_count;
			}

			uint temp_m_score = 0;
			one_count = _m_score.ParseFrom(ref temp_m_score, ref int_stream);
			if (0 < one_count)
			{
					_m_score.member_value = temp_m_score;
					count = count + one_count;
			}

			bool temp_m_is_boss_killed = false;
			one_count = _m_is_boss_killed.ParseFrom(ref temp_m_is_boss_killed, ref int_stream);
			if (0 < one_count)
			{
					_m_is_boss_killed.member_value = temp_m_is_boss_killed;
					count = count + one_count;
			}

			while (true)
			{
				uint one_member_value = 0;
				one_count = _m_toy_type.ParseFrom(ref one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_toy_type.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			return count;
		}
	}

	public class Msg_Logic2Logic_Player_Update_Req : IMessage
	{

		public Msg_Logic2Logic_Player_Update_Req()
		{
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			return count;
		}
	}

	public class Msg_Logic2Logic_Statistics_Req : IMessage
	{
		private ProtoMemberEmbedded<PlayerId> _m_player_id;	// 目标玩家id

		public Msg_Logic2Logic_Statistics_Req()
		{
			_m_player_id = new ProtoMemberEmbedded<PlayerId>(1, true);
			_m_player_id.member_value = new PlayerId();
		}

		public PlayerId m_player_id
		{
			get{ return _m_player_id.member_value as PlayerId; }
			set{ _m_player_id.member_value = value; }
		}
		public bool has_m_player_id
		{
			get{ return _m_player_id.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_player_id.Serialize(_m_player_id.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			PlayerId temp_m_player_id = new PlayerId();
			one_count = _m_player_id.ParseFrom(temp_m_player_id, ref int_stream);
			if (0 < one_count)
			{
					_m_player_id.member_value = temp_m_player_id;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Logic_Statistics_Res : IMessage
	{
		private ProtoMemberEmbedded<PlayerId> _m_player_id;	// 目标玩家id
		private ProtoMemberBool _m_exists;	// 目标是否存在数据
		private ProtoMemberEmbedded<PlayerStatisticsList> _m_statistics;	// 统计数据列表

		public Msg_Logic2Logic_Statistics_Res()
		{
			_m_player_id = new ProtoMemberEmbedded<PlayerId>(1, true);
			_m_player_id.member_value = new PlayerId();
			_m_exists = new ProtoMemberBool(2, true);
			_m_statistics = new ProtoMemberEmbedded<PlayerStatisticsList>(3, true);
			_m_statistics.member_value = new PlayerStatisticsList();
		}

		public Msg_Logic2Logic_Statistics_Res(bool __m_exists)
		{
			_m_player_id = new ProtoMemberEmbedded<PlayerId>(1, true);
			_m_player_id.member_value = new PlayerId();
			_m_exists = new ProtoMemberBool(2, true);
			_m_exists.member_value = __m_exists;
			_m_statistics = new ProtoMemberEmbedded<PlayerStatisticsList>(3, true);
			_m_statistics.member_value = new PlayerStatisticsList();
		}

		public PlayerId m_player_id
		{
			get{ return _m_player_id.member_value as PlayerId; }
			set{ _m_player_id.member_value = value; }
		}
		public bool has_m_player_id
		{
			get{ return _m_player_id.has_value; }
		}

		public bool m_exists
		{
			get{ return _m_exists.member_value; }
			set{ _m_exists.member_value = value; }
		}
		public bool has_m_exists
		{
			get{ return _m_exists.has_value; }
		}

		public PlayerStatisticsList m_statistics
		{
			get{ return _m_statistics.member_value as PlayerStatisticsList; }
			set{ _m_statistics.member_value = value; }
		}
		public bool has_m_statistics
		{
			get{ return _m_statistics.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_player_id.Serialize(_m_player_id.member_value, ref out_stream);

			count += _m_exists.Serialize(_m_exists.member_value, ref out_stream);

			count += _m_statistics.Serialize(_m_statistics.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			PlayerId temp_m_player_id = new PlayerId();
			one_count = _m_player_id.ParseFrom(temp_m_player_id, ref int_stream);
			if (0 < one_count)
			{
					_m_player_id.member_value = temp_m_player_id;
					count = count + one_count;
			}

			bool temp_m_exists = false;
			one_count = _m_exists.ParseFrom(ref temp_m_exists, ref int_stream);
			if (0 < one_count)
			{
					_m_exists.member_value = temp_m_exists;
					count = count + one_count;
			}

			PlayerStatisticsList temp_m_statistics = new PlayerStatisticsList();
			one_count = _m_statistics.ParseFrom(temp_m_statistics, ref int_stream);
			if (0 < one_count)
			{
					_m_statistics.member_value = temp_m_statistics;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Player_CheckPlayerName_Req : IMessage
	{
		private ProtoMemberString _m_player_name;	// 角色名

		public Msg_Logic2Player_CheckPlayerName_Req()
		{
			_m_player_name = new ProtoMemberString(1, true);
		}

		public Msg_Logic2Player_CheckPlayerName_Req(string __m_player_name)
		{
			_m_player_name = new ProtoMemberString(1, true);
			_m_player_name.member_value = __m_player_name;
		}

		public string m_player_name
		{
			get{ return _m_player_name.member_value; }
			set{ _m_player_name.member_value = value; }
		}
		public bool has_m_player_name
		{
			get{ return _m_player_name.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_player_name.Serialize(_m_player_name.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			string temp_m_player_name = "";
			one_count = _m_player_name.ParseFrom(ref temp_m_player_name, ref int_stream);
			if (0 < one_count)
			{
					_m_player_name.member_value = temp_m_player_name;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Player_Create_Player_Req : IMessage
	{
		private ProtoMemberEmbedded<Player> _m_player_data;	// 角色属性

		public Msg_Logic2Player_Create_Player_Req()
		{
			_m_player_data = new ProtoMemberEmbedded<Player>(1, true);
			_m_player_data.member_value = new Player();
		}

		public Player m_player_data
		{
			get{ return _m_player_data.member_value as Player; }
			set{ _m_player_data.member_value = value; }
		}
		public bool has_m_player_data
		{
			get{ return _m_player_data.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_player_data.Serialize(_m_player_data.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			Player temp_m_player_data = new Player();
			one_count = _m_player_data.ParseFrom(temp_m_player_data, ref int_stream);
			if (0 < one_count)
			{
					_m_player_data.member_value = temp_m_player_data;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Player_Firend_PlayerInfo_Req : IMessage
	{
		private ProtoMemberUInt32 _m_operator;	// 请求加载玩家数据的协议号
		private ProtoMemberEmbedded<PlayerFriendInfo> _m_player_info;	// 请求方的基础信息（可能存在的信息，用于申请/添加好友）
		private ProtoMemberEmbedded<PlayerId> _m_player_id;	// 接受方（待加载）的玩家唯一id

		public Msg_Logic2Player_Firend_PlayerInfo_Req()
		{
			_m_operator = new ProtoMemberUInt32(1, true);
			_m_player_info = new ProtoMemberEmbedded<PlayerFriendInfo>(2, false);
			_m_player_info.member_value = new PlayerFriendInfo();
			_m_player_id = new ProtoMemberEmbedded<PlayerId>(3, true);
			_m_player_id.member_value = new PlayerId();
		}

		public Msg_Logic2Player_Firend_PlayerInfo_Req(uint __m_operator)
		{
			_m_operator = new ProtoMemberUInt32(1, true);
			_m_operator.member_value = __m_operator;
			_m_player_info = new ProtoMemberEmbedded<PlayerFriendInfo>(2, false);
			_m_player_info.member_value = new PlayerFriendInfo();
			_m_player_id = new ProtoMemberEmbedded<PlayerId>(3, true);
			_m_player_id.member_value = new PlayerId();
		}

		public uint m_operator
		{
			get{ return _m_operator.member_value; }
			set{ _m_operator.member_value = value; }
		}
		public bool has_m_operator
		{
			get{ return _m_operator.has_value; }
		}

		public PlayerFriendInfo m_player_info
		{
			get{ return _m_player_info.member_value as PlayerFriendInfo; }
			set{ _m_player_info.member_value = value; }
		}
		public bool has_m_player_info
		{
			get{ return _m_player_info.has_value; }
		}

		public PlayerId m_player_id
		{
			get{ return _m_player_id.member_value as PlayerId; }
			set{ _m_player_id.member_value = value; }
		}
		public bool has_m_player_id
		{
			get{ return _m_player_id.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_operator.Serialize(_m_operator.member_value, ref out_stream);

			count += _m_player_info.Serialize(_m_player_info.member_value, ref out_stream);

			count += _m_player_id.Serialize(_m_player_id.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_operator = 0;
			one_count = _m_operator.ParseFrom(ref temp_m_operator, ref int_stream);
			if (0 < one_count)
			{
					_m_operator.member_value = temp_m_operator;
					count = count + one_count;
			}

			PlayerFriendInfo temp_m_player_info = new PlayerFriendInfo();
			one_count = _m_player_info.ParseFrom(temp_m_player_info, ref int_stream);
			if (0 < one_count)
			{
					_m_player_info.member_value = temp_m_player_info;
					count = count + one_count;
			}

			PlayerId temp_m_player_id = new PlayerId();
			one_count = _m_player_id.ParseFrom(temp_m_player_id, ref int_stream);
			if (0 < one_count)
			{
					_m_player_id.member_value = temp_m_player_id;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Player_GM_PlayerInfo_Req : IMessage
	{
		private ProtoMemberUInt32 _m_player_index;	// 本服的第几个角色(一个账号,一个服,最多3个角色)

		public Msg_Logic2Player_GM_PlayerInfo_Req()
		{
			_m_player_index = new ProtoMemberUInt32(1, true);
		}

		public Msg_Logic2Player_GM_PlayerInfo_Req(uint __m_player_index)
		{
			_m_player_index = new ProtoMemberUInt32(1, true);
			_m_player_index.member_value = __m_player_index;
		}

		public uint m_player_index
		{
			get{ return _m_player_index.member_value; }
			set{ _m_player_index.member_value = value; }
		}
		public bool has_m_player_index
		{
			get{ return _m_player_index.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_player_index.Serialize(_m_player_index.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_player_index = 0;
			one_count = _m_player_index.ParseFrom(ref temp_m_player_index, ref int_stream);
			if (0 < one_count)
			{
					_m_player_index.member_value = temp_m_player_index;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Player_PVE_GuestInfo_Req : IMessage
	{
		private ProtoMemberUInt32 _m_friend_account_id;	// 被邀请的玩家id
		private ProtoMemberUInt32 _m_friend_server_id;	// 被邀请的玩家所属服id
		private ProtoMemberUInt32 _m_friend_player_index;	// 在该服的第几个角色
		private ProtoMemberUInt32 _m_seat_index;	// 邀请的位置 0 - 3
		private ProtoMemberUInt32 _m_toy_type;	// 邀请的玩具类型
		private ProtoMemberUInt32 _m_toy_sn;	// 是否使用实体玩具

		public Msg_Logic2Player_PVE_GuestInfo_Req()
		{
			_m_friend_account_id = new ProtoMemberUInt32(1, true);
			_m_friend_server_id = new ProtoMemberUInt32(2, true);
			_m_friend_player_index = new ProtoMemberUInt32(3, true);
			_m_seat_index = new ProtoMemberUInt32(4, true);
			_m_toy_type = new ProtoMemberUInt32(5, true);
			_m_toy_sn = new ProtoMemberUInt32(6, true);
		}

		public Msg_Logic2Player_PVE_GuestInfo_Req(uint __m_friend_account_id, uint __m_friend_server_id, uint __m_friend_player_index, uint __m_seat_index, uint __m_toy_type, uint __m_toy_sn)
		{
			_m_friend_account_id = new ProtoMemberUInt32(1, true);
			_m_friend_account_id.member_value = __m_friend_account_id;
			_m_friend_server_id = new ProtoMemberUInt32(2, true);
			_m_friend_server_id.member_value = __m_friend_server_id;
			_m_friend_player_index = new ProtoMemberUInt32(3, true);
			_m_friend_player_index.member_value = __m_friend_player_index;
			_m_seat_index = new ProtoMemberUInt32(4, true);
			_m_seat_index.member_value = __m_seat_index;
			_m_toy_type = new ProtoMemberUInt32(5, true);
			_m_toy_type.member_value = __m_toy_type;
			_m_toy_sn = new ProtoMemberUInt32(6, true);
			_m_toy_sn.member_value = __m_toy_sn;
		}

		public uint m_friend_account_id
		{
			get{ return _m_friend_account_id.member_value; }
			set{ _m_friend_account_id.member_value = value; }
		}
		public bool has_m_friend_account_id
		{
			get{ return _m_friend_account_id.has_value; }
		}

		public uint m_friend_server_id
		{
			get{ return _m_friend_server_id.member_value; }
			set{ _m_friend_server_id.member_value = value; }
		}
		public bool has_m_friend_server_id
		{
			get{ return _m_friend_server_id.has_value; }
		}

		public uint m_friend_player_index
		{
			get{ return _m_friend_player_index.member_value; }
			set{ _m_friend_player_index.member_value = value; }
		}
		public bool has_m_friend_player_index
		{
			get{ return _m_friend_player_index.has_value; }
		}

		public uint m_seat_index
		{
			get{ return _m_seat_index.member_value; }
			set{ _m_seat_index.member_value = value; }
		}
		public bool has_m_seat_index
		{
			get{ return _m_seat_index.has_value; }
		}

		public uint m_toy_type
		{
			get{ return _m_toy_type.member_value; }
			set{ _m_toy_type.member_value = value; }
		}
		public bool has_m_toy_type
		{
			get{ return _m_toy_type.has_value; }
		}

		public uint m_toy_sn
		{
			get{ return _m_toy_sn.member_value; }
			set{ _m_toy_sn.member_value = value; }
		}
		public bool has_m_toy_sn
		{
			get{ return _m_toy_sn.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_friend_account_id.Serialize(_m_friend_account_id.member_value, ref out_stream);

			count += _m_friend_server_id.Serialize(_m_friend_server_id.member_value, ref out_stream);

			count += _m_friend_player_index.Serialize(_m_friend_player_index.member_value, ref out_stream);

			count += _m_seat_index.Serialize(_m_seat_index.member_value, ref out_stream);

			count += _m_toy_type.Serialize(_m_toy_type.member_value, ref out_stream);

			count += _m_toy_sn.Serialize(_m_toy_sn.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_friend_account_id = 0;
			one_count = _m_friend_account_id.ParseFrom(ref temp_m_friend_account_id, ref int_stream);
			if (0 < one_count)
			{
					_m_friend_account_id.member_value = temp_m_friend_account_id;
					count = count + one_count;
			}

			uint temp_m_friend_server_id = 0;
			one_count = _m_friend_server_id.ParseFrom(ref temp_m_friend_server_id, ref int_stream);
			if (0 < one_count)
			{
					_m_friend_server_id.member_value = temp_m_friend_server_id;
					count = count + one_count;
			}

			uint temp_m_friend_player_index = 0;
			one_count = _m_friend_player_index.ParseFrom(ref temp_m_friend_player_index, ref int_stream);
			if (0 < one_count)
			{
					_m_friend_player_index.member_value = temp_m_friend_player_index;
					count = count + one_count;
			}

			uint temp_m_seat_index = 0;
			one_count = _m_seat_index.ParseFrom(ref temp_m_seat_index, ref int_stream);
			if (0 < one_count)
			{
					_m_seat_index.member_value = temp_m_seat_index;
					count = count + one_count;
			}

			uint temp_m_toy_type = 0;
			one_count = _m_toy_type.ParseFrom(ref temp_m_toy_type, ref int_stream);
			if (0 < one_count)
			{
					_m_toy_type.member_value = temp_m_toy_type;
					count = count + one_count;
			}

			uint temp_m_toy_sn = 0;
			one_count = _m_toy_sn.ParseFrom(ref temp_m_toy_sn, ref int_stream);
			if (0 < one_count)
			{
					_m_toy_sn.member_value = temp_m_toy_sn;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Player_Player_Info_Req : IMessage
	{
		private ProtoMemberUInt32 _m_player_index;	// 本服的第几个角色(一个账号,一个服,最多3个角色)
		private ProtoMemberString _m_ip;	// 登陆ip
		private ProtoMemberString _m_imei;	// 设备唯一标识

		public Msg_Logic2Player_Player_Info_Req()
		{
			_m_player_index = new ProtoMemberUInt32(1, true);
			_m_ip = new ProtoMemberString(2, true);
			_m_imei = new ProtoMemberString(3, true);
		}

		public Msg_Logic2Player_Player_Info_Req(uint __m_player_index, string __m_ip, string __m_imei)
		{
			_m_player_index = new ProtoMemberUInt32(1, true);
			_m_player_index.member_value = __m_player_index;
			_m_ip = new ProtoMemberString(2, true);
			_m_ip.member_value = __m_ip;
			_m_imei = new ProtoMemberString(3, true);
			_m_imei.member_value = __m_imei;
		}

		public uint m_player_index
		{
			get{ return _m_player_index.member_value; }
			set{ _m_player_index.member_value = value; }
		}
		public bool has_m_player_index
		{
			get{ return _m_player_index.has_value; }
		}

		public string m_ip
		{
			get{ return _m_ip.member_value; }
			set{ _m_ip.member_value = value; }
		}
		public bool has_m_ip
		{
			get{ return _m_ip.has_value; }
		}

		public string m_imei
		{
			get{ return _m_imei.member_value; }
			set{ _m_imei.member_value = value; }
		}
		public bool has_m_imei
		{
			get{ return _m_imei.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_player_index.Serialize(_m_player_index.member_value, ref out_stream);

			count += _m_ip.Serialize(_m_ip.member_value, ref out_stream);

			count += _m_imei.Serialize(_m_imei.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_player_index = 0;
			one_count = _m_player_index.ParseFrom(ref temp_m_player_index, ref int_stream);
			if (0 < one_count)
			{
					_m_player_index.member_value = temp_m_player_index;
					count = count + one_count;
			}

			string temp_m_ip = "";
			one_count = _m_ip.ParseFrom(ref temp_m_ip, ref int_stream);
			if (0 < one_count)
			{
					_m_ip.member_value = temp_m_ip;
					count = count + one_count;
			}

			string temp_m_imei = "";
			one_count = _m_imei.ParseFrom(ref temp_m_imei, ref int_stream);
			if (0 < one_count)
			{
					_m_imei.member_value = temp_m_imei;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Player_Player_List_Req : IMessage
	{

		public Msg_Logic2Player_Player_List_Req()
		{
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			return count;
		}
	}

	public class Msg_Logic2Player_Player_Update_Req : IMessage
	{
		private ProtoMemberEmbedded<Player> _m_player_data;	// 角色属性

		public Msg_Logic2Player_Player_Update_Req()
		{
			_m_player_data = new ProtoMemberEmbedded<Player>(1, true);
			_m_player_data.member_value = new Player();
		}

		public Player m_player_data
		{
			get{ return _m_player_data.member_value as Player; }
			set{ _m_player_data.member_value = value; }
		}
		public bool has_m_player_data
		{
			get{ return _m_player_data.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_player_data.Serialize(_m_player_data.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			Player temp_m_player_data = new Player();
			one_count = _m_player_data.ParseFrom(temp_m_player_data, ref int_stream);
			if (0 < one_count)
			{
					_m_player_data.member_value = temp_m_player_data;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Player_SetPlayerName_Req : IMessage
	{
		private ProtoMemberUInt32 _m_account_id;	// 角色id == 账号id
		private ProtoMemberUInt32 _m_server_id;	// 所属服id
		private ProtoMemberUInt32 _m_player_index;	// 本服的第几个角色(一个账号,一个服,最多3个角色)
		private ProtoMemberString _m_player_name;	// 角色名

		public Msg_Logic2Player_SetPlayerName_Req()
		{
			_m_account_id = new ProtoMemberUInt32(1, false);
			_m_server_id = new ProtoMemberUInt32(2, false);
			_m_player_index = new ProtoMemberUInt32(3, false);
			_m_player_name = new ProtoMemberString(4, true);
		}

		public Msg_Logic2Player_SetPlayerName_Req(uint __m_account_id, uint __m_server_id, uint __m_player_index, string __m_player_name)
		{
			_m_account_id = new ProtoMemberUInt32(1, false);
			_m_account_id.member_value = __m_account_id;
			_m_server_id = new ProtoMemberUInt32(2, false);
			_m_server_id.member_value = __m_server_id;
			_m_player_index = new ProtoMemberUInt32(3, false);
			_m_player_index.member_value = __m_player_index;
			_m_player_name = new ProtoMemberString(4, true);
			_m_player_name.member_value = __m_player_name;
		}

		public uint m_account_id
		{
			get{ return _m_account_id.member_value; }
			set{ _m_account_id.member_value = value; }
		}
		public bool has_m_account_id
		{
			get{ return _m_account_id.has_value; }
		}

		public uint m_server_id
		{
			get{ return _m_server_id.member_value; }
			set{ _m_server_id.member_value = value; }
		}
		public bool has_m_server_id
		{
			get{ return _m_server_id.has_value; }
		}

		public uint m_player_index
		{
			get{ return _m_player_index.member_value; }
			set{ _m_player_index.member_value = value; }
		}
		public bool has_m_player_index
		{
			get{ return _m_player_index.has_value; }
		}

		public string m_player_name
		{
			get{ return _m_player_name.member_value; }
			set{ _m_player_name.member_value = value; }
		}
		public bool has_m_player_name
		{
			get{ return _m_player_name.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_account_id.Serialize(_m_account_id.member_value, ref out_stream);

			count += _m_server_id.Serialize(_m_server_id.member_value, ref out_stream);

			count += _m_player_index.Serialize(_m_player_index.member_value, ref out_stream);

			count += _m_player_name.Serialize(_m_player_name.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_account_id = 0;
			one_count = _m_account_id.ParseFrom(ref temp_m_account_id, ref int_stream);
			if (0 < one_count)
			{
					_m_account_id.member_value = temp_m_account_id;
					count = count + one_count;
			}

			uint temp_m_server_id = 0;
			one_count = _m_server_id.ParseFrom(ref temp_m_server_id, ref int_stream);
			if (0 < one_count)
			{
					_m_server_id.member_value = temp_m_server_id;
					count = count + one_count;
			}

			uint temp_m_player_index = 0;
			one_count = _m_player_index.ParseFrom(ref temp_m_player_index, ref int_stream);
			if (0 < one_count)
			{
					_m_player_index.member_value = temp_m_player_index;
					count = count + one_count;
			}

			string temp_m_player_name = "";
			one_count = _m_player_name.ParseFrom(ref temp_m_player_name, ref int_stream);
			if (0 < one_count)
			{
					_m_player_name.member_value = temp_m_player_name;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Ranking_CreatePlayer_Req : IMessage
	{
		private ProtoMemberEmbedded<PlayerRankingInfo> _m_CurrInfo;	//本人当前信息

		public Msg_Logic2Ranking_CreatePlayer_Req()
		{
			_m_CurrInfo = new ProtoMemberEmbedded<PlayerRankingInfo>(1, false);
			_m_CurrInfo.member_value = new PlayerRankingInfo();
		}

		public PlayerRankingInfo m_CurrInfo
		{
			get{ return _m_CurrInfo.member_value as PlayerRankingInfo; }
			set{ _m_CurrInfo.member_value = value; }
		}
		public bool has_m_CurrInfo
		{
			get{ return _m_CurrInfo.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_CurrInfo.Serialize(_m_CurrInfo.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			PlayerRankingInfo temp_m_CurrInfo = new PlayerRankingInfo();
			one_count = _m_CurrInfo.ParseFrom(temp_m_CurrInfo, ref int_stream);
			if (0 < one_count)
			{
					_m_CurrInfo.member_value = temp_m_CurrInfo;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Ranking_UpdatePlayerName_Req : IMessage
	{
		private ProtoMemberString _m_PlayerName;	

		public Msg_Logic2Ranking_UpdatePlayerName_Req()
		{
			_m_PlayerName = new ProtoMemberString(1, false);
		}

		public Msg_Logic2Ranking_UpdatePlayerName_Req(string __m_PlayerName)
		{
			_m_PlayerName = new ProtoMemberString(1, false);
			_m_PlayerName.member_value = __m_PlayerName;
		}

		public string m_PlayerName
		{
			get{ return _m_PlayerName.member_value; }
			set{ _m_PlayerName.member_value = value; }
		}
		public bool has_m_PlayerName
		{
			get{ return _m_PlayerName.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_PlayerName.Serialize(_m_PlayerName.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			string temp_m_PlayerName = "";
			one_count = _m_PlayerName.ParseFrom(ref temp_m_PlayerName, ref int_stream);
			if (0 < one_count)
			{
					_m_PlayerName.member_value = temp_m_PlayerName;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Ranking_UpdatePlayerUnionName_Req : IMessage
	{
		private ProtoMemberString _m_UnionName;	

		public Msg_Logic2Ranking_UpdatePlayerUnionName_Req()
		{
			_m_UnionName = new ProtoMemberString(1, false);
		}

		public Msg_Logic2Ranking_UpdatePlayerUnionName_Req(string __m_UnionName)
		{
			_m_UnionName = new ProtoMemberString(1, false);
			_m_UnionName.member_value = __m_UnionName;
		}

		public string m_UnionName
		{
			get{ return _m_UnionName.member_value; }
			set{ _m_UnionName.member_value = value; }
		}
		public bool has_m_UnionName
		{
			get{ return _m_UnionName.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_UnionName.Serialize(_m_UnionName.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			string temp_m_UnionName = "";
			one_count = _m_UnionName.ParseFrom(ref temp_m_UnionName, ref int_stream);
			if (0 < one_count)
			{
					_m_UnionName.member_value = temp_m_UnionName;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Ranking_UpdatePlayer_Req : IMessage
	{
		private ProtoMemberEmbedded<PlayerRankingInfo> _m_OldInfo;	//本人旧信息
		private ProtoMemberEmbedded<PlayerRankingInfo> _m_NewInfo;	//本人新信息

		public Msg_Logic2Ranking_UpdatePlayer_Req()
		{
			_m_OldInfo = new ProtoMemberEmbedded<PlayerRankingInfo>(1, false);
			_m_OldInfo.member_value = new PlayerRankingInfo();
			_m_NewInfo = new ProtoMemberEmbedded<PlayerRankingInfo>(2, false);
			_m_NewInfo.member_value = new PlayerRankingInfo();
		}

		public PlayerRankingInfo m_OldInfo
		{
			get{ return _m_OldInfo.member_value as PlayerRankingInfo; }
			set{ _m_OldInfo.member_value = value; }
		}
		public bool has_m_OldInfo
		{
			get{ return _m_OldInfo.has_value; }
		}

		public PlayerRankingInfo m_NewInfo
		{
			get{ return _m_NewInfo.member_value as PlayerRankingInfo; }
			set{ _m_NewInfo.member_value = value; }
		}
		public bool has_m_NewInfo
		{
			get{ return _m_NewInfo.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_OldInfo.Serialize(_m_OldInfo.member_value, ref out_stream);

			count += _m_NewInfo.Serialize(_m_NewInfo.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			PlayerRankingInfo temp_m_OldInfo = new PlayerRankingInfo();
			one_count = _m_OldInfo.ParseFrom(temp_m_OldInfo, ref int_stream);
			if (0 < one_count)
			{
					_m_OldInfo.member_value = temp_m_OldInfo;
					count = count + one_count;
			}

			PlayerRankingInfo temp_m_NewInfo = new PlayerRankingInfo();
			one_count = _m_NewInfo.ParseFrom(temp_m_NewInfo, ref int_stream);
			if (0 < one_count)
			{
					_m_NewInfo.member_value = temp_m_NewInfo;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Team_Login_Req : IMessage
	{

		public Msg_Logic2Team_Login_Req()
		{
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			return count;
		}
	}

	public class Msg_Logic2Team_Logout_Req : IMessage
	{

		public Msg_Logic2Team_Logout_Req()
		{
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			return count;
		}
	}

	public class Msg_Logic2Team_PVE_Extreme_AttackBegin_Req : IMessage
	{
		private ProtoMemberUInt32 _m_hard_lv;	// 难度
		private ProtoMemberEmbedded<PlayerTeam> _m_team;	// 队伍信息

		public Msg_Logic2Team_PVE_Extreme_AttackBegin_Req()
		{
			_m_hard_lv = new ProtoMemberUInt32(1, true);
			_m_team = new ProtoMemberEmbedded<PlayerTeam>(2, true);
			_m_team.member_value = new PlayerTeam();
		}

		public Msg_Logic2Team_PVE_Extreme_AttackBegin_Req(uint __m_hard_lv)
		{
			_m_hard_lv = new ProtoMemberUInt32(1, true);
			_m_hard_lv.member_value = __m_hard_lv;
			_m_team = new ProtoMemberEmbedded<PlayerTeam>(2, true);
			_m_team.member_value = new PlayerTeam();
		}

		public uint m_hard_lv
		{
			get{ return _m_hard_lv.member_value; }
			set{ _m_hard_lv.member_value = value; }
		}
		public bool has_m_hard_lv
		{
			get{ return _m_hard_lv.has_value; }
		}

		public PlayerTeam m_team
		{
			get{ return _m_team.member_value as PlayerTeam; }
			set{ _m_team.member_value = value; }
		}
		public bool has_m_team
		{
			get{ return _m_team.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_hard_lv.Serialize(_m_hard_lv.member_value, ref out_stream);

			count += _m_team.Serialize(_m_team.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_hard_lv = 0;
			one_count = _m_hard_lv.ParseFrom(ref temp_m_hard_lv, ref int_stream);
			if (0 < one_count)
			{
					_m_hard_lv.member_value = temp_m_hard_lv;
					count = count + one_count;
			}

			PlayerTeam temp_m_team = new PlayerTeam();
			one_count = _m_team.ParseFrom(temp_m_team, ref int_stream);
			if (0 < one_count)
			{
					_m_team.member_value = temp_m_team;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Team_PVE_HuntingChapter_AttackBegin_Req : IMessage
	{
		private ProtoMemberUInt32 _m_chapter_id;	// PVE狩猎随机关卡时，指定随机关卡id
		private ProtoMemberUInt32 _m_hunting_lv;	// 队伍狩猎等级
		private ProtoMemberEmbedded<PlayerTeam> _m_team;	// 队伍信息

		public Msg_Logic2Team_PVE_HuntingChapter_AttackBegin_Req()
		{
			_m_chapter_id = new ProtoMemberUInt32(1, true);
			_m_hunting_lv = new ProtoMemberUInt32(2, true);
			_m_team = new ProtoMemberEmbedded<PlayerTeam>(3, true);
			_m_team.member_value = new PlayerTeam();
		}

		public Msg_Logic2Team_PVE_HuntingChapter_AttackBegin_Req(uint __m_chapter_id, uint __m_hunting_lv)
		{
			_m_chapter_id = new ProtoMemberUInt32(1, true);
			_m_chapter_id.member_value = __m_chapter_id;
			_m_hunting_lv = new ProtoMemberUInt32(2, true);
			_m_hunting_lv.member_value = __m_hunting_lv;
			_m_team = new ProtoMemberEmbedded<PlayerTeam>(3, true);
			_m_team.member_value = new PlayerTeam();
		}

		public uint m_chapter_id
		{
			get{ return _m_chapter_id.member_value; }
			set{ _m_chapter_id.member_value = value; }
		}
		public bool has_m_chapter_id
		{
			get{ return _m_chapter_id.has_value; }
		}

		public uint m_hunting_lv
		{
			get{ return _m_hunting_lv.member_value; }
			set{ _m_hunting_lv.member_value = value; }
		}
		public bool has_m_hunting_lv
		{
			get{ return _m_hunting_lv.has_value; }
		}

		public PlayerTeam m_team
		{
			get{ return _m_team.member_value as PlayerTeam; }
			set{ _m_team.member_value = value; }
		}
		public bool has_m_team
		{
			get{ return _m_team.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_chapter_id.Serialize(_m_chapter_id.member_value, ref out_stream);

			count += _m_hunting_lv.Serialize(_m_hunting_lv.member_value, ref out_stream);

			count += _m_team.Serialize(_m_team.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_chapter_id = 0;
			one_count = _m_chapter_id.ParseFrom(ref temp_m_chapter_id, ref int_stream);
			if (0 < one_count)
			{
					_m_chapter_id.member_value = temp_m_chapter_id;
					count = count + one_count;
			}

			uint temp_m_hunting_lv = 0;
			one_count = _m_hunting_lv.ParseFrom(ref temp_m_hunting_lv, ref int_stream);
			if (0 < one_count)
			{
					_m_hunting_lv.member_value = temp_m_hunting_lv;
					count = count + one_count;
			}

			PlayerTeam temp_m_team = new PlayerTeam();
			one_count = _m_team.ParseFrom(temp_m_team, ref int_stream);
			if (0 < one_count)
			{
					_m_team.member_value = temp_m_team;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Team_PVE_HuntingTest_AttackBegin_Req : IMessage
	{
		private ProtoMemberUInt32 _m_dungeon_id;	// PVE狩猎考试时，指定考试id
		private ProtoMemberEmbedded<PlayerTeam> _m_team;	// 队伍信息

		public Msg_Logic2Team_PVE_HuntingTest_AttackBegin_Req()
		{
			_m_dungeon_id = new ProtoMemberUInt32(1, true);
			_m_team = new ProtoMemberEmbedded<PlayerTeam>(2, true);
			_m_team.member_value = new PlayerTeam();
		}

		public Msg_Logic2Team_PVE_HuntingTest_AttackBegin_Req(uint __m_dungeon_id)
		{
			_m_dungeon_id = new ProtoMemberUInt32(1, true);
			_m_dungeon_id.member_value = __m_dungeon_id;
			_m_team = new ProtoMemberEmbedded<PlayerTeam>(2, true);
			_m_team.member_value = new PlayerTeam();
		}

		public uint m_dungeon_id
		{
			get{ return _m_dungeon_id.member_value; }
			set{ _m_dungeon_id.member_value = value; }
		}
		public bool has_m_dungeon_id
		{
			get{ return _m_dungeon_id.has_value; }
		}

		public PlayerTeam m_team
		{
			get{ return _m_team.member_value as PlayerTeam; }
			set{ _m_team.member_value = value; }
		}
		public bool has_m_team
		{
			get{ return _m_team.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_dungeon_id.Serialize(_m_dungeon_id.member_value, ref out_stream);

			count += _m_team.Serialize(_m_team.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_dungeon_id = 0;
			one_count = _m_dungeon_id.ParseFrom(ref temp_m_dungeon_id, ref int_stream);
			if (0 < one_count)
			{
					_m_dungeon_id.member_value = temp_m_dungeon_id;
					count = count + one_count;
			}

			PlayerTeam temp_m_team = new PlayerTeam();
			one_count = _m_team.ParseFrom(temp_m_team, ref int_stream);
			if (0 < one_count)
			{
					_m_team.member_value = temp_m_team;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Team_PVE_Hunting_AttackBegin_Req : IMessage
	{
		private ProtoMemberUInt32 _m_point_id;	// 事件所在地图坐标点id
		private ProtoMemberUInt32 _m_event_id;	// 事件id
		private ProtoMemberUInt32 _m_hunting_lv;	// 狩猎等级
		private ProtoMemberUInt32 _m_group_id;	// 怪物组合id
		private ProtoMemberEmbedded<PlayerTeam> _m_team;	// 队伍信息
		private ProtoMemberBool _m_is_challenge;	// 是否是狩猎急速挑战模式：是：true，否：false

		public Msg_Logic2Team_PVE_Hunting_AttackBegin_Req()
		{
			_m_point_id = new ProtoMemberUInt32(1, true);
			_m_event_id = new ProtoMemberUInt32(2, true);
			_m_hunting_lv = new ProtoMemberUInt32(3, true);
			_m_group_id = new ProtoMemberUInt32(4, true);
			_m_team = new ProtoMemberEmbedded<PlayerTeam>(5, true);
			_m_team.member_value = new PlayerTeam();
			_m_is_challenge = new ProtoMemberBool(6, true);
		}

		public Msg_Logic2Team_PVE_Hunting_AttackBegin_Req(uint __m_point_id, uint __m_event_id, uint __m_hunting_lv, uint __m_group_id, bool __m_is_challenge)
		{
			_m_point_id = new ProtoMemberUInt32(1, true);
			_m_point_id.member_value = __m_point_id;
			_m_event_id = new ProtoMemberUInt32(2, true);
			_m_event_id.member_value = __m_event_id;
			_m_hunting_lv = new ProtoMemberUInt32(3, true);
			_m_hunting_lv.member_value = __m_hunting_lv;
			_m_group_id = new ProtoMemberUInt32(4, true);
			_m_group_id.member_value = __m_group_id;
			_m_team = new ProtoMemberEmbedded<PlayerTeam>(5, true);
			_m_team.member_value = new PlayerTeam();
			_m_is_challenge = new ProtoMemberBool(6, true);
			_m_is_challenge.member_value = __m_is_challenge;
		}

		public uint m_point_id
		{
			get{ return _m_point_id.member_value; }
			set{ _m_point_id.member_value = value; }
		}
		public bool has_m_point_id
		{
			get{ return _m_point_id.has_value; }
		}

		public uint m_event_id
		{
			get{ return _m_event_id.member_value; }
			set{ _m_event_id.member_value = value; }
		}
		public bool has_m_event_id
		{
			get{ return _m_event_id.has_value; }
		}

		public uint m_hunting_lv
		{
			get{ return _m_hunting_lv.member_value; }
			set{ _m_hunting_lv.member_value = value; }
		}
		public bool has_m_hunting_lv
		{
			get{ return _m_hunting_lv.has_value; }
		}

		public uint m_group_id
		{
			get{ return _m_group_id.member_value; }
			set{ _m_group_id.member_value = value; }
		}
		public bool has_m_group_id
		{
			get{ return _m_group_id.has_value; }
		}

		public PlayerTeam m_team
		{
			get{ return _m_team.member_value as PlayerTeam; }
			set{ _m_team.member_value = value; }
		}
		public bool has_m_team
		{
			get{ return _m_team.has_value; }
		}

		public bool m_is_challenge
		{
			get{ return _m_is_challenge.member_value; }
			set{ _m_is_challenge.member_value = value; }
		}
		public bool has_m_is_challenge
		{
			get{ return _m_is_challenge.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_point_id.Serialize(_m_point_id.member_value, ref out_stream);

			count += _m_event_id.Serialize(_m_event_id.member_value, ref out_stream);

			count += _m_hunting_lv.Serialize(_m_hunting_lv.member_value, ref out_stream);

			count += _m_group_id.Serialize(_m_group_id.member_value, ref out_stream);

			count += _m_team.Serialize(_m_team.member_value, ref out_stream);

			count += _m_is_challenge.Serialize(_m_is_challenge.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_point_id = 0;
			one_count = _m_point_id.ParseFrom(ref temp_m_point_id, ref int_stream);
			if (0 < one_count)
			{
					_m_point_id.member_value = temp_m_point_id;
					count = count + one_count;
			}

			uint temp_m_event_id = 0;
			one_count = _m_event_id.ParseFrom(ref temp_m_event_id, ref int_stream);
			if (0 < one_count)
			{
					_m_event_id.member_value = temp_m_event_id;
					count = count + one_count;
			}

			uint temp_m_hunting_lv = 0;
			one_count = _m_hunting_lv.ParseFrom(ref temp_m_hunting_lv, ref int_stream);
			if (0 < one_count)
			{
					_m_hunting_lv.member_value = temp_m_hunting_lv;
					count = count + one_count;
			}

			uint temp_m_group_id = 0;
			one_count = _m_group_id.ParseFrom(ref temp_m_group_id, ref int_stream);
			if (0 < one_count)
			{
					_m_group_id.member_value = temp_m_group_id;
					count = count + one_count;
			}

			PlayerTeam temp_m_team = new PlayerTeam();
			one_count = _m_team.ParseFrom(temp_m_team, ref int_stream);
			if (0 < one_count)
			{
					_m_team.member_value = temp_m_team;
					count = count + one_count;
			}

			bool temp_m_is_challenge = false;
			one_count = _m_is_challenge.ParseFrom(ref temp_m_is_challenge, ref int_stream);
			if (0 < one_count)
			{
					_m_is_challenge.member_value = temp_m_is_challenge;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Team_PVP_BattleField_Begin_Req : IMessage
	{
		private ProtoMemberUInt32 _m_play_model;	// 玩法id（PlayerTeamType）
		private ProtoMemberEmbedded<PlayerGroup> _m_team;	// 队伍信息

		public Msg_Logic2Team_PVP_BattleField_Begin_Req()
		{
			_m_play_model = new ProtoMemberUInt32(1, true);
			_m_team = new ProtoMemberEmbedded<PlayerGroup>(2, true);
			_m_team.member_value = new PlayerGroup();
		}

		public Msg_Logic2Team_PVP_BattleField_Begin_Req(uint __m_play_model)
		{
			_m_play_model = new ProtoMemberUInt32(1, true);
			_m_play_model.member_value = __m_play_model;
			_m_team = new ProtoMemberEmbedded<PlayerGroup>(2, true);
			_m_team.member_value = new PlayerGroup();
		}

		public uint m_play_model
		{
			get{ return _m_play_model.member_value; }
			set{ _m_play_model.member_value = value; }
		}
		public bool has_m_play_model
		{
			get{ return _m_play_model.has_value; }
		}

		public PlayerGroup m_team
		{
			get{ return _m_team.member_value as PlayerGroup; }
			set{ _m_team.member_value = value; }
		}
		public bool has_m_team
		{
			get{ return _m_team.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_play_model.Serialize(_m_play_model.member_value, ref out_stream);

			count += _m_team.Serialize(_m_team.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_play_model = 0;
			one_count = _m_play_model.ParseFrom(ref temp_m_play_model, ref int_stream);
			if (0 < one_count)
			{
					_m_play_model.member_value = temp_m_play_model;
					count = count + one_count;
			}

			PlayerGroup temp_m_team = new PlayerGroup();
			one_count = _m_team.ParseFrom(temp_m_team, ref int_stream);
			if (0 < one_count)
			{
					_m_team.member_value = temp_m_team;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Team_PVP_BattleField_Cancel_Req : IMessage
	{
		private ProtoMemberUInt32 _m_play_model;	// 玩法id（PlayerTeamType）
		private ProtoMemberUInt64 _m_team_id;	// 队伍id

		public Msg_Logic2Team_PVP_BattleField_Cancel_Req()
		{
			_m_play_model = new ProtoMemberUInt32(1, true);
			_m_team_id = new ProtoMemberUInt64(2, true);
		}

		public Msg_Logic2Team_PVP_BattleField_Cancel_Req(uint __m_play_model, ulong __m_team_id)
		{
			_m_play_model = new ProtoMemberUInt32(1, true);
			_m_play_model.member_value = __m_play_model;
			_m_team_id = new ProtoMemberUInt64(2, true);
			_m_team_id.member_value = __m_team_id;
		}

		public uint m_play_model
		{
			get{ return _m_play_model.member_value; }
			set{ _m_play_model.member_value = value; }
		}
		public bool has_m_play_model
		{
			get{ return _m_play_model.has_value; }
		}

		public ulong m_team_id
		{
			get{ return _m_team_id.member_value; }
			set{ _m_team_id.member_value = value; }
		}
		public bool has_m_team_id
		{
			get{ return _m_team_id.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_play_model.Serialize(_m_play_model.member_value, ref out_stream);

			count += _m_team_id.Serialize(_m_team_id.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_play_model = 0;
			one_count = _m_play_model.ParseFrom(ref temp_m_play_model, ref int_stream);
			if (0 < one_count)
			{
					_m_play_model.member_value = temp_m_play_model;
					count = count + one_count;
			}

			ulong temp_m_team_id = 0;
			one_count = _m_team_id.ParseFrom(ref temp_m_team_id, ref int_stream);
			if (0 < one_count)
			{
					_m_team_id.member_value = temp_m_team_id;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Team_PVP_Match_AttackBeginWithRobot_Req : IMessage
	{
		private ProtoMemberUInt32 _m_play_model;	// 玩法id（PlayerTeamType）
		private ProtoMemberEmbedded<PlayerTeam> _m_team;	// 队伍信息
		private ProtoMemberUInt32 _m_grade;	// 天梯等级

		public Msg_Logic2Team_PVP_Match_AttackBeginWithRobot_Req()
		{
			_m_play_model = new ProtoMemberUInt32(1, true);
			_m_team = new ProtoMemberEmbedded<PlayerTeam>(2, true);
			_m_team.member_value = new PlayerTeam();
			_m_grade = new ProtoMemberUInt32(3, true);
		}

		public Msg_Logic2Team_PVP_Match_AttackBeginWithRobot_Req(uint __m_play_model, uint __m_grade)
		{
			_m_play_model = new ProtoMemberUInt32(1, true);
			_m_play_model.member_value = __m_play_model;
			_m_team = new ProtoMemberEmbedded<PlayerTeam>(2, true);
			_m_team.member_value = new PlayerTeam();
			_m_grade = new ProtoMemberUInt32(3, true);
			_m_grade.member_value = __m_grade;
		}

		public uint m_play_model
		{
			get{ return _m_play_model.member_value; }
			set{ _m_play_model.member_value = value; }
		}
		public bool has_m_play_model
		{
			get{ return _m_play_model.has_value; }
		}

		public PlayerTeam m_team
		{
			get{ return _m_team.member_value as PlayerTeam; }
			set{ _m_team.member_value = value; }
		}
		public bool has_m_team
		{
			get{ return _m_team.has_value; }
		}

		public uint m_grade
		{
			get{ return _m_grade.member_value; }
			set{ _m_grade.member_value = value; }
		}
		public bool has_m_grade
		{
			get{ return _m_grade.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_play_model.Serialize(_m_play_model.member_value, ref out_stream);

			count += _m_team.Serialize(_m_team.member_value, ref out_stream);

			count += _m_grade.Serialize(_m_grade.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_play_model = 0;
			one_count = _m_play_model.ParseFrom(ref temp_m_play_model, ref int_stream);
			if (0 < one_count)
			{
					_m_play_model.member_value = temp_m_play_model;
					count = count + one_count;
			}

			PlayerTeam temp_m_team = new PlayerTeam();
			one_count = _m_team.ParseFrom(temp_m_team, ref int_stream);
			if (0 < one_count)
			{
					_m_team.member_value = temp_m_team;
					count = count + one_count;
			}

			uint temp_m_grade = 0;
			one_count = _m_grade.ParseFrom(ref temp_m_grade, ref int_stream);
			if (0 < one_count)
			{
					_m_grade.member_value = temp_m_grade;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Team_PVP_Match_AttackBegin_Req : IMessage
	{
		private ProtoMemberUInt32 _m_play_model;	// 玩法id（PlayerTeamType）
		private ProtoMemberEmbedded<PlayerTeam> _m_team;	// 队伍信息
		private ProtoMemberUInt32 _m_grade;	// 天梯等级

		public Msg_Logic2Team_PVP_Match_AttackBegin_Req()
		{
			_m_play_model = new ProtoMemberUInt32(1, true);
			_m_team = new ProtoMemberEmbedded<PlayerTeam>(2, true);
			_m_team.member_value = new PlayerTeam();
			_m_grade = new ProtoMemberUInt32(3, true);
		}

		public Msg_Logic2Team_PVP_Match_AttackBegin_Req(uint __m_play_model, uint __m_grade)
		{
			_m_play_model = new ProtoMemberUInt32(1, true);
			_m_play_model.member_value = __m_play_model;
			_m_team = new ProtoMemberEmbedded<PlayerTeam>(2, true);
			_m_team.member_value = new PlayerTeam();
			_m_grade = new ProtoMemberUInt32(3, true);
			_m_grade.member_value = __m_grade;
		}

		public uint m_play_model
		{
			get{ return _m_play_model.member_value; }
			set{ _m_play_model.member_value = value; }
		}
		public bool has_m_play_model
		{
			get{ return _m_play_model.has_value; }
		}

		public PlayerTeam m_team
		{
			get{ return _m_team.member_value as PlayerTeam; }
			set{ _m_team.member_value = value; }
		}
		public bool has_m_team
		{
			get{ return _m_team.has_value; }
		}

		public uint m_grade
		{
			get{ return _m_grade.member_value; }
			set{ _m_grade.member_value = value; }
		}
		public bool has_m_grade
		{
			get{ return _m_grade.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_play_model.Serialize(_m_play_model.member_value, ref out_stream);

			count += _m_team.Serialize(_m_team.member_value, ref out_stream);

			count += _m_grade.Serialize(_m_grade.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_play_model = 0;
			one_count = _m_play_model.ParseFrom(ref temp_m_play_model, ref int_stream);
			if (0 < one_count)
			{
					_m_play_model.member_value = temp_m_play_model;
					count = count + one_count;
			}

			PlayerTeam temp_m_team = new PlayerTeam();
			one_count = _m_team.ParseFrom(temp_m_team, ref int_stream);
			if (0 < one_count)
			{
					_m_team.member_value = temp_m_team;
					count = count + one_count;
			}

			uint temp_m_grade = 0;
			one_count = _m_grade.ParseFrom(ref temp_m_grade, ref int_stream);
			if (0 < one_count)
			{
					_m_grade.member_value = temp_m_grade;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Team_PVP_Match_Cancel_Req : IMessage
	{
		private ProtoMemberUInt32 _m_play_model;	// 玩法id（PlayerTeamType）
		private ProtoMemberUInt64 _m_team_id;	// 取消匹配的队伍id

		public Msg_Logic2Team_PVP_Match_Cancel_Req()
		{
			_m_play_model = new ProtoMemberUInt32(1, true);
			_m_team_id = new ProtoMemberUInt64(2, true);
		}

		public Msg_Logic2Team_PVP_Match_Cancel_Req(uint __m_play_model, ulong __m_team_id)
		{
			_m_play_model = new ProtoMemberUInt32(1, true);
			_m_play_model.member_value = __m_play_model;
			_m_team_id = new ProtoMemberUInt64(2, true);
			_m_team_id.member_value = __m_team_id;
		}

		public uint m_play_model
		{
			get{ return _m_play_model.member_value; }
			set{ _m_play_model.member_value = value; }
		}
		public bool has_m_play_model
		{
			get{ return _m_play_model.has_value; }
		}

		public ulong m_team_id
		{
			get{ return _m_team_id.member_value; }
			set{ _m_team_id.member_value = value; }
		}
		public bool has_m_team_id
		{
			get{ return _m_team_id.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_play_model.Serialize(_m_play_model.member_value, ref out_stream);

			count += _m_team_id.Serialize(_m_team_id.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_play_model = 0;
			one_count = _m_play_model.ParseFrom(ref temp_m_play_model, ref int_stream);
			if (0 < one_count)
			{
					_m_play_model.member_value = temp_m_play_model;
					count = count + one_count;
			}

			ulong temp_m_team_id = 0;
			one_count = _m_team_id.ParseFrom(ref temp_m_team_id, ref int_stream);
			if (0 < one_count)
			{
					_m_team_id.member_value = temp_m_team_id;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Team_StarChess_SelHero : IMessage
	{
		private ProtoMemberUInt32 _m_player_server_id;	
		private ProtoMemberUInt32 _m_player_account_id;	
		private ProtoMemberUInt32 _m_hero_index;	//0~2
		private ProtoMemberEmbedded<PlayerHeroInfo> _m_hero;	//具体英雄信息

		public Msg_Logic2Team_StarChess_SelHero()
		{
			_m_player_server_id = new ProtoMemberUInt32(1, true);
			_m_player_account_id = new ProtoMemberUInt32(2, true);
			_m_hero_index = new ProtoMemberUInt32(3, true);
			_m_hero = new ProtoMemberEmbedded<PlayerHeroInfo>(4, true);
			_m_hero.member_value = new PlayerHeroInfo();
		}

		public Msg_Logic2Team_StarChess_SelHero(uint __m_player_server_id, uint __m_player_account_id, uint __m_hero_index)
		{
			_m_player_server_id = new ProtoMemberUInt32(1, true);
			_m_player_server_id.member_value = __m_player_server_id;
			_m_player_account_id = new ProtoMemberUInt32(2, true);
			_m_player_account_id.member_value = __m_player_account_id;
			_m_hero_index = new ProtoMemberUInt32(3, true);
			_m_hero_index.member_value = __m_hero_index;
			_m_hero = new ProtoMemberEmbedded<PlayerHeroInfo>(4, true);
			_m_hero.member_value = new PlayerHeroInfo();
		}

		public uint m_player_server_id
		{
			get{ return _m_player_server_id.member_value; }
			set{ _m_player_server_id.member_value = value; }
		}
		public bool has_m_player_server_id
		{
			get{ return _m_player_server_id.has_value; }
		}

		public uint m_player_account_id
		{
			get{ return _m_player_account_id.member_value; }
			set{ _m_player_account_id.member_value = value; }
		}
		public bool has_m_player_account_id
		{
			get{ return _m_player_account_id.has_value; }
		}

		public uint m_hero_index
		{
			get{ return _m_hero_index.member_value; }
			set{ _m_hero_index.member_value = value; }
		}
		public bool has_m_hero_index
		{
			get{ return _m_hero_index.has_value; }
		}

		public PlayerHeroInfo m_hero
		{
			get{ return _m_hero.member_value as PlayerHeroInfo; }
			set{ _m_hero.member_value = value; }
		}
		public bool has_m_hero
		{
			get{ return _m_hero.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_player_server_id.Serialize(_m_player_server_id.member_value, ref out_stream);

			count += _m_player_account_id.Serialize(_m_player_account_id.member_value, ref out_stream);

			count += _m_hero_index.Serialize(_m_hero_index.member_value, ref out_stream);

			count += _m_hero.Serialize(_m_hero.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_player_server_id = 0;
			one_count = _m_player_server_id.ParseFrom(ref temp_m_player_server_id, ref int_stream);
			if (0 < one_count)
			{
					_m_player_server_id.member_value = temp_m_player_server_id;
					count = count + one_count;
			}

			uint temp_m_player_account_id = 0;
			one_count = _m_player_account_id.ParseFrom(ref temp_m_player_account_id, ref int_stream);
			if (0 < one_count)
			{
					_m_player_account_id.member_value = temp_m_player_account_id;
					count = count + one_count;
			}

			uint temp_m_hero_index = 0;
			one_count = _m_hero_index.ParseFrom(ref temp_m_hero_index, ref int_stream);
			if (0 < one_count)
			{
					_m_hero_index.member_value = temp_m_hero_index;
					count = count + one_count;
			}

			PlayerHeroInfo temp_m_hero = new PlayerHeroInfo();
			one_count = _m_hero.ParseFrom(temp_m_hero, ref int_stream);
			if (0 < one_count)
			{
					_m_hero.member_value = temp_m_hero;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Logic2Team_TeamUpdate_Req : IMessage
	{
		private ProtoMemberUInt64 _m_team_id;	// 变更之前的玩家的队伍号

		public Msg_Logic2Team_TeamUpdate_Req()
		{
			_m_team_id = new ProtoMemberUInt64(1, true);
		}

		public Msg_Logic2Team_TeamUpdate_Req(ulong __m_team_id)
		{
			_m_team_id = new ProtoMemberUInt64(1, true);
			_m_team_id.member_value = __m_team_id;
		}

		public ulong m_team_id
		{
			get{ return _m_team_id.member_value; }
			set{ _m_team_id.member_value = value; }
		}
		public bool has_m_team_id
		{
			get{ return _m_team_id.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_team_id.Serialize(_m_team_id.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			ulong temp_m_team_id = 0;
			one_count = _m_team_id.ParseFrom(ref temp_m_team_id, ref int_stream);
			if (0 < one_count)
			{
					_m_team_id.member_value = temp_m_team_id;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_MsgBeginFlag_Appearance : IMessage
	{

		public Msg_MsgBeginFlag_Appearance()
		{
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			return count;
		}
	}

	public class Msg_MsgBeginFlag_Battle : IMessage
	{

		public Msg_MsgBeginFlag_Battle()
		{
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			return count;
		}
	}

	public class Msg_MsgBeginFlag_Chat : IMessage
	{

		public Msg_MsgBeginFlag_Chat()
		{
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			return count;
		}
	}

	public class Msg_MsgBeginFlag_DiaoWen : IMessage
	{

		public Msg_MsgBeginFlag_DiaoWen()
		{
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			return count;
		}
	}

	public class Msg_MsgBeginFlag_Firend : IMessage
	{

		public Msg_MsgBeginFlag_Firend()
		{
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			return count;
		}
	}

	public class Msg_MsgBeginFlag_GM : IMessage
	{

		public Msg_MsgBeginFlag_GM()
		{
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			return count;
		}
	}

	public class Msg_MsgBeginFlag_Hero : IMessage
	{

		public Msg_MsgBeginFlag_Hero()
		{
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			return count;
		}
	}

	public class Msg_MsgBeginFlag_Instance : IMessage
	{

		public Msg_MsgBeginFlag_Instance()
		{
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			return count;
		}
	}

	public class Msg_MsgBeginFlag_Item : IMessage
	{

		public Msg_MsgBeginFlag_Item()
		{
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			return count;
		}
	}

	public class Msg_MsgBeginFlag_Log : IMessage
	{

		public Msg_MsgBeginFlag_Log()
		{
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			return count;
		}
	}

	public class Msg_MsgBeginFlag_LoginLogout : IMessage
	{

		public Msg_MsgBeginFlag_LoginLogout()
		{
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			return count;
		}
	}

	public class Msg_MsgBeginFlag_Mail : IMessage
	{

		public Msg_MsgBeginFlag_Mail()
		{
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			return count;
		}
	}

	public class Msg_MsgBeginFlag_Ranking : IMessage
	{

		public Msg_MsgBeginFlag_Ranking()
		{
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			return count;
		}
	}

	public class Msg_MsgBeginFlag_Scene : IMessage
	{

		public Msg_MsgBeginFlag_Scene()
		{
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			return count;
		}
	}

	public class Msg_MsgBeginFlag_Shop : IMessage
	{

		public Msg_MsgBeginFlag_Shop()
		{
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			return count;
		}
	}

	public class Msg_MsgBeginFlag_Statistics : IMessage
	{

		public Msg_MsgBeginFlag_Statistics()
		{
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			return count;
		}
	}

	public class Msg_MsgBeginFlag_Talent : IMessage
	{

		public Msg_MsgBeginFlag_Talent()
		{
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			return count;
		}
	}

	public class Msg_MsgBeginFlag_Task : IMessage
	{

		public Msg_MsgBeginFlag_Task()
		{
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			return count;
		}
	}

	public class Msg_MsgBeginFlag_Team : IMessage
	{

		public Msg_MsgBeginFlag_Team()
		{
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			return count;
		}
	}

	public class Msg_MsgBeginFlag_Toy : IMessage
	{

		public Msg_MsgBeginFlag_Toy()
		{
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			return count;
		}
	}

	public class Msg_MsgBeginFlag_Union : IMessage
	{

		public Msg_MsgBeginFlag_Union()
		{
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			return count;
		}
	}

	public class Msg_MsgEndFlag_Appearance : IMessage
	{

		public Msg_MsgEndFlag_Appearance()
		{
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			return count;
		}
	}

	public class Msg_MsgEndFlag_Battle : IMessage
	{

		public Msg_MsgEndFlag_Battle()
		{
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			return count;
		}
	}

	public class Msg_MsgEndFlag_Chat : IMessage
	{

		public Msg_MsgEndFlag_Chat()
		{
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			return count;
		}
	}

	public class Msg_MsgEndFlag_DiaoWen : IMessage
	{

		public Msg_MsgEndFlag_DiaoWen()
		{
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			return count;
		}
	}

	public class Msg_MsgEndFlag_Firend : IMessage
	{

		public Msg_MsgEndFlag_Firend()
		{
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			return count;
		}
	}

	public class Msg_MsgEndFlag_GM : IMessage
	{

		public Msg_MsgEndFlag_GM()
		{
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			return count;
		}
	}

	public class Msg_MsgEndFlag_Hero : IMessage
	{

		public Msg_MsgEndFlag_Hero()
		{
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			return count;
		}
	}

	public class Msg_MsgEndFlag_Instance : IMessage
	{

		public Msg_MsgEndFlag_Instance()
		{
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			return count;
		}
	}

	public class Msg_MsgEndFlag_Item : IMessage
	{

		public Msg_MsgEndFlag_Item()
		{
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			return count;
		}
	}

	public class Msg_MsgEndFlag_Log : IMessage
	{

		public Msg_MsgEndFlag_Log()
		{
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			return count;
		}
	}

	public class Msg_MsgEndFlag_LoginLogout : IMessage
	{

		public Msg_MsgEndFlag_LoginLogout()
		{
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			return count;
		}
	}

	public class Msg_MsgEndFlag_Mail : IMessage
	{

		public Msg_MsgEndFlag_Mail()
		{
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			return count;
		}
	}

	public class Msg_MsgEndFlag_Ranking : IMessage
	{

		public Msg_MsgEndFlag_Ranking()
		{
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			return count;
		}
	}

	public class Msg_MsgEndFlag_Scene : IMessage
	{

		public Msg_MsgEndFlag_Scene()
		{
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			return count;
		}
	}

	public class Msg_MsgEndFlag_Shop : IMessage
	{

		public Msg_MsgEndFlag_Shop()
		{
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			return count;
		}
	}

	public class Msg_MsgEndFlag_Statistics : IMessage
	{

		public Msg_MsgEndFlag_Statistics()
		{
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			return count;
		}
	}

	public class Msg_MsgEndFlag_Talent : IMessage
	{

		public Msg_MsgEndFlag_Talent()
		{
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			return count;
		}
	}

	public class Msg_MsgEndFlag_Task : IMessage
	{

		public Msg_MsgEndFlag_Task()
		{
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			return count;
		}
	}

	public class Msg_MsgEndFlag_Team : IMessage
	{

		public Msg_MsgEndFlag_Team()
		{
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			return count;
		}
	}

	public class Msg_MsgEndFlag_Toy : IMessage
	{

		public Msg_MsgEndFlag_Toy()
		{
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			return count;
		}
	}

	public class Msg_MsgEndFlag_Union : IMessage
	{

		public Msg_MsgEndFlag_Union()
		{
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			return count;
		}
	}

	public class Msg_Normal : IMessage
	{

		public Msg_Normal()
		{
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			return count;
		}
	}

	public class Msg_Ping_Req : IMessage
	{

		public Msg_Ping_Req()
		{
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			return count;
		}
	}

	public class Msg_Ping_Res : IMessage
	{

		public Msg_Ping_Res()
		{
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			return count;
		}
	}

	public class Msg_Player2Logic_CheckPlayerName_Res : IMessage
	{
		private ProtoMemberUInt32 _m_res;	// 验证角色名返回结果（LogicRes）

		public Msg_Player2Logic_CheckPlayerName_Res()
		{
			_m_res = new ProtoMemberUInt32(1, true);
		}

		public Msg_Player2Logic_CheckPlayerName_Res(uint __m_res)
		{
			_m_res = new ProtoMemberUInt32(1, true);
			_m_res.member_value = __m_res;
		}

		public uint m_res
		{
			get{ return _m_res.member_value; }
			set{ _m_res.member_value = value; }
		}
		public bool has_m_res
		{
			get{ return _m_res.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_res.Serialize(_m_res.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_res = 0;
			one_count = _m_res.ParseFrom(ref temp_m_res, ref int_stream);
			if (0 < one_count)
			{
					_m_res.member_value = temp_m_res;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Player2Logic_Create_Player_Res : IMessage
	{
		private ProtoMemberUInt32 _m_res;	// 角色创建结果（LogicRes）
		private ProtoMemberUInt32 _m_hero_id;	// 第一个选择的英雄
		private ProtoMemberString _m_PlayerName;	// 角色名称
		private ProtoMemberUInt32 _m_HeroCount;	// 英雄总数量

		public Msg_Player2Logic_Create_Player_Res()
		{
			_m_res = new ProtoMemberUInt32(1, true);
			_m_hero_id = new ProtoMemberUInt32(2, false);
			_m_PlayerName = new ProtoMemberString(3, true);
			_m_HeroCount = new ProtoMemberUInt32(4, false);
		}

		public Msg_Player2Logic_Create_Player_Res(uint __m_res, uint __m_hero_id, string __m_PlayerName, uint __m_HeroCount)
		{
			_m_res = new ProtoMemberUInt32(1, true);
			_m_res.member_value = __m_res;
			_m_hero_id = new ProtoMemberUInt32(2, false);
			_m_hero_id.member_value = __m_hero_id;
			_m_PlayerName = new ProtoMemberString(3, true);
			_m_PlayerName.member_value = __m_PlayerName;
			_m_HeroCount = new ProtoMemberUInt32(4, false);
			_m_HeroCount.member_value = __m_HeroCount;
		}

		public uint m_res
		{
			get{ return _m_res.member_value; }
			set{ _m_res.member_value = value; }
		}
		public bool has_m_res
		{
			get{ return _m_res.has_value; }
		}

		public uint m_hero_id
		{
			get{ return _m_hero_id.member_value; }
			set{ _m_hero_id.member_value = value; }
		}
		public bool has_m_hero_id
		{
			get{ return _m_hero_id.has_value; }
		}

		public string m_PlayerName
		{
			get{ return _m_PlayerName.member_value; }
			set{ _m_PlayerName.member_value = value; }
		}
		public bool has_m_PlayerName
		{
			get{ return _m_PlayerName.has_value; }
		}

		public uint m_HeroCount
		{
			get{ return _m_HeroCount.member_value; }
			set{ _m_HeroCount.member_value = value; }
		}
		public bool has_m_HeroCount
		{
			get{ return _m_HeroCount.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_res.Serialize(_m_res.member_value, ref out_stream);

			count += _m_hero_id.Serialize(_m_hero_id.member_value, ref out_stream);

			count += _m_PlayerName.Serialize(_m_PlayerName.member_value, ref out_stream);

			count += _m_HeroCount.Serialize(_m_HeroCount.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_res = 0;
			one_count = _m_res.ParseFrom(ref temp_m_res, ref int_stream);
			if (0 < one_count)
			{
					_m_res.member_value = temp_m_res;
					count = count + one_count;
			}

			uint temp_m_hero_id = 0;
			one_count = _m_hero_id.ParseFrom(ref temp_m_hero_id, ref int_stream);
			if (0 < one_count)
			{
					_m_hero_id.member_value = temp_m_hero_id;
					count = count + one_count;
			}

			string temp_m_PlayerName = "";
			one_count = _m_PlayerName.ParseFrom(ref temp_m_PlayerName, ref int_stream);
			if (0 < one_count)
			{
					_m_PlayerName.member_value = temp_m_PlayerName;
					count = count + one_count;
			}

			uint temp_m_HeroCount = 0;
			one_count = _m_HeroCount.ParseFrom(ref temp_m_HeroCount, ref int_stream);
			if (0 < one_count)
			{
					_m_HeroCount.member_value = temp_m_HeroCount;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Player2Logic_Firend_PlayerInfo_Res : IMessage
	{
		private ProtoMemberUInt32 _m_operator;	// 请求加载玩家数据的协议号
		private ProtoMemberEmbedded<PlayerFriendInfo> _m_player_info;	// 请求方的基础信息（可能存在的信息，用于申请/添加好友）
		private ProtoMemberEmbedded<PlayerId> _m_player_id;	// 接受方（待加载）的角色唯一id，加载失败时返回
		private ProtoMemberBool _m_exists;	// 返回数据是否存在
		private ProtoMemberEmbedded<Player> _m_player_data;	// 接受方（待加载）的角色属性，加载成功时返回

		public Msg_Player2Logic_Firend_PlayerInfo_Res()
		{
			_m_operator = new ProtoMemberUInt32(1, true);
			_m_player_info = new ProtoMemberEmbedded<PlayerFriendInfo>(2, false);
			_m_player_info.member_value = new PlayerFriendInfo();
			_m_player_id = new ProtoMemberEmbedded<PlayerId>(3, false);
			_m_player_id.member_value = new PlayerId();
			_m_exists = new ProtoMemberBool(4, true);
			_m_player_data = new ProtoMemberEmbedded<Player>(5, false);
			_m_player_data.member_value = new Player();
		}

		public Msg_Player2Logic_Firend_PlayerInfo_Res(uint __m_operator, bool __m_exists)
		{
			_m_operator = new ProtoMemberUInt32(1, true);
			_m_operator.member_value = __m_operator;
			_m_player_info = new ProtoMemberEmbedded<PlayerFriendInfo>(2, false);
			_m_player_info.member_value = new PlayerFriendInfo();
			_m_player_id = new ProtoMemberEmbedded<PlayerId>(3, false);
			_m_player_id.member_value = new PlayerId();
			_m_exists = new ProtoMemberBool(4, true);
			_m_exists.member_value = __m_exists;
			_m_player_data = new ProtoMemberEmbedded<Player>(5, false);
			_m_player_data.member_value = new Player();
		}

		public uint m_operator
		{
			get{ return _m_operator.member_value; }
			set{ _m_operator.member_value = value; }
		}
		public bool has_m_operator
		{
			get{ return _m_operator.has_value; }
		}

		public PlayerFriendInfo m_player_info
		{
			get{ return _m_player_info.member_value as PlayerFriendInfo; }
			set{ _m_player_info.member_value = value; }
		}
		public bool has_m_player_info
		{
			get{ return _m_player_info.has_value; }
		}

		public PlayerId m_player_id
		{
			get{ return _m_player_id.member_value as PlayerId; }
			set{ _m_player_id.member_value = value; }
		}
		public bool has_m_player_id
		{
			get{ return _m_player_id.has_value; }
		}

		public bool m_exists
		{
			get{ return _m_exists.member_value; }
			set{ _m_exists.member_value = value; }
		}
		public bool has_m_exists
		{
			get{ return _m_exists.has_value; }
		}

		public Player m_player_data
		{
			get{ return _m_player_data.member_value as Player; }
			set{ _m_player_data.member_value = value; }
		}
		public bool has_m_player_data
		{
			get{ return _m_player_data.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_operator.Serialize(_m_operator.member_value, ref out_stream);

			count += _m_player_info.Serialize(_m_player_info.member_value, ref out_stream);

			count += _m_player_id.Serialize(_m_player_id.member_value, ref out_stream);

			count += _m_exists.Serialize(_m_exists.member_value, ref out_stream);

			count += _m_player_data.Serialize(_m_player_data.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_operator = 0;
			one_count = _m_operator.ParseFrom(ref temp_m_operator, ref int_stream);
			if (0 < one_count)
			{
					_m_operator.member_value = temp_m_operator;
					count = count + one_count;
			}

			PlayerFriendInfo temp_m_player_info = new PlayerFriendInfo();
			one_count = _m_player_info.ParseFrom(temp_m_player_info, ref int_stream);
			if (0 < one_count)
			{
					_m_player_info.member_value = temp_m_player_info;
					count = count + one_count;
			}

			PlayerId temp_m_player_id = new PlayerId();
			one_count = _m_player_id.ParseFrom(temp_m_player_id, ref int_stream);
			if (0 < one_count)
			{
					_m_player_id.member_value = temp_m_player_id;
					count = count + one_count;
			}

			bool temp_m_exists = false;
			one_count = _m_exists.ParseFrom(ref temp_m_exists, ref int_stream);
			if (0 < one_count)
			{
					_m_exists.member_value = temp_m_exists;
					count = count + one_count;
			}

			Player temp_m_player_data = new Player();
			one_count = _m_player_data.ParseFrom(temp_m_player_data, ref int_stream);
			if (0 < one_count)
			{
					_m_player_data.member_value = temp_m_player_data;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Player2Logic_GM_PlayerInfo_Res : IMessage
	{
		private ProtoMemberBool _m_exists;	// 返回数据是否存在
		private ProtoMemberEmbedded<Player> _m_player_data;	// 待加载的玩家角色属性，加载成功时返回

		public Msg_Player2Logic_GM_PlayerInfo_Res()
		{
			_m_exists = new ProtoMemberBool(1, true);
			_m_player_data = new ProtoMemberEmbedded<Player>(2, false);
			_m_player_data.member_value = new Player();
		}

		public Msg_Player2Logic_GM_PlayerInfo_Res(bool __m_exists)
		{
			_m_exists = new ProtoMemberBool(1, true);
			_m_exists.member_value = __m_exists;
			_m_player_data = new ProtoMemberEmbedded<Player>(2, false);
			_m_player_data.member_value = new Player();
		}

		public bool m_exists
		{
			get{ return _m_exists.member_value; }
			set{ _m_exists.member_value = value; }
		}
		public bool has_m_exists
		{
			get{ return _m_exists.has_value; }
		}

		public Player m_player_data
		{
			get{ return _m_player_data.member_value as Player; }
			set{ _m_player_data.member_value = value; }
		}
		public bool has_m_player_data
		{
			get{ return _m_player_data.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_exists.Serialize(_m_exists.member_value, ref out_stream);

			count += _m_player_data.Serialize(_m_player_data.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			bool temp_m_exists = false;
			one_count = _m_exists.ParseFrom(ref temp_m_exists, ref int_stream);
			if (0 < one_count)
			{
					_m_exists.member_value = temp_m_exists;
					count = count + one_count;
			}

			Player temp_m_player_data = new Player();
			one_count = _m_player_data.ParseFrom(temp_m_player_data, ref int_stream);
			if (0 < one_count)
			{
					_m_player_data.member_value = temp_m_player_data;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Player2Logic_PVE_GuestInfo_Res : IMessage
	{
		private ProtoMemberUInt32 _m_friend_account_id;	// 被邀请的玩家id
		private ProtoMemberUInt32 _m_friend_server_id;	// 被邀请的玩家所属服id
		private ProtoMemberUInt32 _m_seat_index;	// 邀请的位置 0 - 3
		private ProtoMemberUInt32 _m_toy_type;	// 邀请的玩具类型
		private ProtoMemberUInt32 _m_toy_sn;	// 是否使用实体玩具
		private ProtoMemberBool _m_exists;	// 返回数据是否存在
		private ProtoMemberEmbedded<Player> _m_player_data;	// 待加载的玩家角色属性，加载成功时返回

		public Msg_Player2Logic_PVE_GuestInfo_Res()
		{
			_m_friend_account_id = new ProtoMemberUInt32(1, true);
			_m_friend_server_id = new ProtoMemberUInt32(2, true);
			_m_seat_index = new ProtoMemberUInt32(3, true);
			_m_toy_type = new ProtoMemberUInt32(4, true);
			_m_toy_sn = new ProtoMemberUInt32(5, true);
			_m_exists = new ProtoMemberBool(6, true);
			_m_player_data = new ProtoMemberEmbedded<Player>(7, false);
			_m_player_data.member_value = new Player();
		}

		public Msg_Player2Logic_PVE_GuestInfo_Res(uint __m_friend_account_id, uint __m_friend_server_id, uint __m_seat_index, uint __m_toy_type, uint __m_toy_sn, bool __m_exists)
		{
			_m_friend_account_id = new ProtoMemberUInt32(1, true);
			_m_friend_account_id.member_value = __m_friend_account_id;
			_m_friend_server_id = new ProtoMemberUInt32(2, true);
			_m_friend_server_id.member_value = __m_friend_server_id;
			_m_seat_index = new ProtoMemberUInt32(3, true);
			_m_seat_index.member_value = __m_seat_index;
			_m_toy_type = new ProtoMemberUInt32(4, true);
			_m_toy_type.member_value = __m_toy_type;
			_m_toy_sn = new ProtoMemberUInt32(5, true);
			_m_toy_sn.member_value = __m_toy_sn;
			_m_exists = new ProtoMemberBool(6, true);
			_m_exists.member_value = __m_exists;
			_m_player_data = new ProtoMemberEmbedded<Player>(7, false);
			_m_player_data.member_value = new Player();
		}

		public uint m_friend_account_id
		{
			get{ return _m_friend_account_id.member_value; }
			set{ _m_friend_account_id.member_value = value; }
		}
		public bool has_m_friend_account_id
		{
			get{ return _m_friend_account_id.has_value; }
		}

		public uint m_friend_server_id
		{
			get{ return _m_friend_server_id.member_value; }
			set{ _m_friend_server_id.member_value = value; }
		}
		public bool has_m_friend_server_id
		{
			get{ return _m_friend_server_id.has_value; }
		}

		public uint m_seat_index
		{
			get{ return _m_seat_index.member_value; }
			set{ _m_seat_index.member_value = value; }
		}
		public bool has_m_seat_index
		{
			get{ return _m_seat_index.has_value; }
		}

		public uint m_toy_type
		{
			get{ return _m_toy_type.member_value; }
			set{ _m_toy_type.member_value = value; }
		}
		public bool has_m_toy_type
		{
			get{ return _m_toy_type.has_value; }
		}

		public uint m_toy_sn
		{
			get{ return _m_toy_sn.member_value; }
			set{ _m_toy_sn.member_value = value; }
		}
		public bool has_m_toy_sn
		{
			get{ return _m_toy_sn.has_value; }
		}

		public bool m_exists
		{
			get{ return _m_exists.member_value; }
			set{ _m_exists.member_value = value; }
		}
		public bool has_m_exists
		{
			get{ return _m_exists.has_value; }
		}

		public Player m_player_data
		{
			get{ return _m_player_data.member_value as Player; }
			set{ _m_player_data.member_value = value; }
		}
		public bool has_m_player_data
		{
			get{ return _m_player_data.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_friend_account_id.Serialize(_m_friend_account_id.member_value, ref out_stream);

			count += _m_friend_server_id.Serialize(_m_friend_server_id.member_value, ref out_stream);

			count += _m_seat_index.Serialize(_m_seat_index.member_value, ref out_stream);

			count += _m_toy_type.Serialize(_m_toy_type.member_value, ref out_stream);

			count += _m_toy_sn.Serialize(_m_toy_sn.member_value, ref out_stream);

			count += _m_exists.Serialize(_m_exists.member_value, ref out_stream);

			count += _m_player_data.Serialize(_m_player_data.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_friend_account_id = 0;
			one_count = _m_friend_account_id.ParseFrom(ref temp_m_friend_account_id, ref int_stream);
			if (0 < one_count)
			{
					_m_friend_account_id.member_value = temp_m_friend_account_id;
					count = count + one_count;
			}

			uint temp_m_friend_server_id = 0;
			one_count = _m_friend_server_id.ParseFrom(ref temp_m_friend_server_id, ref int_stream);
			if (0 < one_count)
			{
					_m_friend_server_id.member_value = temp_m_friend_server_id;
					count = count + one_count;
			}

			uint temp_m_seat_index = 0;
			one_count = _m_seat_index.ParseFrom(ref temp_m_seat_index, ref int_stream);
			if (0 < one_count)
			{
					_m_seat_index.member_value = temp_m_seat_index;
					count = count + one_count;
			}

			uint temp_m_toy_type = 0;
			one_count = _m_toy_type.ParseFrom(ref temp_m_toy_type, ref int_stream);
			if (0 < one_count)
			{
					_m_toy_type.member_value = temp_m_toy_type;
					count = count + one_count;
			}

			uint temp_m_toy_sn = 0;
			one_count = _m_toy_sn.ParseFrom(ref temp_m_toy_sn, ref int_stream);
			if (0 < one_count)
			{
					_m_toy_sn.member_value = temp_m_toy_sn;
					count = count + one_count;
			}

			bool temp_m_exists = false;
			one_count = _m_exists.ParseFrom(ref temp_m_exists, ref int_stream);
			if (0 < one_count)
			{
					_m_exists.member_value = temp_m_exists;
					count = count + one_count;
			}

			Player temp_m_player_data = new Player();
			one_count = _m_player_data.ParseFrom(temp_m_player_data, ref int_stream);
			if (0 < one_count)
			{
					_m_player_data.member_value = temp_m_player_data;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Player2Logic_Player_Info_Res : IMessage
	{
		private ProtoMemberString _m_ip;	// 登陆ip
		private ProtoMemberString _m_imei;	// 设备唯一标识
		private ProtoMemberBool _m_exists;	// 返回数据是否存在
		private ProtoMemberEmbedded<Player> _m_player_data;	// 角色属性

		public Msg_Player2Logic_Player_Info_Res()
		{
			_m_ip = new ProtoMemberString(1, true);
			_m_imei = new ProtoMemberString(2, true);
			_m_exists = new ProtoMemberBool(3, true);
			_m_player_data = new ProtoMemberEmbedded<Player>(4, false);
			_m_player_data.member_value = new Player();
		}

		public Msg_Player2Logic_Player_Info_Res(string __m_ip, string __m_imei, bool __m_exists)
		{
			_m_ip = new ProtoMemberString(1, true);
			_m_ip.member_value = __m_ip;
			_m_imei = new ProtoMemberString(2, true);
			_m_imei.member_value = __m_imei;
			_m_exists = new ProtoMemberBool(3, true);
			_m_exists.member_value = __m_exists;
			_m_player_data = new ProtoMemberEmbedded<Player>(4, false);
			_m_player_data.member_value = new Player();
		}

		public string m_ip
		{
			get{ return _m_ip.member_value; }
			set{ _m_ip.member_value = value; }
		}
		public bool has_m_ip
		{
			get{ return _m_ip.has_value; }
		}

		public string m_imei
		{
			get{ return _m_imei.member_value; }
			set{ _m_imei.member_value = value; }
		}
		public bool has_m_imei
		{
			get{ return _m_imei.has_value; }
		}

		public bool m_exists
		{
			get{ return _m_exists.member_value; }
			set{ _m_exists.member_value = value; }
		}
		public bool has_m_exists
		{
			get{ return _m_exists.has_value; }
		}

		public Player m_player_data
		{
			get{ return _m_player_data.member_value as Player; }
			set{ _m_player_data.member_value = value; }
		}
		public bool has_m_player_data
		{
			get{ return _m_player_data.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_ip.Serialize(_m_ip.member_value, ref out_stream);

			count += _m_imei.Serialize(_m_imei.member_value, ref out_stream);

			count += _m_exists.Serialize(_m_exists.member_value, ref out_stream);

			count += _m_player_data.Serialize(_m_player_data.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			string temp_m_ip = "";
			one_count = _m_ip.ParseFrom(ref temp_m_ip, ref int_stream);
			if (0 < one_count)
			{
					_m_ip.member_value = temp_m_ip;
					count = count + one_count;
			}

			string temp_m_imei = "";
			one_count = _m_imei.ParseFrom(ref temp_m_imei, ref int_stream);
			if (0 < one_count)
			{
					_m_imei.member_value = temp_m_imei;
					count = count + one_count;
			}

			bool temp_m_exists = false;
			one_count = _m_exists.ParseFrom(ref temp_m_exists, ref int_stream);
			if (0 < one_count)
			{
					_m_exists.member_value = temp_m_exists;
					count = count + one_count;
			}

			Player temp_m_player_data = new Player();
			one_count = _m_player_data.ParseFrom(temp_m_player_data, ref int_stream);
			if (0 < one_count)
			{
					_m_player_data.member_value = temp_m_player_data;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Player2Logic_Player_List_Res : IMessage
	{
		private ProtoMemberEmbedded<PlayerList> _m_player_list;	// 角色列表

		public Msg_Player2Logic_Player_List_Res()
		{
			_m_player_list = new ProtoMemberEmbedded<PlayerList>(1, true);
			_m_player_list.member_value = new PlayerList();
		}

		public PlayerList m_player_list
		{
			get{ return _m_player_list.member_value as PlayerList; }
			set{ _m_player_list.member_value = value; }
		}
		public bool has_m_player_list
		{
			get{ return _m_player_list.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_player_list.Serialize(_m_player_list.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			PlayerList temp_m_player_list = new PlayerList();
			one_count = _m_player_list.ParseFrom(temp_m_player_list, ref int_stream);
			if (0 < one_count)
			{
					_m_player_list.member_value = temp_m_player_list;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Player2Logic_SetPlayerName_Res : IMessage
	{
		private ProtoMemberString _m_player_name;	// 角色名
		private ProtoMemberUInt32 _m_res;	// 设置角色名结果（LogicRes）

		public Msg_Player2Logic_SetPlayerName_Res()
		{
			_m_player_name = new ProtoMemberString(1, true);
			_m_res = new ProtoMemberUInt32(2, true);
		}

		public Msg_Player2Logic_SetPlayerName_Res(string __m_player_name, uint __m_res)
		{
			_m_player_name = new ProtoMemberString(1, true);
			_m_player_name.member_value = __m_player_name;
			_m_res = new ProtoMemberUInt32(2, true);
			_m_res.member_value = __m_res;
		}

		public string m_player_name
		{
			get{ return _m_player_name.member_value; }
			set{ _m_player_name.member_value = value; }
		}
		public bool has_m_player_name
		{
			get{ return _m_player_name.has_value; }
		}

		public uint m_res
		{
			get{ return _m_res.member_value; }
			set{ _m_res.member_value = value; }
		}
		public bool has_m_res
		{
			get{ return _m_res.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_player_name.Serialize(_m_player_name.member_value, ref out_stream);

			count += _m_res.Serialize(_m_res.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			string temp_m_player_name = "";
			one_count = _m_player_name.ParseFrom(ref temp_m_player_name, ref int_stream);
			if (0 < one_count)
			{
					_m_player_name.member_value = temp_m_player_name;
					count = count + one_count;
			}

			uint temp_m_res = 0;
			one_count = _m_res.ParseFrom(ref temp_m_res, ref int_stream);
			if (0 < one_count)
			{
					_m_res.member_value = temp_m_res;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Player2Union_CheckUnionName_Res : IMessage
	{
		private ProtoMemberUInt32 _m_res;	// 验证公会名返回结果（LogicRes）

		public Msg_Player2Union_CheckUnionName_Res()
		{
			_m_res = new ProtoMemberUInt32(1, true);
		}

		public Msg_Player2Union_CheckUnionName_Res(uint __m_res)
		{
			_m_res = new ProtoMemberUInt32(1, true);
			_m_res.member_value = __m_res;
		}

		public uint m_res
		{
			get{ return _m_res.member_value; }
			set{ _m_res.member_value = value; }
		}
		public bool has_m_res
		{
			get{ return _m_res.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_res.Serialize(_m_res.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_res = 0;
			one_count = _m_res.ParseFrom(ref temp_m_res, ref int_stream);
			if (0 < one_count)
			{
					_m_res.member_value = temp_m_res;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Player2Union_SetUnionName_Res : IMessage
	{
		private ProtoMemberUInt64 _m_union_id;	// 公会id
		private ProtoMemberString _m_union_name;	// 公会名
		private ProtoMemberUInt32 _m_res;	// 返回设置公会名结果（LogicRes）

		public Msg_Player2Union_SetUnionName_Res()
		{
			_m_union_id = new ProtoMemberUInt64(1, true);
			_m_union_name = new ProtoMemberString(2, true);
			_m_res = new ProtoMemberUInt32(3, true);
		}

		public Msg_Player2Union_SetUnionName_Res(ulong __m_union_id, string __m_union_name, uint __m_res)
		{
			_m_union_id = new ProtoMemberUInt64(1, true);
			_m_union_id.member_value = __m_union_id;
			_m_union_name = new ProtoMemberString(2, true);
			_m_union_name.member_value = __m_union_name;
			_m_res = new ProtoMemberUInt32(3, true);
			_m_res.member_value = __m_res;
		}

		public ulong m_union_id
		{
			get{ return _m_union_id.member_value; }
			set{ _m_union_id.member_value = value; }
		}
		public bool has_m_union_id
		{
			get{ return _m_union_id.has_value; }
		}

		public string m_union_name
		{
			get{ return _m_union_name.member_value; }
			set{ _m_union_name.member_value = value; }
		}
		public bool has_m_union_name
		{
			get{ return _m_union_name.has_value; }
		}

		public uint m_res
		{
			get{ return _m_res.member_value; }
			set{ _m_res.member_value = value; }
		}
		public bool has_m_res
		{
			get{ return _m_res.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_union_id.Serialize(_m_union_id.member_value, ref out_stream);

			count += _m_union_name.Serialize(_m_union_name.member_value, ref out_stream);

			count += _m_res.Serialize(_m_res.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			ulong temp_m_union_id = 0;
			one_count = _m_union_id.ParseFrom(ref temp_m_union_id, ref int_stream);
			if (0 < one_count)
			{
					_m_union_id.member_value = temp_m_union_id;
					count = count + one_count;
			}

			string temp_m_union_name = "";
			one_count = _m_union_name.ParseFrom(ref temp_m_union_name, ref int_stream);
			if (0 < one_count)
			{
					_m_union_name.member_value = temp_m_union_name;
					count = count + one_count;
			}

			uint temp_m_res = 0;
			one_count = _m_res.ParseFrom(ref temp_m_res, ref int_stream);
			if (0 < one_count)
			{
					_m_res.member_value = temp_m_res;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Player2Union_Union_Create_Res : IMessage
	{
		private ProtoMemberUInt32 _m_res;	// 创建公会结果（LogicRes）
		private ProtoMemberUInt64 _m_union_id;	// 公会id

		public Msg_Player2Union_Union_Create_Res()
		{
			_m_res = new ProtoMemberUInt32(1, true);
			_m_union_id = new ProtoMemberUInt64(2, true);
		}

		public Msg_Player2Union_Union_Create_Res(uint __m_res, ulong __m_union_id)
		{
			_m_res = new ProtoMemberUInt32(1, true);
			_m_res.member_value = __m_res;
			_m_union_id = new ProtoMemberUInt64(2, true);
			_m_union_id.member_value = __m_union_id;
		}

		public uint m_res
		{
			get{ return _m_res.member_value; }
			set{ _m_res.member_value = value; }
		}
		public bool has_m_res
		{
			get{ return _m_res.has_value; }
		}

		public ulong m_union_id
		{
			get{ return _m_union_id.member_value; }
			set{ _m_union_id.member_value = value; }
		}
		public bool has_m_union_id
		{
			get{ return _m_union_id.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_res.Serialize(_m_res.member_value, ref out_stream);

			count += _m_union_id.Serialize(_m_union_id.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_res = 0;
			one_count = _m_res.ParseFrom(ref temp_m_res, ref int_stream);
			if (0 < one_count)
			{
					_m_res.member_value = temp_m_res;
					count = count + one_count;
			}

			ulong temp_m_union_id = 0;
			one_count = _m_union_id.ParseFrom(ref temp_m_union_id, ref int_stream);
			if (0 < one_count)
			{
					_m_union_id.member_value = temp_m_union_id;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Player2Union_Union_Info_Res : IMessage
	{
		private ProtoMemberEmbeddedList<Union> _m_union_data;	// 公会数据

		public Msg_Player2Union_Union_Info_Res()
		{
			_m_union_data = new ProtoMemberEmbeddedList<Union>(1, false);
		}

		public System.Collections.Generic.List<Union> m_union_data
		{
			get{ return _m_union_data.member_value; }
		}
		public bool has_m_union_data
		{
			get{ return _m_union_data.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			foreach(Union one_member_value in _m_union_data.member_value)
			{
				count += _m_union_data.Serialize(one_member_value, ref out_stream);
			}

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			while (true)
			{
				Union one_member_value = new Union();
				one_count = _m_union_data.ParseFrom(one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_union_data.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			return count;
		}
	}

	public class Msg_Ranking2CenterDB_RankingInfo_Req : IMessage
	{
		private ProtoMemberUInt32 _m_nServerId;	//所在服务器Id
		private ProtoMemberEnum<enRankingType> _m_RankingType;	//排行榜类型

		public Msg_Ranking2CenterDB_RankingInfo_Req()
		{
			_m_nServerId = new ProtoMemberUInt32(1, false);
			_m_RankingType = new ProtoMemberEnum<enRankingType>(2, false);
		}

		public Msg_Ranking2CenterDB_RankingInfo_Req(uint __m_nServerId, enRankingType __m_RankingType)
		{
			_m_nServerId = new ProtoMemberUInt32(1, false);
			_m_nServerId.member_value = __m_nServerId;
			_m_RankingType = new ProtoMemberEnum<enRankingType>(2, false);
			_m_RankingType.member_value = __m_RankingType;
		}

		public uint m_nServerId
		{
			get{ return _m_nServerId.member_value; }
			set{ _m_nServerId.member_value = value; }
		}
		public bool has_m_nServerId
		{
			get{ return _m_nServerId.has_value; }
		}

		public enRankingType m_RankingType
		{
			get{ return _m_RankingType.member_value; }
			set{ _m_RankingType.member_value = value; }
		}
		public bool has_m_RankingType
		{
			get{ return _m_RankingType.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_nServerId.Serialize(_m_nServerId.member_value, ref out_stream);

			count += _m_RankingType.Serialize((uint)_m_RankingType.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_nServerId = 0;
			one_count = _m_nServerId.ParseFrom(ref temp_m_nServerId, ref int_stream);
			if (0 < one_count)
			{
					_m_nServerId.member_value = temp_m_nServerId;
					count = count + one_count;
			}

			uint temp_m_RankingType = 0;
			one_count = _m_RankingType.ParseFrom(ref temp_m_RankingType, ref int_stream);
			if (0 < one_count)
			{
					_m_RankingType.member_value = (enRankingType)temp_m_RankingType;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Ranking2CenterDB_RankingInfo_Update_Req : IMessage
	{
		private ProtoMemberEmbedded<RankingList> _m_RankingList;	//排行数据

		public Msg_Ranking2CenterDB_RankingInfo_Update_Req()
		{
			_m_RankingList = new ProtoMemberEmbedded<RankingList>(1, false);
			_m_RankingList.member_value = new RankingList();
		}

		public RankingList m_RankingList
		{
			get{ return _m_RankingList.member_value as RankingList; }
			set{ _m_RankingList.member_value = value; }
		}
		public bool has_m_RankingList
		{
			get{ return _m_RankingList.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_RankingList.Serialize(_m_RankingList.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			RankingList temp_m_RankingList = new RankingList();
			one_count = _m_RankingList.ParseFrom(temp_m_RankingList, ref int_stream);
			if (0 < one_count)
			{
					_m_RankingList.member_value = temp_m_RankingList;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_RankingList_C2S_Req : IMessage
	{
		private ProtoMemberBool _m_bIsWorld;	//是否是世界排行
		private ProtoMemberEnum<enRankingType> _m_RankingType;	//排行榜类型
		private ProtoMemberUInt32 _m_nBeginNum;	//从第几名开始
		private ProtoMemberUInt32 _m_nReqCount;	//请求个数
		private ProtoMemberEmbedded<PlayerRankingInfo> _m_nMyInfo;	//本人当前信息

		public Msg_RankingList_C2S_Req()
		{
			_m_bIsWorld = new ProtoMemberBool(1, true);
			_m_RankingType = new ProtoMemberEnum<enRankingType>(2, true);
			_m_nBeginNum = new ProtoMemberUInt32(3, false);
			_m_nReqCount = new ProtoMemberUInt32(4, false);
			_m_nMyInfo = new ProtoMemberEmbedded<PlayerRankingInfo>(5, false);
			_m_nMyInfo.member_value = new PlayerRankingInfo();
		}

		public Msg_RankingList_C2S_Req(bool __m_bIsWorld, enRankingType __m_RankingType, uint __m_nBeginNum, uint __m_nReqCount)
		{
			_m_bIsWorld = new ProtoMemberBool(1, true);
			_m_bIsWorld.member_value = __m_bIsWorld;
			_m_RankingType = new ProtoMemberEnum<enRankingType>(2, true);
			_m_RankingType.member_value = __m_RankingType;
			_m_nBeginNum = new ProtoMemberUInt32(3, false);
			_m_nBeginNum.member_value = __m_nBeginNum;
			_m_nReqCount = new ProtoMemberUInt32(4, false);
			_m_nReqCount.member_value = __m_nReqCount;
			_m_nMyInfo = new ProtoMemberEmbedded<PlayerRankingInfo>(5, false);
			_m_nMyInfo.member_value = new PlayerRankingInfo();
		}

		public bool m_bIsWorld
		{
			get{ return _m_bIsWorld.member_value; }
			set{ _m_bIsWorld.member_value = value; }
		}
		public bool has_m_bIsWorld
		{
			get{ return _m_bIsWorld.has_value; }
		}

		public enRankingType m_RankingType
		{
			get{ return _m_RankingType.member_value; }
			set{ _m_RankingType.member_value = value; }
		}
		public bool has_m_RankingType
		{
			get{ return _m_RankingType.has_value; }
		}

		public uint m_nBeginNum
		{
			get{ return _m_nBeginNum.member_value; }
			set{ _m_nBeginNum.member_value = value; }
		}
		public bool has_m_nBeginNum
		{
			get{ return _m_nBeginNum.has_value; }
		}

		public uint m_nReqCount
		{
			get{ return _m_nReqCount.member_value; }
			set{ _m_nReqCount.member_value = value; }
		}
		public bool has_m_nReqCount
		{
			get{ return _m_nReqCount.has_value; }
		}

		public PlayerRankingInfo m_nMyInfo
		{
			get{ return _m_nMyInfo.member_value as PlayerRankingInfo; }
			set{ _m_nMyInfo.member_value = value; }
		}
		public bool has_m_nMyInfo
		{
			get{ return _m_nMyInfo.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_bIsWorld.Serialize(_m_bIsWorld.member_value, ref out_stream);

			count += _m_RankingType.Serialize((uint)_m_RankingType.member_value, ref out_stream);

			count += _m_nBeginNum.Serialize(_m_nBeginNum.member_value, ref out_stream);

			count += _m_nReqCount.Serialize(_m_nReqCount.member_value, ref out_stream);

			count += _m_nMyInfo.Serialize(_m_nMyInfo.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			bool temp_m_bIsWorld = false;
			one_count = _m_bIsWorld.ParseFrom(ref temp_m_bIsWorld, ref int_stream);
			if (0 < one_count)
			{
					_m_bIsWorld.member_value = temp_m_bIsWorld;
					count = count + one_count;
			}

			uint temp_m_RankingType = 0;
			one_count = _m_RankingType.ParseFrom(ref temp_m_RankingType, ref int_stream);
			if (0 < one_count)
			{
					_m_RankingType.member_value = (enRankingType)temp_m_RankingType;
					count = count + one_count;
			}

			uint temp_m_nBeginNum = 0;
			one_count = _m_nBeginNum.ParseFrom(ref temp_m_nBeginNum, ref int_stream);
			if (0 < one_count)
			{
					_m_nBeginNum.member_value = temp_m_nBeginNum;
					count = count + one_count;
			}

			uint temp_m_nReqCount = 0;
			one_count = _m_nReqCount.ParseFrom(ref temp_m_nReqCount, ref int_stream);
			if (0 < one_count)
			{
					_m_nReqCount.member_value = temp_m_nReqCount;
					count = count + one_count;
			}

			PlayerRankingInfo temp_m_nMyInfo = new PlayerRankingInfo();
			one_count = _m_nMyInfo.ParseFrom(temp_m_nMyInfo, ref int_stream);
			if (0 < one_count)
			{
					_m_nMyInfo.member_value = temp_m_nMyInfo;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_RankingList_S2C_Res : IMessage
	{
		private ProtoMemberBool _m_bIsWorld;	//是否是世界排行
		private ProtoMemberEnum<enRankingType> _m_RankingType;	//排行榜类型
		private ProtoMemberEmbedded<PlayerRankingInfo> _m_myInfo;	//自己排行信息
		private ProtoMemberEmbedded<PlayerRankingList> _m_rankList;	//排行榜信息

		public Msg_RankingList_S2C_Res()
		{
			_m_bIsWorld = new ProtoMemberBool(1, false);
			_m_RankingType = new ProtoMemberEnum<enRankingType>(2, false);
			_m_myInfo = new ProtoMemberEmbedded<PlayerRankingInfo>(3, false);
			_m_myInfo.member_value = new PlayerRankingInfo();
			_m_rankList = new ProtoMemberEmbedded<PlayerRankingList>(4, false);
			_m_rankList.member_value = new PlayerRankingList();
		}

		public Msg_RankingList_S2C_Res(bool __m_bIsWorld, enRankingType __m_RankingType)
		{
			_m_bIsWorld = new ProtoMemberBool(1, false);
			_m_bIsWorld.member_value = __m_bIsWorld;
			_m_RankingType = new ProtoMemberEnum<enRankingType>(2, false);
			_m_RankingType.member_value = __m_RankingType;
			_m_myInfo = new ProtoMemberEmbedded<PlayerRankingInfo>(3, false);
			_m_myInfo.member_value = new PlayerRankingInfo();
			_m_rankList = new ProtoMemberEmbedded<PlayerRankingList>(4, false);
			_m_rankList.member_value = new PlayerRankingList();
		}

		public bool m_bIsWorld
		{
			get{ return _m_bIsWorld.member_value; }
			set{ _m_bIsWorld.member_value = value; }
		}
		public bool has_m_bIsWorld
		{
			get{ return _m_bIsWorld.has_value; }
		}

		public enRankingType m_RankingType
		{
			get{ return _m_RankingType.member_value; }
			set{ _m_RankingType.member_value = value; }
		}
		public bool has_m_RankingType
		{
			get{ return _m_RankingType.has_value; }
		}

		public PlayerRankingInfo m_myInfo
		{
			get{ return _m_myInfo.member_value as PlayerRankingInfo; }
			set{ _m_myInfo.member_value = value; }
		}
		public bool has_m_myInfo
		{
			get{ return _m_myInfo.has_value; }
		}

		public PlayerRankingList m_rankList
		{
			get{ return _m_rankList.member_value as PlayerRankingList; }
			set{ _m_rankList.member_value = value; }
		}
		public bool has_m_rankList
		{
			get{ return _m_rankList.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_bIsWorld.Serialize(_m_bIsWorld.member_value, ref out_stream);

			count += _m_RankingType.Serialize((uint)_m_RankingType.member_value, ref out_stream);

			count += _m_myInfo.Serialize(_m_myInfo.member_value, ref out_stream);

			count += _m_rankList.Serialize(_m_rankList.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			bool temp_m_bIsWorld = false;
			one_count = _m_bIsWorld.ParseFrom(ref temp_m_bIsWorld, ref int_stream);
			if (0 < one_count)
			{
					_m_bIsWorld.member_value = temp_m_bIsWorld;
					count = count + one_count;
			}

			uint temp_m_RankingType = 0;
			one_count = _m_RankingType.ParseFrom(ref temp_m_RankingType, ref int_stream);
			if (0 < one_count)
			{
					_m_RankingType.member_value = (enRankingType)temp_m_RankingType;
					count = count + one_count;
			}

			PlayerRankingInfo temp_m_myInfo = new PlayerRankingInfo();
			one_count = _m_myInfo.ParseFrom(temp_m_myInfo, ref int_stream);
			if (0 < one_count)
			{
					_m_myInfo.member_value = temp_m_myInfo;
					count = count + one_count;
			}

			PlayerRankingList temp_m_rankList = new PlayerRankingList();
			one_count = _m_rankList.ParseFrom(temp_m_rankList, ref int_stream);
			if (0 < one_count)
			{
					_m_rankList.member_value = temp_m_rankList;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Route : IMessage
	{

		public Msg_Route()
		{
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			return count;
		}
	}

	public class Msg_SyncServerTimeStamp : IMessage
	{
		private ProtoMemberUInt32 _m_server_timestamp;	//服务器时间戳

		public Msg_SyncServerTimeStamp()
		{
			_m_server_timestamp = new ProtoMemberUInt32(1, true);
		}

		public Msg_SyncServerTimeStamp(uint __m_server_timestamp)
		{
			_m_server_timestamp = new ProtoMemberUInt32(1, true);
			_m_server_timestamp.member_value = __m_server_timestamp;
		}

		public uint m_server_timestamp
		{
			get{ return _m_server_timestamp.member_value; }
			set{ _m_server_timestamp.member_value = value; }
		}
		public bool has_m_server_timestamp
		{
			get{ return _m_server_timestamp.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_server_timestamp.Serialize(_m_server_timestamp.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_server_timestamp = 0;
			one_count = _m_server_timestamp.ParseFrom(ref temp_m_server_timestamp, ref int_stream);
			if (0 < one_count)
			{
					_m_server_timestamp.member_value = temp_m_server_timestamp;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Table_ReLoad_Req : IMessage
	{

		public Msg_Table_ReLoad_Req()
		{
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			return count;
		}
	}

	public class Msg_Table_ReLoad_Res : IMessage
	{

		public Msg_Table_ReLoad_Res()
		{
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			return count;
		}
	}

	public class Msg_Team2Battle_PVE_Extreme_AttackBegin_Req : IMessage
	{
		private ProtoMemberUInt32 _m_hard_lv;	// 难度
		private ProtoMemberEmbeddedList<PlayerTeam> _m_team;	// 队伍信息

		public Msg_Team2Battle_PVE_Extreme_AttackBegin_Req()
		{
			_m_hard_lv = new ProtoMemberUInt32(1, true);
			_m_team = new ProtoMemberEmbeddedList<PlayerTeam>(2, false);
		}

		public Msg_Team2Battle_PVE_Extreme_AttackBegin_Req(uint __m_hard_lv)
		{
			_m_hard_lv = new ProtoMemberUInt32(1, true);
			_m_hard_lv.member_value = __m_hard_lv;
			_m_team = new ProtoMemberEmbeddedList<PlayerTeam>(2, false);
		}

		public uint m_hard_lv
		{
			get{ return _m_hard_lv.member_value; }
			set{ _m_hard_lv.member_value = value; }
		}
		public bool has_m_hard_lv
		{
			get{ return _m_hard_lv.has_value; }
		}

		public System.Collections.Generic.List<PlayerTeam> m_team
		{
			get{ return _m_team.member_value; }
		}
		public bool has_m_team
		{
			get{ return _m_team.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_hard_lv.Serialize(_m_hard_lv.member_value, ref out_stream);

			foreach(PlayerTeam one_member_value in _m_team.member_value)
			{
				count += _m_team.Serialize(one_member_value, ref out_stream);
			}

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_hard_lv = 0;
			one_count = _m_hard_lv.ParseFrom(ref temp_m_hard_lv, ref int_stream);
			if (0 < one_count)
			{
					_m_hard_lv.member_value = temp_m_hard_lv;
					count = count + one_count;
			}

			while (true)
			{
				PlayerTeam one_member_value = new PlayerTeam();
				one_count = _m_team.ParseFrom(one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_team.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			return count;
		}
	}

	public class Msg_Team2Battle_PVE_HuntingChapter_AttackBegin_Req : IMessage
	{
		private ProtoMemberUInt32 _m_chapter_id;	// PVE狩猎随机关卡时，指定随机关卡id
		private ProtoMemberUInt32 _m_hunting_lv;	// 队伍狩猎等级
		private ProtoMemberEmbedded<PlayerTeam> _m_team;	// 队伍信息

		public Msg_Team2Battle_PVE_HuntingChapter_AttackBegin_Req()
		{
			_m_chapter_id = new ProtoMemberUInt32(1, true);
			_m_hunting_lv = new ProtoMemberUInt32(2, true);
			_m_team = new ProtoMemberEmbedded<PlayerTeam>(3, true);
			_m_team.member_value = new PlayerTeam();
		}

		public Msg_Team2Battle_PVE_HuntingChapter_AttackBegin_Req(uint __m_chapter_id, uint __m_hunting_lv)
		{
			_m_chapter_id = new ProtoMemberUInt32(1, true);
			_m_chapter_id.member_value = __m_chapter_id;
			_m_hunting_lv = new ProtoMemberUInt32(2, true);
			_m_hunting_lv.member_value = __m_hunting_lv;
			_m_team = new ProtoMemberEmbedded<PlayerTeam>(3, true);
			_m_team.member_value = new PlayerTeam();
		}

		public uint m_chapter_id
		{
			get{ return _m_chapter_id.member_value; }
			set{ _m_chapter_id.member_value = value; }
		}
		public bool has_m_chapter_id
		{
			get{ return _m_chapter_id.has_value; }
		}

		public uint m_hunting_lv
		{
			get{ return _m_hunting_lv.member_value; }
			set{ _m_hunting_lv.member_value = value; }
		}
		public bool has_m_hunting_lv
		{
			get{ return _m_hunting_lv.has_value; }
		}

		public PlayerTeam m_team
		{
			get{ return _m_team.member_value as PlayerTeam; }
			set{ _m_team.member_value = value; }
		}
		public bool has_m_team
		{
			get{ return _m_team.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_chapter_id.Serialize(_m_chapter_id.member_value, ref out_stream);

			count += _m_hunting_lv.Serialize(_m_hunting_lv.member_value, ref out_stream);

			count += _m_team.Serialize(_m_team.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_chapter_id = 0;
			one_count = _m_chapter_id.ParseFrom(ref temp_m_chapter_id, ref int_stream);
			if (0 < one_count)
			{
					_m_chapter_id.member_value = temp_m_chapter_id;
					count = count + one_count;
			}

			uint temp_m_hunting_lv = 0;
			one_count = _m_hunting_lv.ParseFrom(ref temp_m_hunting_lv, ref int_stream);
			if (0 < one_count)
			{
					_m_hunting_lv.member_value = temp_m_hunting_lv;
					count = count + one_count;
			}

			PlayerTeam temp_m_team = new PlayerTeam();
			one_count = _m_team.ParseFrom(temp_m_team, ref int_stream);
			if (0 < one_count)
			{
					_m_team.member_value = temp_m_team;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Team2Battle_PVE_HuntingTest_AttackBegin_Req : IMessage
	{
		private ProtoMemberUInt32 _m_dungeon_id;	// PVE狩猎考试时，指定考试id
		private ProtoMemberEmbedded<PlayerTeam> _m_team;	// 队伍信息

		public Msg_Team2Battle_PVE_HuntingTest_AttackBegin_Req()
		{
			_m_dungeon_id = new ProtoMemberUInt32(1, true);
			_m_team = new ProtoMemberEmbedded<PlayerTeam>(2, true);
			_m_team.member_value = new PlayerTeam();
		}

		public Msg_Team2Battle_PVE_HuntingTest_AttackBegin_Req(uint __m_dungeon_id)
		{
			_m_dungeon_id = new ProtoMemberUInt32(1, true);
			_m_dungeon_id.member_value = __m_dungeon_id;
			_m_team = new ProtoMemberEmbedded<PlayerTeam>(2, true);
			_m_team.member_value = new PlayerTeam();
		}

		public uint m_dungeon_id
		{
			get{ return _m_dungeon_id.member_value; }
			set{ _m_dungeon_id.member_value = value; }
		}
		public bool has_m_dungeon_id
		{
			get{ return _m_dungeon_id.has_value; }
		}

		public PlayerTeam m_team
		{
			get{ return _m_team.member_value as PlayerTeam; }
			set{ _m_team.member_value = value; }
		}
		public bool has_m_team
		{
			get{ return _m_team.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_dungeon_id.Serialize(_m_dungeon_id.member_value, ref out_stream);

			count += _m_team.Serialize(_m_team.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_dungeon_id = 0;
			one_count = _m_dungeon_id.ParseFrom(ref temp_m_dungeon_id, ref int_stream);
			if (0 < one_count)
			{
					_m_dungeon_id.member_value = temp_m_dungeon_id;
					count = count + one_count;
			}

			PlayerTeam temp_m_team = new PlayerTeam();
			one_count = _m_team.ParseFrom(temp_m_team, ref int_stream);
			if (0 < one_count)
			{
					_m_team.member_value = temp_m_team;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Team2Battle_PVE_Hunting_AttackBegin_Req : IMessage
	{
		private ProtoMemberUInt32 _m_event_id;	// 事件id
		private ProtoMemberUInt32 _m_hunting_lv;	// 狩猎等级
		private ProtoMemberUInt32 _m_group_id;	// 怪物组合id
		private ProtoMemberEmbedded<PlayerTeam> _m_team;	// 队伍信息
		private ProtoMemberBool _m_is_challenge;	// 是否是狩猎急速挑战模式：是：true，否：false

		public Msg_Team2Battle_PVE_Hunting_AttackBegin_Req()
		{
			_m_event_id = new ProtoMemberUInt32(1, true);
			_m_hunting_lv = new ProtoMemberUInt32(2, true);
			_m_group_id = new ProtoMemberUInt32(3, true);
			_m_team = new ProtoMemberEmbedded<PlayerTeam>(4, true);
			_m_team.member_value = new PlayerTeam();
			_m_is_challenge = new ProtoMemberBool(5, true);
		}

		public Msg_Team2Battle_PVE_Hunting_AttackBegin_Req(uint __m_event_id, uint __m_hunting_lv, uint __m_group_id, bool __m_is_challenge)
		{
			_m_event_id = new ProtoMemberUInt32(1, true);
			_m_event_id.member_value = __m_event_id;
			_m_hunting_lv = new ProtoMemberUInt32(2, true);
			_m_hunting_lv.member_value = __m_hunting_lv;
			_m_group_id = new ProtoMemberUInt32(3, true);
			_m_group_id.member_value = __m_group_id;
			_m_team = new ProtoMemberEmbedded<PlayerTeam>(4, true);
			_m_team.member_value = new PlayerTeam();
			_m_is_challenge = new ProtoMemberBool(5, true);
			_m_is_challenge.member_value = __m_is_challenge;
		}

		public uint m_event_id
		{
			get{ return _m_event_id.member_value; }
			set{ _m_event_id.member_value = value; }
		}
		public bool has_m_event_id
		{
			get{ return _m_event_id.has_value; }
		}

		public uint m_hunting_lv
		{
			get{ return _m_hunting_lv.member_value; }
			set{ _m_hunting_lv.member_value = value; }
		}
		public bool has_m_hunting_lv
		{
			get{ return _m_hunting_lv.has_value; }
		}

		public uint m_group_id
		{
			get{ return _m_group_id.member_value; }
			set{ _m_group_id.member_value = value; }
		}
		public bool has_m_group_id
		{
			get{ return _m_group_id.has_value; }
		}

		public PlayerTeam m_team
		{
			get{ return _m_team.member_value as PlayerTeam; }
			set{ _m_team.member_value = value; }
		}
		public bool has_m_team
		{
			get{ return _m_team.has_value; }
		}

		public bool m_is_challenge
		{
			get{ return _m_is_challenge.member_value; }
			set{ _m_is_challenge.member_value = value; }
		}
		public bool has_m_is_challenge
		{
			get{ return _m_is_challenge.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_event_id.Serialize(_m_event_id.member_value, ref out_stream);

			count += _m_hunting_lv.Serialize(_m_hunting_lv.member_value, ref out_stream);

			count += _m_group_id.Serialize(_m_group_id.member_value, ref out_stream);

			count += _m_team.Serialize(_m_team.member_value, ref out_stream);

			count += _m_is_challenge.Serialize(_m_is_challenge.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_event_id = 0;
			one_count = _m_event_id.ParseFrom(ref temp_m_event_id, ref int_stream);
			if (0 < one_count)
			{
					_m_event_id.member_value = temp_m_event_id;
					count = count + one_count;
			}

			uint temp_m_hunting_lv = 0;
			one_count = _m_hunting_lv.ParseFrom(ref temp_m_hunting_lv, ref int_stream);
			if (0 < one_count)
			{
					_m_hunting_lv.member_value = temp_m_hunting_lv;
					count = count + one_count;
			}

			uint temp_m_group_id = 0;
			one_count = _m_group_id.ParseFrom(ref temp_m_group_id, ref int_stream);
			if (0 < one_count)
			{
					_m_group_id.member_value = temp_m_group_id;
					count = count + one_count;
			}

			PlayerTeam temp_m_team = new PlayerTeam();
			one_count = _m_team.ParseFrom(temp_m_team, ref int_stream);
			if (0 < one_count)
			{
					_m_team.member_value = temp_m_team;
					count = count + one_count;
			}

			bool temp_m_is_challenge = false;
			one_count = _m_is_challenge.ParseFrom(ref temp_m_is_challenge, ref int_stream);
			if (0 < one_count)
			{
					_m_is_challenge.member_value = temp_m_is_challenge;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Team2Battle_PVP_BattleField_AttackBegin_Req : IMessage
	{
		private ProtoMemberUInt32 _m_play_model;	// 玩法id（PlayerTeamType）
		private ProtoMemberEmbeddedList<PlayerGroup> _m_team1;	// 双方队伍信息
		private ProtoMemberEmbeddedList<PlayerGroup> _m_team2;	// 双方队伍信息

		public Msg_Team2Battle_PVP_BattleField_AttackBegin_Req()
		{
			_m_play_model = new ProtoMemberUInt32(1, true);
			_m_team1 = new ProtoMemberEmbeddedList<PlayerGroup>(2, false);
			_m_team2 = new ProtoMemberEmbeddedList<PlayerGroup>(3, false);
		}

		public Msg_Team2Battle_PVP_BattleField_AttackBegin_Req(uint __m_play_model)
		{
			_m_play_model = new ProtoMemberUInt32(1, true);
			_m_play_model.member_value = __m_play_model;
			_m_team1 = new ProtoMemberEmbeddedList<PlayerGroup>(2, false);
			_m_team2 = new ProtoMemberEmbeddedList<PlayerGroup>(3, false);
		}

		public uint m_play_model
		{
			get{ return _m_play_model.member_value; }
			set{ _m_play_model.member_value = value; }
		}
		public bool has_m_play_model
		{
			get{ return _m_play_model.has_value; }
		}

		public System.Collections.Generic.List<PlayerGroup> m_team1
		{
			get{ return _m_team1.member_value; }
		}
		public bool has_m_team1
		{
			get{ return _m_team1.has_value; }
		}

		public System.Collections.Generic.List<PlayerGroup> m_team2
		{
			get{ return _m_team2.member_value; }
		}
		public bool has_m_team2
		{
			get{ return _m_team2.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_play_model.Serialize(_m_play_model.member_value, ref out_stream);

			foreach(PlayerGroup one_member_value in _m_team1.member_value)
			{
				count += _m_team1.Serialize(one_member_value, ref out_stream);
			}

			foreach(PlayerGroup one_member_value in _m_team2.member_value)
			{
				count += _m_team2.Serialize(one_member_value, ref out_stream);
			}

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_play_model = 0;
			one_count = _m_play_model.ParseFrom(ref temp_m_play_model, ref int_stream);
			if (0 < one_count)
			{
					_m_play_model.member_value = temp_m_play_model;
					count = count + one_count;
			}

			while (true)
			{
				PlayerGroup one_member_value = new PlayerGroup();
				one_count = _m_team1.ParseFrom(one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_team1.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			while (true)
			{
				PlayerGroup one_member_value = new PlayerGroup();
				one_count = _m_team2.ParseFrom(one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_team2.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			return count;
		}
	}

	public class Msg_Team2Battle_PVP_Match_AttackBegin_Req : IMessage
	{
		private ProtoMemberUInt32 _m_play_model;	// 玩法id（PlayerTeamType）
		private ProtoMemberEmbeddedList<PlayerTeam> _m_team;	// 队伍信息

		public Msg_Team2Battle_PVP_Match_AttackBegin_Req()
		{
			_m_play_model = new ProtoMemberUInt32(1, true);
			_m_team = new ProtoMemberEmbeddedList<PlayerTeam>(2, false);
		}

		public Msg_Team2Battle_PVP_Match_AttackBegin_Req(uint __m_play_model)
		{
			_m_play_model = new ProtoMemberUInt32(1, true);
			_m_play_model.member_value = __m_play_model;
			_m_team = new ProtoMemberEmbeddedList<PlayerTeam>(2, false);
		}

		public uint m_play_model
		{
			get{ return _m_play_model.member_value; }
			set{ _m_play_model.member_value = value; }
		}
		public bool has_m_play_model
		{
			get{ return _m_play_model.has_value; }
		}

		public System.Collections.Generic.List<PlayerTeam> m_team
		{
			get{ return _m_team.member_value; }
		}
		public bool has_m_team
		{
			get{ return _m_team.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_play_model.Serialize(_m_play_model.member_value, ref out_stream);

			foreach(PlayerTeam one_member_value in _m_team.member_value)
			{
				count += _m_team.Serialize(one_member_value, ref out_stream);
			}

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_play_model = 0;
			one_count = _m_play_model.ParseFrom(ref temp_m_play_model, ref int_stream);
			if (0 < one_count)
			{
					_m_play_model.member_value = temp_m_play_model;
					count = count + one_count;
			}

			while (true)
			{
				PlayerTeam one_member_value = new PlayerTeam();
				one_count = _m_team.ParseFrom(one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_team.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			return count;
		}
	}

	public class Msg_Team2Battle_StarChess_SelHero : IMessage
	{
		private ProtoMemberUInt32 _m_player_server_id;	
		private ProtoMemberUInt32 _m_player_account_id;	
		private ProtoMemberUInt32 _m_hero_index;	//0~2
		private ProtoMemberEmbedded<PlayerHeroInfo> _m_hero;	//具体英雄信息

		public Msg_Team2Battle_StarChess_SelHero()
		{
			_m_player_server_id = new ProtoMemberUInt32(1, true);
			_m_player_account_id = new ProtoMemberUInt32(2, true);
			_m_hero_index = new ProtoMemberUInt32(3, true);
			_m_hero = new ProtoMemberEmbedded<PlayerHeroInfo>(4, true);
			_m_hero.member_value = new PlayerHeroInfo();
		}

		public Msg_Team2Battle_StarChess_SelHero(uint __m_player_server_id, uint __m_player_account_id, uint __m_hero_index)
		{
			_m_player_server_id = new ProtoMemberUInt32(1, true);
			_m_player_server_id.member_value = __m_player_server_id;
			_m_player_account_id = new ProtoMemberUInt32(2, true);
			_m_player_account_id.member_value = __m_player_account_id;
			_m_hero_index = new ProtoMemberUInt32(3, true);
			_m_hero_index.member_value = __m_hero_index;
			_m_hero = new ProtoMemberEmbedded<PlayerHeroInfo>(4, true);
			_m_hero.member_value = new PlayerHeroInfo();
		}

		public uint m_player_server_id
		{
			get{ return _m_player_server_id.member_value; }
			set{ _m_player_server_id.member_value = value; }
		}
		public bool has_m_player_server_id
		{
			get{ return _m_player_server_id.has_value; }
		}

		public uint m_player_account_id
		{
			get{ return _m_player_account_id.member_value; }
			set{ _m_player_account_id.member_value = value; }
		}
		public bool has_m_player_account_id
		{
			get{ return _m_player_account_id.has_value; }
		}

		public uint m_hero_index
		{
			get{ return _m_hero_index.member_value; }
			set{ _m_hero_index.member_value = value; }
		}
		public bool has_m_hero_index
		{
			get{ return _m_hero_index.has_value; }
		}

		public PlayerHeroInfo m_hero
		{
			get{ return _m_hero.member_value as PlayerHeroInfo; }
			set{ _m_hero.member_value = value; }
		}
		public bool has_m_hero
		{
			get{ return _m_hero.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_player_server_id.Serialize(_m_player_server_id.member_value, ref out_stream);

			count += _m_player_account_id.Serialize(_m_player_account_id.member_value, ref out_stream);

			count += _m_hero_index.Serialize(_m_hero_index.member_value, ref out_stream);

			count += _m_hero.Serialize(_m_hero.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_player_server_id = 0;
			one_count = _m_player_server_id.ParseFrom(ref temp_m_player_server_id, ref int_stream);
			if (0 < one_count)
			{
					_m_player_server_id.member_value = temp_m_player_server_id;
					count = count + one_count;
			}

			uint temp_m_player_account_id = 0;
			one_count = _m_player_account_id.ParseFrom(ref temp_m_player_account_id, ref int_stream);
			if (0 < one_count)
			{
					_m_player_account_id.member_value = temp_m_player_account_id;
					count = count + one_count;
			}

			uint temp_m_hero_index = 0;
			one_count = _m_hero_index.ParseFrom(ref temp_m_hero_index, ref int_stream);
			if (0 < one_count)
			{
					_m_hero_index.member_value = temp_m_hero_index;
					count = count + one_count;
			}

			PlayerHeroInfo temp_m_hero = new PlayerHeroInfo();
			one_count = _m_hero.ParseFrom(temp_m_hero, ref int_stream);
			if (0 < one_count)
			{
					_m_hero.member_value = temp_m_hero;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Team2Client_PVE_Extreme_AttackBegin_Broadcast : IMessage
	{
		private ProtoMemberString _m_battle_ip;	// 战斗服的ip
		private ProtoMemberUInt32 _m_battle_port;	// 战斗服的端口

		public Msg_Team2Client_PVE_Extreme_AttackBegin_Broadcast()
		{
			_m_battle_ip = new ProtoMemberString(1, false);
			_m_battle_port = new ProtoMemberUInt32(2, false);
		}

		public Msg_Team2Client_PVE_Extreme_AttackBegin_Broadcast(string __m_battle_ip, uint __m_battle_port)
		{
			_m_battle_ip = new ProtoMemberString(1, false);
			_m_battle_ip.member_value = __m_battle_ip;
			_m_battle_port = new ProtoMemberUInt32(2, false);
			_m_battle_port.member_value = __m_battle_port;
		}

		public string m_battle_ip
		{
			get{ return _m_battle_ip.member_value; }
			set{ _m_battle_ip.member_value = value; }
		}
		public bool has_m_battle_ip
		{
			get{ return _m_battle_ip.has_value; }
		}

		public uint m_battle_port
		{
			get{ return _m_battle_port.member_value; }
			set{ _m_battle_port.member_value = value; }
		}
		public bool has_m_battle_port
		{
			get{ return _m_battle_port.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_battle_ip.Serialize(_m_battle_ip.member_value, ref out_stream);

			count += _m_battle_port.Serialize(_m_battle_port.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			string temp_m_battle_ip = "";
			one_count = _m_battle_ip.ParseFrom(ref temp_m_battle_ip, ref int_stream);
			if (0 < one_count)
			{
					_m_battle_ip.member_value = temp_m_battle_ip;
					count = count + one_count;
			}

			uint temp_m_battle_port = 0;
			one_count = _m_battle_port.ParseFrom(ref temp_m_battle_port, ref int_stream);
			if (0 < one_count)
			{
					_m_battle_port.member_value = temp_m_battle_port;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Team2Client_PVE_HuntingChapter_AttackBegin_Res : IMessage
	{
		private ProtoMemberUInt32 _m_chapter_id;	// PVE狩猎随机关卡时，指定随机关卡id
		private ProtoMemberString _m_battle_ip;	// 战斗服的ip
		private ProtoMemberUInt32 _m_battle_port;	// 战斗服的端口

		public Msg_Team2Client_PVE_HuntingChapter_AttackBegin_Res()
		{
			_m_chapter_id = new ProtoMemberUInt32(1, true);
			_m_battle_ip = new ProtoMemberString(2, false);
			_m_battle_port = new ProtoMemberUInt32(3, false);
		}

		public Msg_Team2Client_PVE_HuntingChapter_AttackBegin_Res(uint __m_chapter_id, string __m_battle_ip, uint __m_battle_port)
		{
			_m_chapter_id = new ProtoMemberUInt32(1, true);
			_m_chapter_id.member_value = __m_chapter_id;
			_m_battle_ip = new ProtoMemberString(2, false);
			_m_battle_ip.member_value = __m_battle_ip;
			_m_battle_port = new ProtoMemberUInt32(3, false);
			_m_battle_port.member_value = __m_battle_port;
		}

		public uint m_chapter_id
		{
			get{ return _m_chapter_id.member_value; }
			set{ _m_chapter_id.member_value = value; }
		}
		public bool has_m_chapter_id
		{
			get{ return _m_chapter_id.has_value; }
		}

		public string m_battle_ip
		{
			get{ return _m_battle_ip.member_value; }
			set{ _m_battle_ip.member_value = value; }
		}
		public bool has_m_battle_ip
		{
			get{ return _m_battle_ip.has_value; }
		}

		public uint m_battle_port
		{
			get{ return _m_battle_port.member_value; }
			set{ _m_battle_port.member_value = value; }
		}
		public bool has_m_battle_port
		{
			get{ return _m_battle_port.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_chapter_id.Serialize(_m_chapter_id.member_value, ref out_stream);

			count += _m_battle_ip.Serialize(_m_battle_ip.member_value, ref out_stream);

			count += _m_battle_port.Serialize(_m_battle_port.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_chapter_id = 0;
			one_count = _m_chapter_id.ParseFrom(ref temp_m_chapter_id, ref int_stream);
			if (0 < one_count)
			{
					_m_chapter_id.member_value = temp_m_chapter_id;
					count = count + one_count;
			}

			string temp_m_battle_ip = "";
			one_count = _m_battle_ip.ParseFrom(ref temp_m_battle_ip, ref int_stream);
			if (0 < one_count)
			{
					_m_battle_ip.member_value = temp_m_battle_ip;
					count = count + one_count;
			}

			uint temp_m_battle_port = 0;
			one_count = _m_battle_port.ParseFrom(ref temp_m_battle_port, ref int_stream);
			if (0 < one_count)
			{
					_m_battle_port.member_value = temp_m_battle_port;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Team2Client_PVE_HuntingTest_AttackBegin_Res : IMessage
	{
		private ProtoMemberUInt32 _m_dungeon_id;	// PVE狩猎考试时，指定考试id
		private ProtoMemberString _m_battle_ip;	// 战斗服的ip
		private ProtoMemberUInt32 _m_battle_port;	// 战斗服的端口

		public Msg_Team2Client_PVE_HuntingTest_AttackBegin_Res()
		{
			_m_dungeon_id = new ProtoMemberUInt32(1, true);
			_m_battle_ip = new ProtoMemberString(2, false);
			_m_battle_port = new ProtoMemberUInt32(3, false);
		}

		public Msg_Team2Client_PVE_HuntingTest_AttackBegin_Res(uint __m_dungeon_id, string __m_battle_ip, uint __m_battle_port)
		{
			_m_dungeon_id = new ProtoMemberUInt32(1, true);
			_m_dungeon_id.member_value = __m_dungeon_id;
			_m_battle_ip = new ProtoMemberString(2, false);
			_m_battle_ip.member_value = __m_battle_ip;
			_m_battle_port = new ProtoMemberUInt32(3, false);
			_m_battle_port.member_value = __m_battle_port;
		}

		public uint m_dungeon_id
		{
			get{ return _m_dungeon_id.member_value; }
			set{ _m_dungeon_id.member_value = value; }
		}
		public bool has_m_dungeon_id
		{
			get{ return _m_dungeon_id.has_value; }
		}

		public string m_battle_ip
		{
			get{ return _m_battle_ip.member_value; }
			set{ _m_battle_ip.member_value = value; }
		}
		public bool has_m_battle_ip
		{
			get{ return _m_battle_ip.has_value; }
		}

		public uint m_battle_port
		{
			get{ return _m_battle_port.member_value; }
			set{ _m_battle_port.member_value = value; }
		}
		public bool has_m_battle_port
		{
			get{ return _m_battle_port.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_dungeon_id.Serialize(_m_dungeon_id.member_value, ref out_stream);

			count += _m_battle_ip.Serialize(_m_battle_ip.member_value, ref out_stream);

			count += _m_battle_port.Serialize(_m_battle_port.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_dungeon_id = 0;
			one_count = _m_dungeon_id.ParseFrom(ref temp_m_dungeon_id, ref int_stream);
			if (0 < one_count)
			{
					_m_dungeon_id.member_value = temp_m_dungeon_id;
					count = count + one_count;
			}

			string temp_m_battle_ip = "";
			one_count = _m_battle_ip.ParseFrom(ref temp_m_battle_ip, ref int_stream);
			if (0 < one_count)
			{
					_m_battle_ip.member_value = temp_m_battle_ip;
					count = count + one_count;
			}

			uint temp_m_battle_port = 0;
			one_count = _m_battle_port.ParseFrom(ref temp_m_battle_port, ref int_stream);
			if (0 < one_count)
			{
					_m_battle_port.member_value = temp_m_battle_port;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Team2Client_PVE_Hunting_AttackBegin_Broadcast : IMessage
	{
		private ProtoMemberUInt32 _m_point_id;	// 事件所在地图坐标点id
		private ProtoMemberString _m_battle_ip;	// 战斗服的ip
		private ProtoMemberUInt32 _m_battle_port;	// 战斗服的端口

		public Msg_Team2Client_PVE_Hunting_AttackBegin_Broadcast()
		{
			_m_point_id = new ProtoMemberUInt32(1, true);
			_m_battle_ip = new ProtoMemberString(2, false);
			_m_battle_port = new ProtoMemberUInt32(3, false);
		}

		public Msg_Team2Client_PVE_Hunting_AttackBegin_Broadcast(uint __m_point_id, string __m_battle_ip, uint __m_battle_port)
		{
			_m_point_id = new ProtoMemberUInt32(1, true);
			_m_point_id.member_value = __m_point_id;
			_m_battle_ip = new ProtoMemberString(2, false);
			_m_battle_ip.member_value = __m_battle_ip;
			_m_battle_port = new ProtoMemberUInt32(3, false);
			_m_battle_port.member_value = __m_battle_port;
		}

		public uint m_point_id
		{
			get{ return _m_point_id.member_value; }
			set{ _m_point_id.member_value = value; }
		}
		public bool has_m_point_id
		{
			get{ return _m_point_id.has_value; }
		}

		public string m_battle_ip
		{
			get{ return _m_battle_ip.member_value; }
			set{ _m_battle_ip.member_value = value; }
		}
		public bool has_m_battle_ip
		{
			get{ return _m_battle_ip.has_value; }
		}

		public uint m_battle_port
		{
			get{ return _m_battle_port.member_value; }
			set{ _m_battle_port.member_value = value; }
		}
		public bool has_m_battle_port
		{
			get{ return _m_battle_port.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_point_id.Serialize(_m_point_id.member_value, ref out_stream);

			count += _m_battle_ip.Serialize(_m_battle_ip.member_value, ref out_stream);

			count += _m_battle_port.Serialize(_m_battle_port.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_point_id = 0;
			one_count = _m_point_id.ParseFrom(ref temp_m_point_id, ref int_stream);
			if (0 < one_count)
			{
					_m_point_id.member_value = temp_m_point_id;
					count = count + one_count;
			}

			string temp_m_battle_ip = "";
			one_count = _m_battle_ip.ParseFrom(ref temp_m_battle_ip, ref int_stream);
			if (0 < one_count)
			{
					_m_battle_ip.member_value = temp_m_battle_ip;
					count = count + one_count;
			}

			uint temp_m_battle_port = 0;
			one_count = _m_battle_port.ParseFrom(ref temp_m_battle_port, ref int_stream);
			if (0 < one_count)
			{
					_m_battle_port.member_value = temp_m_battle_port;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Team2Client_PVP_BattleField_AttackBegin_Broadcast : IMessage
	{
		private ProtoMemberUInt32 _m_play_model;	// 玩法id（PlayerTeamType）
		private ProtoMemberString _m_battle_ip;	// 战斗服的ip
		private ProtoMemberUInt32 _m_battle_port;	// 战斗服的端口
		private ProtoMemberEmbeddedList<PlayerGroup> _m_team1;	// 双方队伍信息
		private ProtoMemberEmbeddedList<PlayerGroup> _m_team2;	// 双方队伍信息

		public Msg_Team2Client_PVP_BattleField_AttackBegin_Broadcast()
		{
			_m_play_model = new ProtoMemberUInt32(1, true);
			_m_battle_ip = new ProtoMemberString(2, true);
			_m_battle_port = new ProtoMemberUInt32(3, true);
			_m_team1 = new ProtoMemberEmbeddedList<PlayerGroup>(4, false);
			_m_team2 = new ProtoMemberEmbeddedList<PlayerGroup>(5, false);
		}

		public Msg_Team2Client_PVP_BattleField_AttackBegin_Broadcast(uint __m_play_model, string __m_battle_ip, uint __m_battle_port)
		{
			_m_play_model = new ProtoMemberUInt32(1, true);
			_m_play_model.member_value = __m_play_model;
			_m_battle_ip = new ProtoMemberString(2, true);
			_m_battle_ip.member_value = __m_battle_ip;
			_m_battle_port = new ProtoMemberUInt32(3, true);
			_m_battle_port.member_value = __m_battle_port;
			_m_team1 = new ProtoMemberEmbeddedList<PlayerGroup>(4, false);
			_m_team2 = new ProtoMemberEmbeddedList<PlayerGroup>(5, false);
		}

		public uint m_play_model
		{
			get{ return _m_play_model.member_value; }
			set{ _m_play_model.member_value = value; }
		}
		public bool has_m_play_model
		{
			get{ return _m_play_model.has_value; }
		}

		public string m_battle_ip
		{
			get{ return _m_battle_ip.member_value; }
			set{ _m_battle_ip.member_value = value; }
		}
		public bool has_m_battle_ip
		{
			get{ return _m_battle_ip.has_value; }
		}

		public uint m_battle_port
		{
			get{ return _m_battle_port.member_value; }
			set{ _m_battle_port.member_value = value; }
		}
		public bool has_m_battle_port
		{
			get{ return _m_battle_port.has_value; }
		}

		public System.Collections.Generic.List<PlayerGroup> m_team1
		{
			get{ return _m_team1.member_value; }
		}
		public bool has_m_team1
		{
			get{ return _m_team1.has_value; }
		}

		public System.Collections.Generic.List<PlayerGroup> m_team2
		{
			get{ return _m_team2.member_value; }
		}
		public bool has_m_team2
		{
			get{ return _m_team2.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_play_model.Serialize(_m_play_model.member_value, ref out_stream);

			count += _m_battle_ip.Serialize(_m_battle_ip.member_value, ref out_stream);

			count += _m_battle_port.Serialize(_m_battle_port.member_value, ref out_stream);

			foreach(PlayerGroup one_member_value in _m_team1.member_value)
			{
				count += _m_team1.Serialize(one_member_value, ref out_stream);
			}

			foreach(PlayerGroup one_member_value in _m_team2.member_value)
			{
				count += _m_team2.Serialize(one_member_value, ref out_stream);
			}

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_play_model = 0;
			one_count = _m_play_model.ParseFrom(ref temp_m_play_model, ref int_stream);
			if (0 < one_count)
			{
					_m_play_model.member_value = temp_m_play_model;
					count = count + one_count;
			}

			string temp_m_battle_ip = "";
			one_count = _m_battle_ip.ParseFrom(ref temp_m_battle_ip, ref int_stream);
			if (0 < one_count)
			{
					_m_battle_ip.member_value = temp_m_battle_ip;
					count = count + one_count;
			}

			uint temp_m_battle_port = 0;
			one_count = _m_battle_port.ParseFrom(ref temp_m_battle_port, ref int_stream);
			if (0 < one_count)
			{
					_m_battle_port.member_value = temp_m_battle_port;
					count = count + one_count;
			}

			while (true)
			{
				PlayerGroup one_member_value = new PlayerGroup();
				one_count = _m_team1.ParseFrom(one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_team1.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			while (true)
			{
				PlayerGroup one_member_value = new PlayerGroup();
				one_count = _m_team2.ParseFrom(one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_team2.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			return count;
		}
	}

	public class Msg_Team2Client_PVP_BattleField_Begin_Broadcast : IMessage
	{
		private ProtoMemberUInt32 _m_play_model;	// 玩法id（PlayerTeamType）

		public Msg_Team2Client_PVP_BattleField_Begin_Broadcast()
		{
			_m_play_model = new ProtoMemberUInt32(1, true);
		}

		public Msg_Team2Client_PVP_BattleField_Begin_Broadcast(uint __m_play_model)
		{
			_m_play_model = new ProtoMemberUInt32(1, true);
			_m_play_model.member_value = __m_play_model;
		}

		public uint m_play_model
		{
			get{ return _m_play_model.member_value; }
			set{ _m_play_model.member_value = value; }
		}
		public bool has_m_play_model
		{
			get{ return _m_play_model.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_play_model.Serialize(_m_play_model.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_play_model = 0;
			one_count = _m_play_model.ParseFrom(ref temp_m_play_model, ref int_stream);
			if (0 < one_count)
			{
					_m_play_model.member_value = temp_m_play_model;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Team2Client_PVP_BattleField_Cancel_Broadcast : IMessage
	{
		private ProtoMemberUInt32 _m_play_model;	// 玩法id（PlayerTeamType）

		public Msg_Team2Client_PVP_BattleField_Cancel_Broadcast()
		{
			_m_play_model = new ProtoMemberUInt32(1, true);
		}

		public Msg_Team2Client_PVP_BattleField_Cancel_Broadcast(uint __m_play_model)
		{
			_m_play_model = new ProtoMemberUInt32(1, true);
			_m_play_model.member_value = __m_play_model;
		}

		public uint m_play_model
		{
			get{ return _m_play_model.member_value; }
			set{ _m_play_model.member_value = value; }
		}
		public bool has_m_play_model
		{
			get{ return _m_play_model.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_play_model.Serialize(_m_play_model.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_play_model = 0;
			one_count = _m_play_model.ParseFrom(ref temp_m_play_model, ref int_stream);
			if (0 < one_count)
			{
					_m_play_model.member_value = temp_m_play_model;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Team2Client_PVP_Match_AttackBegin_Broadcast : IMessage
	{
		private ProtoMemberUInt32 _m_play_model;	// 玩法id（PlayerTeamType）
		private ProtoMemberString _m_battle_ip;	// 战斗服的ip
		private ProtoMemberUInt32 _m_battle_port;	// 战斗服的端口
		private ProtoMemberEmbeddedList<PlayerTeamMemberInfo> _m_team_member_list;	// 阵容信息（双方的阵容）

		public Msg_Team2Client_PVP_Match_AttackBegin_Broadcast()
		{
			_m_play_model = new ProtoMemberUInt32(1, true);
			_m_battle_ip = new ProtoMemberString(2, false);
			_m_battle_port = new ProtoMemberUInt32(3, false);
			_m_team_member_list = new ProtoMemberEmbeddedList<PlayerTeamMemberInfo>(4, false);
		}

		public Msg_Team2Client_PVP_Match_AttackBegin_Broadcast(uint __m_play_model, string __m_battle_ip, uint __m_battle_port)
		{
			_m_play_model = new ProtoMemberUInt32(1, true);
			_m_play_model.member_value = __m_play_model;
			_m_battle_ip = new ProtoMemberString(2, false);
			_m_battle_ip.member_value = __m_battle_ip;
			_m_battle_port = new ProtoMemberUInt32(3, false);
			_m_battle_port.member_value = __m_battle_port;
			_m_team_member_list = new ProtoMemberEmbeddedList<PlayerTeamMemberInfo>(4, false);
		}

		public uint m_play_model
		{
			get{ return _m_play_model.member_value; }
			set{ _m_play_model.member_value = value; }
		}
		public bool has_m_play_model
		{
			get{ return _m_play_model.has_value; }
		}

		public string m_battle_ip
		{
			get{ return _m_battle_ip.member_value; }
			set{ _m_battle_ip.member_value = value; }
		}
		public bool has_m_battle_ip
		{
			get{ return _m_battle_ip.has_value; }
		}

		public uint m_battle_port
		{
			get{ return _m_battle_port.member_value; }
			set{ _m_battle_port.member_value = value; }
		}
		public bool has_m_battle_port
		{
			get{ return _m_battle_port.has_value; }
		}

		public System.Collections.Generic.List<PlayerTeamMemberInfo> m_team_member_list
		{
			get{ return _m_team_member_list.member_value; }
		}
		public bool has_m_team_member_list
		{
			get{ return _m_team_member_list.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_play_model.Serialize(_m_play_model.member_value, ref out_stream);

			count += _m_battle_ip.Serialize(_m_battle_ip.member_value, ref out_stream);

			count += _m_battle_port.Serialize(_m_battle_port.member_value, ref out_stream);

			foreach(PlayerTeamMemberInfo one_member_value in _m_team_member_list.member_value)
			{
				count += _m_team_member_list.Serialize(one_member_value, ref out_stream);
			}

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_play_model = 0;
			one_count = _m_play_model.ParseFrom(ref temp_m_play_model, ref int_stream);
			if (0 < one_count)
			{
					_m_play_model.member_value = temp_m_play_model;
					count = count + one_count;
			}

			string temp_m_battle_ip = "";
			one_count = _m_battle_ip.ParseFrom(ref temp_m_battle_ip, ref int_stream);
			if (0 < one_count)
			{
					_m_battle_ip.member_value = temp_m_battle_ip;
					count = count + one_count;
			}

			uint temp_m_battle_port = 0;
			one_count = _m_battle_port.ParseFrom(ref temp_m_battle_port, ref int_stream);
			if (0 < one_count)
			{
					_m_battle_port.member_value = temp_m_battle_port;
					count = count + one_count;
			}

			while (true)
			{
				PlayerTeamMemberInfo one_member_value = new PlayerTeamMemberInfo();
				one_count = _m_team_member_list.ParseFrom(one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_team_member_list.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			return count;
		}
	}

	public class Msg_Team2Client_PVP_Match_Cancel_Broadcast : IMessage
	{
		private ProtoMemberUInt32 _m_play_model;	// 玩法id（PlayerTeamType）
		private ProtoMemberUInt32 _m_change_account_id;	// 发起人的id
		private ProtoMemberUInt32 _m_change_server_id;	// 发起人的id

		public Msg_Team2Client_PVP_Match_Cancel_Broadcast()
		{
			_m_play_model = new ProtoMemberUInt32(1, true);
			_m_change_account_id = new ProtoMemberUInt32(2, true);
			_m_change_server_id = new ProtoMemberUInt32(3, true);
		}

		public Msg_Team2Client_PVP_Match_Cancel_Broadcast(uint __m_play_model, uint __m_change_account_id, uint __m_change_server_id)
		{
			_m_play_model = new ProtoMemberUInt32(1, true);
			_m_play_model.member_value = __m_play_model;
			_m_change_account_id = new ProtoMemberUInt32(2, true);
			_m_change_account_id.member_value = __m_change_account_id;
			_m_change_server_id = new ProtoMemberUInt32(3, true);
			_m_change_server_id.member_value = __m_change_server_id;
		}

		public uint m_play_model
		{
			get{ return _m_play_model.member_value; }
			set{ _m_play_model.member_value = value; }
		}
		public bool has_m_play_model
		{
			get{ return _m_play_model.has_value; }
		}

		public uint m_change_account_id
		{
			get{ return _m_change_account_id.member_value; }
			set{ _m_change_account_id.member_value = value; }
		}
		public bool has_m_change_account_id
		{
			get{ return _m_change_account_id.has_value; }
		}

		public uint m_change_server_id
		{
			get{ return _m_change_server_id.member_value; }
			set{ _m_change_server_id.member_value = value; }
		}
		public bool has_m_change_server_id
		{
			get{ return _m_change_server_id.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_play_model.Serialize(_m_play_model.member_value, ref out_stream);

			count += _m_change_account_id.Serialize(_m_change_account_id.member_value, ref out_stream);

			count += _m_change_server_id.Serialize(_m_change_server_id.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_play_model = 0;
			one_count = _m_play_model.ParseFrom(ref temp_m_play_model, ref int_stream);
			if (0 < one_count)
			{
					_m_play_model.member_value = temp_m_play_model;
					count = count + one_count;
			}

			uint temp_m_change_account_id = 0;
			one_count = _m_change_account_id.ParseFrom(ref temp_m_change_account_id, ref int_stream);
			if (0 < one_count)
			{
					_m_change_account_id.member_value = temp_m_change_account_id;
					count = count + one_count;
			}

			uint temp_m_change_server_id = 0;
			one_count = _m_change_server_id.ParseFrom(ref temp_m_change_server_id, ref int_stream);
			if (0 < one_count)
			{
					_m_change_server_id.member_value = temp_m_change_server_id;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Union2Client_ApplyList_Res : IMessage
	{
		private ProtoMemberEmbeddedList<UnionShowInfo> _m_unions;	// 公会列表显示信息

		public Msg_Union2Client_ApplyList_Res()
		{
			_m_unions = new ProtoMemberEmbeddedList<UnionShowInfo>(1, false);
		}

		public System.Collections.Generic.List<UnionShowInfo> m_unions
		{
			get{ return _m_unions.member_value; }
		}
		public bool has_m_unions
		{
			get{ return _m_unions.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			foreach(UnionShowInfo one_member_value in _m_unions.member_value)
			{
				count += _m_unions.Serialize(one_member_value, ref out_stream);
			}

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			while (true)
			{
				UnionShowInfo one_member_value = new UnionShowInfo();
				one_count = _m_unions.ParseFrom(one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_unions.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			return count;
		}
	}

	public class Msg_Union2Client_CheckUnionName_Res : IMessage
	{
		private ProtoMemberUInt32 _m_res;	// 验证公会名返回结果（LogicRes）

		public Msg_Union2Client_CheckUnionName_Res()
		{
			_m_res = new ProtoMemberUInt32(1, true);
		}

		public Msg_Union2Client_CheckUnionName_Res(uint __m_res)
		{
			_m_res = new ProtoMemberUInt32(1, true);
			_m_res.member_value = __m_res;
		}

		public uint m_res
		{
			get{ return _m_res.member_value; }
			set{ _m_res.member_value = value; }
		}
		public bool has_m_res
		{
			get{ return _m_res.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_res.Serialize(_m_res.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_res = 0;
			one_count = _m_res.ParseFrom(ref temp_m_res, ref int_stream);
			if (0 < one_count)
			{
					_m_res.member_value = temp_m_res;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Union2Client_RecommendList_Res : IMessage
	{
		private ProtoMemberEmbeddedList<UnionShowInfo> _m_unions;	// 公会列表显示信息

		public Msg_Union2Client_RecommendList_Res()
		{
			_m_unions = new ProtoMemberEmbeddedList<UnionShowInfo>(1, false);
		}

		public System.Collections.Generic.List<UnionShowInfo> m_unions
		{
			get{ return _m_unions.member_value; }
		}
		public bool has_m_unions
		{
			get{ return _m_unions.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			foreach(UnionShowInfo one_member_value in _m_unions.member_value)
			{
				count += _m_unions.Serialize(one_member_value, ref out_stream);
			}

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			while (true)
			{
				UnionShowInfo one_member_value = new UnionShowInfo();
				one_count = _m_unions.ParseFrom(one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_unions.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			return count;
		}
	}

	public class Msg_Union2Client_SetUnionName_Res : IMessage
	{
		private ProtoMemberString _m_union_name;	// 公会名
		private ProtoMemberUInt32 _m_res;	// 返回设置公会名结果（LogicRes）

		public Msg_Union2Client_SetUnionName_Res()
		{
			_m_union_name = new ProtoMemberString(1, true);
			_m_res = new ProtoMemberUInt32(2, true);
		}

		public Msg_Union2Client_SetUnionName_Res(string __m_union_name, uint __m_res)
		{
			_m_union_name = new ProtoMemberString(1, true);
			_m_union_name.member_value = __m_union_name;
			_m_res = new ProtoMemberUInt32(2, true);
			_m_res.member_value = __m_res;
		}

		public string m_union_name
		{
			get{ return _m_union_name.member_value; }
			set{ _m_union_name.member_value = value; }
		}
		public bool has_m_union_name
		{
			get{ return _m_union_name.has_value; }
		}

		public uint m_res
		{
			get{ return _m_res.member_value; }
			set{ _m_res.member_value = value; }
		}
		public bool has_m_res
		{
			get{ return _m_res.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_union_name.Serialize(_m_union_name.member_value, ref out_stream);

			count += _m_res.Serialize(_m_res.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			string temp_m_union_name = "";
			one_count = _m_union_name.ParseFrom(ref temp_m_union_name, ref int_stream);
			if (0 < one_count)
			{
					_m_union_name.member_value = temp_m_union_name;
					count = count + one_count;
			}

			uint temp_m_res = 0;
			one_count = _m_res.ParseFrom(ref temp_m_res, ref int_stream);
			if (0 < one_count)
			{
					_m_res.member_value = temp_m_res;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Union2Client_UnionApplicationList_Res : IMessage
	{
		private ProtoMemberEmbedded<UnionApplicationList> _m_player_list;	// 公会申请成员列表

		public Msg_Union2Client_UnionApplicationList_Res()
		{
			_m_player_list = new ProtoMemberEmbedded<UnionApplicationList>(1, true);
			_m_player_list.member_value = new UnionApplicationList();
		}

		public UnionApplicationList m_player_list
		{
			get{ return _m_player_list.member_value as UnionApplicationList; }
			set{ _m_player_list.member_value = value; }
		}
		public bool has_m_player_list
		{
			get{ return _m_player_list.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_player_list.Serialize(_m_player_list.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			UnionApplicationList temp_m_player_list = new UnionApplicationList();
			one_count = _m_player_list.ParseFrom(temp_m_player_list, ref int_stream);
			if (0 < one_count)
			{
					_m_player_list.member_value = temp_m_player_list;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Union2Client_UnionChest_Get_Res : IMessage
	{
		private ProtoMemberUInt32 _m_chest_id;	// 待领取的宝箱id
		private ProtoMemberUInt32 _m_res;	// 升级结果（LogicRes）

		public Msg_Union2Client_UnionChest_Get_Res()
		{
			_m_chest_id = new ProtoMemberUInt32(1, true);
			_m_res = new ProtoMemberUInt32(2, true);
		}

		public Msg_Union2Client_UnionChest_Get_Res(uint __m_chest_id, uint __m_res)
		{
			_m_chest_id = new ProtoMemberUInt32(1, true);
			_m_chest_id.member_value = __m_chest_id;
			_m_res = new ProtoMemberUInt32(2, true);
			_m_res.member_value = __m_res;
		}

		public uint m_chest_id
		{
			get{ return _m_chest_id.member_value; }
			set{ _m_chest_id.member_value = value; }
		}
		public bool has_m_chest_id
		{
			get{ return _m_chest_id.has_value; }
		}

		public uint m_res
		{
			get{ return _m_res.member_value; }
			set{ _m_res.member_value = value; }
		}
		public bool has_m_res
		{
			get{ return _m_res.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_chest_id.Serialize(_m_chest_id.member_value, ref out_stream);

			count += _m_res.Serialize(_m_res.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_chest_id = 0;
			one_count = _m_chest_id.ParseFrom(ref temp_m_chest_id, ref int_stream);
			if (0 < one_count)
			{
					_m_chest_id.member_value = temp_m_chest_id;
					count = count + one_count;
			}

			uint temp_m_res = 0;
			one_count = _m_res.ParseFrom(ref temp_m_res, ref int_stream);
			if (0 < one_count)
			{
					_m_res.member_value = temp_m_res;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Union2Client_UnionManor_Bid_Res : IMessage
	{
		private ProtoMemberUInt32 _m_manor_id;	// 宣战竞标领地id
		private ProtoMemberUInt32 _m_max_bid_money;	// 当前最高竞标金额
		private ProtoMemberUInt32 _m_res;	// 竞标结果（LogicRes）

		public Msg_Union2Client_UnionManor_Bid_Res()
		{
			_m_manor_id = new ProtoMemberUInt32(1, true);
			_m_max_bid_money = new ProtoMemberUInt32(2, true);
			_m_res = new ProtoMemberUInt32(3, true);
		}

		public Msg_Union2Client_UnionManor_Bid_Res(uint __m_manor_id, uint __m_max_bid_money, uint __m_res)
		{
			_m_manor_id = new ProtoMemberUInt32(1, true);
			_m_manor_id.member_value = __m_manor_id;
			_m_max_bid_money = new ProtoMemberUInt32(2, true);
			_m_max_bid_money.member_value = __m_max_bid_money;
			_m_res = new ProtoMemberUInt32(3, true);
			_m_res.member_value = __m_res;
		}

		public uint m_manor_id
		{
			get{ return _m_manor_id.member_value; }
			set{ _m_manor_id.member_value = value; }
		}
		public bool has_m_manor_id
		{
			get{ return _m_manor_id.has_value; }
		}

		public uint m_max_bid_money
		{
			get{ return _m_max_bid_money.member_value; }
			set{ _m_max_bid_money.member_value = value; }
		}
		public bool has_m_max_bid_money
		{
			get{ return _m_max_bid_money.has_value; }
		}

		public uint m_res
		{
			get{ return _m_res.member_value; }
			set{ _m_res.member_value = value; }
		}
		public bool has_m_res
		{
			get{ return _m_res.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_manor_id.Serialize(_m_manor_id.member_value, ref out_stream);

			count += _m_max_bid_money.Serialize(_m_max_bid_money.member_value, ref out_stream);

			count += _m_res.Serialize(_m_res.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_manor_id = 0;
			one_count = _m_manor_id.ParseFrom(ref temp_m_manor_id, ref int_stream);
			if (0 < one_count)
			{
					_m_manor_id.member_value = temp_m_manor_id;
					count = count + one_count;
			}

			uint temp_m_max_bid_money = 0;
			one_count = _m_max_bid_money.ParseFrom(ref temp_m_max_bid_money, ref int_stream);
			if (0 < one_count)
			{
					_m_max_bid_money.member_value = temp_m_max_bid_money;
					count = count + one_count;
			}

			uint temp_m_res = 0;
			one_count = _m_res.ParseFrom(ref temp_m_res, ref int_stream);
			if (0 < one_count)
			{
					_m_res.member_value = temp_m_res;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Union2Client_UnionManor_State_Broadcast : IMessage
	{
		private ProtoMemberUInt32 _m_manor_id;	// 被更新的公会领地
		private ProtoMemberEnum<UnionManorStateType> _m_state;	// 公会当前状态

		public Msg_Union2Client_UnionManor_State_Broadcast()
		{
			_m_manor_id = new ProtoMemberUInt32(1, true);
			_m_state = new ProtoMemberEnum<UnionManorStateType>(2, true);
		}

		public Msg_Union2Client_UnionManor_State_Broadcast(uint __m_manor_id, UnionManorStateType __m_state)
		{
			_m_manor_id = new ProtoMemberUInt32(1, true);
			_m_manor_id.member_value = __m_manor_id;
			_m_state = new ProtoMemberEnum<UnionManorStateType>(2, true);
			_m_state.member_value = __m_state;
		}

		public uint m_manor_id
		{
			get{ return _m_manor_id.member_value; }
			set{ _m_manor_id.member_value = value; }
		}
		public bool has_m_manor_id
		{
			get{ return _m_manor_id.has_value; }
		}

		public UnionManorStateType m_state
		{
			get{ return _m_state.member_value; }
			set{ _m_state.member_value = value; }
		}
		public bool has_m_state
		{
			get{ return _m_state.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_manor_id.Serialize(_m_manor_id.member_value, ref out_stream);

			count += _m_state.Serialize((uint)_m_state.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_manor_id = 0;
			one_count = _m_manor_id.ParseFrom(ref temp_m_manor_id, ref int_stream);
			if (0 < one_count)
			{
					_m_manor_id.member_value = temp_m_manor_id;
					count = count + one_count;
			}

			uint temp_m_state = 0;
			one_count = _m_state.ParseFrom(ref temp_m_state, ref int_stream);
			if (0 < one_count)
			{
					_m_state.member_value = (UnionManorStateType)temp_m_state;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Union2Client_UnionPlayerOperator_Broadcast : IMessage
	{
		private ProtoMemberUInt32 _m_src_account_id;	// 操作成员角色id == 账号id
		private ProtoMemberUInt32 _m_src_server_id;	// 操作成员所属服id
		private ProtoMemberUInt32 _m_des_account_id;	// 被操作公会成员/申请成员角色id == 账号id
		private ProtoMemberUInt32 _m_des_server_id;	// 被操作公会成员/申请成员所属服id
		private ProtoMemberEnum<UnionMemberOperatorType> _m_operator;	// 操作类型
		private ProtoMemberUInt32 _m_res;	// 操作结果（LogicRes）
		private ProtoMemberUInt64 _m_log_time;	// 服务器时间戳

		public Msg_Union2Client_UnionPlayerOperator_Broadcast()
		{
			_m_src_account_id = new ProtoMemberUInt32(1, true);
			_m_src_server_id = new ProtoMemberUInt32(2, true);
			_m_des_account_id = new ProtoMemberUInt32(3, true);
			_m_des_server_id = new ProtoMemberUInt32(4, true);
			_m_operator = new ProtoMemberEnum<UnionMemberOperatorType>(5, true);
			_m_res = new ProtoMemberUInt32(6, true);
			_m_log_time = new ProtoMemberUInt64(7, true);
		}

		public Msg_Union2Client_UnionPlayerOperator_Broadcast(uint __m_src_account_id, uint __m_src_server_id, uint __m_des_account_id, uint __m_des_server_id, UnionMemberOperatorType __m_operator, uint __m_res, ulong __m_log_time)
		{
			_m_src_account_id = new ProtoMemberUInt32(1, true);
			_m_src_account_id.member_value = __m_src_account_id;
			_m_src_server_id = new ProtoMemberUInt32(2, true);
			_m_src_server_id.member_value = __m_src_server_id;
			_m_des_account_id = new ProtoMemberUInt32(3, true);
			_m_des_account_id.member_value = __m_des_account_id;
			_m_des_server_id = new ProtoMemberUInt32(4, true);
			_m_des_server_id.member_value = __m_des_server_id;
			_m_operator = new ProtoMemberEnum<UnionMemberOperatorType>(5, true);
			_m_operator.member_value = __m_operator;
			_m_res = new ProtoMemberUInt32(6, true);
			_m_res.member_value = __m_res;
			_m_log_time = new ProtoMemberUInt64(7, true);
			_m_log_time.member_value = __m_log_time;
		}

		public uint m_src_account_id
		{
			get{ return _m_src_account_id.member_value; }
			set{ _m_src_account_id.member_value = value; }
		}
		public bool has_m_src_account_id
		{
			get{ return _m_src_account_id.has_value; }
		}

		public uint m_src_server_id
		{
			get{ return _m_src_server_id.member_value; }
			set{ _m_src_server_id.member_value = value; }
		}
		public bool has_m_src_server_id
		{
			get{ return _m_src_server_id.has_value; }
		}

		public uint m_des_account_id
		{
			get{ return _m_des_account_id.member_value; }
			set{ _m_des_account_id.member_value = value; }
		}
		public bool has_m_des_account_id
		{
			get{ return _m_des_account_id.has_value; }
		}

		public uint m_des_server_id
		{
			get{ return _m_des_server_id.member_value; }
			set{ _m_des_server_id.member_value = value; }
		}
		public bool has_m_des_server_id
		{
			get{ return _m_des_server_id.has_value; }
		}

		public UnionMemberOperatorType m_operator
		{
			get{ return _m_operator.member_value; }
			set{ _m_operator.member_value = value; }
		}
		public bool has_m_operator
		{
			get{ return _m_operator.has_value; }
		}

		public uint m_res
		{
			get{ return _m_res.member_value; }
			set{ _m_res.member_value = value; }
		}
		public bool has_m_res
		{
			get{ return _m_res.has_value; }
		}

		public ulong m_log_time
		{
			get{ return _m_log_time.member_value; }
			set{ _m_log_time.member_value = value; }
		}
		public bool has_m_log_time
		{
			get{ return _m_log_time.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_src_account_id.Serialize(_m_src_account_id.member_value, ref out_stream);

			count += _m_src_server_id.Serialize(_m_src_server_id.member_value, ref out_stream);

			count += _m_des_account_id.Serialize(_m_des_account_id.member_value, ref out_stream);

			count += _m_des_server_id.Serialize(_m_des_server_id.member_value, ref out_stream);

			count += _m_operator.Serialize((uint)_m_operator.member_value, ref out_stream);

			count += _m_res.Serialize(_m_res.member_value, ref out_stream);

			count += _m_log_time.Serialize(_m_log_time.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_src_account_id = 0;
			one_count = _m_src_account_id.ParseFrom(ref temp_m_src_account_id, ref int_stream);
			if (0 < one_count)
			{
					_m_src_account_id.member_value = temp_m_src_account_id;
					count = count + one_count;
			}

			uint temp_m_src_server_id = 0;
			one_count = _m_src_server_id.ParseFrom(ref temp_m_src_server_id, ref int_stream);
			if (0 < one_count)
			{
					_m_src_server_id.member_value = temp_m_src_server_id;
					count = count + one_count;
			}

			uint temp_m_des_account_id = 0;
			one_count = _m_des_account_id.ParseFrom(ref temp_m_des_account_id, ref int_stream);
			if (0 < one_count)
			{
					_m_des_account_id.member_value = temp_m_des_account_id;
					count = count + one_count;
			}

			uint temp_m_des_server_id = 0;
			one_count = _m_des_server_id.ParseFrom(ref temp_m_des_server_id, ref int_stream);
			if (0 < one_count)
			{
					_m_des_server_id.member_value = temp_m_des_server_id;
					count = count + one_count;
			}

			uint temp_m_operator = 0;
			one_count = _m_operator.ParseFrom(ref temp_m_operator, ref int_stream);
			if (0 < one_count)
			{
					_m_operator.member_value = (UnionMemberOperatorType)temp_m_operator;
					count = count + one_count;
			}

			uint temp_m_res = 0;
			one_count = _m_res.ParseFrom(ref temp_m_res, ref int_stream);
			if (0 < one_count)
			{
					_m_res.member_value = temp_m_res;
					count = count + one_count;
			}

			ulong temp_m_log_time = 0;
			one_count = _m_log_time.ParseFrom(ref temp_m_log_time, ref int_stream);
			if (0 < one_count)
			{
					_m_log_time.member_value = temp_m_log_time;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Union2Client_UnionTechnology_LvUp_Res : IMessage
	{
		private ProtoMemberUInt32 _m_technology_id;	// 待升级的科技id
		private ProtoMemberUInt32 _m_res;	// 升级结果（LogicRes）

		public Msg_Union2Client_UnionTechnology_LvUp_Res()
		{
			_m_technology_id = new ProtoMemberUInt32(1, true);
			_m_res = new ProtoMemberUInt32(2, true);
		}

		public Msg_Union2Client_UnionTechnology_LvUp_Res(uint __m_technology_id, uint __m_res)
		{
			_m_technology_id = new ProtoMemberUInt32(1, true);
			_m_technology_id.member_value = __m_technology_id;
			_m_res = new ProtoMemberUInt32(2, true);
			_m_res.member_value = __m_res;
		}

		public uint m_technology_id
		{
			get{ return _m_technology_id.member_value; }
			set{ _m_technology_id.member_value = value; }
		}
		public bool has_m_technology_id
		{
			get{ return _m_technology_id.has_value; }
		}

		public uint m_res
		{
			get{ return _m_res.member_value; }
			set{ _m_res.member_value = value; }
		}
		public bool has_m_res
		{
			get{ return _m_res.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_technology_id.Serialize(_m_technology_id.member_value, ref out_stream);

			count += _m_res.Serialize(_m_res.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_technology_id = 0;
			one_count = _m_technology_id.ParseFrom(ref temp_m_technology_id, ref int_stream);
			if (0 < one_count)
			{
					_m_technology_id.member_value = temp_m_technology_id;
					count = count + one_count;
			}

			uint temp_m_res = 0;
			one_count = _m_res.ParseFrom(ref temp_m_res, ref int_stream);
			if (0 < one_count)
			{
					_m_res.member_value = temp_m_res;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Union2Client_Union_Create_Res : IMessage
	{
		private ProtoMemberUInt32 _m_res;	// 创建公会结果（LogicRes）
		private ProtoMemberUInt64 _m_union_id;	// 公会id

		public Msg_Union2Client_Union_Create_Res()
		{
			_m_res = new ProtoMemberUInt32(1, true);
			_m_union_id = new ProtoMemberUInt64(2, true);
		}

		public Msg_Union2Client_Union_Create_Res(uint __m_res, ulong __m_union_id)
		{
			_m_res = new ProtoMemberUInt32(1, true);
			_m_res.member_value = __m_res;
			_m_union_id = new ProtoMemberUInt64(2, true);
			_m_union_id.member_value = __m_union_id;
		}

		public uint m_res
		{
			get{ return _m_res.member_value; }
			set{ _m_res.member_value = value; }
		}
		public bool has_m_res
		{
			get{ return _m_res.has_value; }
		}

		public ulong m_union_id
		{
			get{ return _m_union_id.member_value; }
			set{ _m_union_id.member_value = value; }
		}
		public bool has_m_union_id
		{
			get{ return _m_union_id.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_res.Serialize(_m_res.member_value, ref out_stream);

			count += _m_union_id.Serialize(_m_union_id.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_res = 0;
			one_count = _m_res.ParseFrom(ref temp_m_res, ref int_stream);
			if (0 < one_count)
			{
					_m_res.member_value = temp_m_res;
					count = count + one_count;
			}

			ulong temp_m_union_id = 0;
			one_count = _m_union_id.ParseFrom(ref temp_m_union_id, ref int_stream);
			if (0 < one_count)
			{
					_m_union_id.member_value = temp_m_union_id;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Union2Client_Union_Find_Res : IMessage
	{
		private ProtoMemberEmbeddedList<UnionShowInfo> _m_unions;	// 公会显示信息列表

		public Msg_Union2Client_Union_Find_Res()
		{
			_m_unions = new ProtoMemberEmbeddedList<UnionShowInfo>(1, false);
		}

		public System.Collections.Generic.List<UnionShowInfo> m_unions
		{
			get{ return _m_unions.member_value; }
		}
		public bool has_m_unions
		{
			get{ return _m_unions.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			foreach(UnionShowInfo one_member_value in _m_unions.member_value)
			{
				count += _m_unions.Serialize(one_member_value, ref out_stream);
			}

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			while (true)
			{
				UnionShowInfo one_member_value = new UnionShowInfo();
				one_count = _m_unions.ParseFrom(one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_unions.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			return count;
		}
	}

	public class Msg_Union2Client_Union_Info_Res : IMessage
	{
		private ProtoMemberUInt32 _m_res;	// 请求结果（LogicRes）
		private ProtoMemberEmbedded<PlayerUnion> _m_union_info;	// 玩家个人的公会基础信息

		public Msg_Union2Client_Union_Info_Res()
		{
			_m_res = new ProtoMemberUInt32(1, true);
			_m_union_info = new ProtoMemberEmbedded<PlayerUnion>(2, false);
			_m_union_info.member_value = new PlayerUnion();
		}

		public Msg_Union2Client_Union_Info_Res(uint __m_res)
		{
			_m_res = new ProtoMemberUInt32(1, true);
			_m_res.member_value = __m_res;
			_m_union_info = new ProtoMemberEmbedded<PlayerUnion>(2, false);
			_m_union_info.member_value = new PlayerUnion();
		}

		public uint m_res
		{
			get{ return _m_res.member_value; }
			set{ _m_res.member_value = value; }
		}
		public bool has_m_res
		{
			get{ return _m_res.has_value; }
		}

		public PlayerUnion m_union_info
		{
			get{ return _m_union_info.member_value as PlayerUnion; }
			set{ _m_union_info.member_value = value; }
		}
		public bool has_m_union_info
		{
			get{ return _m_union_info.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_res.Serialize(_m_res.member_value, ref out_stream);

			count += _m_union_info.Serialize(_m_union_info.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_res = 0;
			one_count = _m_res.ParseFrom(ref temp_m_res, ref int_stream);
			if (0 < one_count)
			{
					_m_res.member_value = temp_m_res;
					count = count + one_count;
			}

			PlayerUnion temp_m_union_info = new PlayerUnion();
			one_count = _m_union_info.ParseFrom(temp_m_union_info, ref int_stream);
			if (0 < one_count)
			{
					_m_union_info.member_value = temp_m_union_info;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Union2Client_Union_Join_Res : IMessage
	{
		private ProtoMemberUInt64 _m_union_id;	// 公会id
		private ProtoMemberBool _m_type;	// true：申请加入，false：取消申请加入
		private ProtoMemberUInt32 _m_res;	// 申请加入结果（LogicRes）
		private ProtoMemberUInt32 _m_hunting_limit;	// 当前公会加入限制条件
		private ProtoMemberUInt32 _m_lv_limt;	

		public Msg_Union2Client_Union_Join_Res()
		{
			_m_union_id = new ProtoMemberUInt64(1, true);
			_m_type = new ProtoMemberBool(2, true);
			_m_res = new ProtoMemberUInt32(3, true);
			_m_hunting_limit = new ProtoMemberUInt32(4, false);
			_m_lv_limt = new ProtoMemberUInt32(5, false);
		}

		public Msg_Union2Client_Union_Join_Res(ulong __m_union_id, bool __m_type, uint __m_res, uint __m_hunting_limit, uint __m_lv_limt)
		{
			_m_union_id = new ProtoMemberUInt64(1, true);
			_m_union_id.member_value = __m_union_id;
			_m_type = new ProtoMemberBool(2, true);
			_m_type.member_value = __m_type;
			_m_res = new ProtoMemberUInt32(3, true);
			_m_res.member_value = __m_res;
			_m_hunting_limit = new ProtoMemberUInt32(4, false);
			_m_hunting_limit.member_value = __m_hunting_limit;
			_m_lv_limt = new ProtoMemberUInt32(5, false);
			_m_lv_limt.member_value = __m_lv_limt;
		}

		public ulong m_union_id
		{
			get{ return _m_union_id.member_value; }
			set{ _m_union_id.member_value = value; }
		}
		public bool has_m_union_id
		{
			get{ return _m_union_id.has_value; }
		}

		public bool m_type
		{
			get{ return _m_type.member_value; }
			set{ _m_type.member_value = value; }
		}
		public bool has_m_type
		{
			get{ return _m_type.has_value; }
		}

		public uint m_res
		{
			get{ return _m_res.member_value; }
			set{ _m_res.member_value = value; }
		}
		public bool has_m_res
		{
			get{ return _m_res.has_value; }
		}

		public uint m_hunting_limit
		{
			get{ return _m_hunting_limit.member_value; }
			set{ _m_hunting_limit.member_value = value; }
		}
		public bool has_m_hunting_limit
		{
			get{ return _m_hunting_limit.has_value; }
		}

		public uint m_lv_limt
		{
			get{ return _m_lv_limt.member_value; }
			set{ _m_lv_limt.member_value = value; }
		}
		public bool has_m_lv_limt
		{
			get{ return _m_lv_limt.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_union_id.Serialize(_m_union_id.member_value, ref out_stream);

			count += _m_type.Serialize(_m_type.member_value, ref out_stream);

			count += _m_res.Serialize(_m_res.member_value, ref out_stream);

			count += _m_hunting_limit.Serialize(_m_hunting_limit.member_value, ref out_stream);

			count += _m_lv_limt.Serialize(_m_lv_limt.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			ulong temp_m_union_id = 0;
			one_count = _m_union_id.ParseFrom(ref temp_m_union_id, ref int_stream);
			if (0 < one_count)
			{
					_m_union_id.member_value = temp_m_union_id;
					count = count + one_count;
			}

			bool temp_m_type = false;
			one_count = _m_type.ParseFrom(ref temp_m_type, ref int_stream);
			if (0 < one_count)
			{
					_m_type.member_value = temp_m_type;
					count = count + one_count;
			}

			uint temp_m_res = 0;
			one_count = _m_res.ParseFrom(ref temp_m_res, ref int_stream);
			if (0 < one_count)
			{
					_m_res.member_value = temp_m_res;
					count = count + one_count;
			}

			uint temp_m_hunting_limit = 0;
			one_count = _m_hunting_limit.ParseFrom(ref temp_m_hunting_limit, ref int_stream);
			if (0 < one_count)
			{
					_m_hunting_limit.member_value = temp_m_hunting_limit;
					count = count + one_count;
			}

			uint temp_m_lv_limt = 0;
			one_count = _m_lv_limt.ParseFrom(ref temp_m_lv_limt, ref int_stream);
			if (0 < one_count)
			{
					_m_lv_limt.member_value = temp_m_lv_limt;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Union2Client_Union_MemberSet_Res : IMessage
	{
		private ProtoMemberUInt32 _m_res;	// 设置结果（LogicRes）

		public Msg_Union2Client_Union_MemberSet_Res()
		{
			_m_res = new ProtoMemberUInt32(1, true);
		}

		public Msg_Union2Client_Union_MemberSet_Res(uint __m_res)
		{
			_m_res = new ProtoMemberUInt32(1, true);
			_m_res.member_value = __m_res;
		}

		public uint m_res
		{
			get{ return _m_res.member_value; }
			set{ _m_res.member_value = value; }
		}
		public bool has_m_res
		{
			get{ return _m_res.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_res.Serialize(_m_res.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_res = 0;
			one_count = _m_res.ParseFrom(ref temp_m_res, ref int_stream);
			if (0 < one_count)
			{
					_m_res.member_value = temp_m_res;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Union2Client_Union_Set_Res : IMessage
	{
		private ProtoMemberUInt32 _m_res;	// 设置结果（LogicRes）

		public Msg_Union2Client_Union_Set_Res()
		{
			_m_res = new ProtoMemberUInt32(1, true);
		}

		public Msg_Union2Client_Union_Set_Res(uint __m_res)
		{
			_m_res = new ProtoMemberUInt32(1, true);
			_m_res.member_value = __m_res;
		}

		public uint m_res
		{
			get{ return _m_res.member_value; }
			set{ _m_res.member_value = value; }
		}
		public bool has_m_res
		{
			get{ return _m_res.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_res.Serialize(_m_res.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_res = 0;
			one_count = _m_res.ParseFrom(ref temp_m_res, ref int_stream);
			if (0 < one_count)
			{
					_m_res.member_value = temp_m_res;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Union2Client_Update_UnionExp_Broadcast : IMessage
	{
		private ProtoMemberUInt64 _m_log_time;	// 服务器时间戳
		private ProtoMemberString _m_player_name;	// 可能存在的操作人名称（空字符串表示没有操作人）
		private ProtoMemberUInt32 _m_union_exp;	// 公会经验当前值
		private ProtoMemberUInt32 _m_union_lv;	// 公会等级当前值
		private ProtoMemberEnum<UnionExpUpdateType> _m_type;	// 公会经验变化途径

		public Msg_Union2Client_Update_UnionExp_Broadcast()
		{
			_m_log_time = new ProtoMemberUInt64(1, true);
			_m_player_name = new ProtoMemberString(2, true);
			_m_union_exp = new ProtoMemberUInt32(3, true);
			_m_union_lv = new ProtoMemberUInt32(4, true);
			_m_type = new ProtoMemberEnum<UnionExpUpdateType>(5, true);
		}

		public Msg_Union2Client_Update_UnionExp_Broadcast(ulong __m_log_time, string __m_player_name, uint __m_union_exp, uint __m_union_lv, UnionExpUpdateType __m_type)
		{
			_m_log_time = new ProtoMemberUInt64(1, true);
			_m_log_time.member_value = __m_log_time;
			_m_player_name = new ProtoMemberString(2, true);
			_m_player_name.member_value = __m_player_name;
			_m_union_exp = new ProtoMemberUInt32(3, true);
			_m_union_exp.member_value = __m_union_exp;
			_m_union_lv = new ProtoMemberUInt32(4, true);
			_m_union_lv.member_value = __m_union_lv;
			_m_type = new ProtoMemberEnum<UnionExpUpdateType>(5, true);
			_m_type.member_value = __m_type;
		}

		public ulong m_log_time
		{
			get{ return _m_log_time.member_value; }
			set{ _m_log_time.member_value = value; }
		}
		public bool has_m_log_time
		{
			get{ return _m_log_time.has_value; }
		}

		public string m_player_name
		{
			get{ return _m_player_name.member_value; }
			set{ _m_player_name.member_value = value; }
		}
		public bool has_m_player_name
		{
			get{ return _m_player_name.has_value; }
		}

		public uint m_union_exp
		{
			get{ return _m_union_exp.member_value; }
			set{ _m_union_exp.member_value = value; }
		}
		public bool has_m_union_exp
		{
			get{ return _m_union_exp.has_value; }
		}

		public uint m_union_lv
		{
			get{ return _m_union_lv.member_value; }
			set{ _m_union_lv.member_value = value; }
		}
		public bool has_m_union_lv
		{
			get{ return _m_union_lv.has_value; }
		}

		public UnionExpUpdateType m_type
		{
			get{ return _m_type.member_value; }
			set{ _m_type.member_value = value; }
		}
		public bool has_m_type
		{
			get{ return _m_type.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_log_time.Serialize(_m_log_time.member_value, ref out_stream);

			count += _m_player_name.Serialize(_m_player_name.member_value, ref out_stream);

			count += _m_union_exp.Serialize(_m_union_exp.member_value, ref out_stream);

			count += _m_union_lv.Serialize(_m_union_lv.member_value, ref out_stream);

			count += _m_type.Serialize((uint)_m_type.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			ulong temp_m_log_time = 0;
			one_count = _m_log_time.ParseFrom(ref temp_m_log_time, ref int_stream);
			if (0 < one_count)
			{
					_m_log_time.member_value = temp_m_log_time;
					count = count + one_count;
			}

			string temp_m_player_name = "";
			one_count = _m_player_name.ParseFrom(ref temp_m_player_name, ref int_stream);
			if (0 < one_count)
			{
					_m_player_name.member_value = temp_m_player_name;
					count = count + one_count;
			}

			uint temp_m_union_exp = 0;
			one_count = _m_union_exp.ParseFrom(ref temp_m_union_exp, ref int_stream);
			if (0 < one_count)
			{
					_m_union_exp.member_value = temp_m_union_exp;
					count = count + one_count;
			}

			uint temp_m_union_lv = 0;
			one_count = _m_union_lv.ParseFrom(ref temp_m_union_lv, ref int_stream);
			if (0 < one_count)
			{
					_m_union_lv.member_value = temp_m_union_lv;
					count = count + one_count;
			}

			uint temp_m_type = 0;
			one_count = _m_type.ParseFrom(ref temp_m_type, ref int_stream);
			if (0 < one_count)
			{
					_m_type.member_value = (UnionExpUpdateType)temp_m_type;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Union2Client_Update_UnionMoney_Broadcast : IMessage
	{
		private ProtoMemberUInt64 _m_log_time;	// 服务器时间戳
		private ProtoMemberString _m_player_name;	// 可能存在的操作人名称（空字符串表示没有操作人）
		private ProtoMemberUInt32 _m_money;	// 公会货币当前值
		private ProtoMemberEnum<UnionMoneyUpdateType> _m_type;	// 公会货币变化途径

		public Msg_Union2Client_Update_UnionMoney_Broadcast()
		{
			_m_log_time = new ProtoMemberUInt64(1, true);
			_m_player_name = new ProtoMemberString(2, true);
			_m_money = new ProtoMemberUInt32(3, true);
			_m_type = new ProtoMemberEnum<UnionMoneyUpdateType>(4, true);
		}

		public Msg_Union2Client_Update_UnionMoney_Broadcast(ulong __m_log_time, string __m_player_name, uint __m_money, UnionMoneyUpdateType __m_type)
		{
			_m_log_time = new ProtoMemberUInt64(1, true);
			_m_log_time.member_value = __m_log_time;
			_m_player_name = new ProtoMemberString(2, true);
			_m_player_name.member_value = __m_player_name;
			_m_money = new ProtoMemberUInt32(3, true);
			_m_money.member_value = __m_money;
			_m_type = new ProtoMemberEnum<UnionMoneyUpdateType>(4, true);
			_m_type.member_value = __m_type;
		}

		public ulong m_log_time
		{
			get{ return _m_log_time.member_value; }
			set{ _m_log_time.member_value = value; }
		}
		public bool has_m_log_time
		{
			get{ return _m_log_time.has_value; }
		}

		public string m_player_name
		{
			get{ return _m_player_name.member_value; }
			set{ _m_player_name.member_value = value; }
		}
		public bool has_m_player_name
		{
			get{ return _m_player_name.has_value; }
		}

		public uint m_money
		{
			get{ return _m_money.member_value; }
			set{ _m_money.member_value = value; }
		}
		public bool has_m_money
		{
			get{ return _m_money.has_value; }
		}

		public UnionMoneyUpdateType m_type
		{
			get{ return _m_type.member_value; }
			set{ _m_type.member_value = value; }
		}
		public bool has_m_type
		{
			get{ return _m_type.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_log_time.Serialize(_m_log_time.member_value, ref out_stream);

			count += _m_player_name.Serialize(_m_player_name.member_value, ref out_stream);

			count += _m_money.Serialize(_m_money.member_value, ref out_stream);

			count += _m_type.Serialize((uint)_m_type.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			ulong temp_m_log_time = 0;
			one_count = _m_log_time.ParseFrom(ref temp_m_log_time, ref int_stream);
			if (0 < one_count)
			{
					_m_log_time.member_value = temp_m_log_time;
					count = count + one_count;
			}

			string temp_m_player_name = "";
			one_count = _m_player_name.ParseFrom(ref temp_m_player_name, ref int_stream);
			if (0 < one_count)
			{
					_m_player_name.member_value = temp_m_player_name;
					count = count + one_count;
			}

			uint temp_m_money = 0;
			one_count = _m_money.ParseFrom(ref temp_m_money, ref int_stream);
			if (0 < one_count)
			{
					_m_money.member_value = temp_m_money;
					count = count + one_count;
			}

			uint temp_m_type = 0;
			one_count = _m_type.ParseFrom(ref temp_m_type, ref int_stream);
			if (0 < one_count)
			{
					_m_type.member_value = (UnionMoneyUpdateType)temp_m_type;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Union2Client_Update_UnionTechnology_Broadcast : IMessage
	{
		private ProtoMemberUInt64 _m_log_time;	// 服务器时间戳
		private ProtoMemberString _m_player_name;	// 操作人名称
		private ProtoMemberUInt32 _m_technology_id;	// 公会科技id
		private ProtoMemberUInt32 _m_technology_lv;	// 公会科技等级当前值

		public Msg_Union2Client_Update_UnionTechnology_Broadcast()
		{
			_m_log_time = new ProtoMemberUInt64(1, true);
			_m_player_name = new ProtoMemberString(2, true);
			_m_technology_id = new ProtoMemberUInt32(3, true);
			_m_technology_lv = new ProtoMemberUInt32(4, true);
		}

		public Msg_Union2Client_Update_UnionTechnology_Broadcast(ulong __m_log_time, string __m_player_name, uint __m_technology_id, uint __m_technology_lv)
		{
			_m_log_time = new ProtoMemberUInt64(1, true);
			_m_log_time.member_value = __m_log_time;
			_m_player_name = new ProtoMemberString(2, true);
			_m_player_name.member_value = __m_player_name;
			_m_technology_id = new ProtoMemberUInt32(3, true);
			_m_technology_id.member_value = __m_technology_id;
			_m_technology_lv = new ProtoMemberUInt32(4, true);
			_m_technology_lv.member_value = __m_technology_lv;
		}

		public ulong m_log_time
		{
			get{ return _m_log_time.member_value; }
			set{ _m_log_time.member_value = value; }
		}
		public bool has_m_log_time
		{
			get{ return _m_log_time.has_value; }
		}

		public string m_player_name
		{
			get{ return _m_player_name.member_value; }
			set{ _m_player_name.member_value = value; }
		}
		public bool has_m_player_name
		{
			get{ return _m_player_name.has_value; }
		}

		public uint m_technology_id
		{
			get{ return _m_technology_id.member_value; }
			set{ _m_technology_id.member_value = value; }
		}
		public bool has_m_technology_id
		{
			get{ return _m_technology_id.has_value; }
		}

		public uint m_technology_lv
		{
			get{ return _m_technology_lv.member_value; }
			set{ _m_technology_lv.member_value = value; }
		}
		public bool has_m_technology_lv
		{
			get{ return _m_technology_lv.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_log_time.Serialize(_m_log_time.member_value, ref out_stream);

			count += _m_player_name.Serialize(_m_player_name.member_value, ref out_stream);

			count += _m_technology_id.Serialize(_m_technology_id.member_value, ref out_stream);

			count += _m_technology_lv.Serialize(_m_technology_lv.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			ulong temp_m_log_time = 0;
			one_count = _m_log_time.ParseFrom(ref temp_m_log_time, ref int_stream);
			if (0 < one_count)
			{
					_m_log_time.member_value = temp_m_log_time;
					count = count + one_count;
			}

			string temp_m_player_name = "";
			one_count = _m_player_name.ParseFrom(ref temp_m_player_name, ref int_stream);
			if (0 < one_count)
			{
					_m_player_name.member_value = temp_m_player_name;
					count = count + one_count;
			}

			uint temp_m_technology_id = 0;
			one_count = _m_technology_id.ParseFrom(ref temp_m_technology_id, ref int_stream);
			if (0 < one_count)
			{
					_m_technology_id.member_value = temp_m_technology_id;
					count = count + one_count;
			}

			uint temp_m_technology_lv = 0;
			one_count = _m_technology_lv.ParseFrom(ref temp_m_technology_lv, ref int_stream);
			if (0 < one_count)
			{
					_m_technology_lv.member_value = temp_m_technology_lv;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Union2Client_Update_Union_Req : IMessage
	{
		private ProtoMemberUInt64 _m_union_id;	// 所属公会id
		private ProtoMemberUInt64List _m_apply_union_id;	// 已申请公会id
		private ProtoMemberUInt32 _m_flag;	// 标记：0上线时的下发，1会长同意申请，2被踢出公会，3退出公会

		public Msg_Union2Client_Update_Union_Req()
		{
			_m_union_id = new ProtoMemberUInt64(1, true);
			_m_apply_union_id = new ProtoMemberUInt64List(2, false);
			_m_flag = new ProtoMemberUInt32(3, true);
		}

		public Msg_Union2Client_Update_Union_Req(ulong __m_union_id, uint __m_flag)
		{
			_m_union_id = new ProtoMemberUInt64(1, true);
			_m_union_id.member_value = __m_union_id;
			_m_apply_union_id = new ProtoMemberUInt64List(2, false);
			_m_flag = new ProtoMemberUInt32(3, true);
			_m_flag.member_value = __m_flag;
		}

		public ulong m_union_id
		{
			get{ return _m_union_id.member_value; }
			set{ _m_union_id.member_value = value; }
		}
		public bool has_m_union_id
		{
			get{ return _m_union_id.has_value; }
		}

		public System.Collections.Generic.List<ulong> m_apply_union_id
		{
			get{ return _m_apply_union_id.member_value; }
		}
		public bool has_m_apply_union_id
		{
			get{ return _m_apply_union_id.has_value; }
		}

		public uint m_flag
		{
			get{ return _m_flag.member_value; }
			set{ _m_flag.member_value = value; }
		}
		public bool has_m_flag
		{
			get{ return _m_flag.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_union_id.Serialize(_m_union_id.member_value, ref out_stream);

			foreach(ulong one_member_value in _m_apply_union_id.member_value)
			{
				count += _m_apply_union_id.Serialize(one_member_value, ref out_stream);
			}

			count += _m_flag.Serialize(_m_flag.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			ulong temp_m_union_id = 0;
			one_count = _m_union_id.ParseFrom(ref temp_m_union_id, ref int_stream);
			if (0 < one_count)
			{
					_m_union_id.member_value = temp_m_union_id;
					count = count + one_count;
			}

			while (true)
			{
				ulong one_member_value = 0;
				one_count = _m_apply_union_id.ParseFrom(ref one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_apply_union_id.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			uint temp_m_flag = 0;
			one_count = _m_flag.ParseFrom(ref temp_m_flag, ref int_stream);
			if (0 < one_count)
			{
					_m_flag.member_value = temp_m_flag;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Union2Player_CheckUnionName_Req : IMessage
	{
		private ProtoMemberString _m_union_name;	// 公会名

		public Msg_Union2Player_CheckUnionName_Req()
		{
			_m_union_name = new ProtoMemberString(1, true);
		}

		public Msg_Union2Player_CheckUnionName_Req(string __m_union_name)
		{
			_m_union_name = new ProtoMemberString(1, true);
			_m_union_name.member_value = __m_union_name;
		}

		public string m_union_name
		{
			get{ return _m_union_name.member_value; }
			set{ _m_union_name.member_value = value; }
		}
		public bool has_m_union_name
		{
			get{ return _m_union_name.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_union_name.Serialize(_m_union_name.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			string temp_m_union_name = "";
			one_count = _m_union_name.ParseFrom(ref temp_m_union_name, ref int_stream);
			if (0 < one_count)
			{
					_m_union_name.member_value = temp_m_union_name;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Union2Player_SetUnionName_Req : IMessage
	{
		private ProtoMemberUInt64 _m_union_id;	// 公会id
		private ProtoMemberString _m_union_name;	// 公会名

		public Msg_Union2Player_SetUnionName_Req()
		{
			_m_union_id = new ProtoMemberUInt64(1, true);
			_m_union_name = new ProtoMemberString(2, true);
		}

		public Msg_Union2Player_SetUnionName_Req(ulong __m_union_id, string __m_union_name)
		{
			_m_union_id = new ProtoMemberUInt64(1, true);
			_m_union_id.member_value = __m_union_id;
			_m_union_name = new ProtoMemberString(2, true);
			_m_union_name.member_value = __m_union_name;
		}

		public ulong m_union_id
		{
			get{ return _m_union_id.member_value; }
			set{ _m_union_id.member_value = value; }
		}
		public bool has_m_union_id
		{
			get{ return _m_union_id.has_value; }
		}

		public string m_union_name
		{
			get{ return _m_union_name.member_value; }
			set{ _m_union_name.member_value = value; }
		}
		public bool has_m_union_name
		{
			get{ return _m_union_name.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_union_id.Serialize(_m_union_id.member_value, ref out_stream);

			count += _m_union_name.Serialize(_m_union_name.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			ulong temp_m_union_id = 0;
			one_count = _m_union_id.ParseFrom(ref temp_m_union_id, ref int_stream);
			if (0 < one_count)
			{
					_m_union_id.member_value = temp_m_union_id;
					count = count + one_count;
			}

			string temp_m_union_name = "";
			one_count = _m_union_name.ParseFrom(ref temp_m_union_name, ref int_stream);
			if (0 < one_count)
			{
					_m_union_name.member_value = temp_m_union_name;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Union2Player_Union_Create_Req : IMessage
	{
		private ProtoMemberEmbedded<Union> _m_union_data;	// 公会属性

		public Msg_Union2Player_Union_Create_Req()
		{
			_m_union_data = new ProtoMemberEmbedded<Union>(1, true);
			_m_union_data.member_value = new Union();
		}

		public Union m_union_data
		{
			get{ return _m_union_data.member_value as Union; }
			set{ _m_union_data.member_value = value; }
		}
		public bool has_m_union_data
		{
			get{ return _m_union_data.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_union_data.Serialize(_m_union_data.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			Union temp_m_union_data = new Union();
			one_count = _m_union_data.ParseFrom(temp_m_union_data, ref int_stream);
			if (0 < one_count)
			{
					_m_union_data.member_value = temp_m_union_data;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Union2Player_Union_Info_Req : IMessage
	{
		private ProtoMemberUInt32 _m_server_id;	// 加载所属服id

		public Msg_Union2Player_Union_Info_Req()
		{
			_m_server_id = new ProtoMemberUInt32(1, true);
		}

		public Msg_Union2Player_Union_Info_Req(uint __m_server_id)
		{
			_m_server_id = new ProtoMemberUInt32(1, true);
			_m_server_id.member_value = __m_server_id;
		}

		public uint m_server_id
		{
			get{ return _m_server_id.member_value; }
			set{ _m_server_id.member_value = value; }
		}
		public bool has_m_server_id
		{
			get{ return _m_server_id.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_server_id.Serialize(_m_server_id.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_server_id = 0;
			one_count = _m_server_id.ParseFrom(ref temp_m_server_id, ref int_stream);
			if (0 < one_count)
			{
					_m_server_id.member_value = temp_m_server_id;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Union2Player_Update_Union_Req : IMessage
	{
		private ProtoMemberEmbedded<Union> _m_union_data;	// 公会数据

		public Msg_Union2Player_Update_Union_Req()
		{
			_m_union_data = new ProtoMemberEmbedded<Union>(1, true);
			_m_union_data.member_value = new Union();
		}

		public Union m_union_data
		{
			get{ return _m_union_data.member_value as Union; }
			set{ _m_union_data.member_value = value; }
		}
		public bool has_m_union_data
		{
			get{ return _m_union_data.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_union_data.Serialize(_m_union_data.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			Union temp_m_union_data = new Union();
			one_count = _m_union_data.ParseFrom(temp_m_union_data, ref int_stream);
			if (0 < one_count)
			{
					_m_union_data.member_value = temp_m_union_data;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Msg_Write_Log : IMessage
	{
		private ProtoMemberString _m_strlog;	//日志信息	

		public Msg_Write_Log()
		{
			_m_strlog = new ProtoMemberString(1, true);
		}

		public Msg_Write_Log(string __m_strlog)
		{
			_m_strlog = new ProtoMemberString(1, true);
			_m_strlog.member_value = __m_strlog;
		}

		public string m_strlog
		{
			get{ return _m_strlog.member_value; }
			set{ _m_strlog.member_value = value; }
		}
		public bool has_m_strlog
		{
			get{ return _m_strlog.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_strlog.Serialize(_m_strlog.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			string temp_m_strlog = "";
			one_count = _m_strlog.ParseFrom(ref temp_m_strlog, ref int_stream);
			if (0 < one_count)
			{
					_m_strlog.member_value = temp_m_strlog;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Packet_p2p : IMessage
	{
		private ProtoMemberUInt32 _m_packetLen;	
		private ProtoMemberUInt32 _m_msgType;	
		private ProtoMemberUInt32 _m_msgLen;	
		private ProtoMemberString _m_msg;	

		public Packet_p2p()
		{
			_m_packetLen = new ProtoMemberUInt32(1, true);
			_m_msgType = new ProtoMemberUInt32(2, true);
			_m_msgLen = new ProtoMemberUInt32(3, false);
			_m_msg = new ProtoMemberString(4, false);
		}

		public Packet_p2p(uint __m_packetLen, uint __m_msgType, uint __m_msgLen, string __m_msg)
		{
			_m_packetLen = new ProtoMemberUInt32(1, true);
			_m_packetLen.member_value = __m_packetLen;
			_m_msgType = new ProtoMemberUInt32(2, true);
			_m_msgType.member_value = __m_msgType;
			_m_msgLen = new ProtoMemberUInt32(3, false);
			_m_msgLen.member_value = __m_msgLen;
			_m_msg = new ProtoMemberString(4, false);
			_m_msg.member_value = __m_msg;
		}

		public uint m_packetLen
		{
			get{ return _m_packetLen.member_value; }
			set{ _m_packetLen.member_value = value; }
		}
		public bool has_m_packetLen
		{
			get{ return _m_packetLen.has_value; }
		}

		public uint m_msgType
		{
			get{ return _m_msgType.member_value; }
			set{ _m_msgType.member_value = value; }
		}
		public bool has_m_msgType
		{
			get{ return _m_msgType.has_value; }
		}

		public uint m_msgLen
		{
			get{ return _m_msgLen.member_value; }
			set{ _m_msgLen.member_value = value; }
		}
		public bool has_m_msgLen
		{
			get{ return _m_msgLen.has_value; }
		}

		public string m_msg
		{
			get{ return _m_msg.member_value; }
			set{ _m_msg.member_value = value; }
		}
		public bool has_m_msg
		{
			get{ return _m_msg.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_packetLen.Serialize(_m_packetLen.member_value, ref out_stream);

			count += _m_msgType.Serialize(_m_msgType.member_value, ref out_stream);

			count += _m_msgLen.Serialize(_m_msgLen.member_value, ref out_stream);

			count += _m_msg.Serialize(_m_msg.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_packetLen = 0;
			one_count = _m_packetLen.ParseFrom(ref temp_m_packetLen, ref int_stream);
			if (0 < one_count)
			{
					_m_packetLen.member_value = temp_m_packetLen;
					count = count + one_count;
			}

			uint temp_m_msgType = 0;
			one_count = _m_msgType.ParseFrom(ref temp_m_msgType, ref int_stream);
			if (0 < one_count)
			{
					_m_msgType.member_value = temp_m_msgType;
					count = count + one_count;
			}

			uint temp_m_msgLen = 0;
			one_count = _m_msgLen.ParseFrom(ref temp_m_msgLen, ref int_stream);
			if (0 < one_count)
			{
					_m_msgLen.member_value = temp_m_msgLen;
					count = count + one_count;
			}

			string temp_m_msg = "";
			one_count = _m_msg.ParseFrom(ref temp_m_msg, ref int_stream);
			if (0 < one_count)
			{
					_m_msg.member_value = temp_m_msg;
					count = count + one_count;
			}

			return count;
		}
	}

	public class PlayUsedItemInfo : IMessage
	{
		private ProtoMemberUInt32 _m_uItemId;	//ID
		private ProtoMemberUInt32 _m_uDayUseCount;	//当天使用次数
		private ProtoMemberUInt32 _m_uWeekUseCount;	//当周使用次数
		private ProtoMemberUInt64 _m_uLastUseTime;	//上次使用时间

		public PlayUsedItemInfo()
		{
			_m_uItemId = new ProtoMemberUInt32(1, true);
			_m_uDayUseCount = new ProtoMemberUInt32(2, true);
			_m_uWeekUseCount = new ProtoMemberUInt32(3, true);
			_m_uLastUseTime = new ProtoMemberUInt64(4, true);
		}

		public PlayUsedItemInfo(uint __m_uItemId, uint __m_uDayUseCount, uint __m_uWeekUseCount, ulong __m_uLastUseTime)
		{
			_m_uItemId = new ProtoMemberUInt32(1, true);
			_m_uItemId.member_value = __m_uItemId;
			_m_uDayUseCount = new ProtoMemberUInt32(2, true);
			_m_uDayUseCount.member_value = __m_uDayUseCount;
			_m_uWeekUseCount = new ProtoMemberUInt32(3, true);
			_m_uWeekUseCount.member_value = __m_uWeekUseCount;
			_m_uLastUseTime = new ProtoMemberUInt64(4, true);
			_m_uLastUseTime.member_value = __m_uLastUseTime;
		}

		public uint m_uItemId
		{
			get{ return _m_uItemId.member_value; }
			set{ _m_uItemId.member_value = value; }
		}
		public bool has_m_uItemId
		{
			get{ return _m_uItemId.has_value; }
		}

		public uint m_uDayUseCount
		{
			get{ return _m_uDayUseCount.member_value; }
			set{ _m_uDayUseCount.member_value = value; }
		}
		public bool has_m_uDayUseCount
		{
			get{ return _m_uDayUseCount.has_value; }
		}

		public uint m_uWeekUseCount
		{
			get{ return _m_uWeekUseCount.member_value; }
			set{ _m_uWeekUseCount.member_value = value; }
		}
		public bool has_m_uWeekUseCount
		{
			get{ return _m_uWeekUseCount.has_value; }
		}

		public ulong m_uLastUseTime
		{
			get{ return _m_uLastUseTime.member_value; }
			set{ _m_uLastUseTime.member_value = value; }
		}
		public bool has_m_uLastUseTime
		{
			get{ return _m_uLastUseTime.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_uItemId.Serialize(_m_uItemId.member_value, ref out_stream);

			count += _m_uDayUseCount.Serialize(_m_uDayUseCount.member_value, ref out_stream);

			count += _m_uWeekUseCount.Serialize(_m_uWeekUseCount.member_value, ref out_stream);

			count += _m_uLastUseTime.Serialize(_m_uLastUseTime.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_uItemId = 0;
			one_count = _m_uItemId.ParseFrom(ref temp_m_uItemId, ref int_stream);
			if (0 < one_count)
			{
					_m_uItemId.member_value = temp_m_uItemId;
					count = count + one_count;
			}

			uint temp_m_uDayUseCount = 0;
			one_count = _m_uDayUseCount.ParseFrom(ref temp_m_uDayUseCount, ref int_stream);
			if (0 < one_count)
			{
					_m_uDayUseCount.member_value = temp_m_uDayUseCount;
					count = count + one_count;
			}

			uint temp_m_uWeekUseCount = 0;
			one_count = _m_uWeekUseCount.ParseFrom(ref temp_m_uWeekUseCount, ref int_stream);
			if (0 < one_count)
			{
					_m_uWeekUseCount.member_value = temp_m_uWeekUseCount;
					count = count + one_count;
			}

			ulong temp_m_uLastUseTime = 0;
			one_count = _m_uLastUseTime.ParseFrom(ref temp_m_uLastUseTime, ref int_stream);
			if (0 < one_count)
			{
					_m_uLastUseTime.member_value = temp_m_uLastUseTime;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Player : IMessage
	{
		private ProtoMemberUInt32 _m_account_id;	// 角色id == 账号id
		private ProtoMemberUInt32 _m_server_id;	// 所属服id
		private ProtoMemberUInt32 _m_player_index;	// 本服的第几个角色(一个账号,一个服,最多3个角色)
		private ProtoMemberEmbedded<PlayerBaseInfo> _m_player_base;	// 角色基础数据
		private ProtoMemberEmbedded<PlayerPosInfo> _m_player_pos;	// 角色坐标信息
		private ProtoMemberEmbedded<PlayerHeroList> _m_player_hero_list;	// 角色英雄信息
		private ProtoMemberEmbedded<PlayerPVEInfo> _m_player_pve_info;	// 角色PVE信息
		private ProtoMemberEmbedded<PlayerPVPInfo> _m_player_pvp_info;	// 角色PVP信息
		private ProtoMemberEmbedded<PlayerItemList> _m_player_item_list;	// 角色背包信息
		private ProtoMemberEmbedded<PlayerTaskList> _m_player_task_list;	// 角色任务信息
		private ProtoMemberEmbedded<PlayerDiaoWenList> _m_player_diaowen_list;	// 角色雕文信息
		private ProtoMemberEmbedded<PlayerTalentList> _m_player_talent_list;	// 角色魂力（天赋）信息
		private ProtoMemberEmbedded<PlayerStatisticsList> _m_player_statistics_list;	// 角色主页统计信息
		private ProtoMemberEmbedded<PlayerFriendList> _m_player_friend_list;	// 角色好友信息
		private ProtoMemberEmbedded<PlayerMailList> _m_player_mail_list;	// 角色邮件信息
		private ProtoMemberEmbedded<PlayerTeamInfo> _m_player_team_info;	// 角色队伍信息
		private ProtoMemberEmbedded<PlayerShopInfo> _m_player_pveshop_info;	// 角色PVE商店信息
		private ProtoMemberEmbedded<PlayerShopInfo> _m_player_pvpshop_info;	// 角色PVP商店信息
		private ProtoMemberEmbedded<PlayerShopInfo> _m_player_goldshop_info;	// 角色Gold商店信息
		private ProtoMemberEmbedded<PlayerAppearanceInfo> _m_player_appearance_info;	//角色外观装饰信息

		public Player()
		{
			_m_account_id = new ProtoMemberUInt32(1, true);
			_m_server_id = new ProtoMemberUInt32(2, true);
			_m_player_index = new ProtoMemberUInt32(3, true);
			_m_player_base = new ProtoMemberEmbedded<PlayerBaseInfo>(4, false);
			_m_player_base.member_value = new PlayerBaseInfo();
			_m_player_pos = new ProtoMemberEmbedded<PlayerPosInfo>(5, false);
			_m_player_pos.member_value = new PlayerPosInfo();
			_m_player_hero_list = new ProtoMemberEmbedded<PlayerHeroList>(7, false);
			_m_player_hero_list.member_value = new PlayerHeroList();
			_m_player_pve_info = new ProtoMemberEmbedded<PlayerPVEInfo>(8, false);
			_m_player_pve_info.member_value = new PlayerPVEInfo();
			_m_player_pvp_info = new ProtoMemberEmbedded<PlayerPVPInfo>(9, false);
			_m_player_pvp_info.member_value = new PlayerPVPInfo();
			_m_player_item_list = new ProtoMemberEmbedded<PlayerItemList>(10, false);
			_m_player_item_list.member_value = new PlayerItemList();
			_m_player_task_list = new ProtoMemberEmbedded<PlayerTaskList>(11, false);
			_m_player_task_list.member_value = new PlayerTaskList();
			_m_player_diaowen_list = new ProtoMemberEmbedded<PlayerDiaoWenList>(12, false);
			_m_player_diaowen_list.member_value = new PlayerDiaoWenList();
			_m_player_talent_list = new ProtoMemberEmbedded<PlayerTalentList>(13, false);
			_m_player_talent_list.member_value = new PlayerTalentList();
			_m_player_statistics_list = new ProtoMemberEmbedded<PlayerStatisticsList>(14, false);
			_m_player_statistics_list.member_value = new PlayerStatisticsList();
			_m_player_friend_list = new ProtoMemberEmbedded<PlayerFriendList>(15, false);
			_m_player_friend_list.member_value = new PlayerFriendList();
			_m_player_mail_list = new ProtoMemberEmbedded<PlayerMailList>(16, false);
			_m_player_mail_list.member_value = new PlayerMailList();
			_m_player_team_info = new ProtoMemberEmbedded<PlayerTeamInfo>(17, false);
			_m_player_team_info.member_value = new PlayerTeamInfo();
			_m_player_pveshop_info = new ProtoMemberEmbedded<PlayerShopInfo>(18, false);
			_m_player_pveshop_info.member_value = new PlayerShopInfo();
			_m_player_pvpshop_info = new ProtoMemberEmbedded<PlayerShopInfo>(19, false);
			_m_player_pvpshop_info.member_value = new PlayerShopInfo();
			_m_player_goldshop_info = new ProtoMemberEmbedded<PlayerShopInfo>(20, false);
			_m_player_goldshop_info.member_value = new PlayerShopInfo();
			_m_player_appearance_info = new ProtoMemberEmbedded<PlayerAppearanceInfo>(21, false);
			_m_player_appearance_info.member_value = new PlayerAppearanceInfo();
		}

		public Player(uint __m_account_id, uint __m_server_id, uint __m_player_index)
		{
			_m_account_id = new ProtoMemberUInt32(1, true);
			_m_account_id.member_value = __m_account_id;
			_m_server_id = new ProtoMemberUInt32(2, true);
			_m_server_id.member_value = __m_server_id;
			_m_player_index = new ProtoMemberUInt32(3, true);
			_m_player_index.member_value = __m_player_index;
			_m_player_base = new ProtoMemberEmbedded<PlayerBaseInfo>(4, false);
			_m_player_base.member_value = new PlayerBaseInfo();
			_m_player_pos = new ProtoMemberEmbedded<PlayerPosInfo>(5, false);
			_m_player_pos.member_value = new PlayerPosInfo();
			_m_player_hero_list = new ProtoMemberEmbedded<PlayerHeroList>(7, false);
			_m_player_hero_list.member_value = new PlayerHeroList();
			_m_player_pve_info = new ProtoMemberEmbedded<PlayerPVEInfo>(8, false);
			_m_player_pve_info.member_value = new PlayerPVEInfo();
			_m_player_pvp_info = new ProtoMemberEmbedded<PlayerPVPInfo>(9, false);
			_m_player_pvp_info.member_value = new PlayerPVPInfo();
			_m_player_item_list = new ProtoMemberEmbedded<PlayerItemList>(10, false);
			_m_player_item_list.member_value = new PlayerItemList();
			_m_player_task_list = new ProtoMemberEmbedded<PlayerTaskList>(11, false);
			_m_player_task_list.member_value = new PlayerTaskList();
			_m_player_diaowen_list = new ProtoMemberEmbedded<PlayerDiaoWenList>(12, false);
			_m_player_diaowen_list.member_value = new PlayerDiaoWenList();
			_m_player_talent_list = new ProtoMemberEmbedded<PlayerTalentList>(13, false);
			_m_player_talent_list.member_value = new PlayerTalentList();
			_m_player_statistics_list = new ProtoMemberEmbedded<PlayerStatisticsList>(14, false);
			_m_player_statistics_list.member_value = new PlayerStatisticsList();
			_m_player_friend_list = new ProtoMemberEmbedded<PlayerFriendList>(15, false);
			_m_player_friend_list.member_value = new PlayerFriendList();
			_m_player_mail_list = new ProtoMemberEmbedded<PlayerMailList>(16, false);
			_m_player_mail_list.member_value = new PlayerMailList();
			_m_player_team_info = new ProtoMemberEmbedded<PlayerTeamInfo>(17, false);
			_m_player_team_info.member_value = new PlayerTeamInfo();
			_m_player_pveshop_info = new ProtoMemberEmbedded<PlayerShopInfo>(18, false);
			_m_player_pveshop_info.member_value = new PlayerShopInfo();
			_m_player_pvpshop_info = new ProtoMemberEmbedded<PlayerShopInfo>(19, false);
			_m_player_pvpshop_info.member_value = new PlayerShopInfo();
			_m_player_goldshop_info = new ProtoMemberEmbedded<PlayerShopInfo>(20, false);
			_m_player_goldshop_info.member_value = new PlayerShopInfo();
			_m_player_appearance_info = new ProtoMemberEmbedded<PlayerAppearanceInfo>(21, false);
			_m_player_appearance_info.member_value = new PlayerAppearanceInfo();
		}

		public uint m_account_id
		{
			get{ return _m_account_id.member_value; }
			set{ _m_account_id.member_value = value; }
		}
		public bool has_m_account_id
		{
			get{ return _m_account_id.has_value; }
		}

		public uint m_server_id
		{
			get{ return _m_server_id.member_value; }
			set{ _m_server_id.member_value = value; }
		}
		public bool has_m_server_id
		{
			get{ return _m_server_id.has_value; }
		}

		public uint m_player_index
		{
			get{ return _m_player_index.member_value; }
			set{ _m_player_index.member_value = value; }
		}
		public bool has_m_player_index
		{
			get{ return _m_player_index.has_value; }
		}

		public PlayerBaseInfo m_player_base
		{
			get{ return _m_player_base.member_value as PlayerBaseInfo; }
			set{ _m_player_base.member_value = value; }
		}
		public bool has_m_player_base
		{
			get{ return _m_player_base.has_value; }
		}

		public PlayerPosInfo m_player_pos
		{
			get{ return _m_player_pos.member_value as PlayerPosInfo; }
			set{ _m_player_pos.member_value = value; }
		}
		public bool has_m_player_pos
		{
			get{ return _m_player_pos.has_value; }
		}

		public PlayerHeroList m_player_hero_list
		{
			get{ return _m_player_hero_list.member_value as PlayerHeroList; }
			set{ _m_player_hero_list.member_value = value; }
		}
		public bool has_m_player_hero_list
		{
			get{ return _m_player_hero_list.has_value; }
		}

		public PlayerPVEInfo m_player_pve_info
		{
			get{ return _m_player_pve_info.member_value as PlayerPVEInfo; }
			set{ _m_player_pve_info.member_value = value; }
		}
		public bool has_m_player_pve_info
		{
			get{ return _m_player_pve_info.has_value; }
		}

		public PlayerPVPInfo m_player_pvp_info
		{
			get{ return _m_player_pvp_info.member_value as PlayerPVPInfo; }
			set{ _m_player_pvp_info.member_value = value; }
		}
		public bool has_m_player_pvp_info
		{
			get{ return _m_player_pvp_info.has_value; }
		}

		public PlayerItemList m_player_item_list
		{
			get{ return _m_player_item_list.member_value as PlayerItemList; }
			set{ _m_player_item_list.member_value = value; }
		}
		public bool has_m_player_item_list
		{
			get{ return _m_player_item_list.has_value; }
		}

		public PlayerTaskList m_player_task_list
		{
			get{ return _m_player_task_list.member_value as PlayerTaskList; }
			set{ _m_player_task_list.member_value = value; }
		}
		public bool has_m_player_task_list
		{
			get{ return _m_player_task_list.has_value; }
		}

		public PlayerDiaoWenList m_player_diaowen_list
		{
			get{ return _m_player_diaowen_list.member_value as PlayerDiaoWenList; }
			set{ _m_player_diaowen_list.member_value = value; }
		}
		public bool has_m_player_diaowen_list
		{
			get{ return _m_player_diaowen_list.has_value; }
		}

		public PlayerTalentList m_player_talent_list
		{
			get{ return _m_player_talent_list.member_value as PlayerTalentList; }
			set{ _m_player_talent_list.member_value = value; }
		}
		public bool has_m_player_talent_list
		{
			get{ return _m_player_talent_list.has_value; }
		}

		public PlayerStatisticsList m_player_statistics_list
		{
			get{ return _m_player_statistics_list.member_value as PlayerStatisticsList; }
			set{ _m_player_statistics_list.member_value = value; }
		}
		public bool has_m_player_statistics_list
		{
			get{ return _m_player_statistics_list.has_value; }
		}

		public PlayerFriendList m_player_friend_list
		{
			get{ return _m_player_friend_list.member_value as PlayerFriendList; }
			set{ _m_player_friend_list.member_value = value; }
		}
		public bool has_m_player_friend_list
		{
			get{ return _m_player_friend_list.has_value; }
		}

		public PlayerMailList m_player_mail_list
		{
			get{ return _m_player_mail_list.member_value as PlayerMailList; }
			set{ _m_player_mail_list.member_value = value; }
		}
		public bool has_m_player_mail_list
		{
			get{ return _m_player_mail_list.has_value; }
		}

		public PlayerTeamInfo m_player_team_info
		{
			get{ return _m_player_team_info.member_value as PlayerTeamInfo; }
			set{ _m_player_team_info.member_value = value; }
		}
		public bool has_m_player_team_info
		{
			get{ return _m_player_team_info.has_value; }
		}

		public PlayerShopInfo m_player_pveshop_info
		{
			get{ return _m_player_pveshop_info.member_value as PlayerShopInfo; }
			set{ _m_player_pveshop_info.member_value = value; }
		}
		public bool has_m_player_pveshop_info
		{
			get{ return _m_player_pveshop_info.has_value; }
		}

		public PlayerShopInfo m_player_pvpshop_info
		{
			get{ return _m_player_pvpshop_info.member_value as PlayerShopInfo; }
			set{ _m_player_pvpshop_info.member_value = value; }
		}
		public bool has_m_player_pvpshop_info
		{
			get{ return _m_player_pvpshop_info.has_value; }
		}

		public PlayerShopInfo m_player_goldshop_info
		{
			get{ return _m_player_goldshop_info.member_value as PlayerShopInfo; }
			set{ _m_player_goldshop_info.member_value = value; }
		}
		public bool has_m_player_goldshop_info
		{
			get{ return _m_player_goldshop_info.has_value; }
		}

		public PlayerAppearanceInfo m_player_appearance_info
		{
			get{ return _m_player_appearance_info.member_value as PlayerAppearanceInfo; }
			set{ _m_player_appearance_info.member_value = value; }
		}
		public bool has_m_player_appearance_info
		{
			get{ return _m_player_appearance_info.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_account_id.Serialize(_m_account_id.member_value, ref out_stream);

			count += _m_server_id.Serialize(_m_server_id.member_value, ref out_stream);

			count += _m_player_index.Serialize(_m_player_index.member_value, ref out_stream);

			count += _m_player_base.Serialize(_m_player_base.member_value, ref out_stream);

			count += _m_player_pos.Serialize(_m_player_pos.member_value, ref out_stream);

			count += _m_player_hero_list.Serialize(_m_player_hero_list.member_value, ref out_stream);

			count += _m_player_pve_info.Serialize(_m_player_pve_info.member_value, ref out_stream);

			count += _m_player_pvp_info.Serialize(_m_player_pvp_info.member_value, ref out_stream);

			count += _m_player_item_list.Serialize(_m_player_item_list.member_value, ref out_stream);

			count += _m_player_task_list.Serialize(_m_player_task_list.member_value, ref out_stream);

			count += _m_player_diaowen_list.Serialize(_m_player_diaowen_list.member_value, ref out_stream);

			count += _m_player_talent_list.Serialize(_m_player_talent_list.member_value, ref out_stream);

			count += _m_player_statistics_list.Serialize(_m_player_statistics_list.member_value, ref out_stream);

			count += _m_player_friend_list.Serialize(_m_player_friend_list.member_value, ref out_stream);

			count += _m_player_mail_list.Serialize(_m_player_mail_list.member_value, ref out_stream);

			count += _m_player_team_info.Serialize(_m_player_team_info.member_value, ref out_stream);

			count += _m_player_pveshop_info.Serialize(_m_player_pveshop_info.member_value, ref out_stream);

			count += _m_player_pvpshop_info.Serialize(_m_player_pvpshop_info.member_value, ref out_stream);

			count += _m_player_goldshop_info.Serialize(_m_player_goldshop_info.member_value, ref out_stream);

			count += _m_player_appearance_info.Serialize(_m_player_appearance_info.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_account_id = 0;
			one_count = _m_account_id.ParseFrom(ref temp_m_account_id, ref int_stream);
			if (0 < one_count)
			{
					_m_account_id.member_value = temp_m_account_id;
					count = count + one_count;
			}

			uint temp_m_server_id = 0;
			one_count = _m_server_id.ParseFrom(ref temp_m_server_id, ref int_stream);
			if (0 < one_count)
			{
					_m_server_id.member_value = temp_m_server_id;
					count = count + one_count;
			}

			uint temp_m_player_index = 0;
			one_count = _m_player_index.ParseFrom(ref temp_m_player_index, ref int_stream);
			if (0 < one_count)
			{
					_m_player_index.member_value = temp_m_player_index;
					count = count + one_count;
			}

			PlayerBaseInfo temp_m_player_base = new PlayerBaseInfo();
			one_count = _m_player_base.ParseFrom(temp_m_player_base, ref int_stream);
			if (0 < one_count)
			{
					_m_player_base.member_value = temp_m_player_base;
					count = count + one_count;
			}

			PlayerPosInfo temp_m_player_pos = new PlayerPosInfo();
			one_count = _m_player_pos.ParseFrom(temp_m_player_pos, ref int_stream);
			if (0 < one_count)
			{
					_m_player_pos.member_value = temp_m_player_pos;
					count = count + one_count;
			}

			PlayerHeroList temp_m_player_hero_list = new PlayerHeroList();
			one_count = _m_player_hero_list.ParseFrom(temp_m_player_hero_list, ref int_stream);
			if (0 < one_count)
			{
					_m_player_hero_list.member_value = temp_m_player_hero_list;
					count = count + one_count;
			}

			PlayerPVEInfo temp_m_player_pve_info = new PlayerPVEInfo();
			one_count = _m_player_pve_info.ParseFrom(temp_m_player_pve_info, ref int_stream);
			if (0 < one_count)
			{
					_m_player_pve_info.member_value = temp_m_player_pve_info;
					count = count + one_count;
			}

			PlayerPVPInfo temp_m_player_pvp_info = new PlayerPVPInfo();
			one_count = _m_player_pvp_info.ParseFrom(temp_m_player_pvp_info, ref int_stream);
			if (0 < one_count)
			{
					_m_player_pvp_info.member_value = temp_m_player_pvp_info;
					count = count + one_count;
			}

			PlayerItemList temp_m_player_item_list = new PlayerItemList();
			one_count = _m_player_item_list.ParseFrom(temp_m_player_item_list, ref int_stream);
			if (0 < one_count)
			{
					_m_player_item_list.member_value = temp_m_player_item_list;
					count = count + one_count;
			}

			PlayerTaskList temp_m_player_task_list = new PlayerTaskList();
			one_count = _m_player_task_list.ParseFrom(temp_m_player_task_list, ref int_stream);
			if (0 < one_count)
			{
					_m_player_task_list.member_value = temp_m_player_task_list;
					count = count + one_count;
			}

			PlayerDiaoWenList temp_m_player_diaowen_list = new PlayerDiaoWenList();
			one_count = _m_player_diaowen_list.ParseFrom(temp_m_player_diaowen_list, ref int_stream);
			if (0 < one_count)
			{
					_m_player_diaowen_list.member_value = temp_m_player_diaowen_list;
					count = count + one_count;
			}

			PlayerTalentList temp_m_player_talent_list = new PlayerTalentList();
			one_count = _m_player_talent_list.ParseFrom(temp_m_player_talent_list, ref int_stream);
			if (0 < one_count)
			{
					_m_player_talent_list.member_value = temp_m_player_talent_list;
					count = count + one_count;
			}

			PlayerStatisticsList temp_m_player_statistics_list = new PlayerStatisticsList();
			one_count = _m_player_statistics_list.ParseFrom(temp_m_player_statistics_list, ref int_stream);
			if (0 < one_count)
			{
					_m_player_statistics_list.member_value = temp_m_player_statistics_list;
					count = count + one_count;
			}

			PlayerFriendList temp_m_player_friend_list = new PlayerFriendList();
			one_count = _m_player_friend_list.ParseFrom(temp_m_player_friend_list, ref int_stream);
			if (0 < one_count)
			{
					_m_player_friend_list.member_value = temp_m_player_friend_list;
					count = count + one_count;
			}

			PlayerMailList temp_m_player_mail_list = new PlayerMailList();
			one_count = _m_player_mail_list.ParseFrom(temp_m_player_mail_list, ref int_stream);
			if (0 < one_count)
			{
					_m_player_mail_list.member_value = temp_m_player_mail_list;
					count = count + one_count;
			}

			PlayerTeamInfo temp_m_player_team_info = new PlayerTeamInfo();
			one_count = _m_player_team_info.ParseFrom(temp_m_player_team_info, ref int_stream);
			if (0 < one_count)
			{
					_m_player_team_info.member_value = temp_m_player_team_info;
					count = count + one_count;
			}

			PlayerShopInfo temp_m_player_pveshop_info = new PlayerShopInfo();
			one_count = _m_player_pveshop_info.ParseFrom(temp_m_player_pveshop_info, ref int_stream);
			if (0 < one_count)
			{
					_m_player_pveshop_info.member_value = temp_m_player_pveshop_info;
					count = count + one_count;
			}

			PlayerShopInfo temp_m_player_pvpshop_info = new PlayerShopInfo();
			one_count = _m_player_pvpshop_info.ParseFrom(temp_m_player_pvpshop_info, ref int_stream);
			if (0 < one_count)
			{
					_m_player_pvpshop_info.member_value = temp_m_player_pvpshop_info;
					count = count + one_count;
			}

			PlayerShopInfo temp_m_player_goldshop_info = new PlayerShopInfo();
			one_count = _m_player_goldshop_info.ParseFrom(temp_m_player_goldshop_info, ref int_stream);
			if (0 < one_count)
			{
					_m_player_goldshop_info.member_value = temp_m_player_goldshop_info;
					count = count + one_count;
			}

			PlayerAppearanceInfo temp_m_player_appearance_info = new PlayerAppearanceInfo();
			one_count = _m_player_appearance_info.ParseFrom(temp_m_player_appearance_info, ref int_stream);
			if (0 < one_count)
			{
					_m_player_appearance_info.member_value = temp_m_player_appearance_info;
					count = count + one_count;
			}

			return count;
		}
	}

	public class PlayerAppearanceInfo : IMessage
	{
		private ProtoMemberEmbeddedList<HeroAppearanceInfo> _m_list;	//拥有英雄装饰列表 英雄ID为0 的道具列表为公有道具

		public PlayerAppearanceInfo()
		{
			_m_list = new ProtoMemberEmbeddedList<HeroAppearanceInfo>(1, false);
		}

		public System.Collections.Generic.List<HeroAppearanceInfo> m_list
		{
			get{ return _m_list.member_value; }
		}
		public bool has_m_list
		{
			get{ return _m_list.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			foreach(HeroAppearanceInfo one_member_value in _m_list.member_value)
			{
				count += _m_list.Serialize(one_member_value, ref out_stream);
			}

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			while (true)
			{
				HeroAppearanceInfo one_member_value = new HeroAppearanceInfo();
				one_count = _m_list.ParseFrom(one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_list.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			return count;
		}
	}

	public class PlayerBaseInfo : IMessage
	{
		private ProtoMemberString _m_player_name;	// 角色名称
		private ProtoMemberString _m_player_sign;	// 角色个性签名
		private ProtoMemberUInt32 _m_player_toy_type;	// 角色初始使用的玩具模型id
		private ProtoMemberUInt32 _m_player_lv;	// 等级
		private ProtoMemberUInt32 _m_player_exp;	// 经验
		private ProtoMemberUInt32 _m_player_vip;	// vip等级
		private ProtoMemberUInt32 _m_player_rmb;	// 充值钱币
		private ProtoMemberUInt64 _m_player_last_inline;	// 角色上一次的上线时间
		private ProtoMemberUInt32 _m_player_last_randcard;	// 角色上一次战斗结束抽卡次数
		private ProtoMemberUInt32 _m_player_world;	// 角色所处的地图
		private ProtoMemberBool _m_player_gm;	// 角色是否是gm
		private ProtoMemberUInt64 _m_player_banned_time;	// 角色上一次的封停时间戳
		private ProtoMemberUInt32 _m_player_banned_second;	// 角色上一次的封停时长
		private ProtoMemberUInt32 _m_player_banned_res;	// 角色上一次的封停原因

		public PlayerBaseInfo()
		{
			_m_player_name = new ProtoMemberString(1, false);
			_m_player_sign = new ProtoMemberString(2, false);
			_m_player_toy_type = new ProtoMemberUInt32(3, false);
			_m_player_lv = new ProtoMemberUInt32(4, false);
			_m_player_exp = new ProtoMemberUInt32(5, false);
			_m_player_vip = new ProtoMemberUInt32(6, false);
			_m_player_rmb = new ProtoMemberUInt32(7, false);
			_m_player_last_inline = new ProtoMemberUInt64(8, false);
			_m_player_last_randcard = new ProtoMemberUInt32(9, false);
			_m_player_world = new ProtoMemberUInt32(10, false);
			_m_player_gm = new ProtoMemberBool(11, false);
			_m_player_banned_time = new ProtoMemberUInt64(12, false);
			_m_player_banned_second = new ProtoMemberUInt32(13, false);
			_m_player_banned_res = new ProtoMemberUInt32(14, false);
		}

		public PlayerBaseInfo(string __m_player_name, string __m_player_sign, uint __m_player_toy_type, uint __m_player_lv, uint __m_player_exp, uint __m_player_vip, uint __m_player_rmb, ulong __m_player_last_inline, uint __m_player_last_randcard, uint __m_player_world, bool __m_player_gm, ulong __m_player_banned_time, uint __m_player_banned_second, uint __m_player_banned_res)
		{
			_m_player_name = new ProtoMemberString(1, false);
			_m_player_name.member_value = __m_player_name;
			_m_player_sign = new ProtoMemberString(2, false);
			_m_player_sign.member_value = __m_player_sign;
			_m_player_toy_type = new ProtoMemberUInt32(3, false);
			_m_player_toy_type.member_value = __m_player_toy_type;
			_m_player_lv = new ProtoMemberUInt32(4, false);
			_m_player_lv.member_value = __m_player_lv;
			_m_player_exp = new ProtoMemberUInt32(5, false);
			_m_player_exp.member_value = __m_player_exp;
			_m_player_vip = new ProtoMemberUInt32(6, false);
			_m_player_vip.member_value = __m_player_vip;
			_m_player_rmb = new ProtoMemberUInt32(7, false);
			_m_player_rmb.member_value = __m_player_rmb;
			_m_player_last_inline = new ProtoMemberUInt64(8, false);
			_m_player_last_inline.member_value = __m_player_last_inline;
			_m_player_last_randcard = new ProtoMemberUInt32(9, false);
			_m_player_last_randcard.member_value = __m_player_last_randcard;
			_m_player_world = new ProtoMemberUInt32(10, false);
			_m_player_world.member_value = __m_player_world;
			_m_player_gm = new ProtoMemberBool(11, false);
			_m_player_gm.member_value = __m_player_gm;
			_m_player_banned_time = new ProtoMemberUInt64(12, false);
			_m_player_banned_time.member_value = __m_player_banned_time;
			_m_player_banned_second = new ProtoMemberUInt32(13, false);
			_m_player_banned_second.member_value = __m_player_banned_second;
			_m_player_banned_res = new ProtoMemberUInt32(14, false);
			_m_player_banned_res.member_value = __m_player_banned_res;
		}

		public string m_player_name
		{
			get{ return _m_player_name.member_value; }
			set{ _m_player_name.member_value = value; }
		}
		public bool has_m_player_name
		{
			get{ return _m_player_name.has_value; }
		}

		public string m_player_sign
		{
			get{ return _m_player_sign.member_value; }
			set{ _m_player_sign.member_value = value; }
		}
		public bool has_m_player_sign
		{
			get{ return _m_player_sign.has_value; }
		}

		public uint m_player_toy_type
		{
			get{ return _m_player_toy_type.member_value; }
			set{ _m_player_toy_type.member_value = value; }
		}
		public bool has_m_player_toy_type
		{
			get{ return _m_player_toy_type.has_value; }
		}

		public uint m_player_lv
		{
			get{ return _m_player_lv.member_value; }
			set{ _m_player_lv.member_value = value; }
		}
		public bool has_m_player_lv
		{
			get{ return _m_player_lv.has_value; }
		}

		public uint m_player_exp
		{
			get{ return _m_player_exp.member_value; }
			set{ _m_player_exp.member_value = value; }
		}
		public bool has_m_player_exp
		{
			get{ return _m_player_exp.has_value; }
		}

		public uint m_player_vip
		{
			get{ return _m_player_vip.member_value; }
			set{ _m_player_vip.member_value = value; }
		}
		public bool has_m_player_vip
		{
			get{ return _m_player_vip.has_value; }
		}

		public uint m_player_rmb
		{
			get{ return _m_player_rmb.member_value; }
			set{ _m_player_rmb.member_value = value; }
		}
		public bool has_m_player_rmb
		{
			get{ return _m_player_rmb.has_value; }
		}

		public ulong m_player_last_inline
		{
			get{ return _m_player_last_inline.member_value; }
			set{ _m_player_last_inline.member_value = value; }
		}
		public bool has_m_player_last_inline
		{
			get{ return _m_player_last_inline.has_value; }
		}

		public uint m_player_last_randcard
		{
			get{ return _m_player_last_randcard.member_value; }
			set{ _m_player_last_randcard.member_value = value; }
		}
		public bool has_m_player_last_randcard
		{
			get{ return _m_player_last_randcard.has_value; }
		}

		public uint m_player_world
		{
			get{ return _m_player_world.member_value; }
			set{ _m_player_world.member_value = value; }
		}
		public bool has_m_player_world
		{
			get{ return _m_player_world.has_value; }
		}

		public bool m_player_gm
		{
			get{ return _m_player_gm.member_value; }
			set{ _m_player_gm.member_value = value; }
		}
		public bool has_m_player_gm
		{
			get{ return _m_player_gm.has_value; }
		}

		public ulong m_player_banned_time
		{
			get{ return _m_player_banned_time.member_value; }
			set{ _m_player_banned_time.member_value = value; }
		}
		public bool has_m_player_banned_time
		{
			get{ return _m_player_banned_time.has_value; }
		}

		public uint m_player_banned_second
		{
			get{ return _m_player_banned_second.member_value; }
			set{ _m_player_banned_second.member_value = value; }
		}
		public bool has_m_player_banned_second
		{
			get{ return _m_player_banned_second.has_value; }
		}

		public uint m_player_banned_res
		{
			get{ return _m_player_banned_res.member_value; }
			set{ _m_player_banned_res.member_value = value; }
		}
		public bool has_m_player_banned_res
		{
			get{ return _m_player_banned_res.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_player_name.Serialize(_m_player_name.member_value, ref out_stream);

			count += _m_player_sign.Serialize(_m_player_sign.member_value, ref out_stream);

			count += _m_player_toy_type.Serialize(_m_player_toy_type.member_value, ref out_stream);

			count += _m_player_lv.Serialize(_m_player_lv.member_value, ref out_stream);

			count += _m_player_exp.Serialize(_m_player_exp.member_value, ref out_stream);

			count += _m_player_vip.Serialize(_m_player_vip.member_value, ref out_stream);

			count += _m_player_rmb.Serialize(_m_player_rmb.member_value, ref out_stream);

			count += _m_player_last_inline.Serialize(_m_player_last_inline.member_value, ref out_stream);

			count += _m_player_last_randcard.Serialize(_m_player_last_randcard.member_value, ref out_stream);

			count += _m_player_world.Serialize(_m_player_world.member_value, ref out_stream);

			count += _m_player_gm.Serialize(_m_player_gm.member_value, ref out_stream);

			count += _m_player_banned_time.Serialize(_m_player_banned_time.member_value, ref out_stream);

			count += _m_player_banned_second.Serialize(_m_player_banned_second.member_value, ref out_stream);

			count += _m_player_banned_res.Serialize(_m_player_banned_res.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			string temp_m_player_name = "";
			one_count = _m_player_name.ParseFrom(ref temp_m_player_name, ref int_stream);
			if (0 < one_count)
			{
					_m_player_name.member_value = temp_m_player_name;
					count = count + one_count;
			}

			string temp_m_player_sign = "";
			one_count = _m_player_sign.ParseFrom(ref temp_m_player_sign, ref int_stream);
			if (0 < one_count)
			{
					_m_player_sign.member_value = temp_m_player_sign;
					count = count + one_count;
			}

			uint temp_m_player_toy_type = 0;
			one_count = _m_player_toy_type.ParseFrom(ref temp_m_player_toy_type, ref int_stream);
			if (0 < one_count)
			{
					_m_player_toy_type.member_value = temp_m_player_toy_type;
					count = count + one_count;
			}

			uint temp_m_player_lv = 0;
			one_count = _m_player_lv.ParseFrom(ref temp_m_player_lv, ref int_stream);
			if (0 < one_count)
			{
					_m_player_lv.member_value = temp_m_player_lv;
					count = count + one_count;
			}

			uint temp_m_player_exp = 0;
			one_count = _m_player_exp.ParseFrom(ref temp_m_player_exp, ref int_stream);
			if (0 < one_count)
			{
					_m_player_exp.member_value = temp_m_player_exp;
					count = count + one_count;
			}

			uint temp_m_player_vip = 0;
			one_count = _m_player_vip.ParseFrom(ref temp_m_player_vip, ref int_stream);
			if (0 < one_count)
			{
					_m_player_vip.member_value = temp_m_player_vip;
					count = count + one_count;
			}

			uint temp_m_player_rmb = 0;
			one_count = _m_player_rmb.ParseFrom(ref temp_m_player_rmb, ref int_stream);
			if (0 < one_count)
			{
					_m_player_rmb.member_value = temp_m_player_rmb;
					count = count + one_count;
			}

			ulong temp_m_player_last_inline = 0;
			one_count = _m_player_last_inline.ParseFrom(ref temp_m_player_last_inline, ref int_stream);
			if (0 < one_count)
			{
					_m_player_last_inline.member_value = temp_m_player_last_inline;
					count = count + one_count;
			}

			uint temp_m_player_last_randcard = 0;
			one_count = _m_player_last_randcard.ParseFrom(ref temp_m_player_last_randcard, ref int_stream);
			if (0 < one_count)
			{
					_m_player_last_randcard.member_value = temp_m_player_last_randcard;
					count = count + one_count;
			}

			uint temp_m_player_world = 0;
			one_count = _m_player_world.ParseFrom(ref temp_m_player_world, ref int_stream);
			if (0 < one_count)
			{
					_m_player_world.member_value = temp_m_player_world;
					count = count + one_count;
			}

			bool temp_m_player_gm = false;
			one_count = _m_player_gm.ParseFrom(ref temp_m_player_gm, ref int_stream);
			if (0 < one_count)
			{
					_m_player_gm.member_value = temp_m_player_gm;
					count = count + one_count;
			}

			ulong temp_m_player_banned_time = 0;
			one_count = _m_player_banned_time.ParseFrom(ref temp_m_player_banned_time, ref int_stream);
			if (0 < one_count)
			{
					_m_player_banned_time.member_value = temp_m_player_banned_time;
					count = count + one_count;
			}

			uint temp_m_player_banned_second = 0;
			one_count = _m_player_banned_second.ParseFrom(ref temp_m_player_banned_second, ref int_stream);
			if (0 < one_count)
			{
					_m_player_banned_second.member_value = temp_m_player_banned_second;
					count = count + one_count;
			}

			uint temp_m_player_banned_res = 0;
			one_count = _m_player_banned_res.ParseFrom(ref temp_m_player_banned_res, ref int_stream);
			if (0 < one_count)
			{
					_m_player_banned_res.member_value = temp_m_player_banned_res;
					count = count + one_count;
			}

			return count;
		}
	}

	public class PlayerBlackInfo : IMessage
	{
		private ProtoMemberEmbedded<PlayerId> _m_player_id;	// 玩家唯一id
		private ProtoMemberUInt32 _m_toy_type;	// 角色初始使用的玩具模型id
		private ProtoMemberString _m_name;	// 角色名称
		private ProtoMemberUInt64 _m_shield_time;	// 屏蔽时间

		public PlayerBlackInfo()
		{
			_m_player_id = new ProtoMemberEmbedded<PlayerId>(1, false);
			_m_player_id.member_value = new PlayerId();
			_m_toy_type = new ProtoMemberUInt32(2, false);
			_m_name = new ProtoMemberString(3, false);
			_m_shield_time = new ProtoMemberUInt64(4, false);
		}

		public PlayerBlackInfo(uint __m_toy_type, string __m_name, ulong __m_shield_time)
		{
			_m_player_id = new ProtoMemberEmbedded<PlayerId>(1, false);
			_m_player_id.member_value = new PlayerId();
			_m_toy_type = new ProtoMemberUInt32(2, false);
			_m_toy_type.member_value = __m_toy_type;
			_m_name = new ProtoMemberString(3, false);
			_m_name.member_value = __m_name;
			_m_shield_time = new ProtoMemberUInt64(4, false);
			_m_shield_time.member_value = __m_shield_time;
		}

		public PlayerId m_player_id
		{
			get{ return _m_player_id.member_value as PlayerId; }
			set{ _m_player_id.member_value = value; }
		}
		public bool has_m_player_id
		{
			get{ return _m_player_id.has_value; }
		}

		public uint m_toy_type
		{
			get{ return _m_toy_type.member_value; }
			set{ _m_toy_type.member_value = value; }
		}
		public bool has_m_toy_type
		{
			get{ return _m_toy_type.has_value; }
		}

		public string m_name
		{
			get{ return _m_name.member_value; }
			set{ _m_name.member_value = value; }
		}
		public bool has_m_name
		{
			get{ return _m_name.has_value; }
		}

		public ulong m_shield_time
		{
			get{ return _m_shield_time.member_value; }
			set{ _m_shield_time.member_value = value; }
		}
		public bool has_m_shield_time
		{
			get{ return _m_shield_time.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_player_id.Serialize(_m_player_id.member_value, ref out_stream);

			count += _m_toy_type.Serialize(_m_toy_type.member_value, ref out_stream);

			count += _m_name.Serialize(_m_name.member_value, ref out_stream);

			count += _m_shield_time.Serialize(_m_shield_time.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			PlayerId temp_m_player_id = new PlayerId();
			one_count = _m_player_id.ParseFrom(temp_m_player_id, ref int_stream);
			if (0 < one_count)
			{
					_m_player_id.member_value = temp_m_player_id;
					count = count + one_count;
			}

			uint temp_m_toy_type = 0;
			one_count = _m_toy_type.ParseFrom(ref temp_m_toy_type, ref int_stream);
			if (0 < one_count)
			{
					_m_toy_type.member_value = temp_m_toy_type;
					count = count + one_count;
			}

			string temp_m_name = "";
			one_count = _m_name.ParseFrom(ref temp_m_name, ref int_stream);
			if (0 < one_count)
			{
					_m_name.member_value = temp_m_name;
					count = count + one_count;
			}

			ulong temp_m_shield_time = 0;
			one_count = _m_shield_time.ParseFrom(ref temp_m_shield_time, ref int_stream);
			if (0 < one_count)
			{
					_m_shield_time.member_value = temp_m_shield_time;
					count = count + one_count;
			}

			return count;
		}
	}

	public class PlayerBuyInfo : IMessage
	{
		private ProtoMemberUInt32 _m_goods_id;	// 商店商品表id
		private ProtoMemberUInt32 _m_buy_count;	// 已购买次数

		public PlayerBuyInfo()
		{
			_m_goods_id = new ProtoMemberUInt32(1, false);
			_m_buy_count = new ProtoMemberUInt32(2, false);
		}

		public PlayerBuyInfo(uint __m_goods_id, uint __m_buy_count)
		{
			_m_goods_id = new ProtoMemberUInt32(1, false);
			_m_goods_id.member_value = __m_goods_id;
			_m_buy_count = new ProtoMemberUInt32(2, false);
			_m_buy_count.member_value = __m_buy_count;
		}

		public uint m_goods_id
		{
			get{ return _m_goods_id.member_value; }
			set{ _m_goods_id.member_value = value; }
		}
		public bool has_m_goods_id
		{
			get{ return _m_goods_id.has_value; }
		}

		public uint m_buy_count
		{
			get{ return _m_buy_count.member_value; }
			set{ _m_buy_count.member_value = value; }
		}
		public bool has_m_buy_count
		{
			get{ return _m_buy_count.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_goods_id.Serialize(_m_goods_id.member_value, ref out_stream);

			count += _m_buy_count.Serialize(_m_buy_count.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_goods_id = 0;
			one_count = _m_goods_id.ParseFrom(ref temp_m_goods_id, ref int_stream);
			if (0 < one_count)
			{
					_m_goods_id.member_value = temp_m_goods_id;
					count = count + one_count;
			}

			uint temp_m_buy_count = 0;
			one_count = _m_buy_count.ParseFrom(ref temp_m_buy_count, ref int_stream);
			if (0 < one_count)
			{
					_m_buy_count.member_value = temp_m_buy_count;
					count = count + one_count;
			}

			return count;
		}
	}

	public enum PlayerCardColor
	{
		CardColor_All = 0,		// 所有
		CardColor_Heart = 1,	// 红桃
		CardColor_Diamond = 2,	// 方片
		CardColor_Spade = 3,	// 黑桃
		CardColor_Club = 4,		// 梅花
		CardColor_Joker = 5,	// 小丑
		CardColor_Red = 6,		// 红牌
		CardColor_Black = 7,	// 黑牌
	}

	public class PlayerCardInfo : IMessage
	{
		private ProtoMemberUInt32 _m_index;	// 卡牌位置
		private ProtoMemberUInt32 _m_card_id;	// 卡牌id
		private ProtoMemberBool _m_is_used;	// 是否已选择
		private ProtoMemberBool _m_is_destroyed;	// 是否已摧毁
		private ProtoMemberEnum<PlayerCardColor> _m_card_color;	// 卡牌花色类型
		private ProtoMemberEnum<PlayerCardType> _m_card_type;	// 卡牌效果类型
		private ProtoMemberUInt32 _m_card_value;	// 卡牌效果值

		public PlayerCardInfo()
		{
			_m_index = new ProtoMemberUInt32(1, true);
			_m_card_id = new ProtoMemberUInt32(2, true);
			_m_is_used = new ProtoMemberBool(3, true);
			_m_is_destroyed = new ProtoMemberBool(4, true);
			_m_card_color = new ProtoMemberEnum<PlayerCardColor>(5, true);
			_m_card_type = new ProtoMemberEnum<PlayerCardType>(6, true);
			_m_card_value = new ProtoMemberUInt32(7, true);
		}

		public PlayerCardInfo(uint __m_index, uint __m_card_id, bool __m_is_used, bool __m_is_destroyed, PlayerCardColor __m_card_color, PlayerCardType __m_card_type, uint __m_card_value)
		{
			_m_index = new ProtoMemberUInt32(1, true);
			_m_index.member_value = __m_index;
			_m_card_id = new ProtoMemberUInt32(2, true);
			_m_card_id.member_value = __m_card_id;
			_m_is_used = new ProtoMemberBool(3, true);
			_m_is_used.member_value = __m_is_used;
			_m_is_destroyed = new ProtoMemberBool(4, true);
			_m_is_destroyed.member_value = __m_is_destroyed;
			_m_card_color = new ProtoMemberEnum<PlayerCardColor>(5, true);
			_m_card_color.member_value = __m_card_color;
			_m_card_type = new ProtoMemberEnum<PlayerCardType>(6, true);
			_m_card_type.member_value = __m_card_type;
			_m_card_value = new ProtoMemberUInt32(7, true);
			_m_card_value.member_value = __m_card_value;
		}

		public uint m_index
		{
			get{ return _m_index.member_value; }
			set{ _m_index.member_value = value; }
		}
		public bool has_m_index
		{
			get{ return _m_index.has_value; }
		}

		public uint m_card_id
		{
			get{ return _m_card_id.member_value; }
			set{ _m_card_id.member_value = value; }
		}
		public bool has_m_card_id
		{
			get{ return _m_card_id.has_value; }
		}

		public bool m_is_used
		{
			get{ return _m_is_used.member_value; }
			set{ _m_is_used.member_value = value; }
		}
		public bool has_m_is_used
		{
			get{ return _m_is_used.has_value; }
		}

		public bool m_is_destroyed
		{
			get{ return _m_is_destroyed.member_value; }
			set{ _m_is_destroyed.member_value = value; }
		}
		public bool has_m_is_destroyed
		{
			get{ return _m_is_destroyed.has_value; }
		}

		public PlayerCardColor m_card_color
		{
			get{ return _m_card_color.member_value; }
			set{ _m_card_color.member_value = value; }
		}
		public bool has_m_card_color
		{
			get{ return _m_card_color.has_value; }
		}

		public PlayerCardType m_card_type
		{
			get{ return _m_card_type.member_value; }
			set{ _m_card_type.member_value = value; }
		}
		public bool has_m_card_type
		{
			get{ return _m_card_type.has_value; }
		}

		public uint m_card_value
		{
			get{ return _m_card_value.member_value; }
			set{ _m_card_value.member_value = value; }
		}
		public bool has_m_card_value
		{
			get{ return _m_card_value.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_index.Serialize(_m_index.member_value, ref out_stream);

			count += _m_card_id.Serialize(_m_card_id.member_value, ref out_stream);

			count += _m_is_used.Serialize(_m_is_used.member_value, ref out_stream);

			count += _m_is_destroyed.Serialize(_m_is_destroyed.member_value, ref out_stream);

			count += _m_card_color.Serialize((uint)_m_card_color.member_value, ref out_stream);

			count += _m_card_type.Serialize((uint)_m_card_type.member_value, ref out_stream);

			count += _m_card_value.Serialize(_m_card_value.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_index = 0;
			one_count = _m_index.ParseFrom(ref temp_m_index, ref int_stream);
			if (0 < one_count)
			{
					_m_index.member_value = temp_m_index;
					count = count + one_count;
			}

			uint temp_m_card_id = 0;
			one_count = _m_card_id.ParseFrom(ref temp_m_card_id, ref int_stream);
			if (0 < one_count)
			{
					_m_card_id.member_value = temp_m_card_id;
					count = count + one_count;
			}

			bool temp_m_is_used = false;
			one_count = _m_is_used.ParseFrom(ref temp_m_is_used, ref int_stream);
			if (0 < one_count)
			{
					_m_is_used.member_value = temp_m_is_used;
					count = count + one_count;
			}

			bool temp_m_is_destroyed = false;
			one_count = _m_is_destroyed.ParseFrom(ref temp_m_is_destroyed, ref int_stream);
			if (0 < one_count)
			{
					_m_is_destroyed.member_value = temp_m_is_destroyed;
					count = count + one_count;
			}

			uint temp_m_card_color = 0;
			one_count = _m_card_color.ParseFrom(ref temp_m_card_color, ref int_stream);
			if (0 < one_count)
			{
					_m_card_color.member_value = (PlayerCardColor)temp_m_card_color;
					count = count + one_count;
			}

			uint temp_m_card_type = 0;
			one_count = _m_card_type.ParseFrom(ref temp_m_card_type, ref int_stream);
			if (0 < one_count)
			{
					_m_card_type.member_value = (PlayerCardType)temp_m_card_type;
					count = count + one_count;
			}

			uint temp_m_card_value = 0;
			one_count = _m_card_value.ParseFrom(ref temp_m_card_value, ref int_stream);
			if (0 < one_count)
			{
					_m_card_value.member_value = temp_m_card_value;
					count = count + one_count;
			}

			return count;
		}
	}

	public enum PlayerCardType
	{
		CardType_UnKnow = 0,					// 未知类型
		CardType_MulExp = 1,					// 经验奖励	* x
		CardType_DivExp = 2,					// 经验奖励	/ x
		CardType_AddMainHeroExpItem = 3,		// 太阳药水数量奖励	+ x
		CardType_AddAllHeroExpItem = 4,			// 月亮药水数量奖励	+ x
		CardType_DecMainHeroExpItem = 5,		// 太阳药水数量奖励	- x
		CardType_DecAllHeroExpItem = 6,			// 月亮药水数量奖励 - x
		CardType_MulGold = 7,					// 金币奖励	* x
		CardType_DivGold = 8,					// 金币奖励	/ x
		CardType_AddMajorIngredient = 9,		// 主料掉率	* x
		CardType_AddMinorIngredient = 10,		// 辅料数量	+ x
		CardType_DecMajorIngredient = 11,		// 主料掉率	/ x
		CardType_DecMinorIngredient = 12,		// 辅料数量	- x
		CardType_AddChoiceCount = 13,			// 翻牌次数	+ x
		CardType_DecChoiceCount = 14,			// 翻牌次数	- x
		CardType_ChooseCard = 15,				// 随机翻x张牌
		CardType_ChangeCard = 16,				// 随机换牌x张
		CardType_ChangeBlackCard = 17,			// 随机更换黑牌x张
		CardType_ChangeRedCard = 18,			// 随机更换红牌x张
		CardType_ChangeBlackCardToRed = 19,		// 随机将x张黑牌换为红牌
		CardType_ChangeRedCardToBlack = 20,		// 随机将x张红牌换为黑牌
		CardType_Destroy = 21,					// 随机摧毁x张牌
		CardType_DestroyRedCard = 22,			// 随机摧毁红牌x张
		CardType_CancelDestroy = 23,			// 恢复被摧毁的牌x张
		CardType_Rand4BlackCard = 24,			// 立刻清除所有现有神秘奖励效果，随机翻取4张草花牌，然后进入奖励结算	
		CardType_Rand4RedCard = 25,				// 立刻清除所有现有神秘奖励效果，随机翻取4张方片牌，然后进入奖励结算
	}

	public class PlayerDailyTaskList : IMessage
	{
		private ProtoMemberEmbeddedList<PlayerTaskInfo> _m_daily_tasks;	// 角色日常任务列表

		public PlayerDailyTaskList()
		{
			_m_daily_tasks = new ProtoMemberEmbeddedList<PlayerTaskInfo>(1, false);
		}

		public System.Collections.Generic.List<PlayerTaskInfo> m_daily_tasks
		{
			get{ return _m_daily_tasks.member_value; }
		}
		public bool has_m_daily_tasks
		{
			get{ return _m_daily_tasks.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			foreach(PlayerTaskInfo one_member_value in _m_daily_tasks.member_value)
			{
				count += _m_daily_tasks.Serialize(one_member_value, ref out_stream);
			}

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			while (true)
			{
				PlayerTaskInfo one_member_value = new PlayerTaskInfo();
				one_count = _m_daily_tasks.ParseFrom(one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_daily_tasks.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			return count;
		}
	}

	public class PlayerDiaoWenBag : IMessage
	{
		private ProtoMemberUInt32List _m_diaowen_id;	// 雕文id

		public PlayerDiaoWenBag()
		{
			_m_diaowen_id = new ProtoMemberUInt32List(1, false);
		}

		public System.Collections.Generic.List<uint> m_diaowen_id
		{
			get{ return _m_diaowen_id.member_value; }
		}
		public bool has_m_diaowen_id
		{
			get{ return _m_diaowen_id.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			foreach(uint one_member_value in _m_diaowen_id.member_value)
			{
				count += _m_diaowen_id.Serialize(one_member_value, ref out_stream);
			}

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			while (true)
			{
				uint one_member_value = 0;
				one_count = _m_diaowen_id.ParseFrom(ref one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_diaowen_id.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			return count;
		}
	}

	public class PlayerDiaoWenList : IMessage
	{
		private ProtoMemberEmbedded<PlayerDiaoWenBag> _m_diaowen_bag;	// 角色雕文列表
		private ProtoMemberEmbeddedList<PlayerDiaoWenPlan> _m_diaowen_plan_list;	// 3种方案 * 4种类型 * 7个镶嵌位置 的雕纹配置
		private ProtoMemberUInt32List _m_curr_plan_index;	// 每种类型下当前使用的方案序号

		public PlayerDiaoWenList()
		{
			_m_diaowen_bag = new ProtoMemberEmbedded<PlayerDiaoWenBag>(1, false);
			_m_diaowen_bag.member_value = new PlayerDiaoWenBag();
			_m_diaowen_plan_list = new ProtoMemberEmbeddedList<PlayerDiaoWenPlan>(2, false);
			_m_curr_plan_index = new ProtoMemberUInt32List(3, false);
		}

		public PlayerDiaoWenBag m_diaowen_bag
		{
			get{ return _m_diaowen_bag.member_value as PlayerDiaoWenBag; }
			set{ _m_diaowen_bag.member_value = value; }
		}
		public bool has_m_diaowen_bag
		{
			get{ return _m_diaowen_bag.has_value; }
		}

		public System.Collections.Generic.List<PlayerDiaoWenPlan> m_diaowen_plan_list
		{
			get{ return _m_diaowen_plan_list.member_value; }
		}
		public bool has_m_diaowen_plan_list
		{
			get{ return _m_diaowen_plan_list.has_value; }
		}

		public System.Collections.Generic.List<uint> m_curr_plan_index
		{
			get{ return _m_curr_plan_index.member_value; }
		}
		public bool has_m_curr_plan_index
		{
			get{ return _m_curr_plan_index.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_diaowen_bag.Serialize(_m_diaowen_bag.member_value, ref out_stream);

			foreach(PlayerDiaoWenPlan one_member_value in _m_diaowen_plan_list.member_value)
			{
				count += _m_diaowen_plan_list.Serialize(one_member_value, ref out_stream);
			}

			foreach(uint one_member_value in _m_curr_plan_index.member_value)
			{
				count += _m_curr_plan_index.Serialize(one_member_value, ref out_stream);
			}

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			PlayerDiaoWenBag temp_m_diaowen_bag = new PlayerDiaoWenBag();
			one_count = _m_diaowen_bag.ParseFrom(temp_m_diaowen_bag, ref int_stream);
			if (0 < one_count)
			{
					_m_diaowen_bag.member_value = temp_m_diaowen_bag;
					count = count + one_count;
			}

			while (true)
			{
				PlayerDiaoWenPlan one_member_value = new PlayerDiaoWenPlan();
				one_count = _m_diaowen_plan_list.ParseFrom(one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_diaowen_plan_list.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			while (true)
			{
				uint one_member_value = 0;
				one_count = _m_curr_plan_index.ParseFrom(ref one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_curr_plan_index.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			return count;
		}
	}

	public class PlayerDiaoWenPlan : IMessage
	{
		private ProtoMemberUInt32 _m_plan_index;	// 方案序号0-2
		private ProtoMemberUInt32 _m_plan_type;	// 方案类型0-3
		private ProtoMemberUInt32 _m_plan_seat;	// 镶嵌的位置0-6
		private ProtoMemberUInt32 _m_bag_seat;	// 雕文id类型1-12

		public PlayerDiaoWenPlan()
		{
			_m_plan_index = new ProtoMemberUInt32(1, false);
			_m_plan_type = new ProtoMemberUInt32(2, false);
			_m_plan_seat = new ProtoMemberUInt32(3, false);
			_m_bag_seat = new ProtoMemberUInt32(4, false);
		}

		public PlayerDiaoWenPlan(uint __m_plan_index, uint __m_plan_type, uint __m_plan_seat, uint __m_bag_seat)
		{
			_m_plan_index = new ProtoMemberUInt32(1, false);
			_m_plan_index.member_value = __m_plan_index;
			_m_plan_type = new ProtoMemberUInt32(2, false);
			_m_plan_type.member_value = __m_plan_type;
			_m_plan_seat = new ProtoMemberUInt32(3, false);
			_m_plan_seat.member_value = __m_plan_seat;
			_m_bag_seat = new ProtoMemberUInt32(4, false);
			_m_bag_seat.member_value = __m_bag_seat;
		}

		public uint m_plan_index
		{
			get{ return _m_plan_index.member_value; }
			set{ _m_plan_index.member_value = value; }
		}
		public bool has_m_plan_index
		{
			get{ return _m_plan_index.has_value; }
		}

		public uint m_plan_type
		{
			get{ return _m_plan_type.member_value; }
			set{ _m_plan_type.member_value = value; }
		}
		public bool has_m_plan_type
		{
			get{ return _m_plan_type.has_value; }
		}

		public uint m_plan_seat
		{
			get{ return _m_plan_seat.member_value; }
			set{ _m_plan_seat.member_value = value; }
		}
		public bool has_m_plan_seat
		{
			get{ return _m_plan_seat.has_value; }
		}

		public uint m_bag_seat
		{
			get{ return _m_bag_seat.member_value; }
			set{ _m_bag_seat.member_value = value; }
		}
		public bool has_m_bag_seat
		{
			get{ return _m_bag_seat.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_plan_index.Serialize(_m_plan_index.member_value, ref out_stream);

			count += _m_plan_type.Serialize(_m_plan_type.member_value, ref out_stream);

			count += _m_plan_seat.Serialize(_m_plan_seat.member_value, ref out_stream);

			count += _m_bag_seat.Serialize(_m_bag_seat.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_plan_index = 0;
			one_count = _m_plan_index.ParseFrom(ref temp_m_plan_index, ref int_stream);
			if (0 < one_count)
			{
					_m_plan_index.member_value = temp_m_plan_index;
					count = count + one_count;
			}

			uint temp_m_plan_type = 0;
			one_count = _m_plan_type.ParseFrom(ref temp_m_plan_type, ref int_stream);
			if (0 < one_count)
			{
					_m_plan_type.member_value = temp_m_plan_type;
					count = count + one_count;
			}

			uint temp_m_plan_seat = 0;
			one_count = _m_plan_seat.ParseFrom(ref temp_m_plan_seat, ref int_stream);
			if (0 < one_count)
			{
					_m_plan_seat.member_value = temp_m_plan_seat;
					count = count + one_count;
			}

			uint temp_m_bag_seat = 0;
			one_count = _m_bag_seat.ParseFrom(ref temp_m_bag_seat, ref int_stream);
			if (0 < one_count)
			{
					_m_bag_seat.member_value = temp_m_bag_seat;
					count = count + one_count;
			}

			return count;
		}
	}

	public enum PlayerDiaoWenType
	{
		DiaoWenType_Tank = 0,		// 坦克类型
		DiaoWenType_AD = 1,			// 物理输出类型
		DiaoWenType_AP = 2,			// 法术输出类型
		DiaoWenType_Support = 3,	// 辅助类型
	}

	public class PlayerExtremeInfo : IMessage
	{
		private ProtoMemberUInt64 _m_last_battle_time;	// 上一次战斗时间，用于判断是否是今日首场战斗
		private ProtoMemberUInt32 _m_today_win_count;	// 今日已胜利场次，用于判断是否是今日首胜
		private ProtoMemberUInt32 _m_today_battle_count;	// 今日已参加场次，用于计算前三场的鼓励状态
		private ProtoMemberUInt32 _m_hard_lv;	// 已通关难度

		public PlayerExtremeInfo()
		{
			_m_last_battle_time = new ProtoMemberUInt64(1, false);
			_m_today_win_count = new ProtoMemberUInt32(2, false);
			_m_today_battle_count = new ProtoMemberUInt32(3, false);
			_m_hard_lv = new ProtoMemberUInt32(4, true);
		}

		public PlayerExtremeInfo(ulong __m_last_battle_time, uint __m_today_win_count, uint __m_today_battle_count, uint __m_hard_lv)
		{
			_m_last_battle_time = new ProtoMemberUInt64(1, false);
			_m_last_battle_time.member_value = __m_last_battle_time;
			_m_today_win_count = new ProtoMemberUInt32(2, false);
			_m_today_win_count.member_value = __m_today_win_count;
			_m_today_battle_count = new ProtoMemberUInt32(3, false);
			_m_today_battle_count.member_value = __m_today_battle_count;
			_m_hard_lv = new ProtoMemberUInt32(4, true);
			_m_hard_lv.member_value = __m_hard_lv;
		}

		public ulong m_last_battle_time
		{
			get{ return _m_last_battle_time.member_value; }
			set{ _m_last_battle_time.member_value = value; }
		}
		public bool has_m_last_battle_time
		{
			get{ return _m_last_battle_time.has_value; }
		}

		public uint m_today_win_count
		{
			get{ return _m_today_win_count.member_value; }
			set{ _m_today_win_count.member_value = value; }
		}
		public bool has_m_today_win_count
		{
			get{ return _m_today_win_count.has_value; }
		}

		public uint m_today_battle_count
		{
			get{ return _m_today_battle_count.member_value; }
			set{ _m_today_battle_count.member_value = value; }
		}
		public bool has_m_today_battle_count
		{
			get{ return _m_today_battle_count.has_value; }
		}

		public uint m_hard_lv
		{
			get{ return _m_hard_lv.member_value; }
			set{ _m_hard_lv.member_value = value; }
		}
		public bool has_m_hard_lv
		{
			get{ return _m_hard_lv.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_last_battle_time.Serialize(_m_last_battle_time.member_value, ref out_stream);

			count += _m_today_win_count.Serialize(_m_today_win_count.member_value, ref out_stream);

			count += _m_today_battle_count.Serialize(_m_today_battle_count.member_value, ref out_stream);

			count += _m_hard_lv.Serialize(_m_hard_lv.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			ulong temp_m_last_battle_time = 0;
			one_count = _m_last_battle_time.ParseFrom(ref temp_m_last_battle_time, ref int_stream);
			if (0 < one_count)
			{
					_m_last_battle_time.member_value = temp_m_last_battle_time;
					count = count + one_count;
			}

			uint temp_m_today_win_count = 0;
			one_count = _m_today_win_count.ParseFrom(ref temp_m_today_win_count, ref int_stream);
			if (0 < one_count)
			{
					_m_today_win_count.member_value = temp_m_today_win_count;
					count = count + one_count;
			}

			uint temp_m_today_battle_count = 0;
			one_count = _m_today_battle_count.ParseFrom(ref temp_m_today_battle_count, ref int_stream);
			if (0 < one_count)
			{
					_m_today_battle_count.member_value = temp_m_today_battle_count;
					count = count + one_count;
			}

			uint temp_m_hard_lv = 0;
			one_count = _m_hard_lv.ParseFrom(ref temp_m_hard_lv, ref int_stream);
			if (0 < one_count)
			{
					_m_hard_lv.member_value = temp_m_hard_lv;
					count = count + one_count;
			}

			return count;
		}
	}

	public class PlayerFriendInfo : IMessage
	{
		private ProtoMemberEmbedded<PlayerId> _m_player_id;	// 玩家唯一id
		private ProtoMemberUInt32 _m_toy_type;	// 角色初始使用的玩具模型id
		private ProtoMemberString _m_name;	// 角色名称
		private ProtoMemberUInt32 _m_hunting_lv;	// 狩猎等级
		private ProtoMemberUInt64 _m_last_time;	// 角色上一次的上线时间/申请列表中为申请时间
		private ProtoMemberBool _m_is_online;	// 在线状态

		public PlayerFriendInfo()
		{
			_m_player_id = new ProtoMemberEmbedded<PlayerId>(1, false);
			_m_player_id.member_value = new PlayerId();
			_m_toy_type = new ProtoMemberUInt32(2, false);
			_m_name = new ProtoMemberString(3, false);
			_m_hunting_lv = new ProtoMemberUInt32(4, false);
			_m_last_time = new ProtoMemberUInt64(5, false);
			_m_is_online = new ProtoMemberBool(6, false);
		}

		public PlayerFriendInfo(uint __m_toy_type, string __m_name, uint __m_hunting_lv, ulong __m_last_time, bool __m_is_online)
		{
			_m_player_id = new ProtoMemberEmbedded<PlayerId>(1, false);
			_m_player_id.member_value = new PlayerId();
			_m_toy_type = new ProtoMemberUInt32(2, false);
			_m_toy_type.member_value = __m_toy_type;
			_m_name = new ProtoMemberString(3, false);
			_m_name.member_value = __m_name;
			_m_hunting_lv = new ProtoMemberUInt32(4, false);
			_m_hunting_lv.member_value = __m_hunting_lv;
			_m_last_time = new ProtoMemberUInt64(5, false);
			_m_last_time.member_value = __m_last_time;
			_m_is_online = new ProtoMemberBool(6, false);
			_m_is_online.member_value = __m_is_online;
		}

		public PlayerId m_player_id
		{
			get{ return _m_player_id.member_value as PlayerId; }
			set{ _m_player_id.member_value = value; }
		}
		public bool has_m_player_id
		{
			get{ return _m_player_id.has_value; }
		}

		public uint m_toy_type
		{
			get{ return _m_toy_type.member_value; }
			set{ _m_toy_type.member_value = value; }
		}
		public bool has_m_toy_type
		{
			get{ return _m_toy_type.has_value; }
		}

		public string m_name
		{
			get{ return _m_name.member_value; }
			set{ _m_name.member_value = value; }
		}
		public bool has_m_name
		{
			get{ return _m_name.has_value; }
		}

		public uint m_hunting_lv
		{
			get{ return _m_hunting_lv.member_value; }
			set{ _m_hunting_lv.member_value = value; }
		}
		public bool has_m_hunting_lv
		{
			get{ return _m_hunting_lv.has_value; }
		}

		public ulong m_last_time
		{
			get{ return _m_last_time.member_value; }
			set{ _m_last_time.member_value = value; }
		}
		public bool has_m_last_time
		{
			get{ return _m_last_time.has_value; }
		}

		public bool m_is_online
		{
			get{ return _m_is_online.member_value; }
			set{ _m_is_online.member_value = value; }
		}
		public bool has_m_is_online
		{
			get{ return _m_is_online.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_player_id.Serialize(_m_player_id.member_value, ref out_stream);

			count += _m_toy_type.Serialize(_m_toy_type.member_value, ref out_stream);

			count += _m_name.Serialize(_m_name.member_value, ref out_stream);

			count += _m_hunting_lv.Serialize(_m_hunting_lv.member_value, ref out_stream);

			count += _m_last_time.Serialize(_m_last_time.member_value, ref out_stream);

			count += _m_is_online.Serialize(_m_is_online.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			PlayerId temp_m_player_id = new PlayerId();
			one_count = _m_player_id.ParseFrom(temp_m_player_id, ref int_stream);
			if (0 < one_count)
			{
					_m_player_id.member_value = temp_m_player_id;
					count = count + one_count;
			}

			uint temp_m_toy_type = 0;
			one_count = _m_toy_type.ParseFrom(ref temp_m_toy_type, ref int_stream);
			if (0 < one_count)
			{
					_m_toy_type.member_value = temp_m_toy_type;
					count = count + one_count;
			}

			string temp_m_name = "";
			one_count = _m_name.ParseFrom(ref temp_m_name, ref int_stream);
			if (0 < one_count)
			{
					_m_name.member_value = temp_m_name;
					count = count + one_count;
			}

			uint temp_m_hunting_lv = 0;
			one_count = _m_hunting_lv.ParseFrom(ref temp_m_hunting_lv, ref int_stream);
			if (0 < one_count)
			{
					_m_hunting_lv.member_value = temp_m_hunting_lv;
					count = count + one_count;
			}

			ulong temp_m_last_time = 0;
			one_count = _m_last_time.ParseFrom(ref temp_m_last_time, ref int_stream);
			if (0 < one_count)
			{
					_m_last_time.member_value = temp_m_last_time;
					count = count + one_count;
			}

			bool temp_m_is_online = false;
			one_count = _m_is_online.ParseFrom(ref temp_m_is_online, ref int_stream);
			if (0 < one_count)
			{
					_m_is_online.member_value = temp_m_is_online;
					count = count + one_count;
			}

			return count;
		}
	}

	public class PlayerFriendList : IMessage
	{
		private ProtoMemberEmbeddedList<PlayerFriendInfo> _m_friends;	// 好友列表
		private ProtoMemberEmbeddedList<PlayerFriendInfo> _m_applications;	// 申请列表
		private ProtoMemberUInt32 _m_max_friend_count;	// 好友数量上限
		private ProtoMemberUInt32 _m_max_application_count;	// 申请数量上限
		private ProtoMemberEmbeddedList<PlayerBlackInfo> _m_blacks;	// 黑名单列表

		public PlayerFriendList()
		{
			_m_friends = new ProtoMemberEmbeddedList<PlayerFriendInfo>(1, false);
			_m_applications = new ProtoMemberEmbeddedList<PlayerFriendInfo>(2, false);
			_m_max_friend_count = new ProtoMemberUInt32(3, false);
			_m_max_application_count = new ProtoMemberUInt32(4, false);
			_m_blacks = new ProtoMemberEmbeddedList<PlayerBlackInfo>(5, false);
		}

		public PlayerFriendList(uint __m_max_friend_count, uint __m_max_application_count)
		{
			_m_friends = new ProtoMemberEmbeddedList<PlayerFriendInfo>(1, false);
			_m_applications = new ProtoMemberEmbeddedList<PlayerFriendInfo>(2, false);
			_m_max_friend_count = new ProtoMemberUInt32(3, false);
			_m_max_friend_count.member_value = __m_max_friend_count;
			_m_max_application_count = new ProtoMemberUInt32(4, false);
			_m_max_application_count.member_value = __m_max_application_count;
			_m_blacks = new ProtoMemberEmbeddedList<PlayerBlackInfo>(5, false);
		}

		public System.Collections.Generic.List<PlayerFriendInfo> m_friends
		{
			get{ return _m_friends.member_value; }
		}
		public bool has_m_friends
		{
			get{ return _m_friends.has_value; }
		}

		public System.Collections.Generic.List<PlayerFriendInfo> m_applications
		{
			get{ return _m_applications.member_value; }
		}
		public bool has_m_applications
		{
			get{ return _m_applications.has_value; }
		}

		public uint m_max_friend_count
		{
			get{ return _m_max_friend_count.member_value; }
			set{ _m_max_friend_count.member_value = value; }
		}
		public bool has_m_max_friend_count
		{
			get{ return _m_max_friend_count.has_value; }
		}

		public uint m_max_application_count
		{
			get{ return _m_max_application_count.member_value; }
			set{ _m_max_application_count.member_value = value; }
		}
		public bool has_m_max_application_count
		{
			get{ return _m_max_application_count.has_value; }
		}

		public System.Collections.Generic.List<PlayerBlackInfo> m_blacks
		{
			get{ return _m_blacks.member_value; }
		}
		public bool has_m_blacks
		{
			get{ return _m_blacks.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			foreach(PlayerFriendInfo one_member_value in _m_friends.member_value)
			{
				count += _m_friends.Serialize(one_member_value, ref out_stream);
			}

			foreach(PlayerFriendInfo one_member_value in _m_applications.member_value)
			{
				count += _m_applications.Serialize(one_member_value, ref out_stream);
			}

			count += _m_max_friend_count.Serialize(_m_max_friend_count.member_value, ref out_stream);

			count += _m_max_application_count.Serialize(_m_max_application_count.member_value, ref out_stream);

			foreach(PlayerBlackInfo one_member_value in _m_blacks.member_value)
			{
				count += _m_blacks.Serialize(one_member_value, ref out_stream);
			}

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			while (true)
			{
				PlayerFriendInfo one_member_value = new PlayerFriendInfo();
				one_count = _m_friends.ParseFrom(one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_friends.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			while (true)
			{
				PlayerFriendInfo one_member_value = new PlayerFriendInfo();
				one_count = _m_applications.ParseFrom(one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_applications.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			uint temp_m_max_friend_count = 0;
			one_count = _m_max_friend_count.ParseFrom(ref temp_m_max_friend_count, ref int_stream);
			if (0 < one_count)
			{
					_m_max_friend_count.member_value = temp_m_max_friend_count;
					count = count + one_count;
			}

			uint temp_m_max_application_count = 0;
			one_count = _m_max_application_count.ParseFrom(ref temp_m_max_application_count, ref int_stream);
			if (0 < one_count)
			{
					_m_max_application_count.member_value = temp_m_max_application_count;
					count = count + one_count;
			}

			while (true)
			{
				PlayerBlackInfo one_member_value = new PlayerBlackInfo();
				one_count = _m_blacks.ParseFrom(one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_blacks.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			return count;
		}
	}

	public class PlayerGroup : IMessage
	{
		private ProtoMemberUInt64 _m_team_id;	// 队伍id
		private ProtoMemberEmbeddedList<PlayerGroupPlayer> _m_players;	// 队伍玩家信息列表

		public PlayerGroup()
		{
			_m_team_id = new ProtoMemberUInt64(1, true);
			_m_players = new ProtoMemberEmbeddedList<PlayerGroupPlayer>(2, false);
		}

		public PlayerGroup(ulong __m_team_id)
		{
			_m_team_id = new ProtoMemberUInt64(1, true);
			_m_team_id.member_value = __m_team_id;
			_m_players = new ProtoMemberEmbeddedList<PlayerGroupPlayer>(2, false);
		}

		public ulong m_team_id
		{
			get{ return _m_team_id.member_value; }
			set{ _m_team_id.member_value = value; }
		}
		public bool has_m_team_id
		{
			get{ return _m_team_id.has_value; }
		}

		public System.Collections.Generic.List<PlayerGroupPlayer> m_players
		{
			get{ return _m_players.member_value; }
		}
		public bool has_m_players
		{
			get{ return _m_players.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_team_id.Serialize(_m_team_id.member_value, ref out_stream);

			foreach(PlayerGroupPlayer one_member_value in _m_players.member_value)
			{
				count += _m_players.Serialize(one_member_value, ref out_stream);
			}

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			ulong temp_m_team_id = 0;
			one_count = _m_team_id.ParseFrom(ref temp_m_team_id, ref int_stream);
			if (0 < one_count)
			{
					_m_team_id.member_value = temp_m_team_id;
					count = count + one_count;
			}

			while (true)
			{
				PlayerGroupPlayer one_member_value = new PlayerGroupPlayer();
				one_count = _m_players.ParseFrom(one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_players.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			return count;
		}
	}

	public class PlayerGroupPlayer : IMessage
	{
		private ProtoMemberUInt32 _m_account_id;	// 角色id == 账号id
		private ProtoMemberUInt32 _m_server_id;	// 所属服id
		private ProtoMemberString _m_player_name;	// 角色名称
		private ProtoMemberUInt32 _m_funny_lv;	// 娱乐模式等级
		private ProtoMemberUInt32 _m_elite_lv;	// 精英模式等级

		public PlayerGroupPlayer()
		{
			_m_account_id = new ProtoMemberUInt32(1, false);
			_m_server_id = new ProtoMemberUInt32(2, false);
			_m_player_name = new ProtoMemberString(3, false);
			_m_funny_lv = new ProtoMemberUInt32(4, false);
			_m_elite_lv = new ProtoMemberUInt32(5, false);
		}

		public PlayerGroupPlayer(uint __m_account_id, uint __m_server_id, string __m_player_name, uint __m_funny_lv, uint __m_elite_lv)
		{
			_m_account_id = new ProtoMemberUInt32(1, false);
			_m_account_id.member_value = __m_account_id;
			_m_server_id = new ProtoMemberUInt32(2, false);
			_m_server_id.member_value = __m_server_id;
			_m_player_name = new ProtoMemberString(3, false);
			_m_player_name.member_value = __m_player_name;
			_m_funny_lv = new ProtoMemberUInt32(4, false);
			_m_funny_lv.member_value = __m_funny_lv;
			_m_elite_lv = new ProtoMemberUInt32(5, false);
			_m_elite_lv.member_value = __m_elite_lv;
		}

		public uint m_account_id
		{
			get{ return _m_account_id.member_value; }
			set{ _m_account_id.member_value = value; }
		}
		public bool has_m_account_id
		{
			get{ return _m_account_id.has_value; }
		}

		public uint m_server_id
		{
			get{ return _m_server_id.member_value; }
			set{ _m_server_id.member_value = value; }
		}
		public bool has_m_server_id
		{
			get{ return _m_server_id.has_value; }
		}

		public string m_player_name
		{
			get{ return _m_player_name.member_value; }
			set{ _m_player_name.member_value = value; }
		}
		public bool has_m_player_name
		{
			get{ return _m_player_name.has_value; }
		}

		public uint m_funny_lv
		{
			get{ return _m_funny_lv.member_value; }
			set{ _m_funny_lv.member_value = value; }
		}
		public bool has_m_funny_lv
		{
			get{ return _m_funny_lv.has_value; }
		}

		public uint m_elite_lv
		{
			get{ return _m_elite_lv.member_value; }
			set{ _m_elite_lv.member_value = value; }
		}
		public bool has_m_elite_lv
		{
			get{ return _m_elite_lv.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_account_id.Serialize(_m_account_id.member_value, ref out_stream);

			count += _m_server_id.Serialize(_m_server_id.member_value, ref out_stream);

			count += _m_player_name.Serialize(_m_player_name.member_value, ref out_stream);

			count += _m_funny_lv.Serialize(_m_funny_lv.member_value, ref out_stream);

			count += _m_elite_lv.Serialize(_m_elite_lv.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_account_id = 0;
			one_count = _m_account_id.ParseFrom(ref temp_m_account_id, ref int_stream);
			if (0 < one_count)
			{
					_m_account_id.member_value = temp_m_account_id;
					count = count + one_count;
			}

			uint temp_m_server_id = 0;
			one_count = _m_server_id.ParseFrom(ref temp_m_server_id, ref int_stream);
			if (0 < one_count)
			{
					_m_server_id.member_value = temp_m_server_id;
					count = count + one_count;
			}

			string temp_m_player_name = "";
			one_count = _m_player_name.ParseFrom(ref temp_m_player_name, ref int_stream);
			if (0 < one_count)
			{
					_m_player_name.member_value = temp_m_player_name;
					count = count + one_count;
			}

			uint temp_m_funny_lv = 0;
			one_count = _m_funny_lv.ParseFrom(ref temp_m_funny_lv, ref int_stream);
			if (0 < one_count)
			{
					_m_funny_lv.member_value = temp_m_funny_lv;
					count = count + one_count;
			}

			uint temp_m_elite_lv = 0;
			one_count = _m_elite_lv.ParseFrom(ref temp_m_elite_lv, ref int_stream);
			if (0 < one_count)
			{
					_m_elite_lv.member_value = temp_m_elite_lv;
					count = count + one_count;
			}

			return count;
		}
	}

	public class PlayerGuid : IMessage
	{
		private ProtoMemberUInt32 _m_server_id;	
		private ProtoMemberUInt32 _m_account_id;	

		public PlayerGuid()
		{
			_m_server_id = new ProtoMemberUInt32(1, true);
			_m_account_id = new ProtoMemberUInt32(2, true);
		}

		public PlayerGuid(uint __m_server_id, uint __m_account_id)
		{
			_m_server_id = new ProtoMemberUInt32(1, true);
			_m_server_id.member_value = __m_server_id;
			_m_account_id = new ProtoMemberUInt32(2, true);
			_m_account_id.member_value = __m_account_id;
		}

		public uint m_server_id
		{
			get{ return _m_server_id.member_value; }
			set{ _m_server_id.member_value = value; }
		}
		public bool has_m_server_id
		{
			get{ return _m_server_id.has_value; }
		}

		public uint m_account_id
		{
			get{ return _m_account_id.member_value; }
			set{ _m_account_id.member_value = value; }
		}
		public bool has_m_account_id
		{
			get{ return _m_account_id.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_server_id.Serialize(_m_server_id.member_value, ref out_stream);

			count += _m_account_id.Serialize(_m_account_id.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_server_id = 0;
			one_count = _m_server_id.ParseFrom(ref temp_m_server_id, ref int_stream);
			if (0 < one_count)
			{
					_m_server_id.member_value = temp_m_server_id;
					count = count + one_count;
			}

			uint temp_m_account_id = 0;
			one_count = _m_account_id.ParseFrom(ref temp_m_account_id, ref int_stream);
			if (0 < one_count)
			{
					_m_account_id.member_value = temp_m_account_id;
					count = count + one_count;
			}

			return count;
		}
	}

	public class PlayerHeroBaseAttrInfo : IMessage
	{
		private ProtoMemberEnum<PlayerHeroBaseAttrType> _m_attr_type;	// 属性类型编号
		private ProtoMemberUInt32 _m_attr_value;	// 属性基础值
		private ProtoMemberUInt32 _m_attr_add;	// 属性加成值

		public PlayerHeroBaseAttrInfo()
		{
			_m_attr_type = new ProtoMemberEnum<PlayerHeroBaseAttrType>(1, false);
			_m_attr_value = new ProtoMemberUInt32(2, false);
			_m_attr_add = new ProtoMemberUInt32(3, false);
		}

		public PlayerHeroBaseAttrInfo(PlayerHeroBaseAttrType __m_attr_type, uint __m_attr_value, uint __m_attr_add)
		{
			_m_attr_type = new ProtoMemberEnum<PlayerHeroBaseAttrType>(1, false);
			_m_attr_type.member_value = __m_attr_type;
			_m_attr_value = new ProtoMemberUInt32(2, false);
			_m_attr_value.member_value = __m_attr_value;
			_m_attr_add = new ProtoMemberUInt32(3, false);
			_m_attr_add.member_value = __m_attr_add;
		}

		public PlayerHeroBaseAttrType m_attr_type
		{
			get{ return _m_attr_type.member_value; }
			set{ _m_attr_type.member_value = value; }
		}
		public bool has_m_attr_type
		{
			get{ return _m_attr_type.has_value; }
		}

		public uint m_attr_value
		{
			get{ return _m_attr_value.member_value; }
			set{ _m_attr_value.member_value = value; }
		}
		public bool has_m_attr_value
		{
			get{ return _m_attr_value.has_value; }
		}

		public uint m_attr_add
		{
			get{ return _m_attr_add.member_value; }
			set{ _m_attr_add.member_value = value; }
		}
		public bool has_m_attr_add
		{
			get{ return _m_attr_add.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_attr_type.Serialize((uint)_m_attr_type.member_value, ref out_stream);

			count += _m_attr_value.Serialize(_m_attr_value.member_value, ref out_stream);

			count += _m_attr_add.Serialize(_m_attr_add.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_attr_type = 0;
			one_count = _m_attr_type.ParseFrom(ref temp_m_attr_type, ref int_stream);
			if (0 < one_count)
			{
					_m_attr_type.member_value = (PlayerHeroBaseAttrType)temp_m_attr_type;
					count = count + one_count;
			}

			uint temp_m_attr_value = 0;
			one_count = _m_attr_value.ParseFrom(ref temp_m_attr_value, ref int_stream);
			if (0 < one_count)
			{
					_m_attr_value.member_value = temp_m_attr_value;
					count = count + one_count;
			}

			uint temp_m_attr_add = 0;
			one_count = _m_attr_add.ParseFrom(ref temp_m_attr_add, ref int_stream);
			if (0 < one_count)
			{
					_m_attr_add.member_value = temp_m_attr_add;
					count = count + one_count;
			}

			return count;
		}
	}

	public enum PlayerHeroBaseAttrType
	{
		PlayerHeroBaseAttrType_AttackLowerLimit = 0,			//攻击下限
		PlayerHeroBaseAttrType_AttackUpperLimit = 1,			//攻击上限
		PlayerHeroBaseAttrType_PhysicsDefence = 2,				//物防
		PlayerHeroBaseAttrType_MagicDefence = 3,				//魔防
		PlayerHeroBaseAttrType_MaxHP = 4,						//最大生命
		PlayerHeroBaseAttrType_HPRecoverRate = 5,				//生命恢复速度
		PlayerHeroBaseAttrType_CriticalStrikeRate = 6,			//暴击率万分比值
		PlayerHeroBaseAttrType_CriticalStrikeMultiple = 7,		//暴击倍率万分比值
		PlayerHeroBaseAttrType_Accuracy = 8,					//命中率万分比值
		PlayerHeroBaseAttrType_Dodge = 9,						//闪避率万分比值
		PlayerHeroBaseAttrType_AttackSpeed = 10,				//攻击速度万分比值
		PlayerHeroBaseAttrType_AttackPenetrine = 11,			//攻击穿透
		PlayerHeroBaseAttrType_PenetrineRate = 12,				//破甲几率万分比值
		PlayerHeroBaseAttrType_DoubleRate = 13,					//连击几率万分比值
		PlayerHeroBaseAttrType_RaceAttack = 14,					//属性攻击加成万分比值
		PlayerHeroBaseAttrType_RaceHurt = 15,					//属性伤害减免万分比值
		PlayerHeroBaseAttrType_CriticalDefence = 16,			//暴击伤害减免万分比值
		PlayerHeroBaseAttrType_MoveSpeed = 17,					//移动速度
		PlayerHeroBaseAttrType_HurtEnhance = 18,				//伤害提高百分比
		PlayerHeroBaseAttrType_HurtAdd = 19,					//伤害附加值
		PlayerHeroBaseAttrType_HurtReduce = 20,					//伤害减免百分比
	}

	public class PlayerHeroEffectAttrInfo : IMessage
	{
		private ProtoMemberEnum<PlayerHeroEffectAttrType> _m_attr_type;	// 属性加成编号
		private ProtoMemberUInt32 _m_attr_value1;	// 加成值
		private ProtoMemberUInt32 _m_attr_value2;	// 加成值
		private ProtoMemberUInt32 _m_attr_value3;	// 加成值

		public PlayerHeroEffectAttrInfo()
		{
			_m_attr_type = new ProtoMemberEnum<PlayerHeroEffectAttrType>(1, false);
			_m_attr_value1 = new ProtoMemberUInt32(2, false);
			_m_attr_value2 = new ProtoMemberUInt32(3, false);
			_m_attr_value3 = new ProtoMemberUInt32(4, false);
		}

		public PlayerHeroEffectAttrInfo(PlayerHeroEffectAttrType __m_attr_type, uint __m_attr_value1, uint __m_attr_value2, uint __m_attr_value3)
		{
			_m_attr_type = new ProtoMemberEnum<PlayerHeroEffectAttrType>(1, false);
			_m_attr_type.member_value = __m_attr_type;
			_m_attr_value1 = new ProtoMemberUInt32(2, false);
			_m_attr_value1.member_value = __m_attr_value1;
			_m_attr_value2 = new ProtoMemberUInt32(3, false);
			_m_attr_value2.member_value = __m_attr_value2;
			_m_attr_value3 = new ProtoMemberUInt32(4, false);
			_m_attr_value3.member_value = __m_attr_value3;
		}

		public PlayerHeroEffectAttrType m_attr_type
		{
			get{ return _m_attr_type.member_value; }
			set{ _m_attr_type.member_value = value; }
		}
		public bool has_m_attr_type
		{
			get{ return _m_attr_type.has_value; }
		}

		public uint m_attr_value1
		{
			get{ return _m_attr_value1.member_value; }
			set{ _m_attr_value1.member_value = value; }
		}
		public bool has_m_attr_value1
		{
			get{ return _m_attr_value1.has_value; }
		}

		public uint m_attr_value2
		{
			get{ return _m_attr_value2.member_value; }
			set{ _m_attr_value2.member_value = value; }
		}
		public bool has_m_attr_value2
		{
			get{ return _m_attr_value2.has_value; }
		}

		public uint m_attr_value3
		{
			get{ return _m_attr_value3.member_value; }
			set{ _m_attr_value3.member_value = value; }
		}
		public bool has_m_attr_value3
		{
			get{ return _m_attr_value3.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_attr_type.Serialize((uint)_m_attr_type.member_value, ref out_stream);

			count += _m_attr_value1.Serialize(_m_attr_value1.member_value, ref out_stream);

			count += _m_attr_value2.Serialize(_m_attr_value2.member_value, ref out_stream);

			count += _m_attr_value3.Serialize(_m_attr_value3.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_attr_type = 0;
			one_count = _m_attr_type.ParseFrom(ref temp_m_attr_type, ref int_stream);
			if (0 < one_count)
			{
					_m_attr_type.member_value = (PlayerHeroEffectAttrType)temp_m_attr_type;
					count = count + one_count;
			}

			uint temp_m_attr_value1 = 0;
			one_count = _m_attr_value1.ParseFrom(ref temp_m_attr_value1, ref int_stream);
			if (0 < one_count)
			{
					_m_attr_value1.member_value = temp_m_attr_value1;
					count = count + one_count;
			}

			uint temp_m_attr_value2 = 0;
			one_count = _m_attr_value2.ParseFrom(ref temp_m_attr_value2, ref int_stream);
			if (0 < one_count)
			{
					_m_attr_value2.member_value = temp_m_attr_value2;
					count = count + one_count;
			}

			uint temp_m_attr_value3 = 0;
			one_count = _m_attr_value3.ParseFrom(ref temp_m_attr_value3, ref int_stream);
			if (0 < one_count)
			{
					_m_attr_value3.member_value = temp_m_attr_value3;
					count = count + one_count;
			}

			return count;
		}
	}

	public enum PlayerHeroEffectAttrType
	{
		PlayerHeroEffectAttrType_UnKnow = 0,					//无效类型
		PlayerHeroEffectAttrType_AttackFinallyValue = 1,		//伤害增加固定值
		PlayerHeroEffectAttrType_HurtFinallyValue = 2,			//伤害减免固定值
		PlayerHeroEffectAttrType_AttackPenetration = 3,			//穿透增加固定值
		PlayerHeroEffectAttrType_AttackFinallyPercent = 4,		//伤害增加万分比
		PlayerHeroEffectAttrType_HurtFinallyPercent = 5,		//伤害减免万分比
		PlayerHeroEffectAttrType_AttackValue = 6,				//攻击增加固定值
		PlayerHeroEffectAttrType_AttackPercent = 7,				//攻击增加百分比
		PlayerHeroEffectAttrType_PhysicsDefenceValue = 8,		//物理防御增加固定值
		PlayerHeroEffectAttrType_PhysicsDefencePercent = 9,		//物理防御增加百分比
		PlayerHeroEffectAttrType_MagicDefenceValue = 10,		//魔法防御增加固定值
		PlayerHeroEffectAttrType_MagicDefencePercent = 11,		//魔法防御增加百分比
		PlayerHeroEffectAttrType_MaxHPValue = 12,				//生命值增加固定值
		PlayerHeroEffectAttrType_MaxHPPercent = 13,				//生命值增加百分比
		PlayerHeroEffectAttrType_HPRecoverRate = 14,			//生命回复增加固定值
		PlayerHeroEffectAttrType_CriticalStrikeRate = 15,		//暴击率增加固定值
		PlayerHeroEffectAttrType_CriticalStrikeMultiple = 16,	//暴击倍率增加固定值
		PlayerHeroEffectAttrType_Accuracy = 17,					//命中增加固定值
		PlayerHeroEffectAttrType_Dodge = 18,					//闪避增加固定值
		PlayerHeroEffectAttrType_AttackSpeed = 19,				//攻击速度增加固定值
		PlayerHeroEffectAttrType_PenetrineRate = 20,			//穿透几率增加固定值
		PlayerHeroEffectAttrType_DoubleRate = 21,				//连击几率增加固定值
		PlayerHeroEffectAttrType_RaceAttack = 22,				//属性攻击加成百分比
		PlayerHeroEffectAttrType_RaceHurt = 23,					//属性伤害减免百分比
		PlayerHeroEffectAttrType_CriticalDefence = 24,			//暴击伤害减免固定值
		PlayerHeroEffectAttrType_SkillDamage_Incr	=	40,		//使你英雄的技能伤害提升#点。
		PlayerHeroEffectAttrType_BuffEffect_Incr	=	41,		//o使你英雄获得的攻击类增益状态的效果提升#%。
		PlayerHeroEffectAttrType_DamageRebound		=	42,		//使你的英雄在受到攻击时，对攻击方造成#点反弹伤害。
		PlayerHeroEffectAttrType_PenetExtraDamage	=	43,		//使你的英雄对目标破甲时，造成额外的#点伤害。
		PlayerHeroEffectAttrType_LowerHpExtraDamage	=	44,		//当目标生命值低于#%时，使你英雄的每次攻击对其造成#点的额外伤害。
		PlayerHeroEffectAttrType_HpToAttack			=	45,		//使你的英雄每损失#%的生命值，就提升#%的攻击力。
		PlayerHeroEffectAttrType_MonsterDamage_Incr	=	46,		//使你英雄对怪物造成的伤害提升#%。
		PlayerHeroEffectAttrType_SummonDamage_Incr	=	47,		//使你英雄对召唤物造成的伤害提升#%。
		PlayerHeroEffectAttrType_DamageToKiller		=	48,		//使你的英雄被击杀时，对击杀者造成#点伤害。
		PlayerHeroEffectAttrType_DieToIncrAtk		=	49,		//当你的某个英雄被击杀时，使你其他英雄的攻击力提升#点。
		PlayerHeroEffectAttrType_PerSecIncrAtk		=	50,		//战斗开始后，使你的英雄以每#秒#点的速度持续提升攻击力。
		PlayerHeroEffectAttrType_PerSkillIncrAtk	=	51,		//使你的英雄每施放一次技能，攻击力就提升#点。
		PlayerHeroEffectAttrType_PerCritIncrCrit	=	52,		//使你的英雄每触发一次暴击，暴击率就提升#%。
		PlayerHeroEffectAttrType_PerAccurIncrAtk	=	53,		//使你的英雄每命中一次目标，攻击力就提升#点，直到被某个目标闪避。
		PlayerHeroEffectAttrType_DodgeIncrCrit		=	54,		//$当你英雄的攻击被闪避时，使其下次攻击的暴击率提升#%，且必然命中。
		PlayerHeroEffectAttrType_NoComboToIncrCombo	=	55,		//$如果你英雄的攻击没有触发连击效果，则使其连击率提升#%，直至触发连击。
		PlayerHeroEffectAttrType_PerAccurIncrHp		=	56,		//使你的英雄每命中一次目标，就恢复#点生命值。
		PlayerHeroEffectAttrType_PerDodgeIncrHp		=	57,		//使你的英雄每闪避一次，就恢复#点生命值。
		PlayerHeroEffectAttrType_Debuf_Desc			=	58,		//使令你英雄持续流失生命值的负面效果减弱#%。
		PlayerHeroEffectAttrType_PenetDamageDesc	=	59,		//当你的英雄被破甲时，使其受到的伤害减少#点。
		PlayerHeroEffectAttrType_DefeBuffEft_Incr	=	60,		//o使你英雄获得的防御类增益状态的效果提升#%。
		PlayerHeroEffectAttrType_DeBuff_EffectDesc	=	61,		//o使你英雄受到的负面状态的效果减弱#%。
		PlayerHeroEffectAttrType_MissDamageByCrystal=	62,		//当你的英雄在受到致命伤害时，使其消耗1个水晶来免疫伤害。
		PlayerHeroEffectAttrType_MonsterDamage_Desc	=	63,		//使怪物对你英雄造成的伤害降低#%。
		PlayerHeroEffectAttrType_SummonDamage_Desc	=	64,		//使召唤物对你英雄造成的伤害降低#%。
		PlayerHeroEffectAttrType_Cure_Incr			=	65,		//$使你英雄的治疗效果提升#%。
		PlayerHeroEffectAttrType_Cure_Recv_Incr		=	66,		//使你英雄获得的治疗效果提升#%。
		PlayerHeroEffectAttrType_PerSecIncrDefence	=	67,		//战斗开始后，使你的英雄以每#秒#点的速度持续提升防御力。
		PlayerHeroEffectAttrType_PerSkill_IncrDefe	=	68,		//使你的英雄每施放一次技能，防御力就提升#点。
		PlayerHeroEffectAttrType_HeroDie_IncrDefe	=	69,		//当你的某个英雄被击杀时，使你其他英雄的防御力提升#点。
		PlayerHeroEffectAttrType_LHpIncrByCrystal	=	70,		//当你英雄的生命值低于#%时，使其每使用一个水晶，就恢复#点生命值。
		PlayerHeroEffectAttrType_LHpIncrPerSec		=	71,		//当你英雄的生命值低于#%时，使其以每#秒#点的速度持续恢复生命值。
		PlayerHeroEffectAttrType_BattleIncrCrystal	=	72,		//使你的英雄进入战场时，获得1个额外的水晶。
		PlayerHeroEffectAttrType_CrystalSpeedIncr	=	73,		//使你英雄水晶的充能速度提升#%。
		PlayerHeroEffectAttrType_CrystalSpeedIncrEx	=	74,		//使你英雄的水晶少于7个时，充能速度提升#%；少于3个时，充能速度提升#%。
		PlayerHeroEffectAttrType_CrystalMaxIncr		=	75,		//使你英雄的水晶上限提升1点。
		PlayerHeroEffectAttrType_LockTargetCrystal	=	76,		//当你的英雄触发暴击时，使被暴击目标的2个水晶在#秒内锁定。
		PlayerHeroEffectAttrType_EnemyCrystalDesc	=	77,		//当你的英雄杀死一个目标时，使所有敌方单位失去1个水晶。
		PlayerHeroEffectAttrType_ComboTgtCrystalDesc=	78,		//当你的英雄触发连击时，使被连击的目标失去1个水晶。
		PlayerHeroEffectAttrType_MoveSpeed_Incr		=	79,		//$使你英雄的移动速度提升#%。
		PlayerHeroEffectAttrType_RollDist_Incr		=	80,		//$使你英雄的翻滚距离提升#米。
		PlayerHeroEffectAttrType_RollTwoTimes		=	81,		//$使你的英雄可以连续翻滚两次。
		PlayerHeroEffectAttrType_RollCollDesc		=	82,		//$使你英雄的翻滚冷却时间降低#秒。
		PlayerHeroEffectAttrType_HeroStaticTimeDesc	=	83,		//$使你英雄的硬直时间降低#秒。
		PlayerHeroEffectAttrType_IncrCrystalByTgtNum=	84,		//当你的英雄杀死一个敌方目标时，使其获得等于目标剩余水晶数量的水晶。
		PlayerHeroEffectAttrType_TeamerDivideCrystal=	85,		//当你某个英雄被击杀时，使你的其他英雄平均分配其剩余的水晶。
		PlayerHeroEffectAttrType_TeamerIncrCrystal	=	86,		//当你某个英雄被击杀时，使你的其他英雄获得1个水晶。
		PlayerHeroEffectAttrType_LHpSkillExpendDesc	=	87,		//当你英雄的生命值低于#%时，使其所有的技能消耗降低1点。
		PlayerHeroEffectAttrType_KillEnemyAddAttack	=	101,	//英雄每杀死一个敌人，英雄的攻击力就提升#%。
		PlayerHeroEffectAttrType_AttackRandomHitDown=	102,	//你的攻击有#%的概率击倒目标
		PlayerHeroEffectAttrType_MissAtkAddBlueCrystal=	103,	//每避开一次区域攻击，就获得两颗魔法水晶。
		PlayerHeroEffectAttrType_NoPhysicAtk		 =	104,	//免疫物理攻击伤害。
		PlayerHeroEffectAttrType_NoMagicAtk			=	105,	//免疫魔法攻击伤害。
		PlayerHeroEffectAttrType_DamageCriticalstrike=	106,	//只会受到1点伤害，但遭到暴击时，将受到#点伤害。
		PlayerHeroEffectAttrType_PropDamageDiff		 =	107,	//属性攻击造成的额外伤害将提升#%。
		PlayerHeroEffectAttrType_SummonHeroWhileDie	 =	108,	//英雄死亡之后，将随机召唤一个新的英雄。
		PlayerHeroEffectAttrType_BaseAttack_Add		 =	109,	//英雄攻击力提升#%。
		PlayerHeroEffectAttrType_Damage_Add			 =	110,	//英雄受到的伤害将提升#%。
		PlayerHeroEffectAttrType_PenetDamageAdd		 =	111,	//英雄破甲时 受到的伤害将提升#%。
		PlayerHeroEffectAttrType_AttackAddContinue	 =	112,	//攻击力会不断提升。(每间隔XX秒提升YY%)
		PlayerHeroEffectAttrType_SkillCrystalExpend	 =  113,	//英雄技能水晶固定消耗
		PlayerHeroEffectAttrType_PDefenceMulti		 =  114,	//物理防御力倍率
		PlayerHeroEffectAttrType_MDefenceMulti		 =  115,	//魔法防御力倍率
		PlayerHeroEffectAttrType_SkillDamageMutil	 =  116,	//技能伤害翻倍
		PlayerHeroEffectAttrType_CriticalstrikeMult  =  117,	//暴击伤害倍率
		PlayerHeroEffectAttrType_DecHpBfbPerSecs	 =  118,	//每秒流失生命值百分比值
		PlayerHeroEffectAttrType_CanDodgeDamageMult	 =  119,	//可躲避伤害陪率百分比值
		PlayerHeroEffectAttrType_Cure2Damage		 =  120,	//治疗变伤害
		PlayerHeroEffectAttrType_LowerHpRecoverHp	 =  121,	//生命值低于5%时，每秒恢复#%的生命值
		PlayerHeroEffectAttrType_MaxHpAddBfb		=   122,	//最大生命增加X%
		PlayerHeroEffectAttrType_AccuracyDecBfb		=   123,	//英雄命中率减少x%
	}

	public class PlayerHeroInfo : IMessage
	{
		private ProtoMemberUInt32 _m_toy_guid;	// 英雄的玩具模型id（单个玩家下唯一）
		private ProtoMemberUInt32 _m_toy_type;	// 玩具类别 ActorId
		private ProtoMemberUInt32 _m_toy_lv;	// 玩具等级
		private ProtoMemberUInt32 _m_toy_curr_exp;	// 玩具当前经验
		private ProtoMemberUInt32 _m_hero_type;	// 玩具所属英雄类型
		private ProtoMemberUInt32 _m_hero_quality;	// 玩具当前品质
		private ProtoMemberUInt32List _m_equipment_id;	// 装备id列表
		private ProtoMemberUInt32List _m_skill_id;	// 技能id列表
		private ProtoMemberEmbeddedList<PlayerHeroBaseAttrInfo> _m_toy_base_attr_list;	// 战斗基础属性列表
		private ProtoMemberEmbeddedList<PlayerHeroEffectAttrInfo> _m_toy_effect_attr_list;	// 战斗效果属性列表

		public PlayerHeroInfo()
		{
			_m_toy_guid = new ProtoMemberUInt32(1, false);
			_m_toy_type = new ProtoMemberUInt32(2, false);
			_m_toy_lv = new ProtoMemberUInt32(3, false);
			_m_toy_curr_exp = new ProtoMemberUInt32(4, false);
			_m_hero_type = new ProtoMemberUInt32(5, false);
			_m_hero_quality = new ProtoMemberUInt32(6, false);
			_m_equipment_id = new ProtoMemberUInt32List(7, false);
			_m_skill_id = new ProtoMemberUInt32List(8, false);
			_m_toy_base_attr_list = new ProtoMemberEmbeddedList<PlayerHeroBaseAttrInfo>(9, false);
			_m_toy_effect_attr_list = new ProtoMemberEmbeddedList<PlayerHeroEffectAttrInfo>(10, false);
		}

		public PlayerHeroInfo(uint __m_toy_guid, uint __m_toy_type, uint __m_toy_lv, uint __m_toy_curr_exp, uint __m_hero_type, uint __m_hero_quality)
		{
			_m_toy_guid = new ProtoMemberUInt32(1, false);
			_m_toy_guid.member_value = __m_toy_guid;
			_m_toy_type = new ProtoMemberUInt32(2, false);
			_m_toy_type.member_value = __m_toy_type;
			_m_toy_lv = new ProtoMemberUInt32(3, false);
			_m_toy_lv.member_value = __m_toy_lv;
			_m_toy_curr_exp = new ProtoMemberUInt32(4, false);
			_m_toy_curr_exp.member_value = __m_toy_curr_exp;
			_m_hero_type = new ProtoMemberUInt32(5, false);
			_m_hero_type.member_value = __m_hero_type;
			_m_hero_quality = new ProtoMemberUInt32(6, false);
			_m_hero_quality.member_value = __m_hero_quality;
			_m_equipment_id = new ProtoMemberUInt32List(7, false);
			_m_skill_id = new ProtoMemberUInt32List(8, false);
			_m_toy_base_attr_list = new ProtoMemberEmbeddedList<PlayerHeroBaseAttrInfo>(9, false);
			_m_toy_effect_attr_list = new ProtoMemberEmbeddedList<PlayerHeroEffectAttrInfo>(10, false);
		}

		public uint m_toy_guid
		{
			get{ return _m_toy_guid.member_value; }
			set{ _m_toy_guid.member_value = value; }
		}
		public bool has_m_toy_guid
		{
			get{ return _m_toy_guid.has_value; }
		}

		public uint m_toy_type
		{
			get{ return _m_toy_type.member_value; }
			set{ _m_toy_type.member_value = value; }
		}
		public bool has_m_toy_type
		{
			get{ return _m_toy_type.has_value; }
		}

		public uint m_toy_lv
		{
			get{ return _m_toy_lv.member_value; }
			set{ _m_toy_lv.member_value = value; }
		}
		public bool has_m_toy_lv
		{
			get{ return _m_toy_lv.has_value; }
		}

		public uint m_toy_curr_exp
		{
			get{ return _m_toy_curr_exp.member_value; }
			set{ _m_toy_curr_exp.member_value = value; }
		}
		public bool has_m_toy_curr_exp
		{
			get{ return _m_toy_curr_exp.has_value; }
		}

		public uint m_hero_type
		{
			get{ return _m_hero_type.member_value; }
			set{ _m_hero_type.member_value = value; }
		}
		public bool has_m_hero_type
		{
			get{ return _m_hero_type.has_value; }
		}

		public uint m_hero_quality
		{
			get{ return _m_hero_quality.member_value; }
			set{ _m_hero_quality.member_value = value; }
		}
		public bool has_m_hero_quality
		{
			get{ return _m_hero_quality.has_value; }
		}

		public System.Collections.Generic.List<uint> m_equipment_id
		{
			get{ return _m_equipment_id.member_value; }
		}
		public bool has_m_equipment_id
		{
			get{ return _m_equipment_id.has_value; }
		}

		public System.Collections.Generic.List<uint> m_skill_id
		{
			get{ return _m_skill_id.member_value; }
		}
		public bool has_m_skill_id
		{
			get{ return _m_skill_id.has_value; }
		}

		public System.Collections.Generic.List<PlayerHeroBaseAttrInfo> m_toy_base_attr_list
		{
			get{ return _m_toy_base_attr_list.member_value; }
		}
		public bool has_m_toy_base_attr_list
		{
			get{ return _m_toy_base_attr_list.has_value; }
		}

		public System.Collections.Generic.List<PlayerHeroEffectAttrInfo> m_toy_effect_attr_list
		{
			get{ return _m_toy_effect_attr_list.member_value; }
		}
		public bool has_m_toy_effect_attr_list
		{
			get{ return _m_toy_effect_attr_list.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_toy_guid.Serialize(_m_toy_guid.member_value, ref out_stream);

			count += _m_toy_type.Serialize(_m_toy_type.member_value, ref out_stream);

			count += _m_toy_lv.Serialize(_m_toy_lv.member_value, ref out_stream);

			count += _m_toy_curr_exp.Serialize(_m_toy_curr_exp.member_value, ref out_stream);

			count += _m_hero_type.Serialize(_m_hero_type.member_value, ref out_stream);

			count += _m_hero_quality.Serialize(_m_hero_quality.member_value, ref out_stream);

			foreach(uint one_member_value in _m_equipment_id.member_value)
			{
				count += _m_equipment_id.Serialize(one_member_value, ref out_stream);
			}

			foreach(uint one_member_value in _m_skill_id.member_value)
			{
				count += _m_skill_id.Serialize(one_member_value, ref out_stream);
			}

			foreach(PlayerHeroBaseAttrInfo one_member_value in _m_toy_base_attr_list.member_value)
			{
				count += _m_toy_base_attr_list.Serialize(one_member_value, ref out_stream);
			}

			foreach(PlayerHeroEffectAttrInfo one_member_value in _m_toy_effect_attr_list.member_value)
			{
				count += _m_toy_effect_attr_list.Serialize(one_member_value, ref out_stream);
			}

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_toy_guid = 0;
			one_count = _m_toy_guid.ParseFrom(ref temp_m_toy_guid, ref int_stream);
			if (0 < one_count)
			{
					_m_toy_guid.member_value = temp_m_toy_guid;
					count = count + one_count;
			}

			uint temp_m_toy_type = 0;
			one_count = _m_toy_type.ParseFrom(ref temp_m_toy_type, ref int_stream);
			if (0 < one_count)
			{
					_m_toy_type.member_value = temp_m_toy_type;
					count = count + one_count;
			}

			uint temp_m_toy_lv = 0;
			one_count = _m_toy_lv.ParseFrom(ref temp_m_toy_lv, ref int_stream);
			if (0 < one_count)
			{
					_m_toy_lv.member_value = temp_m_toy_lv;
					count = count + one_count;
			}

			uint temp_m_toy_curr_exp = 0;
			one_count = _m_toy_curr_exp.ParseFrom(ref temp_m_toy_curr_exp, ref int_stream);
			if (0 < one_count)
			{
					_m_toy_curr_exp.member_value = temp_m_toy_curr_exp;
					count = count + one_count;
			}

			uint temp_m_hero_type = 0;
			one_count = _m_hero_type.ParseFrom(ref temp_m_hero_type, ref int_stream);
			if (0 < one_count)
			{
					_m_hero_type.member_value = temp_m_hero_type;
					count = count + one_count;
			}

			uint temp_m_hero_quality = 0;
			one_count = _m_hero_quality.ParseFrom(ref temp_m_hero_quality, ref int_stream);
			if (0 < one_count)
			{
					_m_hero_quality.member_value = temp_m_hero_quality;
					count = count + one_count;
			}

			while (true)
			{
				uint one_member_value = 0;
				one_count = _m_equipment_id.ParseFrom(ref one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_equipment_id.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			while (true)
			{
				uint one_member_value = 0;
				one_count = _m_skill_id.ParseFrom(ref one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_skill_id.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			while (true)
			{
				PlayerHeroBaseAttrInfo one_member_value = new PlayerHeroBaseAttrInfo();
				one_count = _m_toy_base_attr_list.ParseFrom(one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_toy_base_attr_list.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			while (true)
			{
				PlayerHeroEffectAttrInfo one_member_value = new PlayerHeroEffectAttrInfo();
				one_count = _m_toy_effect_attr_list.ParseFrom(one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_toy_effect_attr_list.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			return count;
		}
	}

	public class PlayerHeroList : IMessage
	{
		private ProtoMemberEmbeddedList<PlayerHeroInfo> _m_hero_list;	// 角色英雄列表
		private ProtoMemberUInt32 _m_hero_count;	// 当前拥有的英雄个数

		public PlayerHeroList()
		{
			_m_hero_list = new ProtoMemberEmbeddedList<PlayerHeroInfo>(1, false);
			_m_hero_count = new ProtoMemberUInt32(2, false);
		}

		public PlayerHeroList(uint __m_hero_count)
		{
			_m_hero_list = new ProtoMemberEmbeddedList<PlayerHeroInfo>(1, false);
			_m_hero_count = new ProtoMemberUInt32(2, false);
			_m_hero_count.member_value = __m_hero_count;
		}

		public System.Collections.Generic.List<PlayerHeroInfo> m_hero_list
		{
			get{ return _m_hero_list.member_value; }
		}
		public bool has_m_hero_list
		{
			get{ return _m_hero_list.has_value; }
		}

		public uint m_hero_count
		{
			get{ return _m_hero_count.member_value; }
			set{ _m_hero_count.member_value = value; }
		}
		public bool has_m_hero_count
		{
			get{ return _m_hero_count.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			foreach(PlayerHeroInfo one_member_value in _m_hero_list.member_value)
			{
				count += _m_hero_list.Serialize(one_member_value, ref out_stream);
			}

			count += _m_hero_count.Serialize(_m_hero_count.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			while (true)
			{
				PlayerHeroInfo one_member_value = new PlayerHeroInfo();
				one_count = _m_hero_list.ParseFrom(one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_hero_list.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			uint temp_m_hero_count = 0;
			one_count = _m_hero_count.ParseFrom(ref temp_m_hero_count, ref int_stream);
			if (0 < one_count)
			{
					_m_hero_count.member_value = temp_m_hero_count;
					count = count + one_count;
			}

			return count;
		}
	}

	public enum PlayerHeroQualityType
	{
		HeroQualityType_Unknow = -1,	// 未知
		HeroQualityType_Iron = 0,		// 黑铁
		HeroQualityType_Bronze = 1,		// 青铜
		HeroQualityType_Silver = 2,		// 白银
		HeroQualityType_Gold = 3,		// 黄金
		HeroQualityType_Diamond = 4,	// 钻石
	}

	public enum PlayerHeroType
	{
		HeroType_Tank = 0,		// 坦克类型
		HeroType_AD = 1,		// 物理输出类型
		HeroType_AP = 2,		// 法术输出类型
		HeroType_Support = 3,	// 辅助类型
	}

	public class PlayerHuntingEventInfo : IMessage
	{
		private ProtoMemberUInt32 _m_point_id;	// 事件所在地图坐标点id
		private ProtoMemberUInt32 _m_event_id;	// 事件的id
		private ProtoMemberUInt64 _m_event_last_time;	// 事件的上次结束时间，用于判断当前能否触发
		private ProtoMemberUInt32 _m_monster_type;	// 事件对应怪物组的怪物类型
		private ProtoMemberUInt32 _m_monster_lv;	// 事件对应怪物组的怪物等级
		private ProtoMemberUInt32 _m_group_id;	// 事件对应怪物组id

		public PlayerHuntingEventInfo()
		{
			_m_point_id = new ProtoMemberUInt32(1, false);
			_m_event_id = new ProtoMemberUInt32(2, false);
			_m_event_last_time = new ProtoMemberUInt64(3, false);
			_m_monster_type = new ProtoMemberUInt32(4, false);
			_m_monster_lv = new ProtoMemberUInt32(5, false);
			_m_group_id = new ProtoMemberUInt32(6, false);
		}

		public PlayerHuntingEventInfo(uint __m_point_id, uint __m_event_id, ulong __m_event_last_time, uint __m_monster_type, uint __m_monster_lv, uint __m_group_id)
		{
			_m_point_id = new ProtoMemberUInt32(1, false);
			_m_point_id.member_value = __m_point_id;
			_m_event_id = new ProtoMemberUInt32(2, false);
			_m_event_id.member_value = __m_event_id;
			_m_event_last_time = new ProtoMemberUInt64(3, false);
			_m_event_last_time.member_value = __m_event_last_time;
			_m_monster_type = new ProtoMemberUInt32(4, false);
			_m_monster_type.member_value = __m_monster_type;
			_m_monster_lv = new ProtoMemberUInt32(5, false);
			_m_monster_lv.member_value = __m_monster_lv;
			_m_group_id = new ProtoMemberUInt32(6, false);
			_m_group_id.member_value = __m_group_id;
		}

		public uint m_point_id
		{
			get{ return _m_point_id.member_value; }
			set{ _m_point_id.member_value = value; }
		}
		public bool has_m_point_id
		{
			get{ return _m_point_id.has_value; }
		}

		public uint m_event_id
		{
			get{ return _m_event_id.member_value; }
			set{ _m_event_id.member_value = value; }
		}
		public bool has_m_event_id
		{
			get{ return _m_event_id.has_value; }
		}

		public ulong m_event_last_time
		{
			get{ return _m_event_last_time.member_value; }
			set{ _m_event_last_time.member_value = value; }
		}
		public bool has_m_event_last_time
		{
			get{ return _m_event_last_time.has_value; }
		}

		public uint m_monster_type
		{
			get{ return _m_monster_type.member_value; }
			set{ _m_monster_type.member_value = value; }
		}
		public bool has_m_monster_type
		{
			get{ return _m_monster_type.has_value; }
		}

		public uint m_monster_lv
		{
			get{ return _m_monster_lv.member_value; }
			set{ _m_monster_lv.member_value = value; }
		}
		public bool has_m_monster_lv
		{
			get{ return _m_monster_lv.has_value; }
		}

		public uint m_group_id
		{
			get{ return _m_group_id.member_value; }
			set{ _m_group_id.member_value = value; }
		}
		public bool has_m_group_id
		{
			get{ return _m_group_id.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_point_id.Serialize(_m_point_id.member_value, ref out_stream);

			count += _m_event_id.Serialize(_m_event_id.member_value, ref out_stream);

			count += _m_event_last_time.Serialize(_m_event_last_time.member_value, ref out_stream);

			count += _m_monster_type.Serialize(_m_monster_type.member_value, ref out_stream);

			count += _m_monster_lv.Serialize(_m_monster_lv.member_value, ref out_stream);

			count += _m_group_id.Serialize(_m_group_id.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_point_id = 0;
			one_count = _m_point_id.ParseFrom(ref temp_m_point_id, ref int_stream);
			if (0 < one_count)
			{
					_m_point_id.member_value = temp_m_point_id;
					count = count + one_count;
			}

			uint temp_m_event_id = 0;
			one_count = _m_event_id.ParseFrom(ref temp_m_event_id, ref int_stream);
			if (0 < one_count)
			{
					_m_event_id.member_value = temp_m_event_id;
					count = count + one_count;
			}

			ulong temp_m_event_last_time = 0;
			one_count = _m_event_last_time.ParseFrom(ref temp_m_event_last_time, ref int_stream);
			if (0 < one_count)
			{
					_m_event_last_time.member_value = temp_m_event_last_time;
					count = count + one_count;
			}

			uint temp_m_monster_type = 0;
			one_count = _m_monster_type.ParseFrom(ref temp_m_monster_type, ref int_stream);
			if (0 < one_count)
			{
					_m_monster_type.member_value = temp_m_monster_type;
					count = count + one_count;
			}

			uint temp_m_monster_lv = 0;
			one_count = _m_monster_lv.ParseFrom(ref temp_m_monster_lv, ref int_stream);
			if (0 < one_count)
			{
					_m_monster_lv.member_value = temp_m_monster_lv;
					count = count + one_count;
			}

			uint temp_m_group_id = 0;
			one_count = _m_group_id.ParseFrom(ref temp_m_group_id, ref int_stream);
			if (0 < one_count)
			{
					_m_group_id.member_value = temp_m_group_id;
					count = count + one_count;
			}

			return count;
		}
	}

	public class PlayerHuntingEventList : IMessage
	{
		private ProtoMemberEmbeddedList<PlayerHuntingEventInfo> _m_events;	// 当前等级的狩猎地图事件列表

		public PlayerHuntingEventList()
		{
			_m_events = new ProtoMemberEmbeddedList<PlayerHuntingEventInfo>(1, false);
		}

		public System.Collections.Generic.List<PlayerHuntingEventInfo> m_events
		{
			get{ return _m_events.member_value; }
		}
		public bool has_m_events
		{
			get{ return _m_events.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			foreach(PlayerHuntingEventInfo one_member_value in _m_events.member_value)
			{
				count += _m_events.Serialize(one_member_value, ref out_stream);
			}

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			while (true)
			{
				PlayerHuntingEventInfo one_member_value = new PlayerHuntingEventInfo();
				one_count = _m_events.ParseFrom(one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_events.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			return count;
		}
	}

	public class PlayerHuntingInfo : IMessage
	{
		private ProtoMemberUInt32 _m_strength;	// 当前体力值
		private ProtoMemberEmbeddedList<PlayerHuntingMapInfo> _m_maps;	// 当前等级的狩猎地图事件列表

		public PlayerHuntingInfo()
		{
			_m_strength = new ProtoMemberUInt32(1, false);
			_m_maps = new ProtoMemberEmbeddedList<PlayerHuntingMapInfo>(2, false);
		}

		public PlayerHuntingInfo(uint __m_strength)
		{
			_m_strength = new ProtoMemberUInt32(1, false);
			_m_strength.member_value = __m_strength;
			_m_maps = new ProtoMemberEmbeddedList<PlayerHuntingMapInfo>(2, false);
		}

		public uint m_strength
		{
			get{ return _m_strength.member_value; }
			set{ _m_strength.member_value = value; }
		}
		public bool has_m_strength
		{
			get{ return _m_strength.has_value; }
		}

		public System.Collections.Generic.List<PlayerHuntingMapInfo> m_maps
		{
			get{ return _m_maps.member_value; }
		}
		public bool has_m_maps
		{
			get{ return _m_maps.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_strength.Serialize(_m_strength.member_value, ref out_stream);

			foreach(PlayerHuntingMapInfo one_member_value in _m_maps.member_value)
			{
				count += _m_maps.Serialize(one_member_value, ref out_stream);
			}

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_strength = 0;
			one_count = _m_strength.ParseFrom(ref temp_m_strength, ref int_stream);
			if (0 < one_count)
			{
					_m_strength.member_value = temp_m_strength;
					count = count + one_count;
			}

			while (true)
			{
				PlayerHuntingMapInfo one_member_value = new PlayerHuntingMapInfo();
				one_count = _m_maps.ParseFrom(one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_maps.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			return count;
		}
	}

	public class PlayerHuntingMapInfo : IMessage
	{
		private ProtoMemberUInt32 _m_world_id;	// 事件所在地图id
		private ProtoMemberUInt64 _m_last_time;	// 上次进入地图时间，用于每天首次的地图刷新
		private ProtoMemberEmbeddedList<PlayerHuntingEventInfo> _m_events;	// 当前等级的狩猎地图事件列表
		private ProtoMemberUInt32 _m_hunting_lv;	// 该地图的当前狩猎等级
		private ProtoMemberUInt32 _m_passed_chapter;	// 该地图的已通过狩猎关卡

		public PlayerHuntingMapInfo()
		{
			_m_world_id = new ProtoMemberUInt32(1, false);
			_m_last_time = new ProtoMemberUInt64(2, false);
			_m_events = new ProtoMemberEmbeddedList<PlayerHuntingEventInfo>(3, false);
			_m_hunting_lv = new ProtoMemberUInt32(4, false);
			_m_passed_chapter = new ProtoMemberUInt32(5, false);
		}

		public PlayerHuntingMapInfo(uint __m_world_id, ulong __m_last_time, uint __m_hunting_lv, uint __m_passed_chapter)
		{
			_m_world_id = new ProtoMemberUInt32(1, false);
			_m_world_id.member_value = __m_world_id;
			_m_last_time = new ProtoMemberUInt64(2, false);
			_m_last_time.member_value = __m_last_time;
			_m_events = new ProtoMemberEmbeddedList<PlayerHuntingEventInfo>(3, false);
			_m_hunting_lv = new ProtoMemberUInt32(4, false);
			_m_hunting_lv.member_value = __m_hunting_lv;
			_m_passed_chapter = new ProtoMemberUInt32(5, false);
			_m_passed_chapter.member_value = __m_passed_chapter;
		}

		public uint m_world_id
		{
			get{ return _m_world_id.member_value; }
			set{ _m_world_id.member_value = value; }
		}
		public bool has_m_world_id
		{
			get{ return _m_world_id.has_value; }
		}

		public ulong m_last_time
		{
			get{ return _m_last_time.member_value; }
			set{ _m_last_time.member_value = value; }
		}
		public bool has_m_last_time
		{
			get{ return _m_last_time.has_value; }
		}

		public System.Collections.Generic.List<PlayerHuntingEventInfo> m_events
		{
			get{ return _m_events.member_value; }
		}
		public bool has_m_events
		{
			get{ return _m_events.has_value; }
		}

		public uint m_hunting_lv
		{
			get{ return _m_hunting_lv.member_value; }
			set{ _m_hunting_lv.member_value = value; }
		}
		public bool has_m_hunting_lv
		{
			get{ return _m_hunting_lv.has_value; }
		}

		public uint m_passed_chapter
		{
			get{ return _m_passed_chapter.member_value; }
			set{ _m_passed_chapter.member_value = value; }
		}
		public bool has_m_passed_chapter
		{
			get{ return _m_passed_chapter.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_world_id.Serialize(_m_world_id.member_value, ref out_stream);

			count += _m_last_time.Serialize(_m_last_time.member_value, ref out_stream);

			foreach(PlayerHuntingEventInfo one_member_value in _m_events.member_value)
			{
				count += _m_events.Serialize(one_member_value, ref out_stream);
			}

			count += _m_hunting_lv.Serialize(_m_hunting_lv.member_value, ref out_stream);

			count += _m_passed_chapter.Serialize(_m_passed_chapter.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_world_id = 0;
			one_count = _m_world_id.ParseFrom(ref temp_m_world_id, ref int_stream);
			if (0 < one_count)
			{
					_m_world_id.member_value = temp_m_world_id;
					count = count + one_count;
			}

			ulong temp_m_last_time = 0;
			one_count = _m_last_time.ParseFrom(ref temp_m_last_time, ref int_stream);
			if (0 < one_count)
			{
					_m_last_time.member_value = temp_m_last_time;
					count = count + one_count;
			}

			while (true)
			{
				PlayerHuntingEventInfo one_member_value = new PlayerHuntingEventInfo();
				one_count = _m_events.ParseFrom(one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_events.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			uint temp_m_hunting_lv = 0;
			one_count = _m_hunting_lv.ParseFrom(ref temp_m_hunting_lv, ref int_stream);
			if (0 < one_count)
			{
					_m_hunting_lv.member_value = temp_m_hunting_lv;
					count = count + one_count;
			}

			uint temp_m_passed_chapter = 0;
			one_count = _m_passed_chapter.ParseFrom(ref temp_m_passed_chapter, ref int_stream);
			if (0 < one_count)
			{
					_m_passed_chapter.member_value = temp_m_passed_chapter;
					count = count + one_count;
			}

			return count;
		}
	}

	public class PlayerId : IMessage
	{
		private ProtoMemberUInt32 _m_account_id;	// 角色id == 账号id
		private ProtoMemberUInt32 _m_server_id;	// 所属服id
		private ProtoMemberUInt32 _m_player_index;	// 本服的第几个角色(一个账号,一个服,最多3个角色)

		public PlayerId()
		{
			_m_account_id = new ProtoMemberUInt32(1, false);
			_m_server_id = new ProtoMemberUInt32(2, false);
			_m_player_index = new ProtoMemberUInt32(3, false);
		}

		public PlayerId(uint __m_account_id, uint __m_server_id, uint __m_player_index)
		{
			_m_account_id = new ProtoMemberUInt32(1, false);
			_m_account_id.member_value = __m_account_id;
			_m_server_id = new ProtoMemberUInt32(2, false);
			_m_server_id.member_value = __m_server_id;
			_m_player_index = new ProtoMemberUInt32(3, false);
			_m_player_index.member_value = __m_player_index;
		}

		public uint m_account_id
		{
			get{ return _m_account_id.member_value; }
			set{ _m_account_id.member_value = value; }
		}
		public bool has_m_account_id
		{
			get{ return _m_account_id.has_value; }
		}

		public uint m_server_id
		{
			get{ return _m_server_id.member_value; }
			set{ _m_server_id.member_value = value; }
		}
		public bool has_m_server_id
		{
			get{ return _m_server_id.has_value; }
		}

		public uint m_player_index
		{
			get{ return _m_player_index.member_value; }
			set{ _m_player_index.member_value = value; }
		}
		public bool has_m_player_index
		{
			get{ return _m_player_index.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_account_id.Serialize(_m_account_id.member_value, ref out_stream);

			count += _m_server_id.Serialize(_m_server_id.member_value, ref out_stream);

			count += _m_player_index.Serialize(_m_player_index.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_account_id = 0;
			one_count = _m_account_id.ParseFrom(ref temp_m_account_id, ref int_stream);
			if (0 < one_count)
			{
					_m_account_id.member_value = temp_m_account_id;
					count = count + one_count;
			}

			uint temp_m_server_id = 0;
			one_count = _m_server_id.ParseFrom(ref temp_m_server_id, ref int_stream);
			if (0 < one_count)
			{
					_m_server_id.member_value = temp_m_server_id;
					count = count + one_count;
			}

			uint temp_m_player_index = 0;
			one_count = _m_player_index.ParseFrom(ref temp_m_player_index, ref int_stream);
			if (0 < one_count)
			{
					_m_player_index.member_value = temp_m_player_index;
					count = count + one_count;
			}

			return count;
		}
	}

	public class PlayerIndianaJonesInfo : IMessage
	{
		private ProtoMemberUInt64 _m_last_battle_time;	// 上一次战斗时间，用于判断是否是今日首场战斗
		private ProtoMemberUInt32 _m_today_win_count;	// 今日已胜利场次，用于判断是否是今日首胜
		private ProtoMemberUInt32 _m_today_battle_count;	// 今日已参加场次，用于计算前三场的鼓励状态

		public PlayerIndianaJonesInfo()
		{
			_m_last_battle_time = new ProtoMemberUInt64(1, false);
			_m_today_win_count = new ProtoMemberUInt32(2, false);
			_m_today_battle_count = new ProtoMemberUInt32(3, false);
		}

		public PlayerIndianaJonesInfo(ulong __m_last_battle_time, uint __m_today_win_count, uint __m_today_battle_count)
		{
			_m_last_battle_time = new ProtoMemberUInt64(1, false);
			_m_last_battle_time.member_value = __m_last_battle_time;
			_m_today_win_count = new ProtoMemberUInt32(2, false);
			_m_today_win_count.member_value = __m_today_win_count;
			_m_today_battle_count = new ProtoMemberUInt32(3, false);
			_m_today_battle_count.member_value = __m_today_battle_count;
		}

		public ulong m_last_battle_time
		{
			get{ return _m_last_battle_time.member_value; }
			set{ _m_last_battle_time.member_value = value; }
		}
		public bool has_m_last_battle_time
		{
			get{ return _m_last_battle_time.has_value; }
		}

		public uint m_today_win_count
		{
			get{ return _m_today_win_count.member_value; }
			set{ _m_today_win_count.member_value = value; }
		}
		public bool has_m_today_win_count
		{
			get{ return _m_today_win_count.has_value; }
		}

		public uint m_today_battle_count
		{
			get{ return _m_today_battle_count.member_value; }
			set{ _m_today_battle_count.member_value = value; }
		}
		public bool has_m_today_battle_count
		{
			get{ return _m_today_battle_count.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_last_battle_time.Serialize(_m_last_battle_time.member_value, ref out_stream);

			count += _m_today_win_count.Serialize(_m_today_win_count.member_value, ref out_stream);

			count += _m_today_battle_count.Serialize(_m_today_battle_count.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			ulong temp_m_last_battle_time = 0;
			one_count = _m_last_battle_time.ParseFrom(ref temp_m_last_battle_time, ref int_stream);
			if (0 < one_count)
			{
					_m_last_battle_time.member_value = temp_m_last_battle_time;
					count = count + one_count;
			}

			uint temp_m_today_win_count = 0;
			one_count = _m_today_win_count.ParseFrom(ref temp_m_today_win_count, ref int_stream);
			if (0 < one_count)
			{
					_m_today_win_count.member_value = temp_m_today_win_count;
					count = count + one_count;
			}

			uint temp_m_today_battle_count = 0;
			one_count = _m_today_battle_count.ParseFrom(ref temp_m_today_battle_count, ref int_stream);
			if (0 < one_count)
			{
					_m_today_battle_count.member_value = temp_m_today_battle_count;
					count = count + one_count;
			}

			return count;
		}
	}

	public class PlayerInstanceInfo : IMessage
	{
		private ProtoMemberUInt64 _m_begin_time;	// 开始本赛季的时间，用于新赛季积分清零
		private ProtoMemberUInt32 _m_season;	// 本赛季id
		private ProtoMemberUInt32 _m_lv;	// 当前等级
		private ProtoMemberUInt32 _m_exp;	// 当前经验
		private ProtoMemberUInt32 _m_star;	// 当前星章

		public PlayerInstanceInfo()
		{
			_m_begin_time = new ProtoMemberUInt64(1, false);
			_m_season = new ProtoMemberUInt32(2, false);
			_m_lv = new ProtoMemberUInt32(3, false);
			_m_exp = new ProtoMemberUInt32(4, false);
			_m_star = new ProtoMemberUInt32(5, false);
		}

		public PlayerInstanceInfo(ulong __m_begin_time, uint __m_season, uint __m_lv, uint __m_exp, uint __m_star)
		{
			_m_begin_time = new ProtoMemberUInt64(1, false);
			_m_begin_time.member_value = __m_begin_time;
			_m_season = new ProtoMemberUInt32(2, false);
			_m_season.member_value = __m_season;
			_m_lv = new ProtoMemberUInt32(3, false);
			_m_lv.member_value = __m_lv;
			_m_exp = new ProtoMemberUInt32(4, false);
			_m_exp.member_value = __m_exp;
			_m_star = new ProtoMemberUInt32(5, false);
			_m_star.member_value = __m_star;
		}

		public ulong m_begin_time
		{
			get{ return _m_begin_time.member_value; }
			set{ _m_begin_time.member_value = value; }
		}
		public bool has_m_begin_time
		{
			get{ return _m_begin_time.has_value; }
		}

		public uint m_season
		{
			get{ return _m_season.member_value; }
			set{ _m_season.member_value = value; }
		}
		public bool has_m_season
		{
			get{ return _m_season.has_value; }
		}

		public uint m_lv
		{
			get{ return _m_lv.member_value; }
			set{ _m_lv.member_value = value; }
		}
		public bool has_m_lv
		{
			get{ return _m_lv.has_value; }
		}

		public uint m_exp
		{
			get{ return _m_exp.member_value; }
			set{ _m_exp.member_value = value; }
		}
		public bool has_m_exp
		{
			get{ return _m_exp.has_value; }
		}

		public uint m_star
		{
			get{ return _m_star.member_value; }
			set{ _m_star.member_value = value; }
		}
		public bool has_m_star
		{
			get{ return _m_star.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_begin_time.Serialize(_m_begin_time.member_value, ref out_stream);

			count += _m_season.Serialize(_m_season.member_value, ref out_stream);

			count += _m_lv.Serialize(_m_lv.member_value, ref out_stream);

			count += _m_exp.Serialize(_m_exp.member_value, ref out_stream);

			count += _m_star.Serialize(_m_star.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			ulong temp_m_begin_time = 0;
			one_count = _m_begin_time.ParseFrom(ref temp_m_begin_time, ref int_stream);
			if (0 < one_count)
			{
					_m_begin_time.member_value = temp_m_begin_time;
					count = count + one_count;
			}

			uint temp_m_season = 0;
			one_count = _m_season.ParseFrom(ref temp_m_season, ref int_stream);
			if (0 < one_count)
			{
					_m_season.member_value = temp_m_season;
					count = count + one_count;
			}

			uint temp_m_lv = 0;
			one_count = _m_lv.ParseFrom(ref temp_m_lv, ref int_stream);
			if (0 < one_count)
			{
					_m_lv.member_value = temp_m_lv;
					count = count + one_count;
			}

			uint temp_m_exp = 0;
			one_count = _m_exp.ParseFrom(ref temp_m_exp, ref int_stream);
			if (0 < one_count)
			{
					_m_exp.member_value = temp_m_exp;
					count = count + one_count;
			}

			uint temp_m_star = 0;
			one_count = _m_star.ParseFrom(ref temp_m_star, ref int_stream);
			if (0 < one_count)
			{
					_m_star.member_value = temp_m_star;
					count = count + one_count;
			}

			return count;
		}
	}

	public enum PlayerItemId
	{
		ItemId_Gold = 1,						// 金币
		ItemId_Resources = 2,					// 分解材料
		ItemId_RMB = 3,							// rmb充值钻石
		ItemId_PVECoin = 4,						// PVE代币
		ItemId_PVPCoin = 5,						// PVP代币
		ItemId_HeroExp_Begin = 10,				// 月亮药水（英雄经验药水）起始id
		ItemId_HeroExp_End = 13,				// 月亮药水（英雄经验药水）截至id
		ItemId_SummonerExp_Begin = 20,			// 太阳药水（召唤师经验药水）起始id
		ItemId_SummonerExp_End = 23,			// 太阳药水（召唤师经验药水）截至id
		ItemId_ChestBox_Begin = 90001,			// 宝箱起始id
		ItemId_ChestBox_End = 90003,			// 宝箱截至id
		ItemId_MajorIngredient_Begin = 20010,	// 主料起始id
		ItemId_MajorIngredient_End = 20200,		// 主料截至id
		ItemId_MinorIngredient_Begin = 30010,	// 辅料起始id
		ItemId_MinorIngredient_End = 30400,		// 辅料截至id
	}

	public class PlayerItemInfo : IMessage
	{
		private ProtoMemberUInt32 _m_item_id;	// 道具表id
		private ProtoMemberUInt32 _m_item_count;	// 道具数量

		public PlayerItemInfo()
		{
			_m_item_id = new ProtoMemberUInt32(1, false);
			_m_item_count = new ProtoMemberUInt32(2, false);
		}

		public PlayerItemInfo(uint __m_item_id, uint __m_item_count)
		{
			_m_item_id = new ProtoMemberUInt32(1, false);
			_m_item_id.member_value = __m_item_id;
			_m_item_count = new ProtoMemberUInt32(2, false);
			_m_item_count.member_value = __m_item_count;
		}

		public uint m_item_id
		{
			get{ return _m_item_id.member_value; }
			set{ _m_item_id.member_value = value; }
		}
		public bool has_m_item_id
		{
			get{ return _m_item_id.has_value; }
		}

		public uint m_item_count
		{
			get{ return _m_item_count.member_value; }
			set{ _m_item_count.member_value = value; }
		}
		public bool has_m_item_count
		{
			get{ return _m_item_count.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_item_id.Serialize(_m_item_id.member_value, ref out_stream);

			count += _m_item_count.Serialize(_m_item_count.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_item_id = 0;
			one_count = _m_item_id.ParseFrom(ref temp_m_item_id, ref int_stream);
			if (0 < one_count)
			{
					_m_item_id.member_value = temp_m_item_id;
					count = count + one_count;
			}

			uint temp_m_item_count = 0;
			one_count = _m_item_count.ParseFrom(ref temp_m_item_count, ref int_stream);
			if (0 < one_count)
			{
					_m_item_count.member_value = temp_m_item_count;
					count = count + one_count;
			}

			return count;
		}
	}

	public class PlayerItemList : IMessage
	{
		private ProtoMemberEmbeddedList<PlayerItemInfo> _m_item_list;	// 角色道具列表
		private ProtoMemberEmbeddedList<PlayUsedItemInfo> _m_used_item_list;	//已使用道具信息

		public PlayerItemList()
		{
			_m_item_list = new ProtoMemberEmbeddedList<PlayerItemInfo>(1, false);
			_m_used_item_list = new ProtoMemberEmbeddedList<PlayUsedItemInfo>(2, false);
		}

		public System.Collections.Generic.List<PlayerItemInfo> m_item_list
		{
			get{ return _m_item_list.member_value; }
		}
		public bool has_m_item_list
		{
			get{ return _m_item_list.has_value; }
		}

		public System.Collections.Generic.List<PlayUsedItemInfo> m_used_item_list
		{
			get{ return _m_used_item_list.member_value; }
		}
		public bool has_m_used_item_list
		{
			get{ return _m_used_item_list.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			foreach(PlayerItemInfo one_member_value in _m_item_list.member_value)
			{
				count += _m_item_list.Serialize(one_member_value, ref out_stream);
			}

			foreach(PlayUsedItemInfo one_member_value in _m_used_item_list.member_value)
			{
				count += _m_used_item_list.Serialize(one_member_value, ref out_stream);
			}

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			while (true)
			{
				PlayerItemInfo one_member_value = new PlayerItemInfo();
				one_count = _m_item_list.ParseFrom(one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_item_list.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			while (true)
			{
				PlayUsedItemInfo one_member_value = new PlayUsedItemInfo();
				one_count = _m_used_item_list.ParseFrom(one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_used_item_list.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			return count;
		}
	}

	public class PlayerList : IMessage
	{
		private ProtoMemberUInt32 _m_account_id;	// 角色id == 账号id
		private ProtoMemberUInt32 _m_server_id;	// 所属服id
		private ProtoMemberUInt32List _m_player_index_list;	// 角色信息列表

		public PlayerList()
		{
			_m_account_id = new ProtoMemberUInt32(1, true);
			_m_server_id = new ProtoMemberUInt32(2, true);
			_m_player_index_list = new ProtoMemberUInt32List(3, false);
		}

		public PlayerList(uint __m_account_id, uint __m_server_id)
		{
			_m_account_id = new ProtoMemberUInt32(1, true);
			_m_account_id.member_value = __m_account_id;
			_m_server_id = new ProtoMemberUInt32(2, true);
			_m_server_id.member_value = __m_server_id;
			_m_player_index_list = new ProtoMemberUInt32List(3, false);
		}

		public uint m_account_id
		{
			get{ return _m_account_id.member_value; }
			set{ _m_account_id.member_value = value; }
		}
		public bool has_m_account_id
		{
			get{ return _m_account_id.has_value; }
		}

		public uint m_server_id
		{
			get{ return _m_server_id.member_value; }
			set{ _m_server_id.member_value = value; }
		}
		public bool has_m_server_id
		{
			get{ return _m_server_id.has_value; }
		}

		public System.Collections.Generic.List<uint> m_player_index_list
		{
			get{ return _m_player_index_list.member_value; }
		}
		public bool has_m_player_index_list
		{
			get{ return _m_player_index_list.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_account_id.Serialize(_m_account_id.member_value, ref out_stream);

			count += _m_server_id.Serialize(_m_server_id.member_value, ref out_stream);

			foreach(uint one_member_value in _m_player_index_list.member_value)
			{
				count += _m_player_index_list.Serialize(one_member_value, ref out_stream);
			}

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_account_id = 0;
			one_count = _m_account_id.ParseFrom(ref temp_m_account_id, ref int_stream);
			if (0 < one_count)
			{
					_m_account_id.member_value = temp_m_account_id;
					count = count + one_count;
			}

			uint temp_m_server_id = 0;
			one_count = _m_server_id.ParseFrom(ref temp_m_server_id, ref int_stream);
			if (0 < one_count)
			{
					_m_server_id.member_value = temp_m_server_id;
					count = count + one_count;
			}

			while (true)
			{
				uint one_member_value = 0;
				one_count = _m_player_index_list.ParseFrom(ref one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_player_index_list.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			return count;
		}
	}

	public class PlayerLogInfo : IMessage
	{
		private ProtoMemberUInt32 _m_LogType;	// log类型
		private ProtoMemberUInt32 _m_PropertyType;	// 属性类型
		private ProtoMemberInt32 _m_PropertyValue;	// 属性值

		public PlayerLogInfo()
		{
			_m_LogType = new ProtoMemberUInt32(1, false);
			_m_PropertyType = new ProtoMemberUInt32(2, false);
			_m_PropertyValue = new ProtoMemberInt32(3, false);
		}

		public PlayerLogInfo(uint __m_LogType, uint __m_PropertyType, int __m_PropertyValue)
		{
			_m_LogType = new ProtoMemberUInt32(1, false);
			_m_LogType.member_value = __m_LogType;
			_m_PropertyType = new ProtoMemberUInt32(2, false);
			_m_PropertyType.member_value = __m_PropertyType;
			_m_PropertyValue = new ProtoMemberInt32(3, false);
			_m_PropertyValue.member_value = __m_PropertyValue;
		}

		public uint m_LogType
		{
			get{ return _m_LogType.member_value; }
			set{ _m_LogType.member_value = value; }
		}
		public bool has_m_LogType
		{
			get{ return _m_LogType.has_value; }
		}

		public uint m_PropertyType
		{
			get{ return _m_PropertyType.member_value; }
			set{ _m_PropertyType.member_value = value; }
		}
		public bool has_m_PropertyType
		{
			get{ return _m_PropertyType.has_value; }
		}

		public int m_PropertyValue
		{
			get{ return _m_PropertyValue.member_value; }
			set{ _m_PropertyValue.member_value = value; }
		}
		public bool has_m_PropertyValue
		{
			get{ return _m_PropertyValue.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_LogType.Serialize(_m_LogType.member_value, ref out_stream);

			count += _m_PropertyType.Serialize(_m_PropertyType.member_value, ref out_stream);

			count += _m_PropertyValue.Serialize(_m_PropertyValue.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_LogType = 0;
			one_count = _m_LogType.ParseFrom(ref temp_m_LogType, ref int_stream);
			if (0 < one_count)
			{
					_m_LogType.member_value = temp_m_LogType;
					count = count + one_count;
			}

			uint temp_m_PropertyType = 0;
			one_count = _m_PropertyType.ParseFrom(ref temp_m_PropertyType, ref int_stream);
			if (0 < one_count)
			{
					_m_PropertyType.member_value = temp_m_PropertyType;
					count = count + one_count;
			}

			int temp_m_PropertyValue = 0;
			one_count = _m_PropertyValue.ParseFrom(ref temp_m_PropertyValue, ref int_stream);
			if (0 < one_count)
			{
					_m_PropertyValue.member_value = temp_m_PropertyValue;
					count = count + one_count;
			}

			return count;
		}
	}

	public class PlayerLogList : IMessage
	{
		private ProtoMemberUInt64 _m_Time;	// log时间戳
		private ProtoMemberUInt32 _m_UnionId;	// 所属公会id
		private ProtoMemberString _m_PlayerName;	// 角色名
		private ProtoMemberString _m_PlayerIP;	// 登录ip
		private ProtoMemberString _m_PlayerIMEI;	// 登录设备id
		private ProtoMemberEmbeddedList<PlayerLogInfo> _m_Logs;	// log属性列表

		public PlayerLogList()
		{
			_m_Time = new ProtoMemberUInt64(1, true);
			_m_UnionId = new ProtoMemberUInt32(2, false);
			_m_PlayerName = new ProtoMemberString(3, false);
			_m_PlayerIP = new ProtoMemberString(4, false);
			_m_PlayerIMEI = new ProtoMemberString(5, false);
			_m_Logs = new ProtoMemberEmbeddedList<PlayerLogInfo>(6, false);
		}

		public PlayerLogList(ulong __m_Time, uint __m_UnionId, string __m_PlayerName, string __m_PlayerIP, string __m_PlayerIMEI)
		{
			_m_Time = new ProtoMemberUInt64(1, true);
			_m_Time.member_value = __m_Time;
			_m_UnionId = new ProtoMemberUInt32(2, false);
			_m_UnionId.member_value = __m_UnionId;
			_m_PlayerName = new ProtoMemberString(3, false);
			_m_PlayerName.member_value = __m_PlayerName;
			_m_PlayerIP = new ProtoMemberString(4, false);
			_m_PlayerIP.member_value = __m_PlayerIP;
			_m_PlayerIMEI = new ProtoMemberString(5, false);
			_m_PlayerIMEI.member_value = __m_PlayerIMEI;
			_m_Logs = new ProtoMemberEmbeddedList<PlayerLogInfo>(6, false);
		}

		public ulong m_Time
		{
			get{ return _m_Time.member_value; }
			set{ _m_Time.member_value = value; }
		}
		public bool has_m_Time
		{
			get{ return _m_Time.has_value; }
		}

		public uint m_UnionId
		{
			get{ return _m_UnionId.member_value; }
			set{ _m_UnionId.member_value = value; }
		}
		public bool has_m_UnionId
		{
			get{ return _m_UnionId.has_value; }
		}

		public string m_PlayerName
		{
			get{ return _m_PlayerName.member_value; }
			set{ _m_PlayerName.member_value = value; }
		}
		public bool has_m_PlayerName
		{
			get{ return _m_PlayerName.has_value; }
		}

		public string m_PlayerIP
		{
			get{ return _m_PlayerIP.member_value; }
			set{ _m_PlayerIP.member_value = value; }
		}
		public bool has_m_PlayerIP
		{
			get{ return _m_PlayerIP.has_value; }
		}

		public string m_PlayerIMEI
		{
			get{ return _m_PlayerIMEI.member_value; }
			set{ _m_PlayerIMEI.member_value = value; }
		}
		public bool has_m_PlayerIMEI
		{
			get{ return _m_PlayerIMEI.has_value; }
		}

		public System.Collections.Generic.List<PlayerLogInfo> m_Logs
		{
			get{ return _m_Logs.member_value; }
		}
		public bool has_m_Logs
		{
			get{ return _m_Logs.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_Time.Serialize(_m_Time.member_value, ref out_stream);

			count += _m_UnionId.Serialize(_m_UnionId.member_value, ref out_stream);

			count += _m_PlayerName.Serialize(_m_PlayerName.member_value, ref out_stream);

			count += _m_PlayerIP.Serialize(_m_PlayerIP.member_value, ref out_stream);

			count += _m_PlayerIMEI.Serialize(_m_PlayerIMEI.member_value, ref out_stream);

			foreach(PlayerLogInfo one_member_value in _m_Logs.member_value)
			{
				count += _m_Logs.Serialize(one_member_value, ref out_stream);
			}

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			ulong temp_m_Time = 0;
			one_count = _m_Time.ParseFrom(ref temp_m_Time, ref int_stream);
			if (0 < one_count)
			{
					_m_Time.member_value = temp_m_Time;
					count = count + one_count;
			}

			uint temp_m_UnionId = 0;
			one_count = _m_UnionId.ParseFrom(ref temp_m_UnionId, ref int_stream);
			if (0 < one_count)
			{
					_m_UnionId.member_value = temp_m_UnionId;
					count = count + one_count;
			}

			string temp_m_PlayerName = "";
			one_count = _m_PlayerName.ParseFrom(ref temp_m_PlayerName, ref int_stream);
			if (0 < one_count)
			{
					_m_PlayerName.member_value = temp_m_PlayerName;
					count = count + one_count;
			}

			string temp_m_PlayerIP = "";
			one_count = _m_PlayerIP.ParseFrom(ref temp_m_PlayerIP, ref int_stream);
			if (0 < one_count)
			{
					_m_PlayerIP.member_value = temp_m_PlayerIP;
					count = count + one_count;
			}

			string temp_m_PlayerIMEI = "";
			one_count = _m_PlayerIMEI.ParseFrom(ref temp_m_PlayerIMEI, ref int_stream);
			if (0 < one_count)
			{
					_m_PlayerIMEI.member_value = temp_m_PlayerIMEI;
					count = count + one_count;
			}

			while (true)
			{
				PlayerLogInfo one_member_value = new PlayerLogInfo();
				one_count = _m_Logs.ParseFrom(one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_Logs.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			return count;
		}
	}

	public class PlayerMailInfo : IMessage
	{
		private ProtoMemberUInt32 _m_mail_id;	// 邮件唯一id
		private ProtoMemberUInt64 _m_send_time;	// 发送时间
		private ProtoMemberUInt64 _m_delete_time;	// 自动删除截止时间
		private ProtoMemberUInt32 _m_table_id;	// 邮件对应表格id
		private ProtoMemberString _m_title;	// 邮件标题
		private ProtoMemberString _m_contents;	// 邮件内容
		private ProtoMemberEmbeddedList<PlayerItemInfo> _m_items;	// 道具列表
		private ProtoMemberBool _m_is_read;	// 是否已读
		private ProtoMemberBool _m_is_receive;	// 是否已领取

		public PlayerMailInfo()
		{
			_m_mail_id = new ProtoMemberUInt32(1, false);
			_m_send_time = new ProtoMemberUInt64(2, false);
			_m_delete_time = new ProtoMemberUInt64(3, false);
			_m_table_id = new ProtoMemberUInt32(4, false);
			_m_title = new ProtoMemberString(5, false);
			_m_contents = new ProtoMemberString(6, false);
			_m_items = new ProtoMemberEmbeddedList<PlayerItemInfo>(7, false);
			_m_is_read = new ProtoMemberBool(8, false);
			_m_is_receive = new ProtoMemberBool(9, false);
		}

		public PlayerMailInfo(uint __m_mail_id, ulong __m_send_time, ulong __m_delete_time, uint __m_table_id, string __m_title, string __m_contents, bool __m_is_read, bool __m_is_receive)
		{
			_m_mail_id = new ProtoMemberUInt32(1, false);
			_m_mail_id.member_value = __m_mail_id;
			_m_send_time = new ProtoMemberUInt64(2, false);
			_m_send_time.member_value = __m_send_time;
			_m_delete_time = new ProtoMemberUInt64(3, false);
			_m_delete_time.member_value = __m_delete_time;
			_m_table_id = new ProtoMemberUInt32(4, false);
			_m_table_id.member_value = __m_table_id;
			_m_title = new ProtoMemberString(5, false);
			_m_title.member_value = __m_title;
			_m_contents = new ProtoMemberString(6, false);
			_m_contents.member_value = __m_contents;
			_m_items = new ProtoMemberEmbeddedList<PlayerItemInfo>(7, false);
			_m_is_read = new ProtoMemberBool(8, false);
			_m_is_read.member_value = __m_is_read;
			_m_is_receive = new ProtoMemberBool(9, false);
			_m_is_receive.member_value = __m_is_receive;
		}

		public uint m_mail_id
		{
			get{ return _m_mail_id.member_value; }
			set{ _m_mail_id.member_value = value; }
		}
		public bool has_m_mail_id
		{
			get{ return _m_mail_id.has_value; }
		}

		public ulong m_send_time
		{
			get{ return _m_send_time.member_value; }
			set{ _m_send_time.member_value = value; }
		}
		public bool has_m_send_time
		{
			get{ return _m_send_time.has_value; }
		}

		public ulong m_delete_time
		{
			get{ return _m_delete_time.member_value; }
			set{ _m_delete_time.member_value = value; }
		}
		public bool has_m_delete_time
		{
			get{ return _m_delete_time.has_value; }
		}

		public uint m_table_id
		{
			get{ return _m_table_id.member_value; }
			set{ _m_table_id.member_value = value; }
		}
		public bool has_m_table_id
		{
			get{ return _m_table_id.has_value; }
		}

		public string m_title
		{
			get{ return _m_title.member_value; }
			set{ _m_title.member_value = value; }
		}
		public bool has_m_title
		{
			get{ return _m_title.has_value; }
		}

		public string m_contents
		{
			get{ return _m_contents.member_value; }
			set{ _m_contents.member_value = value; }
		}
		public bool has_m_contents
		{
			get{ return _m_contents.has_value; }
		}

		public System.Collections.Generic.List<PlayerItemInfo> m_items
		{
			get{ return _m_items.member_value; }
		}
		public bool has_m_items
		{
			get{ return _m_items.has_value; }
		}

		public bool m_is_read
		{
			get{ return _m_is_read.member_value; }
			set{ _m_is_read.member_value = value; }
		}
		public bool has_m_is_read
		{
			get{ return _m_is_read.has_value; }
		}

		public bool m_is_receive
		{
			get{ return _m_is_receive.member_value; }
			set{ _m_is_receive.member_value = value; }
		}
		public bool has_m_is_receive
		{
			get{ return _m_is_receive.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_mail_id.Serialize(_m_mail_id.member_value, ref out_stream);

			count += _m_send_time.Serialize(_m_send_time.member_value, ref out_stream);

			count += _m_delete_time.Serialize(_m_delete_time.member_value, ref out_stream);

			count += _m_table_id.Serialize(_m_table_id.member_value, ref out_stream);

			count += _m_title.Serialize(_m_title.member_value, ref out_stream);

			count += _m_contents.Serialize(_m_contents.member_value, ref out_stream);

			foreach(PlayerItemInfo one_member_value in _m_items.member_value)
			{
				count += _m_items.Serialize(one_member_value, ref out_stream);
			}

			count += _m_is_read.Serialize(_m_is_read.member_value, ref out_stream);

			count += _m_is_receive.Serialize(_m_is_receive.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_mail_id = 0;
			one_count = _m_mail_id.ParseFrom(ref temp_m_mail_id, ref int_stream);
			if (0 < one_count)
			{
					_m_mail_id.member_value = temp_m_mail_id;
					count = count + one_count;
			}

			ulong temp_m_send_time = 0;
			one_count = _m_send_time.ParseFrom(ref temp_m_send_time, ref int_stream);
			if (0 < one_count)
			{
					_m_send_time.member_value = temp_m_send_time;
					count = count + one_count;
			}

			ulong temp_m_delete_time = 0;
			one_count = _m_delete_time.ParseFrom(ref temp_m_delete_time, ref int_stream);
			if (0 < one_count)
			{
					_m_delete_time.member_value = temp_m_delete_time;
					count = count + one_count;
			}

			uint temp_m_table_id = 0;
			one_count = _m_table_id.ParseFrom(ref temp_m_table_id, ref int_stream);
			if (0 < one_count)
			{
					_m_table_id.member_value = temp_m_table_id;
					count = count + one_count;
			}

			string temp_m_title = "";
			one_count = _m_title.ParseFrom(ref temp_m_title, ref int_stream);
			if (0 < one_count)
			{
					_m_title.member_value = temp_m_title;
					count = count + one_count;
			}

			string temp_m_contents = "";
			one_count = _m_contents.ParseFrom(ref temp_m_contents, ref int_stream);
			if (0 < one_count)
			{
					_m_contents.member_value = temp_m_contents;
					count = count + one_count;
			}

			while (true)
			{
				PlayerItemInfo one_member_value = new PlayerItemInfo();
				one_count = _m_items.ParseFrom(one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_items.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			bool temp_m_is_read = false;
			one_count = _m_is_read.ParseFrom(ref temp_m_is_read, ref int_stream);
			if (0 < one_count)
			{
					_m_is_read.member_value = temp_m_is_read;
					count = count + one_count;
			}

			bool temp_m_is_receive = false;
			one_count = _m_is_receive.ParseFrom(ref temp_m_is_receive, ref int_stream);
			if (0 < one_count)
			{
					_m_is_receive.member_value = temp_m_is_receive;
					count = count + one_count;
			}

			return count;
		}
	}

	public class PlayerMailList : IMessage
	{
		private ProtoMemberEmbeddedList<PlayerMailInfo> _m_mails;	// 邮件列表

		public PlayerMailList()
		{
			_m_mails = new ProtoMemberEmbeddedList<PlayerMailInfo>(1, false);
		}

		public System.Collections.Generic.List<PlayerMailInfo> m_mails
		{
			get{ return _m_mails.member_value; }
		}
		public bool has_m_mails
		{
			get{ return _m_mails.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			foreach(PlayerMailInfo one_member_value in _m_mails.member_value)
			{
				count += _m_mails.Serialize(one_member_value, ref out_stream);
			}

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			while (true)
			{
				PlayerMailInfo one_member_value = new PlayerMailInfo();
				one_count = _m_mails.ParseFrom(one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_mails.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			return count;
		}
	}

	public enum PlayerMailType
	{
		MailType_LvUp = 1,										// 升级邮件
	}

	public class PlayerMainTaskInfo : IMessage
	{
		private ProtoMemberUInt32 _m_task_id;	// 任务表id
		private ProtoMemberEmbeddedList<PlayerTaskNeedItem> _m_task_progress;	// 任务所需物品数量/完成进度
		private ProtoMemberBool _m_is_finsh;	// 任务是否已完成
		private ProtoMemberBool _m_is_reward;	// 奖励是否已领取

		public PlayerMainTaskInfo()
		{
			_m_task_id = new ProtoMemberUInt32(1, false);
			_m_task_progress = new ProtoMemberEmbeddedList<PlayerTaskNeedItem>(2, false);
			_m_is_finsh = new ProtoMemberBool(3, false);
			_m_is_reward = new ProtoMemberBool(4, false);
		}

		public PlayerMainTaskInfo(uint __m_task_id, bool __m_is_finsh, bool __m_is_reward)
		{
			_m_task_id = new ProtoMemberUInt32(1, false);
			_m_task_id.member_value = __m_task_id;
			_m_task_progress = new ProtoMemberEmbeddedList<PlayerTaskNeedItem>(2, false);
			_m_is_finsh = new ProtoMemberBool(3, false);
			_m_is_finsh.member_value = __m_is_finsh;
			_m_is_reward = new ProtoMemberBool(4, false);
			_m_is_reward.member_value = __m_is_reward;
		}

		public uint m_task_id
		{
			get{ return _m_task_id.member_value; }
			set{ _m_task_id.member_value = value; }
		}
		public bool has_m_task_id
		{
			get{ return _m_task_id.has_value; }
		}

		public System.Collections.Generic.List<PlayerTaskNeedItem> m_task_progress
		{
			get{ return _m_task_progress.member_value; }
		}
		public bool has_m_task_progress
		{
			get{ return _m_task_progress.has_value; }
		}

		public bool m_is_finsh
		{
			get{ return _m_is_finsh.member_value; }
			set{ _m_is_finsh.member_value = value; }
		}
		public bool has_m_is_finsh
		{
			get{ return _m_is_finsh.has_value; }
		}

		public bool m_is_reward
		{
			get{ return _m_is_reward.member_value; }
			set{ _m_is_reward.member_value = value; }
		}
		public bool has_m_is_reward
		{
			get{ return _m_is_reward.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_task_id.Serialize(_m_task_id.member_value, ref out_stream);

			foreach(PlayerTaskNeedItem one_member_value in _m_task_progress.member_value)
			{
				count += _m_task_progress.Serialize(one_member_value, ref out_stream);
			}

			count += _m_is_finsh.Serialize(_m_is_finsh.member_value, ref out_stream);

			count += _m_is_reward.Serialize(_m_is_reward.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_task_id = 0;
			one_count = _m_task_id.ParseFrom(ref temp_m_task_id, ref int_stream);
			if (0 < one_count)
			{
					_m_task_id.member_value = temp_m_task_id;
					count = count + one_count;
			}

			while (true)
			{
				PlayerTaskNeedItem one_member_value = new PlayerTaskNeedItem();
				one_count = _m_task_progress.ParseFrom(one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_task_progress.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			bool temp_m_is_finsh = false;
			one_count = _m_is_finsh.ParseFrom(ref temp_m_is_finsh, ref int_stream);
			if (0 < one_count)
			{
					_m_is_finsh.member_value = temp_m_is_finsh;
					count = count + one_count;
			}

			bool temp_m_is_reward = false;
			one_count = _m_is_reward.ParseFrom(ref temp_m_is_reward, ref int_stream);
			if (0 < one_count)
			{
					_m_is_reward.member_value = temp_m_is_reward;
					count = count + one_count;
			}

			return count;
		}
	}

	public class PlayerMoutainKingInfo : IMessage
	{
		private ProtoMemberUInt64 _m_last_battle_time;	// 上一次战斗时间，用于判断是否是今日首场战斗
		private ProtoMemberUInt32 _m_today_win_count;	// 今日已胜利场次，用于判断是否是今日首胜
		private ProtoMemberUInt32 _m_today_battle_count;	// 今日已参加场次，用于计算前三场的鼓励状态

		public PlayerMoutainKingInfo()
		{
			_m_last_battle_time = new ProtoMemberUInt64(1, false);
			_m_today_win_count = new ProtoMemberUInt32(2, false);
			_m_today_battle_count = new ProtoMemberUInt32(3, false);
		}

		public PlayerMoutainKingInfo(ulong __m_last_battle_time, uint __m_today_win_count, uint __m_today_battle_count)
		{
			_m_last_battle_time = new ProtoMemberUInt64(1, false);
			_m_last_battle_time.member_value = __m_last_battle_time;
			_m_today_win_count = new ProtoMemberUInt32(2, false);
			_m_today_win_count.member_value = __m_today_win_count;
			_m_today_battle_count = new ProtoMemberUInt32(3, false);
			_m_today_battle_count.member_value = __m_today_battle_count;
		}

		public ulong m_last_battle_time
		{
			get{ return _m_last_battle_time.member_value; }
			set{ _m_last_battle_time.member_value = value; }
		}
		public bool has_m_last_battle_time
		{
			get{ return _m_last_battle_time.has_value; }
		}

		public uint m_today_win_count
		{
			get{ return _m_today_win_count.member_value; }
			set{ _m_today_win_count.member_value = value; }
		}
		public bool has_m_today_win_count
		{
			get{ return _m_today_win_count.has_value; }
		}

		public uint m_today_battle_count
		{
			get{ return _m_today_battle_count.member_value; }
			set{ _m_today_battle_count.member_value = value; }
		}
		public bool has_m_today_battle_count
		{
			get{ return _m_today_battle_count.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_last_battle_time.Serialize(_m_last_battle_time.member_value, ref out_stream);

			count += _m_today_win_count.Serialize(_m_today_win_count.member_value, ref out_stream);

			count += _m_today_battle_count.Serialize(_m_today_battle_count.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			ulong temp_m_last_battle_time = 0;
			one_count = _m_last_battle_time.ParseFrom(ref temp_m_last_battle_time, ref int_stream);
			if (0 < one_count)
			{
					_m_last_battle_time.member_value = temp_m_last_battle_time;
					count = count + one_count;
			}

			uint temp_m_today_win_count = 0;
			one_count = _m_today_win_count.ParseFrom(ref temp_m_today_win_count, ref int_stream);
			if (0 < one_count)
			{
					_m_today_win_count.member_value = temp_m_today_win_count;
					count = count + one_count;
			}

			uint temp_m_today_battle_count = 0;
			one_count = _m_today_battle_count.ParseFrom(ref temp_m_today_battle_count, ref int_stream);
			if (0 < one_count)
			{
					_m_today_battle_count.member_value = temp_m_today_battle_count;
					count = count + one_count;
			}

			return count;
		}
	}

	public class PlayerPVEInfo : IMessage
	{
		private ProtoMemberEmbedded<PlayerInstanceInfo> _m_instance_info;	// 娱乐模式等级/经验/星章
		private ProtoMemberEmbedded<PlayerHuntingInfo> _m_hunting_info;	// 角色狩猎信息
		private ProtoMemberEmbedded<PlayerStarChessInfo> _m_starchess_info;	// 角色星空迷棋信息
		private ProtoMemberEmbedded<PlayerTortoiseHareInfo> _m_tortoisehare_info;	// 角色龟兔大战信息
		private ProtoMemberEmbedded<PlayerMoutainKingInfo> _m_moutainking_info;	// 角色山丘之王信息
		private ProtoMemberEmbedded<PlayerVoidScuffleInfo> _m_voidscuffle_info;	// 角色虚空乱斗信息

		public PlayerPVEInfo()
		{
			_m_instance_info = new ProtoMemberEmbedded<PlayerInstanceInfo>(1, false);
			_m_instance_info.member_value = new PlayerInstanceInfo();
			_m_hunting_info = new ProtoMemberEmbedded<PlayerHuntingInfo>(2, false);
			_m_hunting_info.member_value = new PlayerHuntingInfo();
			_m_starchess_info = new ProtoMemberEmbedded<PlayerStarChessInfo>(3, false);
			_m_starchess_info.member_value = new PlayerStarChessInfo();
			_m_tortoisehare_info = new ProtoMemberEmbedded<PlayerTortoiseHareInfo>(4, false);
			_m_tortoisehare_info.member_value = new PlayerTortoiseHareInfo();
			_m_moutainking_info = new ProtoMemberEmbedded<PlayerMoutainKingInfo>(5, false);
			_m_moutainking_info.member_value = new PlayerMoutainKingInfo();
			_m_voidscuffle_info = new ProtoMemberEmbedded<PlayerVoidScuffleInfo>(6, false);
			_m_voidscuffle_info.member_value = new PlayerVoidScuffleInfo();
		}

		public PlayerInstanceInfo m_instance_info
		{
			get{ return _m_instance_info.member_value as PlayerInstanceInfo; }
			set{ _m_instance_info.member_value = value; }
		}
		public bool has_m_instance_info
		{
			get{ return _m_instance_info.has_value; }
		}

		public PlayerHuntingInfo m_hunting_info
		{
			get{ return _m_hunting_info.member_value as PlayerHuntingInfo; }
			set{ _m_hunting_info.member_value = value; }
		}
		public bool has_m_hunting_info
		{
			get{ return _m_hunting_info.has_value; }
		}

		public PlayerStarChessInfo m_starchess_info
		{
			get{ return _m_starchess_info.member_value as PlayerStarChessInfo; }
			set{ _m_starchess_info.member_value = value; }
		}
		public bool has_m_starchess_info
		{
			get{ return _m_starchess_info.has_value; }
		}

		public PlayerTortoiseHareInfo m_tortoisehare_info
		{
			get{ return _m_tortoisehare_info.member_value as PlayerTortoiseHareInfo; }
			set{ _m_tortoisehare_info.member_value = value; }
		}
		public bool has_m_tortoisehare_info
		{
			get{ return _m_tortoisehare_info.has_value; }
		}

		public PlayerMoutainKingInfo m_moutainking_info
		{
			get{ return _m_moutainking_info.member_value as PlayerMoutainKingInfo; }
			set{ _m_moutainking_info.member_value = value; }
		}
		public bool has_m_moutainking_info
		{
			get{ return _m_moutainking_info.has_value; }
		}

		public PlayerVoidScuffleInfo m_voidscuffle_info
		{
			get{ return _m_voidscuffle_info.member_value as PlayerVoidScuffleInfo; }
			set{ _m_voidscuffle_info.member_value = value; }
		}
		public bool has_m_voidscuffle_info
		{
			get{ return _m_voidscuffle_info.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_instance_info.Serialize(_m_instance_info.member_value, ref out_stream);

			count += _m_hunting_info.Serialize(_m_hunting_info.member_value, ref out_stream);

			count += _m_starchess_info.Serialize(_m_starchess_info.member_value, ref out_stream);

			count += _m_tortoisehare_info.Serialize(_m_tortoisehare_info.member_value, ref out_stream);

			count += _m_moutainking_info.Serialize(_m_moutainking_info.member_value, ref out_stream);

			count += _m_voidscuffle_info.Serialize(_m_voidscuffle_info.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			PlayerInstanceInfo temp_m_instance_info = new PlayerInstanceInfo();
			one_count = _m_instance_info.ParseFrom(temp_m_instance_info, ref int_stream);
			if (0 < one_count)
			{
					_m_instance_info.member_value = temp_m_instance_info;
					count = count + one_count;
			}

			PlayerHuntingInfo temp_m_hunting_info = new PlayerHuntingInfo();
			one_count = _m_hunting_info.ParseFrom(temp_m_hunting_info, ref int_stream);
			if (0 < one_count)
			{
					_m_hunting_info.member_value = temp_m_hunting_info;
					count = count + one_count;
			}

			PlayerStarChessInfo temp_m_starchess_info = new PlayerStarChessInfo();
			one_count = _m_starchess_info.ParseFrom(temp_m_starchess_info, ref int_stream);
			if (0 < one_count)
			{
					_m_starchess_info.member_value = temp_m_starchess_info;
					count = count + one_count;
			}

			PlayerTortoiseHareInfo temp_m_tortoisehare_info = new PlayerTortoiseHareInfo();
			one_count = _m_tortoisehare_info.ParseFrom(temp_m_tortoisehare_info, ref int_stream);
			if (0 < one_count)
			{
					_m_tortoisehare_info.member_value = temp_m_tortoisehare_info;
					count = count + one_count;
			}

			PlayerMoutainKingInfo temp_m_moutainking_info = new PlayerMoutainKingInfo();
			one_count = _m_moutainking_info.ParseFrom(temp_m_moutainking_info, ref int_stream);
			if (0 < one_count)
			{
					_m_moutainking_info.member_value = temp_m_moutainking_info;
					count = count + one_count;
			}

			PlayerVoidScuffleInfo temp_m_voidscuffle_info = new PlayerVoidScuffleInfo();
			one_count = _m_voidscuffle_info.ParseFrom(temp_m_voidscuffle_info, ref int_stream);
			if (0 < one_count)
			{
					_m_voidscuffle_info.member_value = temp_m_voidscuffle_info;
					count = count + one_count;
			}

			return count;
		}
	}

	public class PlayerPVPInfo : IMessage
	{
		private ProtoMemberEmbedded<PlayerInstanceInfo> _m_instance_info;	// 精英模式等级/经验/星章
		private ProtoMemberUInt64 _m_last_midexit;	// 战场匹配上次中途退出时间
		private ProtoMemberEmbedded<PlayerPVPMatch> _m_pvp_match_info;	// 角色天梯匹配信息
		private ProtoMemberEmbedded<PlayerIndianaJonesInfo> _m_indianajones_info;	// 角色宝藏猎人信息
		private ProtoMemberEmbedded<PlayerExtremeInfo> _m_extreme_info;	// 角色极限试炼信息

		public PlayerPVPInfo()
		{
			_m_instance_info = new ProtoMemberEmbedded<PlayerInstanceInfo>(1, false);
			_m_instance_info.member_value = new PlayerInstanceInfo();
			_m_last_midexit = new ProtoMemberUInt64(2, false);
			_m_pvp_match_info = new ProtoMemberEmbedded<PlayerPVPMatch>(3, false);
			_m_pvp_match_info.member_value = new PlayerPVPMatch();
			_m_indianajones_info = new ProtoMemberEmbedded<PlayerIndianaJonesInfo>(4, false);
			_m_indianajones_info.member_value = new PlayerIndianaJonesInfo();
			_m_extreme_info = new ProtoMemberEmbedded<PlayerExtremeInfo>(5, false);
			_m_extreme_info.member_value = new PlayerExtremeInfo();
		}

		public PlayerPVPInfo(ulong __m_last_midexit)
		{
			_m_instance_info = new ProtoMemberEmbedded<PlayerInstanceInfo>(1, false);
			_m_instance_info.member_value = new PlayerInstanceInfo();
			_m_last_midexit = new ProtoMemberUInt64(2, false);
			_m_last_midexit.member_value = __m_last_midexit;
			_m_pvp_match_info = new ProtoMemberEmbedded<PlayerPVPMatch>(3, false);
			_m_pvp_match_info.member_value = new PlayerPVPMatch();
			_m_indianajones_info = new ProtoMemberEmbedded<PlayerIndianaJonesInfo>(4, false);
			_m_indianajones_info.member_value = new PlayerIndianaJonesInfo();
			_m_extreme_info = new ProtoMemberEmbedded<PlayerExtremeInfo>(5, false);
			_m_extreme_info.member_value = new PlayerExtremeInfo();
		}

		public PlayerInstanceInfo m_instance_info
		{
			get{ return _m_instance_info.member_value as PlayerInstanceInfo; }
			set{ _m_instance_info.member_value = value; }
		}
		public bool has_m_instance_info
		{
			get{ return _m_instance_info.has_value; }
		}

		public ulong m_last_midexit
		{
			get{ return _m_last_midexit.member_value; }
			set{ _m_last_midexit.member_value = value; }
		}
		public bool has_m_last_midexit
		{
			get{ return _m_last_midexit.has_value; }
		}

		public PlayerPVPMatch m_pvp_match_info
		{
			get{ return _m_pvp_match_info.member_value as PlayerPVPMatch; }
			set{ _m_pvp_match_info.member_value = value; }
		}
		public bool has_m_pvp_match_info
		{
			get{ return _m_pvp_match_info.has_value; }
		}

		public PlayerIndianaJonesInfo m_indianajones_info
		{
			get{ return _m_indianajones_info.member_value as PlayerIndianaJonesInfo; }
			set{ _m_indianajones_info.member_value = value; }
		}
		public bool has_m_indianajones_info
		{
			get{ return _m_indianajones_info.has_value; }
		}

		public PlayerExtremeInfo m_extreme_info
		{
			get{ return _m_extreme_info.member_value as PlayerExtremeInfo; }
			set{ _m_extreme_info.member_value = value; }
		}
		public bool has_m_extreme_info
		{
			get{ return _m_extreme_info.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_instance_info.Serialize(_m_instance_info.member_value, ref out_stream);

			count += _m_last_midexit.Serialize(_m_last_midexit.member_value, ref out_stream);

			count += _m_pvp_match_info.Serialize(_m_pvp_match_info.member_value, ref out_stream);

			count += _m_indianajones_info.Serialize(_m_indianajones_info.member_value, ref out_stream);

			count += _m_extreme_info.Serialize(_m_extreme_info.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			PlayerInstanceInfo temp_m_instance_info = new PlayerInstanceInfo();
			one_count = _m_instance_info.ParseFrom(temp_m_instance_info, ref int_stream);
			if (0 < one_count)
			{
					_m_instance_info.member_value = temp_m_instance_info;
					count = count + one_count;
			}

			ulong temp_m_last_midexit = 0;
			one_count = _m_last_midexit.ParseFrom(ref temp_m_last_midexit, ref int_stream);
			if (0 < one_count)
			{
					_m_last_midexit.member_value = temp_m_last_midexit;
					count = count + one_count;
			}

			PlayerPVPMatch temp_m_pvp_match_info = new PlayerPVPMatch();
			one_count = _m_pvp_match_info.ParseFrom(temp_m_pvp_match_info, ref int_stream);
			if (0 < one_count)
			{
					_m_pvp_match_info.member_value = temp_m_pvp_match_info;
					count = count + one_count;
			}

			PlayerIndianaJonesInfo temp_m_indianajones_info = new PlayerIndianaJonesInfo();
			one_count = _m_indianajones_info.ParseFrom(temp_m_indianajones_info, ref int_stream);
			if (0 < one_count)
			{
					_m_indianajones_info.member_value = temp_m_indianajones_info;
					count = count + one_count;
			}

			PlayerExtremeInfo temp_m_extreme_info = new PlayerExtremeInfo();
			one_count = _m_extreme_info.ParseFrom(temp_m_extreme_info, ref int_stream);
			if (0 < one_count)
			{
					_m_extreme_info.member_value = temp_m_extreme_info;
					count = count + one_count;
			}

			return count;
		}
	}

	public class PlayerPVPMatch : IMessage
	{
		private ProtoMemberUInt64 _m_match_last_battle_time;	// 上一次战斗时间，用于判断是否是今日首场战斗
		private ProtoMemberUInt32 _m_match_today_win_count;	// 今日已胜利场次，用于判断是否是今日首胜/用于计算获得代币
		private ProtoMemberUInt32 _m_match_today_battle_count;	// 今日已参加场次，用于计算前三场的鼓励状态
		private ProtoMemberUInt32 _m_match_battle_count;	// 本赛季累计战斗场次，计算胜率
		private ProtoMemberUInt32 _m_match_win_count;	// 本赛季累计胜利场次，计算胜率
		private ProtoMemberUInt32 _m_match_grade;	// 当前段位id
		private ProtoMemberUInt32 _m_match_today_grade;	// 今日初始段位id
		private ProtoMemberUInt32 _m_match_points;	// 当前积分

		public PlayerPVPMatch()
		{
			_m_match_last_battle_time = new ProtoMemberUInt64(1, false);
			_m_match_today_win_count = new ProtoMemberUInt32(2, false);
			_m_match_today_battle_count = new ProtoMemberUInt32(3, false);
			_m_match_battle_count = new ProtoMemberUInt32(4, false);
			_m_match_win_count = new ProtoMemberUInt32(5, false);
			_m_match_grade = new ProtoMemberUInt32(6, false);
			_m_match_today_grade = new ProtoMemberUInt32(7, false);
			_m_match_points = new ProtoMemberUInt32(8, false);
		}

		public PlayerPVPMatch(ulong __m_match_last_battle_time, uint __m_match_today_win_count, uint __m_match_today_battle_count, uint __m_match_battle_count, uint __m_match_win_count, uint __m_match_grade, uint __m_match_today_grade, uint __m_match_points)
		{
			_m_match_last_battle_time = new ProtoMemberUInt64(1, false);
			_m_match_last_battle_time.member_value = __m_match_last_battle_time;
			_m_match_today_win_count = new ProtoMemberUInt32(2, false);
			_m_match_today_win_count.member_value = __m_match_today_win_count;
			_m_match_today_battle_count = new ProtoMemberUInt32(3, false);
			_m_match_today_battle_count.member_value = __m_match_today_battle_count;
			_m_match_battle_count = new ProtoMemberUInt32(4, false);
			_m_match_battle_count.member_value = __m_match_battle_count;
			_m_match_win_count = new ProtoMemberUInt32(5, false);
			_m_match_win_count.member_value = __m_match_win_count;
			_m_match_grade = new ProtoMemberUInt32(6, false);
			_m_match_grade.member_value = __m_match_grade;
			_m_match_today_grade = new ProtoMemberUInt32(7, false);
			_m_match_today_grade.member_value = __m_match_today_grade;
			_m_match_points = new ProtoMemberUInt32(8, false);
			_m_match_points.member_value = __m_match_points;
		}

		public ulong m_match_last_battle_time
		{
			get{ return _m_match_last_battle_time.member_value; }
			set{ _m_match_last_battle_time.member_value = value; }
		}
		public bool has_m_match_last_battle_time
		{
			get{ return _m_match_last_battle_time.has_value; }
		}

		public uint m_match_today_win_count
		{
			get{ return _m_match_today_win_count.member_value; }
			set{ _m_match_today_win_count.member_value = value; }
		}
		public bool has_m_match_today_win_count
		{
			get{ return _m_match_today_win_count.has_value; }
		}

		public uint m_match_today_battle_count
		{
			get{ return _m_match_today_battle_count.member_value; }
			set{ _m_match_today_battle_count.member_value = value; }
		}
		public bool has_m_match_today_battle_count
		{
			get{ return _m_match_today_battle_count.has_value; }
		}

		public uint m_match_battle_count
		{
			get{ return _m_match_battle_count.member_value; }
			set{ _m_match_battle_count.member_value = value; }
		}
		public bool has_m_match_battle_count
		{
			get{ return _m_match_battle_count.has_value; }
		}

		public uint m_match_win_count
		{
			get{ return _m_match_win_count.member_value; }
			set{ _m_match_win_count.member_value = value; }
		}
		public bool has_m_match_win_count
		{
			get{ return _m_match_win_count.has_value; }
		}

		public uint m_match_grade
		{
			get{ return _m_match_grade.member_value; }
			set{ _m_match_grade.member_value = value; }
		}
		public bool has_m_match_grade
		{
			get{ return _m_match_grade.has_value; }
		}

		public uint m_match_today_grade
		{
			get{ return _m_match_today_grade.member_value; }
			set{ _m_match_today_grade.member_value = value; }
		}
		public bool has_m_match_today_grade
		{
			get{ return _m_match_today_grade.has_value; }
		}

		public uint m_match_points
		{
			get{ return _m_match_points.member_value; }
			set{ _m_match_points.member_value = value; }
		}
		public bool has_m_match_points
		{
			get{ return _m_match_points.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_match_last_battle_time.Serialize(_m_match_last_battle_time.member_value, ref out_stream);

			count += _m_match_today_win_count.Serialize(_m_match_today_win_count.member_value, ref out_stream);

			count += _m_match_today_battle_count.Serialize(_m_match_today_battle_count.member_value, ref out_stream);

			count += _m_match_battle_count.Serialize(_m_match_battle_count.member_value, ref out_stream);

			count += _m_match_win_count.Serialize(_m_match_win_count.member_value, ref out_stream);

			count += _m_match_grade.Serialize(_m_match_grade.member_value, ref out_stream);

			count += _m_match_today_grade.Serialize(_m_match_today_grade.member_value, ref out_stream);

			count += _m_match_points.Serialize(_m_match_points.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			ulong temp_m_match_last_battle_time = 0;
			one_count = _m_match_last_battle_time.ParseFrom(ref temp_m_match_last_battle_time, ref int_stream);
			if (0 < one_count)
			{
					_m_match_last_battle_time.member_value = temp_m_match_last_battle_time;
					count = count + one_count;
			}

			uint temp_m_match_today_win_count = 0;
			one_count = _m_match_today_win_count.ParseFrom(ref temp_m_match_today_win_count, ref int_stream);
			if (0 < one_count)
			{
					_m_match_today_win_count.member_value = temp_m_match_today_win_count;
					count = count + one_count;
			}

			uint temp_m_match_today_battle_count = 0;
			one_count = _m_match_today_battle_count.ParseFrom(ref temp_m_match_today_battle_count, ref int_stream);
			if (0 < one_count)
			{
					_m_match_today_battle_count.member_value = temp_m_match_today_battle_count;
					count = count + one_count;
			}

			uint temp_m_match_battle_count = 0;
			one_count = _m_match_battle_count.ParseFrom(ref temp_m_match_battle_count, ref int_stream);
			if (0 < one_count)
			{
					_m_match_battle_count.member_value = temp_m_match_battle_count;
					count = count + one_count;
			}

			uint temp_m_match_win_count = 0;
			one_count = _m_match_win_count.ParseFrom(ref temp_m_match_win_count, ref int_stream);
			if (0 < one_count)
			{
					_m_match_win_count.member_value = temp_m_match_win_count;
					count = count + one_count;
			}

			uint temp_m_match_grade = 0;
			one_count = _m_match_grade.ParseFrom(ref temp_m_match_grade, ref int_stream);
			if (0 < one_count)
			{
					_m_match_grade.member_value = temp_m_match_grade;
					count = count + one_count;
			}

			uint temp_m_match_today_grade = 0;
			one_count = _m_match_today_grade.ParseFrom(ref temp_m_match_today_grade, ref int_stream);
			if (0 < one_count)
			{
					_m_match_today_grade.member_value = temp_m_match_today_grade;
					count = count + one_count;
			}

			uint temp_m_match_points = 0;
			one_count = _m_match_points.ParseFrom(ref temp_m_match_points, ref int_stream);
			if (0 < one_count)
			{
					_m_match_points.member_value = temp_m_match_points;
					count = count + one_count;
			}

			return count;
		}
	}

	public class PlayerPosInfo : IMessage
	{
		private ProtoMemberInt32 _m_player_x;	// 坐标值
		private ProtoMemberInt32 _m_player_y;	
		private ProtoMemberInt32 _m_player_z;	

		public PlayerPosInfo()
		{
			_m_player_x = new ProtoMemberInt32(1, false);
			_m_player_y = new ProtoMemberInt32(2, false);
			_m_player_z = new ProtoMemberInt32(3, false);
		}

		public PlayerPosInfo(int __m_player_x, int __m_player_y, int __m_player_z)
		{
			_m_player_x = new ProtoMemberInt32(1, false);
			_m_player_x.member_value = __m_player_x;
			_m_player_y = new ProtoMemberInt32(2, false);
			_m_player_y.member_value = __m_player_y;
			_m_player_z = new ProtoMemberInt32(3, false);
			_m_player_z.member_value = __m_player_z;
		}

		public int m_player_x
		{
			get{ return _m_player_x.member_value; }
			set{ _m_player_x.member_value = value; }
		}
		public bool has_m_player_x
		{
			get{ return _m_player_x.has_value; }
		}

		public int m_player_y
		{
			get{ return _m_player_y.member_value; }
			set{ _m_player_y.member_value = value; }
		}
		public bool has_m_player_y
		{
			get{ return _m_player_y.has_value; }
		}

		public int m_player_z
		{
			get{ return _m_player_z.member_value; }
			set{ _m_player_z.member_value = value; }
		}
		public bool has_m_player_z
		{
			get{ return _m_player_z.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_player_x.Serialize(_m_player_x.member_value, ref out_stream);

			count += _m_player_y.Serialize(_m_player_y.member_value, ref out_stream);

			count += _m_player_z.Serialize(_m_player_z.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			int temp_m_player_x = 0;
			one_count = _m_player_x.ParseFrom(ref temp_m_player_x, ref int_stream);
			if (0 < one_count)
			{
					_m_player_x.member_value = temp_m_player_x;
					count = count + one_count;
			}

			int temp_m_player_y = 0;
			one_count = _m_player_y.ParseFrom(ref temp_m_player_y, ref int_stream);
			if (0 < one_count)
			{
					_m_player_y.member_value = temp_m_player_y;
					count = count + one_count;
			}

			int temp_m_player_z = 0;
			one_count = _m_player_z.ParseFrom(ref temp_m_player_z, ref int_stream);
			if (0 < one_count)
			{
					_m_player_z.member_value = temp_m_player_z;
					count = count + one_count;
			}

			return count;
		}
	}

	public class PlayerRankingInfo : IMessage
	{
		private ProtoMemberEmbedded<PlayerId> _m_nPlayerId;	//玩家ID			玩家基础信息
		private ProtoMemberUInt32 _m_nServerId;	//所在服务器Id
		private ProtoMemberString _m_strPlayerName;	//玩家name
		private ProtoMemberString _m_strUnionName;	//公会name
		private ProtoMemberUInt32 _m_toy_type;	//玩家头像
		private ProtoMemberUInt32 _m_nRanking;	//排名				玩家排名
		private ProtoMemberUInt32 _m_uRecharge;	//充值金额			玩家2级排序条件
		private ProtoMemberUInt32 _m_nLevel;	//等级				玩家1级排序条件
		private ProtoMemberUInt32 _m_all_role_level;	//英雄总等级
		private ProtoMemberUInt32 _m_max_capacity;	//最高战力
		private ProtoMemberUInt32 _m_chess_second;	//星空谜棋使用时间
		private ProtoMemberUInt32 _m_chess_dice;	//星空谜棋使用骰子数
		private ProtoMemberUInt32 _m_pass_chess_count;	//星空谜棋通关次数
		private ProtoMemberUInt32 _m_nLadderScore;	//天梯积分
		private ProtoMemberUInt32 _m_nLadderSeason;	//天梯赛季
		private ProtoMemberUInt32 _m_kill_count;	//杀人数
		private ProtoMemberUInt32 _m_online_time;	//在线时间
		private ProtoMemberUInt32 _m_get_gold;	//获取金币总数
		private ProtoMemberUInt32 _m_dead_count;	//死亡次数
		private ProtoMemberUInt32 _m_resolve_count;	//分解次数

		public PlayerRankingInfo()
		{
			_m_nPlayerId = new ProtoMemberEmbedded<PlayerId>(1, false);
			_m_nPlayerId.member_value = new PlayerId();
			_m_nServerId = new ProtoMemberUInt32(2, false);
			_m_strPlayerName = new ProtoMemberString(3, false);
			_m_strUnionName = new ProtoMemberString(4, false);
			_m_toy_type = new ProtoMemberUInt32(5, false);
			_m_nRanking = new ProtoMemberUInt32(6, false);
			_m_uRecharge = new ProtoMemberUInt32(7, false);
			_m_nLevel = new ProtoMemberUInt32(8, false);
			_m_all_role_level = new ProtoMemberUInt32(9, false);
			_m_max_capacity = new ProtoMemberUInt32(10, false);
			_m_chess_second = new ProtoMemberUInt32(11, false);
			_m_chess_dice = new ProtoMemberUInt32(12, false);
			_m_pass_chess_count = new ProtoMemberUInt32(13, false);
			_m_nLadderScore = new ProtoMemberUInt32(14, false);
			_m_nLadderSeason = new ProtoMemberUInt32(15, false);
			_m_kill_count = new ProtoMemberUInt32(16, false);
			_m_online_time = new ProtoMemberUInt32(17, false);
			_m_get_gold = new ProtoMemberUInt32(18, false);
			_m_dead_count = new ProtoMemberUInt32(19, false);
			_m_resolve_count = new ProtoMemberUInt32(20, false);
		}

		public PlayerRankingInfo(uint __m_nServerId, string __m_strPlayerName, string __m_strUnionName, uint __m_toy_type, uint __m_nRanking, uint __m_uRecharge, uint __m_nLevel, uint __m_all_role_level, uint __m_max_capacity, uint __m_chess_second, uint __m_chess_dice, uint __m_pass_chess_count, uint __m_nLadderScore, uint __m_nLadderSeason, uint __m_kill_count, uint __m_online_time, uint __m_get_gold, uint __m_dead_count, uint __m_resolve_count)
		{
			_m_nPlayerId = new ProtoMemberEmbedded<PlayerId>(1, false);
			_m_nPlayerId.member_value = new PlayerId();
			_m_nServerId = new ProtoMemberUInt32(2, false);
			_m_nServerId.member_value = __m_nServerId;
			_m_strPlayerName = new ProtoMemberString(3, false);
			_m_strPlayerName.member_value = __m_strPlayerName;
			_m_strUnionName = new ProtoMemberString(4, false);
			_m_strUnionName.member_value = __m_strUnionName;
			_m_toy_type = new ProtoMemberUInt32(5, false);
			_m_toy_type.member_value = __m_toy_type;
			_m_nRanking = new ProtoMemberUInt32(6, false);
			_m_nRanking.member_value = __m_nRanking;
			_m_uRecharge = new ProtoMemberUInt32(7, false);
			_m_uRecharge.member_value = __m_uRecharge;
			_m_nLevel = new ProtoMemberUInt32(8, false);
			_m_nLevel.member_value = __m_nLevel;
			_m_all_role_level = new ProtoMemberUInt32(9, false);
			_m_all_role_level.member_value = __m_all_role_level;
			_m_max_capacity = new ProtoMemberUInt32(10, false);
			_m_max_capacity.member_value = __m_max_capacity;
			_m_chess_second = new ProtoMemberUInt32(11, false);
			_m_chess_second.member_value = __m_chess_second;
			_m_chess_dice = new ProtoMemberUInt32(12, false);
			_m_chess_dice.member_value = __m_chess_dice;
			_m_pass_chess_count = new ProtoMemberUInt32(13, false);
			_m_pass_chess_count.member_value = __m_pass_chess_count;
			_m_nLadderScore = new ProtoMemberUInt32(14, false);
			_m_nLadderScore.member_value = __m_nLadderScore;
			_m_nLadderSeason = new ProtoMemberUInt32(15, false);
			_m_nLadderSeason.member_value = __m_nLadderSeason;
			_m_kill_count = new ProtoMemberUInt32(16, false);
			_m_kill_count.member_value = __m_kill_count;
			_m_online_time = new ProtoMemberUInt32(17, false);
			_m_online_time.member_value = __m_online_time;
			_m_get_gold = new ProtoMemberUInt32(18, false);
			_m_get_gold.member_value = __m_get_gold;
			_m_dead_count = new ProtoMemberUInt32(19, false);
			_m_dead_count.member_value = __m_dead_count;
			_m_resolve_count = new ProtoMemberUInt32(20, false);
			_m_resolve_count.member_value = __m_resolve_count;
		}

		public PlayerId m_nPlayerId
		{
			get{ return _m_nPlayerId.member_value as PlayerId; }
			set{ _m_nPlayerId.member_value = value; }
		}
		public bool has_m_nPlayerId
		{
			get{ return _m_nPlayerId.has_value; }
		}

		public uint m_nServerId
		{
			get{ return _m_nServerId.member_value; }
			set{ _m_nServerId.member_value = value; }
		}
		public bool has_m_nServerId
		{
			get{ return _m_nServerId.has_value; }
		}

		public string m_strPlayerName
		{
			get{ return _m_strPlayerName.member_value; }
			set{ _m_strPlayerName.member_value = value; }
		}
		public bool has_m_strPlayerName
		{
			get{ return _m_strPlayerName.has_value; }
		}

		public string m_strUnionName
		{
			get{ return _m_strUnionName.member_value; }
			set{ _m_strUnionName.member_value = value; }
		}
		public bool has_m_strUnionName
		{
			get{ return _m_strUnionName.has_value; }
		}

		public uint m_toy_type
		{
			get{ return _m_toy_type.member_value; }
			set{ _m_toy_type.member_value = value; }
		}
		public bool has_m_toy_type
		{
			get{ return _m_toy_type.has_value; }
		}

		public uint m_nRanking
		{
			get{ return _m_nRanking.member_value; }
			set{ _m_nRanking.member_value = value; }
		}
		public bool has_m_nRanking
		{
			get{ return _m_nRanking.has_value; }
		}

		public uint m_uRecharge
		{
			get{ return _m_uRecharge.member_value; }
			set{ _m_uRecharge.member_value = value; }
		}
		public bool has_m_uRecharge
		{
			get{ return _m_uRecharge.has_value; }
		}

		public uint m_nLevel
		{
			get{ return _m_nLevel.member_value; }
			set{ _m_nLevel.member_value = value; }
		}
		public bool has_m_nLevel
		{
			get{ return _m_nLevel.has_value; }
		}

		public uint m_all_role_level
		{
			get{ return _m_all_role_level.member_value; }
			set{ _m_all_role_level.member_value = value; }
		}
		public bool has_m_all_role_level
		{
			get{ return _m_all_role_level.has_value; }
		}

		public uint m_max_capacity
		{
			get{ return _m_max_capacity.member_value; }
			set{ _m_max_capacity.member_value = value; }
		}
		public bool has_m_max_capacity
		{
			get{ return _m_max_capacity.has_value; }
		}

		public uint m_chess_second
		{
			get{ return _m_chess_second.member_value; }
			set{ _m_chess_second.member_value = value; }
		}
		public bool has_m_chess_second
		{
			get{ return _m_chess_second.has_value; }
		}

		public uint m_chess_dice
		{
			get{ return _m_chess_dice.member_value; }
			set{ _m_chess_dice.member_value = value; }
		}
		public bool has_m_chess_dice
		{
			get{ return _m_chess_dice.has_value; }
		}

		public uint m_pass_chess_count
		{
			get{ return _m_pass_chess_count.member_value; }
			set{ _m_pass_chess_count.member_value = value; }
		}
		public bool has_m_pass_chess_count
		{
			get{ return _m_pass_chess_count.has_value; }
		}

		public uint m_nLadderScore
		{
			get{ return _m_nLadderScore.member_value; }
			set{ _m_nLadderScore.member_value = value; }
		}
		public bool has_m_nLadderScore
		{
			get{ return _m_nLadderScore.has_value; }
		}

		public uint m_nLadderSeason
		{
			get{ return _m_nLadderSeason.member_value; }
			set{ _m_nLadderSeason.member_value = value; }
		}
		public bool has_m_nLadderSeason
		{
			get{ return _m_nLadderSeason.has_value; }
		}

		public uint m_kill_count
		{
			get{ return _m_kill_count.member_value; }
			set{ _m_kill_count.member_value = value; }
		}
		public bool has_m_kill_count
		{
			get{ return _m_kill_count.has_value; }
		}

		public uint m_online_time
		{
			get{ return _m_online_time.member_value; }
			set{ _m_online_time.member_value = value; }
		}
		public bool has_m_online_time
		{
			get{ return _m_online_time.has_value; }
		}

		public uint m_get_gold
		{
			get{ return _m_get_gold.member_value; }
			set{ _m_get_gold.member_value = value; }
		}
		public bool has_m_get_gold
		{
			get{ return _m_get_gold.has_value; }
		}

		public uint m_dead_count
		{
			get{ return _m_dead_count.member_value; }
			set{ _m_dead_count.member_value = value; }
		}
		public bool has_m_dead_count
		{
			get{ return _m_dead_count.has_value; }
		}

		public uint m_resolve_count
		{
			get{ return _m_resolve_count.member_value; }
			set{ _m_resolve_count.member_value = value; }
		}
		public bool has_m_resolve_count
		{
			get{ return _m_resolve_count.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_nPlayerId.Serialize(_m_nPlayerId.member_value, ref out_stream);

			count += _m_nServerId.Serialize(_m_nServerId.member_value, ref out_stream);

			count += _m_strPlayerName.Serialize(_m_strPlayerName.member_value, ref out_stream);

			count += _m_strUnionName.Serialize(_m_strUnionName.member_value, ref out_stream);

			count += _m_toy_type.Serialize(_m_toy_type.member_value, ref out_stream);

			count += _m_nRanking.Serialize(_m_nRanking.member_value, ref out_stream);

			count += _m_uRecharge.Serialize(_m_uRecharge.member_value, ref out_stream);

			count += _m_nLevel.Serialize(_m_nLevel.member_value, ref out_stream);

			count += _m_all_role_level.Serialize(_m_all_role_level.member_value, ref out_stream);

			count += _m_max_capacity.Serialize(_m_max_capacity.member_value, ref out_stream);

			count += _m_chess_second.Serialize(_m_chess_second.member_value, ref out_stream);

			count += _m_chess_dice.Serialize(_m_chess_dice.member_value, ref out_stream);

			count += _m_pass_chess_count.Serialize(_m_pass_chess_count.member_value, ref out_stream);

			count += _m_nLadderScore.Serialize(_m_nLadderScore.member_value, ref out_stream);

			count += _m_nLadderSeason.Serialize(_m_nLadderSeason.member_value, ref out_stream);

			count += _m_kill_count.Serialize(_m_kill_count.member_value, ref out_stream);

			count += _m_online_time.Serialize(_m_online_time.member_value, ref out_stream);

			count += _m_get_gold.Serialize(_m_get_gold.member_value, ref out_stream);

			count += _m_dead_count.Serialize(_m_dead_count.member_value, ref out_stream);

			count += _m_resolve_count.Serialize(_m_resolve_count.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			PlayerId temp_m_nPlayerId = new PlayerId();
			one_count = _m_nPlayerId.ParseFrom(temp_m_nPlayerId, ref int_stream);
			if (0 < one_count)
			{
					_m_nPlayerId.member_value = temp_m_nPlayerId;
					count = count + one_count;
			}

			uint temp_m_nServerId = 0;
			one_count = _m_nServerId.ParseFrom(ref temp_m_nServerId, ref int_stream);
			if (0 < one_count)
			{
					_m_nServerId.member_value = temp_m_nServerId;
					count = count + one_count;
			}

			string temp_m_strPlayerName = "";
			one_count = _m_strPlayerName.ParseFrom(ref temp_m_strPlayerName, ref int_stream);
			if (0 < one_count)
			{
					_m_strPlayerName.member_value = temp_m_strPlayerName;
					count = count + one_count;
			}

			string temp_m_strUnionName = "";
			one_count = _m_strUnionName.ParseFrom(ref temp_m_strUnionName, ref int_stream);
			if (0 < one_count)
			{
					_m_strUnionName.member_value = temp_m_strUnionName;
					count = count + one_count;
			}

			uint temp_m_toy_type = 0;
			one_count = _m_toy_type.ParseFrom(ref temp_m_toy_type, ref int_stream);
			if (0 < one_count)
			{
					_m_toy_type.member_value = temp_m_toy_type;
					count = count + one_count;
			}

			uint temp_m_nRanking = 0;
			one_count = _m_nRanking.ParseFrom(ref temp_m_nRanking, ref int_stream);
			if (0 < one_count)
			{
					_m_nRanking.member_value = temp_m_nRanking;
					count = count + one_count;
			}

			uint temp_m_uRecharge = 0;
			one_count = _m_uRecharge.ParseFrom(ref temp_m_uRecharge, ref int_stream);
			if (0 < one_count)
			{
					_m_uRecharge.member_value = temp_m_uRecharge;
					count = count + one_count;
			}

			uint temp_m_nLevel = 0;
			one_count = _m_nLevel.ParseFrom(ref temp_m_nLevel, ref int_stream);
			if (0 < one_count)
			{
					_m_nLevel.member_value = temp_m_nLevel;
					count = count + one_count;
			}

			uint temp_m_all_role_level = 0;
			one_count = _m_all_role_level.ParseFrom(ref temp_m_all_role_level, ref int_stream);
			if (0 < one_count)
			{
					_m_all_role_level.member_value = temp_m_all_role_level;
					count = count + one_count;
			}

			uint temp_m_max_capacity = 0;
			one_count = _m_max_capacity.ParseFrom(ref temp_m_max_capacity, ref int_stream);
			if (0 < one_count)
			{
					_m_max_capacity.member_value = temp_m_max_capacity;
					count = count + one_count;
			}

			uint temp_m_chess_second = 0;
			one_count = _m_chess_second.ParseFrom(ref temp_m_chess_second, ref int_stream);
			if (0 < one_count)
			{
					_m_chess_second.member_value = temp_m_chess_second;
					count = count + one_count;
			}

			uint temp_m_chess_dice = 0;
			one_count = _m_chess_dice.ParseFrom(ref temp_m_chess_dice, ref int_stream);
			if (0 < one_count)
			{
					_m_chess_dice.member_value = temp_m_chess_dice;
					count = count + one_count;
			}

			uint temp_m_pass_chess_count = 0;
			one_count = _m_pass_chess_count.ParseFrom(ref temp_m_pass_chess_count, ref int_stream);
			if (0 < one_count)
			{
					_m_pass_chess_count.member_value = temp_m_pass_chess_count;
					count = count + one_count;
			}

			uint temp_m_nLadderScore = 0;
			one_count = _m_nLadderScore.ParseFrom(ref temp_m_nLadderScore, ref int_stream);
			if (0 < one_count)
			{
					_m_nLadderScore.member_value = temp_m_nLadderScore;
					count = count + one_count;
			}

			uint temp_m_nLadderSeason = 0;
			one_count = _m_nLadderSeason.ParseFrom(ref temp_m_nLadderSeason, ref int_stream);
			if (0 < one_count)
			{
					_m_nLadderSeason.member_value = temp_m_nLadderSeason;
					count = count + one_count;
			}

			uint temp_m_kill_count = 0;
			one_count = _m_kill_count.ParseFrom(ref temp_m_kill_count, ref int_stream);
			if (0 < one_count)
			{
					_m_kill_count.member_value = temp_m_kill_count;
					count = count + one_count;
			}

			uint temp_m_online_time = 0;
			one_count = _m_online_time.ParseFrom(ref temp_m_online_time, ref int_stream);
			if (0 < one_count)
			{
					_m_online_time.member_value = temp_m_online_time;
					count = count + one_count;
			}

			uint temp_m_get_gold = 0;
			one_count = _m_get_gold.ParseFrom(ref temp_m_get_gold, ref int_stream);
			if (0 < one_count)
			{
					_m_get_gold.member_value = temp_m_get_gold;
					count = count + one_count;
			}

			uint temp_m_dead_count = 0;
			one_count = _m_dead_count.ParseFrom(ref temp_m_dead_count, ref int_stream);
			if (0 < one_count)
			{
					_m_dead_count.member_value = temp_m_dead_count;
					count = count + one_count;
			}

			uint temp_m_resolve_count = 0;
			one_count = _m_resolve_count.ParseFrom(ref temp_m_resolve_count, ref int_stream);
			if (0 < one_count)
			{
					_m_resolve_count.member_value = temp_m_resolve_count;
					count = count + one_count;
			}

			return count;
		}
	}

	public class PlayerRankingList : IMessage
	{
		private ProtoMemberEmbeddedList<PlayerRankingInfo> _m_playerList;	//排行榜人物数据

		public PlayerRankingList()
		{
			_m_playerList = new ProtoMemberEmbeddedList<PlayerRankingInfo>(1, false);
		}

		public System.Collections.Generic.List<PlayerRankingInfo> m_playerList
		{
			get{ return _m_playerList.member_value; }
		}
		public bool has_m_playerList
		{
			get{ return _m_playerList.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			foreach(PlayerRankingInfo one_member_value in _m_playerList.member_value)
			{
				count += _m_playerList.Serialize(one_member_value, ref out_stream);
			}

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			while (true)
			{
				PlayerRankingInfo one_member_value = new PlayerRankingInfo();
				one_count = _m_playerList.ParseFrom(one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_playerList.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			return count;
		}
	}

	public class PlayerSeatInfo : IMessage
	{
		private ProtoMemberUInt32 _m_seat_index;	// 队伍槽位号
		private ProtoMemberUInt32 _m_toy_type;	// 槽位上的英雄id
		private ProtoMemberUInt32 _m_toy_sn;	// 是否是玩具召唤
		private ProtoMemberUInt32 _m_borrow_id;	// 是否是借用英雄

		public PlayerSeatInfo()
		{
			_m_seat_index = new ProtoMemberUInt32(1, false);
			_m_toy_type = new ProtoMemberUInt32(2, false);
			_m_toy_sn = new ProtoMemberUInt32(3, false);
			_m_borrow_id = new ProtoMemberUInt32(4, false);
		}

		public PlayerSeatInfo(uint __m_seat_index, uint __m_toy_type, uint __m_toy_sn, uint __m_borrow_id)
		{
			_m_seat_index = new ProtoMemberUInt32(1, false);
			_m_seat_index.member_value = __m_seat_index;
			_m_toy_type = new ProtoMemberUInt32(2, false);
			_m_toy_type.member_value = __m_toy_type;
			_m_toy_sn = new ProtoMemberUInt32(3, false);
			_m_toy_sn.member_value = __m_toy_sn;
			_m_borrow_id = new ProtoMemberUInt32(4, false);
			_m_borrow_id.member_value = __m_borrow_id;
		}

		public uint m_seat_index
		{
			get{ return _m_seat_index.member_value; }
			set{ _m_seat_index.member_value = value; }
		}
		public bool has_m_seat_index
		{
			get{ return _m_seat_index.has_value; }
		}

		public uint m_toy_type
		{
			get{ return _m_toy_type.member_value; }
			set{ _m_toy_type.member_value = value; }
		}
		public bool has_m_toy_type
		{
			get{ return _m_toy_type.has_value; }
		}

		public uint m_toy_sn
		{
			get{ return _m_toy_sn.member_value; }
			set{ _m_toy_sn.member_value = value; }
		}
		public bool has_m_toy_sn
		{
			get{ return _m_toy_sn.has_value; }
		}

		public uint m_borrow_id
		{
			get{ return _m_borrow_id.member_value; }
			set{ _m_borrow_id.member_value = value; }
		}
		public bool has_m_borrow_id
		{
			get{ return _m_borrow_id.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_seat_index.Serialize(_m_seat_index.member_value, ref out_stream);

			count += _m_toy_type.Serialize(_m_toy_type.member_value, ref out_stream);

			count += _m_toy_sn.Serialize(_m_toy_sn.member_value, ref out_stream);

			count += _m_borrow_id.Serialize(_m_borrow_id.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_seat_index = 0;
			one_count = _m_seat_index.ParseFrom(ref temp_m_seat_index, ref int_stream);
			if (0 < one_count)
			{
					_m_seat_index.member_value = temp_m_seat_index;
					count = count + one_count;
			}

			uint temp_m_toy_type = 0;
			one_count = _m_toy_type.ParseFrom(ref temp_m_toy_type, ref int_stream);
			if (0 < one_count)
			{
					_m_toy_type.member_value = temp_m_toy_type;
					count = count + one_count;
			}

			uint temp_m_toy_sn = 0;
			one_count = _m_toy_sn.ParseFrom(ref temp_m_toy_sn, ref int_stream);
			if (0 < one_count)
			{
					_m_toy_sn.member_value = temp_m_toy_sn;
					count = count + one_count;
			}

			uint temp_m_borrow_id = 0;
			one_count = _m_borrow_id.ParseFrom(ref temp_m_borrow_id, ref int_stream);
			if (0 < one_count)
			{
					_m_borrow_id.member_value = temp_m_borrow_id;
					count = count + one_count;
			}

			return count;
		}
	}

	public class PlayerShopInfo : IMessage
	{
		private ProtoMemberUInt32 _m_change_count;	// 本日已刷新次数
		private ProtoMemberEmbeddedList<PlayerBuyInfo> _m_buy_list;	// 当前刷新出来的商品列表

		public PlayerShopInfo()
		{
			_m_change_count = new ProtoMemberUInt32(1, false);
			_m_buy_list = new ProtoMemberEmbeddedList<PlayerBuyInfo>(2, false);
		}

		public PlayerShopInfo(uint __m_change_count)
		{
			_m_change_count = new ProtoMemberUInt32(1, false);
			_m_change_count.member_value = __m_change_count;
			_m_buy_list = new ProtoMemberEmbeddedList<PlayerBuyInfo>(2, false);
		}

		public uint m_change_count
		{
			get{ return _m_change_count.member_value; }
			set{ _m_change_count.member_value = value; }
		}
		public bool has_m_change_count
		{
			get{ return _m_change_count.has_value; }
		}

		public System.Collections.Generic.List<PlayerBuyInfo> m_buy_list
		{
			get{ return _m_buy_list.member_value; }
		}
		public bool has_m_buy_list
		{
			get{ return _m_buy_list.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_change_count.Serialize(_m_change_count.member_value, ref out_stream);

			foreach(PlayerBuyInfo one_member_value in _m_buy_list.member_value)
			{
				count += _m_buy_list.Serialize(one_member_value, ref out_stream);
			}

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_change_count = 0;
			one_count = _m_change_count.ParseFrom(ref temp_m_change_count, ref int_stream);
			if (0 < one_count)
			{
					_m_change_count.member_value = temp_m_change_count;
					count = count + one_count;
			}

			while (true)
			{
				PlayerBuyInfo one_member_value = new PlayerBuyInfo();
				one_count = _m_buy_list.ParseFrom(one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_buy_list.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			return count;
		}
	}

	public class PlayerShow : IMessage
	{
		private ProtoMemberUInt32 _m_account_id;	// 角色id == 账号id
		private ProtoMemberUInt32 _m_server_id;	// 所属服id
		private ProtoMemberString _m_player_name;	// 角色名称
		private ProtoMemberUInt32 _m_player_toy_type;	// 角色当前使用的玩具模型id
		private ProtoMemberEmbedded<PlayerPosInfo> _m_player_pos;	// 角色坐标信息
		private ProtoMemberUInt64 _m_team_id;	// 所在队伍id，0表示未加入队伍
		private ProtoMemberEmbeddedList<PlayerShowTeamSeat> _m_seat_list;	// 上阵的英雄列表
		private ProtoMemberUInt32 _m_hunting_lv;	// 狩猎等级
		private ProtoMemberUInt32 _m_funny_lv;	// 娱乐模式等级
		private ProtoMemberUInt32 _m_elite_lv;	// 精英模式等级

		public PlayerShow()
		{
			_m_account_id = new ProtoMemberUInt32(1, true);
			_m_server_id = new ProtoMemberUInt32(2, true);
			_m_player_name = new ProtoMemberString(3, true);
			_m_player_toy_type = new ProtoMemberUInt32(4, true);
			_m_player_pos = new ProtoMemberEmbedded<PlayerPosInfo>(5, true);
			_m_player_pos.member_value = new PlayerPosInfo();
			_m_team_id = new ProtoMemberUInt64(6, true);
			_m_seat_list = new ProtoMemberEmbeddedList<PlayerShowTeamSeat>(7, false);
			_m_hunting_lv = new ProtoMemberUInt32(8, true);
			_m_funny_lv = new ProtoMemberUInt32(9, true);
			_m_elite_lv = new ProtoMemberUInt32(10, true);
		}

		public PlayerShow(uint __m_account_id, uint __m_server_id, string __m_player_name, uint __m_player_toy_type, ulong __m_team_id, uint __m_hunting_lv, uint __m_funny_lv, uint __m_elite_lv)
		{
			_m_account_id = new ProtoMemberUInt32(1, true);
			_m_account_id.member_value = __m_account_id;
			_m_server_id = new ProtoMemberUInt32(2, true);
			_m_server_id.member_value = __m_server_id;
			_m_player_name = new ProtoMemberString(3, true);
			_m_player_name.member_value = __m_player_name;
			_m_player_toy_type = new ProtoMemberUInt32(4, true);
			_m_player_toy_type.member_value = __m_player_toy_type;
			_m_player_pos = new ProtoMemberEmbedded<PlayerPosInfo>(5, true);
			_m_player_pos.member_value = new PlayerPosInfo();
			_m_team_id = new ProtoMemberUInt64(6, true);
			_m_team_id.member_value = __m_team_id;
			_m_seat_list = new ProtoMemberEmbeddedList<PlayerShowTeamSeat>(7, false);
			_m_hunting_lv = new ProtoMemberUInt32(8, true);
			_m_hunting_lv.member_value = __m_hunting_lv;
			_m_funny_lv = new ProtoMemberUInt32(9, true);
			_m_funny_lv.member_value = __m_funny_lv;
			_m_elite_lv = new ProtoMemberUInt32(10, true);
			_m_elite_lv.member_value = __m_elite_lv;
		}

		public uint m_account_id
		{
			get{ return _m_account_id.member_value; }
			set{ _m_account_id.member_value = value; }
		}
		public bool has_m_account_id
		{
			get{ return _m_account_id.has_value; }
		}

		public uint m_server_id
		{
			get{ return _m_server_id.member_value; }
			set{ _m_server_id.member_value = value; }
		}
		public bool has_m_server_id
		{
			get{ return _m_server_id.has_value; }
		}

		public string m_player_name
		{
			get{ return _m_player_name.member_value; }
			set{ _m_player_name.member_value = value; }
		}
		public bool has_m_player_name
		{
			get{ return _m_player_name.has_value; }
		}

		public uint m_player_toy_type
		{
			get{ return _m_player_toy_type.member_value; }
			set{ _m_player_toy_type.member_value = value; }
		}
		public bool has_m_player_toy_type
		{
			get{ return _m_player_toy_type.has_value; }
		}

		public PlayerPosInfo m_player_pos
		{
			get{ return _m_player_pos.member_value as PlayerPosInfo; }
			set{ _m_player_pos.member_value = value; }
		}
		public bool has_m_player_pos
		{
			get{ return _m_player_pos.has_value; }
		}

		public ulong m_team_id
		{
			get{ return _m_team_id.member_value; }
			set{ _m_team_id.member_value = value; }
		}
		public bool has_m_team_id
		{
			get{ return _m_team_id.has_value; }
		}

		public System.Collections.Generic.List<PlayerShowTeamSeat> m_seat_list
		{
			get{ return _m_seat_list.member_value; }
		}
		public bool has_m_seat_list
		{
			get{ return _m_seat_list.has_value; }
		}

		public uint m_hunting_lv
		{
			get{ return _m_hunting_lv.member_value; }
			set{ _m_hunting_lv.member_value = value; }
		}
		public bool has_m_hunting_lv
		{
			get{ return _m_hunting_lv.has_value; }
		}

		public uint m_funny_lv
		{
			get{ return _m_funny_lv.member_value; }
			set{ _m_funny_lv.member_value = value; }
		}
		public bool has_m_funny_lv
		{
			get{ return _m_funny_lv.has_value; }
		}

		public uint m_elite_lv
		{
			get{ return _m_elite_lv.member_value; }
			set{ _m_elite_lv.member_value = value; }
		}
		public bool has_m_elite_lv
		{
			get{ return _m_elite_lv.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_account_id.Serialize(_m_account_id.member_value, ref out_stream);

			count += _m_server_id.Serialize(_m_server_id.member_value, ref out_stream);

			count += _m_player_name.Serialize(_m_player_name.member_value, ref out_stream);

			count += _m_player_toy_type.Serialize(_m_player_toy_type.member_value, ref out_stream);

			count += _m_player_pos.Serialize(_m_player_pos.member_value, ref out_stream);

			count += _m_team_id.Serialize(_m_team_id.member_value, ref out_stream);

			foreach(PlayerShowTeamSeat one_member_value in _m_seat_list.member_value)
			{
				count += _m_seat_list.Serialize(one_member_value, ref out_stream);
			}

			count += _m_hunting_lv.Serialize(_m_hunting_lv.member_value, ref out_stream);

			count += _m_funny_lv.Serialize(_m_funny_lv.member_value, ref out_stream);

			count += _m_elite_lv.Serialize(_m_elite_lv.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_account_id = 0;
			one_count = _m_account_id.ParseFrom(ref temp_m_account_id, ref int_stream);
			if (0 < one_count)
			{
					_m_account_id.member_value = temp_m_account_id;
					count = count + one_count;
			}

			uint temp_m_server_id = 0;
			one_count = _m_server_id.ParseFrom(ref temp_m_server_id, ref int_stream);
			if (0 < one_count)
			{
					_m_server_id.member_value = temp_m_server_id;
					count = count + one_count;
			}

			string temp_m_player_name = "";
			one_count = _m_player_name.ParseFrom(ref temp_m_player_name, ref int_stream);
			if (0 < one_count)
			{
					_m_player_name.member_value = temp_m_player_name;
					count = count + one_count;
			}

			uint temp_m_player_toy_type = 0;
			one_count = _m_player_toy_type.ParseFrom(ref temp_m_player_toy_type, ref int_stream);
			if (0 < one_count)
			{
					_m_player_toy_type.member_value = temp_m_player_toy_type;
					count = count + one_count;
			}

			PlayerPosInfo temp_m_player_pos = new PlayerPosInfo();
			one_count = _m_player_pos.ParseFrom(temp_m_player_pos, ref int_stream);
			if (0 < one_count)
			{
					_m_player_pos.member_value = temp_m_player_pos;
					count = count + one_count;
			}

			ulong temp_m_team_id = 0;
			one_count = _m_team_id.ParseFrom(ref temp_m_team_id, ref int_stream);
			if (0 < one_count)
			{
					_m_team_id.member_value = temp_m_team_id;
					count = count + one_count;
			}

			while (true)
			{
				PlayerShowTeamSeat one_member_value = new PlayerShowTeamSeat();
				one_count = _m_seat_list.ParseFrom(one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_seat_list.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			uint temp_m_hunting_lv = 0;
			one_count = _m_hunting_lv.ParseFrom(ref temp_m_hunting_lv, ref int_stream);
			if (0 < one_count)
			{
					_m_hunting_lv.member_value = temp_m_hunting_lv;
					count = count + one_count;
			}

			uint temp_m_funny_lv = 0;
			one_count = _m_funny_lv.ParseFrom(ref temp_m_funny_lv, ref int_stream);
			if (0 < one_count)
			{
					_m_funny_lv.member_value = temp_m_funny_lv;
					count = count + one_count;
			}

			uint temp_m_elite_lv = 0;
			one_count = _m_elite_lv.ParseFrom(ref temp_m_elite_lv, ref int_stream);
			if (0 < one_count)
			{
					_m_elite_lv.member_value = temp_m_elite_lv;
					count = count + one_count;
			}

			return count;
		}
	}

	public class PlayerShowTeamSeat : IMessage
	{
		private ProtoMemberUInt32 _m_seat_index;	// 上阵的槽位号列表
		private ProtoMemberUInt32 _m_toy_type;	// 上阵的英雄id列表
		private ProtoMemberUInt32 _m_toy_sn;	// 是否是玩具
		private ProtoMemberUInt32 _m_borrow_id;	// 是否是借用英雄

		public PlayerShowTeamSeat()
		{
			_m_seat_index = new ProtoMemberUInt32(1, true);
			_m_toy_type = new ProtoMemberUInt32(2, true);
			_m_toy_sn = new ProtoMemberUInt32(3, true);
			_m_borrow_id = new ProtoMemberUInt32(4, true);
		}

		public PlayerShowTeamSeat(uint __m_seat_index, uint __m_toy_type, uint __m_toy_sn, uint __m_borrow_id)
		{
			_m_seat_index = new ProtoMemberUInt32(1, true);
			_m_seat_index.member_value = __m_seat_index;
			_m_toy_type = new ProtoMemberUInt32(2, true);
			_m_toy_type.member_value = __m_toy_type;
			_m_toy_sn = new ProtoMemberUInt32(3, true);
			_m_toy_sn.member_value = __m_toy_sn;
			_m_borrow_id = new ProtoMemberUInt32(4, true);
			_m_borrow_id.member_value = __m_borrow_id;
		}

		public uint m_seat_index
		{
			get{ return _m_seat_index.member_value; }
			set{ _m_seat_index.member_value = value; }
		}
		public bool has_m_seat_index
		{
			get{ return _m_seat_index.has_value; }
		}

		public uint m_toy_type
		{
			get{ return _m_toy_type.member_value; }
			set{ _m_toy_type.member_value = value; }
		}
		public bool has_m_toy_type
		{
			get{ return _m_toy_type.has_value; }
		}

		public uint m_toy_sn
		{
			get{ return _m_toy_sn.member_value; }
			set{ _m_toy_sn.member_value = value; }
		}
		public bool has_m_toy_sn
		{
			get{ return _m_toy_sn.has_value; }
		}

		public uint m_borrow_id
		{
			get{ return _m_borrow_id.member_value; }
			set{ _m_borrow_id.member_value = value; }
		}
		public bool has_m_borrow_id
		{
			get{ return _m_borrow_id.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_seat_index.Serialize(_m_seat_index.member_value, ref out_stream);

			count += _m_toy_type.Serialize(_m_toy_type.member_value, ref out_stream);

			count += _m_toy_sn.Serialize(_m_toy_sn.member_value, ref out_stream);

			count += _m_borrow_id.Serialize(_m_borrow_id.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_seat_index = 0;
			one_count = _m_seat_index.ParseFrom(ref temp_m_seat_index, ref int_stream);
			if (0 < one_count)
			{
					_m_seat_index.member_value = temp_m_seat_index;
					count = count + one_count;
			}

			uint temp_m_toy_type = 0;
			one_count = _m_toy_type.ParseFrom(ref temp_m_toy_type, ref int_stream);
			if (0 < one_count)
			{
					_m_toy_type.member_value = temp_m_toy_type;
					count = count + one_count;
			}

			uint temp_m_toy_sn = 0;
			one_count = _m_toy_sn.ParseFrom(ref temp_m_toy_sn, ref int_stream);
			if (0 < one_count)
			{
					_m_toy_sn.member_value = temp_m_toy_sn;
					count = count + one_count;
			}

			uint temp_m_borrow_id = 0;
			one_count = _m_borrow_id.ParseFrom(ref temp_m_borrow_id, ref int_stream);
			if (0 < one_count)
			{
					_m_borrow_id.member_value = temp_m_borrow_id;
					count = count + one_count;
			}

			return count;
		}
	}

	public class PlayerStarChessInfo : IMessage
	{
		private ProtoMemberUInt64 _m_last_battle_time;	// 上一次战斗时间，用于判断是否是今日首场战斗
		private ProtoMemberUInt32 _m_today_win_count;	// 今日已胜利场次，用于判断是否是今日首胜
		private ProtoMemberUInt32 _m_today_battle_count;	// 今日已参加场次，用于计算前三场的鼓励状态
		private ProtoMemberUInt32 _m_used_second;	// 使用时间（最好成绩）
		private ProtoMemberUInt32 _m_used_dice;	// 使用骰子数（最好成绩）
		private ProtoMemberUInt32 _m_score_level;	// 成绩（d ～ sss）（0 ～ 6）

		public PlayerStarChessInfo()
		{
			_m_last_battle_time = new ProtoMemberUInt64(1, false);
			_m_today_win_count = new ProtoMemberUInt32(2, false);
			_m_today_battle_count = new ProtoMemberUInt32(3, false);
			_m_used_second = new ProtoMemberUInt32(4, false);
			_m_used_dice = new ProtoMemberUInt32(5, false);
			_m_score_level = new ProtoMemberUInt32(6, false);
		}

		public PlayerStarChessInfo(ulong __m_last_battle_time, uint __m_today_win_count, uint __m_today_battle_count, uint __m_used_second, uint __m_used_dice, uint __m_score_level)
		{
			_m_last_battle_time = new ProtoMemberUInt64(1, false);
			_m_last_battle_time.member_value = __m_last_battle_time;
			_m_today_win_count = new ProtoMemberUInt32(2, false);
			_m_today_win_count.member_value = __m_today_win_count;
			_m_today_battle_count = new ProtoMemberUInt32(3, false);
			_m_today_battle_count.member_value = __m_today_battle_count;
			_m_used_second = new ProtoMemberUInt32(4, false);
			_m_used_second.member_value = __m_used_second;
			_m_used_dice = new ProtoMemberUInt32(5, false);
			_m_used_dice.member_value = __m_used_dice;
			_m_score_level = new ProtoMemberUInt32(6, false);
			_m_score_level.member_value = __m_score_level;
		}

		public ulong m_last_battle_time
		{
			get{ return _m_last_battle_time.member_value; }
			set{ _m_last_battle_time.member_value = value; }
		}
		public bool has_m_last_battle_time
		{
			get{ return _m_last_battle_time.has_value; }
		}

		public uint m_today_win_count
		{
			get{ return _m_today_win_count.member_value; }
			set{ _m_today_win_count.member_value = value; }
		}
		public bool has_m_today_win_count
		{
			get{ return _m_today_win_count.has_value; }
		}

		public uint m_today_battle_count
		{
			get{ return _m_today_battle_count.member_value; }
			set{ _m_today_battle_count.member_value = value; }
		}
		public bool has_m_today_battle_count
		{
			get{ return _m_today_battle_count.has_value; }
		}

		public uint m_used_second
		{
			get{ return _m_used_second.member_value; }
			set{ _m_used_second.member_value = value; }
		}
		public bool has_m_used_second
		{
			get{ return _m_used_second.has_value; }
		}

		public uint m_used_dice
		{
			get{ return _m_used_dice.member_value; }
			set{ _m_used_dice.member_value = value; }
		}
		public bool has_m_used_dice
		{
			get{ return _m_used_dice.has_value; }
		}

		public uint m_score_level
		{
			get{ return _m_score_level.member_value; }
			set{ _m_score_level.member_value = value; }
		}
		public bool has_m_score_level
		{
			get{ return _m_score_level.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_last_battle_time.Serialize(_m_last_battle_time.member_value, ref out_stream);

			count += _m_today_win_count.Serialize(_m_today_win_count.member_value, ref out_stream);

			count += _m_today_battle_count.Serialize(_m_today_battle_count.member_value, ref out_stream);

			count += _m_used_second.Serialize(_m_used_second.member_value, ref out_stream);

			count += _m_used_dice.Serialize(_m_used_dice.member_value, ref out_stream);

			count += _m_score_level.Serialize(_m_score_level.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			ulong temp_m_last_battle_time = 0;
			one_count = _m_last_battle_time.ParseFrom(ref temp_m_last_battle_time, ref int_stream);
			if (0 < one_count)
			{
					_m_last_battle_time.member_value = temp_m_last_battle_time;
					count = count + one_count;
			}

			uint temp_m_today_win_count = 0;
			one_count = _m_today_win_count.ParseFrom(ref temp_m_today_win_count, ref int_stream);
			if (0 < one_count)
			{
					_m_today_win_count.member_value = temp_m_today_win_count;
					count = count + one_count;
			}

			uint temp_m_today_battle_count = 0;
			one_count = _m_today_battle_count.ParseFrom(ref temp_m_today_battle_count, ref int_stream);
			if (0 < one_count)
			{
					_m_today_battle_count.member_value = temp_m_today_battle_count;
					count = count + one_count;
			}

			uint temp_m_used_second = 0;
			one_count = _m_used_second.ParseFrom(ref temp_m_used_second, ref int_stream);
			if (0 < one_count)
			{
					_m_used_second.member_value = temp_m_used_second;
					count = count + one_count;
			}

			uint temp_m_used_dice = 0;
			one_count = _m_used_dice.ParseFrom(ref temp_m_used_dice, ref int_stream);
			if (0 < one_count)
			{
					_m_used_dice.member_value = temp_m_used_dice;
					count = count + one_count;
			}

			uint temp_m_score_level = 0;
			one_count = _m_score_level.ParseFrom(ref temp_m_score_level, ref int_stream);
			if (0 < one_count)
			{
					_m_score_level.member_value = temp_m_score_level;
					count = count + one_count;
			}

			return count;
		}
	}

	public class PlayerStatisticsInfo : IMessage
	{
		private ProtoMemberEnum<PlayerStatisticsType> _m_statistics_type;	// 统计项
		private ProtoMemberUInt32 _m_statistics_value;	// 统计值

		public PlayerStatisticsInfo()
		{
			_m_statistics_type = new ProtoMemberEnum<PlayerStatisticsType>(1, false);
			_m_statistics_value = new ProtoMemberUInt32(2, false);
		}

		public PlayerStatisticsInfo(PlayerStatisticsType __m_statistics_type, uint __m_statistics_value)
		{
			_m_statistics_type = new ProtoMemberEnum<PlayerStatisticsType>(1, false);
			_m_statistics_type.member_value = __m_statistics_type;
			_m_statistics_value = new ProtoMemberUInt32(2, false);
			_m_statistics_value.member_value = __m_statistics_value;
		}

		public PlayerStatisticsType m_statistics_type
		{
			get{ return _m_statistics_type.member_value; }
			set{ _m_statistics_type.member_value = value; }
		}
		public bool has_m_statistics_type
		{
			get{ return _m_statistics_type.has_value; }
		}

		public uint m_statistics_value
		{
			get{ return _m_statistics_value.member_value; }
			set{ _m_statistics_value.member_value = value; }
		}
		public bool has_m_statistics_value
		{
			get{ return _m_statistics_value.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_statistics_type.Serialize((uint)_m_statistics_type.member_value, ref out_stream);

			count += _m_statistics_value.Serialize(_m_statistics_value.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_statistics_type = 0;
			one_count = _m_statistics_type.ParseFrom(ref temp_m_statistics_type, ref int_stream);
			if (0 < one_count)
			{
					_m_statistics_type.member_value = (PlayerStatisticsType)temp_m_statistics_type;
					count = count + one_count;
			}

			uint temp_m_statistics_value = 0;
			one_count = _m_statistics_value.ParseFrom(ref temp_m_statistics_value, ref int_stream);
			if (0 < one_count)
			{
					_m_statistics_value.member_value = temp_m_statistics_value;
					count = count + one_count;
			}

			return count;
		}
	}

	public class PlayerStatisticsList : IMessage
	{
		private ProtoMemberEmbeddedList<PlayerStatisticsInfo> _m_statistics_list;	// 角色统计信息列表

		public PlayerStatisticsList()
		{
			_m_statistics_list = new ProtoMemberEmbeddedList<PlayerStatisticsInfo>(1, false);
		}

		public System.Collections.Generic.List<PlayerStatisticsInfo> m_statistics_list
		{
			get{ return _m_statistics_list.member_value; }
		}
		public bool has_m_statistics_list
		{
			get{ return _m_statistics_list.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			foreach(PlayerStatisticsInfo one_member_value in _m_statistics_list.member_value)
			{
				count += _m_statistics_list.Serialize(one_member_value, ref out_stream);
			}

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			while (true)
			{
				PlayerStatisticsInfo one_member_value = new PlayerStatisticsInfo();
				one_count = _m_statistics_list.ParseFrom(one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_statistics_list.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			return count;
		}
	}

	public enum PlayerStatisticsType
	{
		PlayerStatisticsType_OnlineHours = 0,					// 累计在线时间
		PlayerStatisticsType_PVEChessWins = 1,					// PVE星空迷棋通关
		PlayerStatisticsType_PVPMatchWins = 2,					// PVP竞技场胜场
		PlayerStatisticsType_BattleFails  = 3,					// 死亡次数/失败次数
		PlayerStatisticsType_KillMonsters = 4,					// 杀死怪物
		PlayerStatisticsType_Heros = 5,							// 拥有英雄
		PlayerStatisticsType_DecomposeItems = 6,				// 分解粉尘
		PlayerStatisticsType_Gold = 7,							// 获取金币
		PlayerStatisticsType_Friends = 8,						// 好友数
	}

	public class PlayerTalentList : IMessage
	{
		private ProtoMemberUInt32 _m_talent_points;	// 玩家当前总天赋点
		private ProtoMemberUInt32 _m_curr_plan_index;	// 当前使用的方案序号0-2
		private ProtoMemberEmbeddedList<PlayerTalentPlan> _m_talent_plan_list;	// 方案列表

		public PlayerTalentList()
		{
			_m_talent_points = new ProtoMemberUInt32(1, false);
			_m_curr_plan_index = new ProtoMemberUInt32(2, false);
			_m_talent_plan_list = new ProtoMemberEmbeddedList<PlayerTalentPlan>(3, false);
		}

		public PlayerTalentList(uint __m_talent_points, uint __m_curr_plan_index)
		{
			_m_talent_points = new ProtoMemberUInt32(1, false);
			_m_talent_points.member_value = __m_talent_points;
			_m_curr_plan_index = new ProtoMemberUInt32(2, false);
			_m_curr_plan_index.member_value = __m_curr_plan_index;
			_m_talent_plan_list = new ProtoMemberEmbeddedList<PlayerTalentPlan>(3, false);
		}

		public uint m_talent_points
		{
			get{ return _m_talent_points.member_value; }
			set{ _m_talent_points.member_value = value; }
		}
		public bool has_m_talent_points
		{
			get{ return _m_talent_points.has_value; }
		}

		public uint m_curr_plan_index
		{
			get{ return _m_curr_plan_index.member_value; }
			set{ _m_curr_plan_index.member_value = value; }
		}
		public bool has_m_curr_plan_index
		{
			get{ return _m_curr_plan_index.has_value; }
		}

		public System.Collections.Generic.List<PlayerTalentPlan> m_talent_plan_list
		{
			get{ return _m_talent_plan_list.member_value; }
		}
		public bool has_m_talent_plan_list
		{
			get{ return _m_talent_plan_list.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_talent_points.Serialize(_m_talent_points.member_value, ref out_stream);

			count += _m_curr_plan_index.Serialize(_m_curr_plan_index.member_value, ref out_stream);

			foreach(PlayerTalentPlan one_member_value in _m_talent_plan_list.member_value)
			{
				count += _m_talent_plan_list.Serialize(one_member_value, ref out_stream);
			}

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_talent_points = 0;
			one_count = _m_talent_points.ParseFrom(ref temp_m_talent_points, ref int_stream);
			if (0 < one_count)
			{
					_m_talent_points.member_value = temp_m_talent_points;
					count = count + one_count;
			}

			uint temp_m_curr_plan_index = 0;
			one_count = _m_curr_plan_index.ParseFrom(ref temp_m_curr_plan_index, ref int_stream);
			if (0 < one_count)
			{
					_m_curr_plan_index.member_value = temp_m_curr_plan_index;
					count = count + one_count;
			}

			while (true)
			{
				PlayerTalentPlan one_member_value = new PlayerTalentPlan();
				one_count = _m_talent_plan_list.ParseFrom(one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_talent_plan_list.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			return count;
		}
	}

	public class PlayerTalentPlan : IMessage
	{
		private ProtoMemberUInt32 _m_plan_index;	// 方案序号0-2
		private ProtoMemberUInt32 _m_talent_id;	// 天赋id
		private ProtoMemberUInt32 _m_talent_lv;	// 天赋等级

		public PlayerTalentPlan()
		{
			_m_plan_index = new ProtoMemberUInt32(1, false);
			_m_talent_id = new ProtoMemberUInt32(2, false);
			_m_talent_lv = new ProtoMemberUInt32(3, false);
		}

		public PlayerTalentPlan(uint __m_plan_index, uint __m_talent_id, uint __m_talent_lv)
		{
			_m_plan_index = new ProtoMemberUInt32(1, false);
			_m_plan_index.member_value = __m_plan_index;
			_m_talent_id = new ProtoMemberUInt32(2, false);
			_m_talent_id.member_value = __m_talent_id;
			_m_talent_lv = new ProtoMemberUInt32(3, false);
			_m_talent_lv.member_value = __m_talent_lv;
		}

		public uint m_plan_index
		{
			get{ return _m_plan_index.member_value; }
			set{ _m_plan_index.member_value = value; }
		}
		public bool has_m_plan_index
		{
			get{ return _m_plan_index.has_value; }
		}

		public uint m_talent_id
		{
			get{ return _m_talent_id.member_value; }
			set{ _m_talent_id.member_value = value; }
		}
		public bool has_m_talent_id
		{
			get{ return _m_talent_id.has_value; }
		}

		public uint m_talent_lv
		{
			get{ return _m_talent_lv.member_value; }
			set{ _m_talent_lv.member_value = value; }
		}
		public bool has_m_talent_lv
		{
			get{ return _m_talent_lv.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_plan_index.Serialize(_m_plan_index.member_value, ref out_stream);

			count += _m_talent_id.Serialize(_m_talent_id.member_value, ref out_stream);

			count += _m_talent_lv.Serialize(_m_talent_lv.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_plan_index = 0;
			one_count = _m_plan_index.ParseFrom(ref temp_m_plan_index, ref int_stream);
			if (0 < one_count)
			{
					_m_plan_index.member_value = temp_m_plan_index;
					count = count + one_count;
			}

			uint temp_m_talent_id = 0;
			one_count = _m_talent_id.ParseFrom(ref temp_m_talent_id, ref int_stream);
			if (0 < one_count)
			{
					_m_talent_id.member_value = temp_m_talent_id;
					count = count + one_count;
			}

			uint temp_m_talent_lv = 0;
			one_count = _m_talent_lv.ParseFrom(ref temp_m_talent_lv, ref int_stream);
			if (0 < one_count)
			{
					_m_talent_lv.member_value = temp_m_talent_lv;
					count = count + one_count;
			}

			return count;
		}
	}

	public enum PlayerTalentType
	{
		TalentType_Attack = 0,		// 攻击类型
		TalentType_Defence = 1,		// 防御类型
		TalentType_Support = 2,		// 辅助类型
	}

	public class PlayerTaskInfo : IMessage
	{
		private ProtoMemberUInt32 _m_task_index;	// 日常任务序号（0-9，最多10个日常任务）
		private ProtoMemberUInt32 _m_task_id;	// 任务表id
		private ProtoMemberUInt32 _m_change_count;	// 任务已替换次数（每个任务最多替换一次）
		private ProtoMemberEmbeddedList<PlayerTaskNeedItem> _m_task_progress;	// 任务所需物品数量/完成进度
		private ProtoMemberBool _m_is_finsh;	// 任务是否已完成
		private ProtoMemberBool _m_is_reward;	// 奖励是否已领取

		public PlayerTaskInfo()
		{
			_m_task_index = new ProtoMemberUInt32(1, false);
			_m_task_id = new ProtoMemberUInt32(2, false);
			_m_change_count = new ProtoMemberUInt32(3, false);
			_m_task_progress = new ProtoMemberEmbeddedList<PlayerTaskNeedItem>(4, false);
			_m_is_finsh = new ProtoMemberBool(5, false);
			_m_is_reward = new ProtoMemberBool(6, false);
		}

		public PlayerTaskInfo(uint __m_task_index, uint __m_task_id, uint __m_change_count, bool __m_is_finsh, bool __m_is_reward)
		{
			_m_task_index = new ProtoMemberUInt32(1, false);
			_m_task_index.member_value = __m_task_index;
			_m_task_id = new ProtoMemberUInt32(2, false);
			_m_task_id.member_value = __m_task_id;
			_m_change_count = new ProtoMemberUInt32(3, false);
			_m_change_count.member_value = __m_change_count;
			_m_task_progress = new ProtoMemberEmbeddedList<PlayerTaskNeedItem>(4, false);
			_m_is_finsh = new ProtoMemberBool(5, false);
			_m_is_finsh.member_value = __m_is_finsh;
			_m_is_reward = new ProtoMemberBool(6, false);
			_m_is_reward.member_value = __m_is_reward;
		}

		public uint m_task_index
		{
			get{ return _m_task_index.member_value; }
			set{ _m_task_index.member_value = value; }
		}
		public bool has_m_task_index
		{
			get{ return _m_task_index.has_value; }
		}

		public uint m_task_id
		{
			get{ return _m_task_id.member_value; }
			set{ _m_task_id.member_value = value; }
		}
		public bool has_m_task_id
		{
			get{ return _m_task_id.has_value; }
		}

		public uint m_change_count
		{
			get{ return _m_change_count.member_value; }
			set{ _m_change_count.member_value = value; }
		}
		public bool has_m_change_count
		{
			get{ return _m_change_count.has_value; }
		}

		public System.Collections.Generic.List<PlayerTaskNeedItem> m_task_progress
		{
			get{ return _m_task_progress.member_value; }
		}
		public bool has_m_task_progress
		{
			get{ return _m_task_progress.has_value; }
		}

		public bool m_is_finsh
		{
			get{ return _m_is_finsh.member_value; }
			set{ _m_is_finsh.member_value = value; }
		}
		public bool has_m_is_finsh
		{
			get{ return _m_is_finsh.has_value; }
		}

		public bool m_is_reward
		{
			get{ return _m_is_reward.member_value; }
			set{ _m_is_reward.member_value = value; }
		}
		public bool has_m_is_reward
		{
			get{ return _m_is_reward.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_task_index.Serialize(_m_task_index.member_value, ref out_stream);

			count += _m_task_id.Serialize(_m_task_id.member_value, ref out_stream);

			count += _m_change_count.Serialize(_m_change_count.member_value, ref out_stream);

			foreach(PlayerTaskNeedItem one_member_value in _m_task_progress.member_value)
			{
				count += _m_task_progress.Serialize(one_member_value, ref out_stream);
			}

			count += _m_is_finsh.Serialize(_m_is_finsh.member_value, ref out_stream);

			count += _m_is_reward.Serialize(_m_is_reward.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_task_index = 0;
			one_count = _m_task_index.ParseFrom(ref temp_m_task_index, ref int_stream);
			if (0 < one_count)
			{
					_m_task_index.member_value = temp_m_task_index;
					count = count + one_count;
			}

			uint temp_m_task_id = 0;
			one_count = _m_task_id.ParseFrom(ref temp_m_task_id, ref int_stream);
			if (0 < one_count)
			{
					_m_task_id.member_value = temp_m_task_id;
					count = count + one_count;
			}

			uint temp_m_change_count = 0;
			one_count = _m_change_count.ParseFrom(ref temp_m_change_count, ref int_stream);
			if (0 < one_count)
			{
					_m_change_count.member_value = temp_m_change_count;
					count = count + one_count;
			}

			while (true)
			{
				PlayerTaskNeedItem one_member_value = new PlayerTaskNeedItem();
				one_count = _m_task_progress.ParseFrom(one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_task_progress.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			bool temp_m_is_finsh = false;
			one_count = _m_is_finsh.ParseFrom(ref temp_m_is_finsh, ref int_stream);
			if (0 < one_count)
			{
					_m_is_finsh.member_value = temp_m_is_finsh;
					count = count + one_count;
			}

			bool temp_m_is_reward = false;
			one_count = _m_is_reward.ParseFrom(ref temp_m_is_reward, ref int_stream);
			if (0 < one_count)
			{
					_m_is_reward.member_value = temp_m_is_reward;
					count = count + one_count;
			}

			return count;
		}
	}

	public class PlayerTaskList : IMessage
	{
		private ProtoMemberEmbeddedList<PlayerTaskInfo> _m_task_list;	// 角色日常任务列表
		private ProtoMemberEmbedded<PlayerMainTaskInfo> _m_main_task;	// 当前主线任务

		public PlayerTaskList()
		{
			_m_task_list = new ProtoMemberEmbeddedList<PlayerTaskInfo>(1, false);
			_m_main_task = new ProtoMemberEmbedded<PlayerMainTaskInfo>(2, false);
			_m_main_task.member_value = new PlayerMainTaskInfo();
		}

		public System.Collections.Generic.List<PlayerTaskInfo> m_task_list
		{
			get{ return _m_task_list.member_value; }
		}
		public bool has_m_task_list
		{
			get{ return _m_task_list.has_value; }
		}

		public PlayerMainTaskInfo m_main_task
		{
			get{ return _m_main_task.member_value as PlayerMainTaskInfo; }
			set{ _m_main_task.member_value = value; }
		}
		public bool has_m_main_task
		{
			get{ return _m_main_task.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			foreach(PlayerTaskInfo one_member_value in _m_task_list.member_value)
			{
				count += _m_task_list.Serialize(one_member_value, ref out_stream);
			}

			count += _m_main_task.Serialize(_m_main_task.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			while (true)
			{
				PlayerTaskInfo one_member_value = new PlayerTaskInfo();
				one_count = _m_task_list.ParseFrom(one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_task_list.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			PlayerMainTaskInfo temp_m_main_task = new PlayerMainTaskInfo();
			one_count = _m_main_task.ParseFrom(temp_m_main_task, ref int_stream);
			if (0 < one_count)
			{
					_m_main_task.member_value = temp_m_main_task;
					count = count + one_count;
			}

			return count;
		}
	}

	public class PlayerTaskNeedItem : IMessage
	{
		private ProtoMemberEnum<PlayerTaskType> _m_task_type;	// 任务表类型
		private ProtoMemberUInt32 _m_toy_type;	// 任务所需英雄类型（0表示不限）
		private ProtoMemberUInt32 _m_task_need_id;	// 任务所需物品id（0表示不限）
		private ProtoMemberUInt32 _m_item_need_count;	// 任务所需物品数量/完成进度（缓存避免查表）
		private ProtoMemberUInt32 _m_item_count;	// 已获得任务物品数量/完成进度

		public PlayerTaskNeedItem()
		{
			_m_task_type = new ProtoMemberEnum<PlayerTaskType>(1, false);
			_m_toy_type = new ProtoMemberUInt32(2, false);
			_m_task_need_id = new ProtoMemberUInt32(3, false);
			_m_item_need_count = new ProtoMemberUInt32(4, false);
			_m_item_count = new ProtoMemberUInt32(5, false);
		}

		public PlayerTaskNeedItem(PlayerTaskType __m_task_type, uint __m_toy_type, uint __m_task_need_id, uint __m_item_need_count, uint __m_item_count)
		{
			_m_task_type = new ProtoMemberEnum<PlayerTaskType>(1, false);
			_m_task_type.member_value = __m_task_type;
			_m_toy_type = new ProtoMemberUInt32(2, false);
			_m_toy_type.member_value = __m_toy_type;
			_m_task_need_id = new ProtoMemberUInt32(3, false);
			_m_task_need_id.member_value = __m_task_need_id;
			_m_item_need_count = new ProtoMemberUInt32(4, false);
			_m_item_need_count.member_value = __m_item_need_count;
			_m_item_count = new ProtoMemberUInt32(5, false);
			_m_item_count.member_value = __m_item_count;
		}

		public PlayerTaskType m_task_type
		{
			get{ return _m_task_type.member_value; }
			set{ _m_task_type.member_value = value; }
		}
		public bool has_m_task_type
		{
			get{ return _m_task_type.has_value; }
		}

		public uint m_toy_type
		{
			get{ return _m_toy_type.member_value; }
			set{ _m_toy_type.member_value = value; }
		}
		public bool has_m_toy_type
		{
			get{ return _m_toy_type.has_value; }
		}

		public uint m_task_need_id
		{
			get{ return _m_task_need_id.member_value; }
			set{ _m_task_need_id.member_value = value; }
		}
		public bool has_m_task_need_id
		{
			get{ return _m_task_need_id.has_value; }
		}

		public uint m_item_need_count
		{
			get{ return _m_item_need_count.member_value; }
			set{ _m_item_need_count.member_value = value; }
		}
		public bool has_m_item_need_count
		{
			get{ return _m_item_need_count.has_value; }
		}

		public uint m_item_count
		{
			get{ return _m_item_count.member_value; }
			set{ _m_item_count.member_value = value; }
		}
		public bool has_m_item_count
		{
			get{ return _m_item_count.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_task_type.Serialize((uint)_m_task_type.member_value, ref out_stream);

			count += _m_toy_type.Serialize(_m_toy_type.member_value, ref out_stream);

			count += _m_task_need_id.Serialize(_m_task_need_id.member_value, ref out_stream);

			count += _m_item_need_count.Serialize(_m_item_need_count.member_value, ref out_stream);

			count += _m_item_count.Serialize(_m_item_count.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_task_type = 0;
			one_count = _m_task_type.ParseFrom(ref temp_m_task_type, ref int_stream);
			if (0 < one_count)
			{
					_m_task_type.member_value = (PlayerTaskType)temp_m_task_type;
					count = count + one_count;
			}

			uint temp_m_toy_type = 0;
			one_count = _m_toy_type.ParseFrom(ref temp_m_toy_type, ref int_stream);
			if (0 < one_count)
			{
					_m_toy_type.member_value = temp_m_toy_type;
					count = count + one_count;
			}

			uint temp_m_task_need_id = 0;
			one_count = _m_task_need_id.ParseFrom(ref temp_m_task_need_id, ref int_stream);
			if (0 < one_count)
			{
					_m_task_need_id.member_value = temp_m_task_need_id;
					count = count + one_count;
			}

			uint temp_m_item_need_count = 0;
			one_count = _m_item_need_count.ParseFrom(ref temp_m_item_need_count, ref int_stream);
			if (0 < one_count)
			{
					_m_item_need_count.member_value = temp_m_item_need_count;
					count = count + one_count;
			}

			uint temp_m_item_count = 0;
			one_count = _m_item_count.ParseFrom(ref temp_m_item_count, ref int_stream);
			if (0 < one_count)
			{
					_m_item_count.member_value = temp_m_item_count;
					count = count + one_count;
			}

			return count;
		}
	}

	public enum PlayerTaskType
	{
		TaskType_UnKnow = 0,				//未知任务类型
		TaskType_Main = 1,					//主线任务
		TaskType_Daily = 2,					//日常任务
		TaskType_PVE_Normal = 1001,			//普通战
		TaskType_PVE_Elite = 1002,			//精英战
		TaskType_PVE_Boos = 1003,			//boos战
		TaskType_PVE_Monster = 1004,		//指定怪物战
		TaskType_PVE_Test = 1005,			//狩猎考试通关
		TaskType_PVE_Chess = 1006,			//星空迷棋通关
		TaskType_PVE_KillMonster = 1007,	//杀死指定id怪物
		TaskType_PVP_WIN = 1008,			//竞技场胜利
		TaskType_PVP_FINSH = 1009,			//竞技场通关
		TaskType_PVE_Team = 1010,			//组队战斗
		TaskType_PVE_Star = 1011,			//战役获得星数
		TaskType_Firend_Add = 1012,			//添加好友
		TaskType_Firend_Count = 1013,		//总好友数
		TaskType_Player_Lv = 1014,			//召唤师等级到达
		TaskType_Hero_Activate = 1015,		//召唤英雄
		TaskType_Player_VipLv = 1016,		//vip等级达到
		TaskType_Gold_Get = 1017,			//获得金币数
		TaskType_Gold_Used = 1018,			//金币消耗
		TaskType_Daily_Task = 1019,			//日常任务完成
		TaskType_Chat_World = 1020,			//世界聊天发言
		TaskType_OnLine = 1021,				//在线时间
		TaskType_PVE_HuntingStrength = 1022,//消耗狩猎体力
		TaskType_PVE_RandCard = 1023,		//抽卡
		TaskType_Item_SummonerExp = 1024,	//使用太阳药水
		TaskType_Item_HeroExp = 1025,		//使用月亮药水
		TaskType_DiaoWen_LvUp = 1026,		//升级雕文
		TaskType_PVP_KillHero = 1027,		//杀死指定id英雄
		TaskType_Item_ChestBox = 1028,		//使用宝箱
		TaskType_PVE_Chapter = 1029,		//狩猎随机关卡通关
		TaskType_Equipment_LvUp = 1030,		//升级装备
		TaskType_Talent_LvUp = 1031,		//升级天赋
		TaskType_Client = 2000,				//客户端自己验证的任务类型
	}

	public class PlayerTeam : IMessage
	{
		private ProtoMemberUInt64 _m_team_id;	// 队伍id
		private ProtoMemberBool _m_is_robot;	// 是否是机器人
		private ProtoMemberEmbeddedList<PlayerTeamSeatInfo> _m_seat_list;	// 队伍位置信息列表
		private ProtoMemberEmbeddedList<PlayerTeamPlayerInfo> _m_player_list;	// 队伍玩家信息列表

		public PlayerTeam()
		{
			_m_team_id = new ProtoMemberUInt64(1, true);
			_m_is_robot = new ProtoMemberBool(2, false);
			_m_seat_list = new ProtoMemberEmbeddedList<PlayerTeamSeatInfo>(3, false);
			_m_player_list = new ProtoMemberEmbeddedList<PlayerTeamPlayerInfo>(4, false);
		}

		public PlayerTeam(ulong __m_team_id, bool __m_is_robot)
		{
			_m_team_id = new ProtoMemberUInt64(1, true);
			_m_team_id.member_value = __m_team_id;
			_m_is_robot = new ProtoMemberBool(2, false);
			_m_is_robot.member_value = __m_is_robot;
			_m_seat_list = new ProtoMemberEmbeddedList<PlayerTeamSeatInfo>(3, false);
			_m_player_list = new ProtoMemberEmbeddedList<PlayerTeamPlayerInfo>(4, false);
		}

		public ulong m_team_id
		{
			get{ return _m_team_id.member_value; }
			set{ _m_team_id.member_value = value; }
		}
		public bool has_m_team_id
		{
			get{ return _m_team_id.has_value; }
		}

		public bool m_is_robot
		{
			get{ return _m_is_robot.member_value; }
			set{ _m_is_robot.member_value = value; }
		}
		public bool has_m_is_robot
		{
			get{ return _m_is_robot.has_value; }
		}

		public System.Collections.Generic.List<PlayerTeamSeatInfo> m_seat_list
		{
			get{ return _m_seat_list.member_value; }
		}
		public bool has_m_seat_list
		{
			get{ return _m_seat_list.has_value; }
		}

		public System.Collections.Generic.List<PlayerTeamPlayerInfo> m_player_list
		{
			get{ return _m_player_list.member_value; }
		}
		public bool has_m_player_list
		{
			get{ return _m_player_list.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_team_id.Serialize(_m_team_id.member_value, ref out_stream);

			count += _m_is_robot.Serialize(_m_is_robot.member_value, ref out_stream);

			foreach(PlayerTeamSeatInfo one_member_value in _m_seat_list.member_value)
			{
				count += _m_seat_list.Serialize(one_member_value, ref out_stream);
			}

			foreach(PlayerTeamPlayerInfo one_member_value in _m_player_list.member_value)
			{
				count += _m_player_list.Serialize(one_member_value, ref out_stream);
			}

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			ulong temp_m_team_id = 0;
			one_count = _m_team_id.ParseFrom(ref temp_m_team_id, ref int_stream);
			if (0 < one_count)
			{
					_m_team_id.member_value = temp_m_team_id;
					count = count + one_count;
			}

			bool temp_m_is_robot = false;
			one_count = _m_is_robot.ParseFrom(ref temp_m_is_robot, ref int_stream);
			if (0 < one_count)
			{
					_m_is_robot.member_value = temp_m_is_robot;
					count = count + one_count;
			}

			while (true)
			{
				PlayerTeamSeatInfo one_member_value = new PlayerTeamSeatInfo();
				one_count = _m_seat_list.ParseFrom(one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_seat_list.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			while (true)
			{
				PlayerTeamPlayerInfo one_member_value = new PlayerTeamPlayerInfo();
				one_count = _m_player_list.ParseFrom(one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_player_list.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			return count;
		}
	}

	public class PlayerTeamInfo : IMessage
	{
		private ProtoMemberEmbeddedList<PlayerSeatInfo> _m_seats;	

		public PlayerTeamInfo()
		{
			_m_seats = new ProtoMemberEmbeddedList<PlayerSeatInfo>(1, false);
		}

		public System.Collections.Generic.List<PlayerSeatInfo> m_seats
		{
			get{ return _m_seats.member_value; }
		}
		public bool has_m_seats
		{
			get{ return _m_seats.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			foreach(PlayerSeatInfo one_member_value in _m_seats.member_value)
			{
				count += _m_seats.Serialize(one_member_value, ref out_stream);
			}

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			while (true)
			{
				PlayerSeatInfo one_member_value = new PlayerSeatInfo();
				one_count = _m_seats.ParseFrom(one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_seats.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			return count;
		}
	}

	public class PlayerTeamMemberInfo : IMessage
	{
		private ProtoMemberUInt64 _m_team_id;	// 队伍id
		private ProtoMemberUInt32 _m_account_id;	// 角色id == 账号id
		private ProtoMemberUInt32 _m_server_id;	// 所属服id
		private ProtoMemberString _m_player_name;	// 角色名称
		private ProtoMemberUInt32 _m_toy_type;	// 玩具类别 ActorId
		private ProtoMemberUInt32 _m_seat_index;	// 所在队伍的位置 0 - 3
		private ProtoMemberBool _m_is_robot;	// 是否是机器人

		public PlayerTeamMemberInfo()
		{
			_m_team_id = new ProtoMemberUInt64(1, false);
			_m_account_id = new ProtoMemberUInt32(2, false);
			_m_server_id = new ProtoMemberUInt32(3, false);
			_m_player_name = new ProtoMemberString(4, false);
			_m_toy_type = new ProtoMemberUInt32(5, false);
			_m_seat_index = new ProtoMemberUInt32(6, false);
			_m_is_robot = new ProtoMemberBool(7, false);
		}

		public PlayerTeamMemberInfo(ulong __m_team_id, uint __m_account_id, uint __m_server_id, string __m_player_name, uint __m_toy_type, uint __m_seat_index, bool __m_is_robot)
		{
			_m_team_id = new ProtoMemberUInt64(1, false);
			_m_team_id.member_value = __m_team_id;
			_m_account_id = new ProtoMemberUInt32(2, false);
			_m_account_id.member_value = __m_account_id;
			_m_server_id = new ProtoMemberUInt32(3, false);
			_m_server_id.member_value = __m_server_id;
			_m_player_name = new ProtoMemberString(4, false);
			_m_player_name.member_value = __m_player_name;
			_m_toy_type = new ProtoMemberUInt32(5, false);
			_m_toy_type.member_value = __m_toy_type;
			_m_seat_index = new ProtoMemberUInt32(6, false);
			_m_seat_index.member_value = __m_seat_index;
			_m_is_robot = new ProtoMemberBool(7, false);
			_m_is_robot.member_value = __m_is_robot;
		}

		public ulong m_team_id
		{
			get{ return _m_team_id.member_value; }
			set{ _m_team_id.member_value = value; }
		}
		public bool has_m_team_id
		{
			get{ return _m_team_id.has_value; }
		}

		public uint m_account_id
		{
			get{ return _m_account_id.member_value; }
			set{ _m_account_id.member_value = value; }
		}
		public bool has_m_account_id
		{
			get{ return _m_account_id.has_value; }
		}

		public uint m_server_id
		{
			get{ return _m_server_id.member_value; }
			set{ _m_server_id.member_value = value; }
		}
		public bool has_m_server_id
		{
			get{ return _m_server_id.has_value; }
		}

		public string m_player_name
		{
			get{ return _m_player_name.member_value; }
			set{ _m_player_name.member_value = value; }
		}
		public bool has_m_player_name
		{
			get{ return _m_player_name.has_value; }
		}

		public uint m_toy_type
		{
			get{ return _m_toy_type.member_value; }
			set{ _m_toy_type.member_value = value; }
		}
		public bool has_m_toy_type
		{
			get{ return _m_toy_type.has_value; }
		}

		public uint m_seat_index
		{
			get{ return _m_seat_index.member_value; }
			set{ _m_seat_index.member_value = value; }
		}
		public bool has_m_seat_index
		{
			get{ return _m_seat_index.has_value; }
		}

		public bool m_is_robot
		{
			get{ return _m_is_robot.member_value; }
			set{ _m_is_robot.member_value = value; }
		}
		public bool has_m_is_robot
		{
			get{ return _m_is_robot.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_team_id.Serialize(_m_team_id.member_value, ref out_stream);

			count += _m_account_id.Serialize(_m_account_id.member_value, ref out_stream);

			count += _m_server_id.Serialize(_m_server_id.member_value, ref out_stream);

			count += _m_player_name.Serialize(_m_player_name.member_value, ref out_stream);

			count += _m_toy_type.Serialize(_m_toy_type.member_value, ref out_stream);

			count += _m_seat_index.Serialize(_m_seat_index.member_value, ref out_stream);

			count += _m_is_robot.Serialize(_m_is_robot.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			ulong temp_m_team_id = 0;
			one_count = _m_team_id.ParseFrom(ref temp_m_team_id, ref int_stream);
			if (0 < one_count)
			{
					_m_team_id.member_value = temp_m_team_id;
					count = count + one_count;
			}

			uint temp_m_account_id = 0;
			one_count = _m_account_id.ParseFrom(ref temp_m_account_id, ref int_stream);
			if (0 < one_count)
			{
					_m_account_id.member_value = temp_m_account_id;
					count = count + one_count;
			}

			uint temp_m_server_id = 0;
			one_count = _m_server_id.ParseFrom(ref temp_m_server_id, ref int_stream);
			if (0 < one_count)
			{
					_m_server_id.member_value = temp_m_server_id;
					count = count + one_count;
			}

			string temp_m_player_name = "";
			one_count = _m_player_name.ParseFrom(ref temp_m_player_name, ref int_stream);
			if (0 < one_count)
			{
					_m_player_name.member_value = temp_m_player_name;
					count = count + one_count;
			}

			uint temp_m_toy_type = 0;
			one_count = _m_toy_type.ParseFrom(ref temp_m_toy_type, ref int_stream);
			if (0 < one_count)
			{
					_m_toy_type.member_value = temp_m_toy_type;
					count = count + one_count;
			}

			uint temp_m_seat_index = 0;
			one_count = _m_seat_index.ParseFrom(ref temp_m_seat_index, ref int_stream);
			if (0 < one_count)
			{
					_m_seat_index.member_value = temp_m_seat_index;
					count = count + one_count;
			}

			bool temp_m_is_robot = false;
			one_count = _m_is_robot.ParseFrom(ref temp_m_is_robot, ref int_stream);
			if (0 < one_count)
			{
					_m_is_robot.member_value = temp_m_is_robot;
					count = count + one_count;
			}

			return count;
		}
	}

	public class PlayerTeamPlayerInfo : IMessage
	{
		private ProtoMemberUInt32 _m_account_id;	// 角色id == 账号id
		private ProtoMemberUInt32 _m_server_id;	// 所属服id
		private ProtoMemberString _m_player_name;	// 角色名称
		private ProtoMemberUInt32 _m_pvp_match_grade;	// 当前段位
		private ProtoMemberUInt32 _m_hunting_lv;	// 当前狩猎等级
		private ProtoMemberUInt32 _m_guest_account_id;	// 游客身份的角色id（m_account_id 是从属于 m_guest_account_id的游客，为0则不是游客）
		private ProtoMemberUInt32 _m_funny_lv;	// 娱乐模式等级
		private ProtoMemberUInt32 _m_elite_lv;	// 精英模式等级

		public PlayerTeamPlayerInfo()
		{
			_m_account_id = new ProtoMemberUInt32(1, false);
			_m_server_id = new ProtoMemberUInt32(2, false);
			_m_player_name = new ProtoMemberString(3, false);
			_m_pvp_match_grade = new ProtoMemberUInt32(4, false);
			_m_hunting_lv = new ProtoMemberUInt32(5, false);
			_m_guest_account_id = new ProtoMemberUInt32(6, false);
			_m_funny_lv = new ProtoMemberUInt32(7, false);
			_m_elite_lv = new ProtoMemberUInt32(8, false);
		}

		public PlayerTeamPlayerInfo(uint __m_account_id, uint __m_server_id, string __m_player_name, uint __m_pvp_match_grade, uint __m_hunting_lv, uint __m_guest_account_id, uint __m_funny_lv, uint __m_elite_lv)
		{
			_m_account_id = new ProtoMemberUInt32(1, false);
			_m_account_id.member_value = __m_account_id;
			_m_server_id = new ProtoMemberUInt32(2, false);
			_m_server_id.member_value = __m_server_id;
			_m_player_name = new ProtoMemberString(3, false);
			_m_player_name.member_value = __m_player_name;
			_m_pvp_match_grade = new ProtoMemberUInt32(4, false);
			_m_pvp_match_grade.member_value = __m_pvp_match_grade;
			_m_hunting_lv = new ProtoMemberUInt32(5, false);
			_m_hunting_lv.member_value = __m_hunting_lv;
			_m_guest_account_id = new ProtoMemberUInt32(6, false);
			_m_guest_account_id.member_value = __m_guest_account_id;
			_m_funny_lv = new ProtoMemberUInt32(7, false);
			_m_funny_lv.member_value = __m_funny_lv;
			_m_elite_lv = new ProtoMemberUInt32(8, false);
			_m_elite_lv.member_value = __m_elite_lv;
		}

		public uint m_account_id
		{
			get{ return _m_account_id.member_value; }
			set{ _m_account_id.member_value = value; }
		}
		public bool has_m_account_id
		{
			get{ return _m_account_id.has_value; }
		}

		public uint m_server_id
		{
			get{ return _m_server_id.member_value; }
			set{ _m_server_id.member_value = value; }
		}
		public bool has_m_server_id
		{
			get{ return _m_server_id.has_value; }
		}

		public string m_player_name
		{
			get{ return _m_player_name.member_value; }
			set{ _m_player_name.member_value = value; }
		}
		public bool has_m_player_name
		{
			get{ return _m_player_name.has_value; }
		}

		public uint m_pvp_match_grade
		{
			get{ return _m_pvp_match_grade.member_value; }
			set{ _m_pvp_match_grade.member_value = value; }
		}
		public bool has_m_pvp_match_grade
		{
			get{ return _m_pvp_match_grade.has_value; }
		}

		public uint m_hunting_lv
		{
			get{ return _m_hunting_lv.member_value; }
			set{ _m_hunting_lv.member_value = value; }
		}
		public bool has_m_hunting_lv
		{
			get{ return _m_hunting_lv.has_value; }
		}

		public uint m_guest_account_id
		{
			get{ return _m_guest_account_id.member_value; }
			set{ _m_guest_account_id.member_value = value; }
		}
		public bool has_m_guest_account_id
		{
			get{ return _m_guest_account_id.has_value; }
		}

		public uint m_funny_lv
		{
			get{ return _m_funny_lv.member_value; }
			set{ _m_funny_lv.member_value = value; }
		}
		public bool has_m_funny_lv
		{
			get{ return _m_funny_lv.has_value; }
		}

		public uint m_elite_lv
		{
			get{ return _m_elite_lv.member_value; }
			set{ _m_elite_lv.member_value = value; }
		}
		public bool has_m_elite_lv
		{
			get{ return _m_elite_lv.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_account_id.Serialize(_m_account_id.member_value, ref out_stream);

			count += _m_server_id.Serialize(_m_server_id.member_value, ref out_stream);

			count += _m_player_name.Serialize(_m_player_name.member_value, ref out_stream);

			count += _m_pvp_match_grade.Serialize(_m_pvp_match_grade.member_value, ref out_stream);

			count += _m_hunting_lv.Serialize(_m_hunting_lv.member_value, ref out_stream);

			count += _m_guest_account_id.Serialize(_m_guest_account_id.member_value, ref out_stream);

			count += _m_funny_lv.Serialize(_m_funny_lv.member_value, ref out_stream);

			count += _m_elite_lv.Serialize(_m_elite_lv.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_account_id = 0;
			one_count = _m_account_id.ParseFrom(ref temp_m_account_id, ref int_stream);
			if (0 < one_count)
			{
					_m_account_id.member_value = temp_m_account_id;
					count = count + one_count;
			}

			uint temp_m_server_id = 0;
			one_count = _m_server_id.ParseFrom(ref temp_m_server_id, ref int_stream);
			if (0 < one_count)
			{
					_m_server_id.member_value = temp_m_server_id;
					count = count + one_count;
			}

			string temp_m_player_name = "";
			one_count = _m_player_name.ParseFrom(ref temp_m_player_name, ref int_stream);
			if (0 < one_count)
			{
					_m_player_name.member_value = temp_m_player_name;
					count = count + one_count;
			}

			uint temp_m_pvp_match_grade = 0;
			one_count = _m_pvp_match_grade.ParseFrom(ref temp_m_pvp_match_grade, ref int_stream);
			if (0 < one_count)
			{
					_m_pvp_match_grade.member_value = temp_m_pvp_match_grade;
					count = count + one_count;
			}

			uint temp_m_hunting_lv = 0;
			one_count = _m_hunting_lv.ParseFrom(ref temp_m_hunting_lv, ref int_stream);
			if (0 < one_count)
			{
					_m_hunting_lv.member_value = temp_m_hunting_lv;
					count = count + one_count;
			}

			uint temp_m_guest_account_id = 0;
			one_count = _m_guest_account_id.ParseFrom(ref temp_m_guest_account_id, ref int_stream);
			if (0 < one_count)
			{
					_m_guest_account_id.member_value = temp_m_guest_account_id;
					count = count + one_count;
			}

			uint temp_m_funny_lv = 0;
			one_count = _m_funny_lv.ParseFrom(ref temp_m_funny_lv, ref int_stream);
			if (0 < one_count)
			{
					_m_funny_lv.member_value = temp_m_funny_lv;
					count = count + one_count;
			}

			uint temp_m_elite_lv = 0;
			one_count = _m_elite_lv.ParseFrom(ref temp_m_elite_lv, ref int_stream);
			if (0 < one_count)
			{
					_m_elite_lv.member_value = temp_m_elite_lv;
					count = count + one_count;
			}

			return count;
		}
	}

	public class PlayerTeamSeatInfo : IMessage
	{
		private ProtoMemberUInt32 _m_account_id;	// 角色id == 账号id
		private ProtoMemberUInt32 _m_server_id;	// 所属服id
		private ProtoMemberUInt32 _m_seat_index;	// 所在队伍的位置 0 - 3
		private ProtoMemberBool _m_ready;	// 玩家是否准备就绪
		private ProtoMemberBool _m_owner;	// 玩家是否是房主
		private ProtoMemberBool _m_islocking;	// 是否处于邀请锁定状态
		private ProtoMemberUInt32 _m_toy_sn;	// 当前英雄是否使用的玩具
		private ProtoMemberUInt32 _m_borrow_id;	// 当前英雄是否是系统借用英雄（为0则不是借用英雄，否则为robotattr的id）
		private ProtoMemberEmbedded<PlayerHeroInfo> _m_hero;	// 角色使用的玩具信息

		public PlayerTeamSeatInfo()
		{
			_m_account_id = new ProtoMemberUInt32(1, false);
			_m_server_id = new ProtoMemberUInt32(2, false);
			_m_seat_index = new ProtoMemberUInt32(3, false);
			_m_ready = new ProtoMemberBool(4, false);
			_m_owner = new ProtoMemberBool(5, false);
			_m_islocking = new ProtoMemberBool(6, false);
			_m_toy_sn = new ProtoMemberUInt32(7, false);
			_m_borrow_id = new ProtoMemberUInt32(8, false);
			_m_hero = new ProtoMemberEmbedded<PlayerHeroInfo>(9, false);
			_m_hero.member_value = new PlayerHeroInfo();
		}

		public PlayerTeamSeatInfo(uint __m_account_id, uint __m_server_id, uint __m_seat_index, bool __m_ready, bool __m_owner, bool __m_islocking, uint __m_toy_sn, uint __m_borrow_id)
		{
			_m_account_id = new ProtoMemberUInt32(1, false);
			_m_account_id.member_value = __m_account_id;
			_m_server_id = new ProtoMemberUInt32(2, false);
			_m_server_id.member_value = __m_server_id;
			_m_seat_index = new ProtoMemberUInt32(3, false);
			_m_seat_index.member_value = __m_seat_index;
			_m_ready = new ProtoMemberBool(4, false);
			_m_ready.member_value = __m_ready;
			_m_owner = new ProtoMemberBool(5, false);
			_m_owner.member_value = __m_owner;
			_m_islocking = new ProtoMemberBool(6, false);
			_m_islocking.member_value = __m_islocking;
			_m_toy_sn = new ProtoMemberUInt32(7, false);
			_m_toy_sn.member_value = __m_toy_sn;
			_m_borrow_id = new ProtoMemberUInt32(8, false);
			_m_borrow_id.member_value = __m_borrow_id;
			_m_hero = new ProtoMemberEmbedded<PlayerHeroInfo>(9, false);
			_m_hero.member_value = new PlayerHeroInfo();
		}

		public uint m_account_id
		{
			get{ return _m_account_id.member_value; }
			set{ _m_account_id.member_value = value; }
		}
		public bool has_m_account_id
		{
			get{ return _m_account_id.has_value; }
		}

		public uint m_server_id
		{
			get{ return _m_server_id.member_value; }
			set{ _m_server_id.member_value = value; }
		}
		public bool has_m_server_id
		{
			get{ return _m_server_id.has_value; }
		}

		public uint m_seat_index
		{
			get{ return _m_seat_index.member_value; }
			set{ _m_seat_index.member_value = value; }
		}
		public bool has_m_seat_index
		{
			get{ return _m_seat_index.has_value; }
		}

		public bool m_ready
		{
			get{ return _m_ready.member_value; }
			set{ _m_ready.member_value = value; }
		}
		public bool has_m_ready
		{
			get{ return _m_ready.has_value; }
		}

		public bool m_owner
		{
			get{ return _m_owner.member_value; }
			set{ _m_owner.member_value = value; }
		}
		public bool has_m_owner
		{
			get{ return _m_owner.has_value; }
		}

		public bool m_islocking
		{
			get{ return _m_islocking.member_value; }
			set{ _m_islocking.member_value = value; }
		}
		public bool has_m_islocking
		{
			get{ return _m_islocking.has_value; }
		}

		public uint m_toy_sn
		{
			get{ return _m_toy_sn.member_value; }
			set{ _m_toy_sn.member_value = value; }
		}
		public bool has_m_toy_sn
		{
			get{ return _m_toy_sn.has_value; }
		}

		public uint m_borrow_id
		{
			get{ return _m_borrow_id.member_value; }
			set{ _m_borrow_id.member_value = value; }
		}
		public bool has_m_borrow_id
		{
			get{ return _m_borrow_id.has_value; }
		}

		public PlayerHeroInfo m_hero
		{
			get{ return _m_hero.member_value as PlayerHeroInfo; }
			set{ _m_hero.member_value = value; }
		}
		public bool has_m_hero
		{
			get{ return _m_hero.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_account_id.Serialize(_m_account_id.member_value, ref out_stream);

			count += _m_server_id.Serialize(_m_server_id.member_value, ref out_stream);

			count += _m_seat_index.Serialize(_m_seat_index.member_value, ref out_stream);

			count += _m_ready.Serialize(_m_ready.member_value, ref out_stream);

			count += _m_owner.Serialize(_m_owner.member_value, ref out_stream);

			count += _m_islocking.Serialize(_m_islocking.member_value, ref out_stream);

			count += _m_toy_sn.Serialize(_m_toy_sn.member_value, ref out_stream);

			count += _m_borrow_id.Serialize(_m_borrow_id.member_value, ref out_stream);

			count += _m_hero.Serialize(_m_hero.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_account_id = 0;
			one_count = _m_account_id.ParseFrom(ref temp_m_account_id, ref int_stream);
			if (0 < one_count)
			{
					_m_account_id.member_value = temp_m_account_id;
					count = count + one_count;
			}

			uint temp_m_server_id = 0;
			one_count = _m_server_id.ParseFrom(ref temp_m_server_id, ref int_stream);
			if (0 < one_count)
			{
					_m_server_id.member_value = temp_m_server_id;
					count = count + one_count;
			}

			uint temp_m_seat_index = 0;
			one_count = _m_seat_index.ParseFrom(ref temp_m_seat_index, ref int_stream);
			if (0 < one_count)
			{
					_m_seat_index.member_value = temp_m_seat_index;
					count = count + one_count;
			}

			bool temp_m_ready = false;
			one_count = _m_ready.ParseFrom(ref temp_m_ready, ref int_stream);
			if (0 < one_count)
			{
					_m_ready.member_value = temp_m_ready;
					count = count + one_count;
			}

			bool temp_m_owner = false;
			one_count = _m_owner.ParseFrom(ref temp_m_owner, ref int_stream);
			if (0 < one_count)
			{
					_m_owner.member_value = temp_m_owner;
					count = count + one_count;
			}

			bool temp_m_islocking = false;
			one_count = _m_islocking.ParseFrom(ref temp_m_islocking, ref int_stream);
			if (0 < one_count)
			{
					_m_islocking.member_value = temp_m_islocking;
					count = count + one_count;
			}

			uint temp_m_toy_sn = 0;
			one_count = _m_toy_sn.ParseFrom(ref temp_m_toy_sn, ref int_stream);
			if (0 < one_count)
			{
					_m_toy_sn.member_value = temp_m_toy_sn;
					count = count + one_count;
			}

			uint temp_m_borrow_id = 0;
			one_count = _m_borrow_id.ParseFrom(ref temp_m_borrow_id, ref int_stream);
			if (0 < one_count)
			{
					_m_borrow_id.member_value = temp_m_borrow_id;
					count = count + one_count;
			}

			PlayerHeroInfo temp_m_hero = new PlayerHeroInfo();
			one_count = _m_hero.ParseFrom(temp_m_hero, ref int_stream);
			if (0 < one_count)
			{
					_m_hero.member_value = temp_m_hero;
					count = count + one_count;
			}

			return count;
		}
	}

	public enum PlayerTeamType
	{
		PlayerTeam_Unknow = 0,							// 无类型，非战斗情形
		PlayerTeam_PVE_Adventure = 1,					// PVE冒险
		PlayerTeam_PVE_Campaign = 2,					// PVE剧情战役
		PlayerTeam_PVE_Dungeon = 3,						// PVE副本
		PlayerTeam_PVP_Arena_Competitor = 4,			// PVP竞技场指定对手
		PlayerTeam_PVP_Dead = 5,						// PVP死斗模式
		PlayerTeam_PVP_Funny = 6,						// PVP娱乐模式
		PlayerTeam_PVE_Hunting = 7,						// PVE狩猎
		PlayerTeam_PVE_HuntingTest = 8,					// PVE狩猎考试
		PlayerTeam_PVE_HuntingChapter = 9,				// PVE狩猎关卡
		PlayerTeam_PVE_HuntingChallenge = 10,			// PVE狩猎急速挑战
		PlayerTeam_PVP_StarChess = 11,					// 星空迷棋
		PlayerTeam_PVP_TortoiseHare = 12,				// 龟兔大战
		PlayerTeam_PVP_MoutainKing = 13,				// 山丘之王
		PlayerTeam_PVP_VoidScuffle = 14,				// 虚空乱斗
		PlayerTeam_PVP_Arena_Match = 15,				// 天梯匹配
		PlayerTeam_PVP_IndianaJones = 16,				// 夺宝奇兵
		PlayerTeam_PVE_Extreme = 17,					// 极限试炼
	}

	public class PlayerTortoiseHareInfo : IMessage
	{
		private ProtoMemberUInt64 _m_last_battle_time;	// 上一次战斗时间，用于判断是否是今日首场战斗
		private ProtoMemberUInt32 _m_today_win_count;	// 今日已胜利场次，用于判断是否是今日首胜
		private ProtoMemberUInt32 _m_today_battle_count;	// 今日已参加场次，用于计算前三场的鼓励状态

		public PlayerTortoiseHareInfo()
		{
			_m_last_battle_time = new ProtoMemberUInt64(1, false);
			_m_today_win_count = new ProtoMemberUInt32(2, false);
			_m_today_battle_count = new ProtoMemberUInt32(3, false);
		}

		public PlayerTortoiseHareInfo(ulong __m_last_battle_time, uint __m_today_win_count, uint __m_today_battle_count)
		{
			_m_last_battle_time = new ProtoMemberUInt64(1, false);
			_m_last_battle_time.member_value = __m_last_battle_time;
			_m_today_win_count = new ProtoMemberUInt32(2, false);
			_m_today_win_count.member_value = __m_today_win_count;
			_m_today_battle_count = new ProtoMemberUInt32(3, false);
			_m_today_battle_count.member_value = __m_today_battle_count;
		}

		public ulong m_last_battle_time
		{
			get{ return _m_last_battle_time.member_value; }
			set{ _m_last_battle_time.member_value = value; }
		}
		public bool has_m_last_battle_time
		{
			get{ return _m_last_battle_time.has_value; }
		}

		public uint m_today_win_count
		{
			get{ return _m_today_win_count.member_value; }
			set{ _m_today_win_count.member_value = value; }
		}
		public bool has_m_today_win_count
		{
			get{ return _m_today_win_count.has_value; }
		}

		public uint m_today_battle_count
		{
			get{ return _m_today_battle_count.member_value; }
			set{ _m_today_battle_count.member_value = value; }
		}
		public bool has_m_today_battle_count
		{
			get{ return _m_today_battle_count.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_last_battle_time.Serialize(_m_last_battle_time.member_value, ref out_stream);

			count += _m_today_win_count.Serialize(_m_today_win_count.member_value, ref out_stream);

			count += _m_today_battle_count.Serialize(_m_today_battle_count.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			ulong temp_m_last_battle_time = 0;
			one_count = _m_last_battle_time.ParseFrom(ref temp_m_last_battle_time, ref int_stream);
			if (0 < one_count)
			{
					_m_last_battle_time.member_value = temp_m_last_battle_time;
					count = count + one_count;
			}

			uint temp_m_today_win_count = 0;
			one_count = _m_today_win_count.ParseFrom(ref temp_m_today_win_count, ref int_stream);
			if (0 < one_count)
			{
					_m_today_win_count.member_value = temp_m_today_win_count;
					count = count + one_count;
			}

			uint temp_m_today_battle_count = 0;
			one_count = _m_today_battle_count.ParseFrom(ref temp_m_today_battle_count, ref int_stream);
			if (0 < one_count)
			{
					_m_today_battle_count.member_value = temp_m_today_battle_count;
					count = count + one_count;
			}

			return count;
		}
	}

	public class PlayerUnion : IMessage
	{
		private ProtoMemberUInt64 _m_union_id;	// 公会id
		private ProtoMemberString _m_name;	// 公会名称
		private ProtoMemberUInt32 _m_change_name;	// 公会名称更改次数
		private ProtoMemberString _m_badge;	// 公会徽章
		private ProtoMemberString _m_string;	// 公会宣言
		private ProtoMemberUInt32 _m_lv;	// 公会等级
		private ProtoMemberUInt32 _m_exp;	// 公会经验
		private ProtoMemberUInt32 _m_money;	// 公会货币
		private ProtoMemberUInt32 _m_order_type;	// 公会设置：排序方式
		private ProtoMemberUInt32 _m_hunting_limit;	// 公会设置：申请条件：狩猎等级
		private ProtoMemberUInt32 _m_lv_limit;	// 公会设置：申请条件：英雄等级
		private ProtoMemberEmbeddedList<UnionTechnologyInfo> _m_technologies;	// 公会科技列表
		private ProtoMemberEmbeddedList<UnionChestInfo> _m_chests;	// 公会宝箱列表
		private ProtoMemberUInt32List _m_manors;	// 公会领地列表
		private ProtoMemberEmbeddedList<UnionMemberShowInfo> _m_members;	// 公会成员列表
		private ProtoMemberBool _m_post_sticky;	// 公会个人设置：个人信息置顶

		public PlayerUnion()
		{
			_m_union_id = new ProtoMemberUInt64(1, false);
			_m_name = new ProtoMemberString(2, false);
			_m_change_name = new ProtoMemberUInt32(3, false);
			_m_badge = new ProtoMemberString(4, false);
			_m_string = new ProtoMemberString(5, false);
			_m_lv = new ProtoMemberUInt32(6, false);
			_m_exp = new ProtoMemberUInt32(8, false);
			_m_money = new ProtoMemberUInt32(9, false);
			_m_order_type = new ProtoMemberUInt32(10, false);
			_m_hunting_limit = new ProtoMemberUInt32(11, false);
			_m_lv_limit = new ProtoMemberUInt32(12, false);
			_m_technologies = new ProtoMemberEmbeddedList<UnionTechnologyInfo>(13, false);
			_m_chests = new ProtoMemberEmbeddedList<UnionChestInfo>(14, false);
			_m_manors = new ProtoMemberUInt32List(15, false);
			_m_members = new ProtoMemberEmbeddedList<UnionMemberShowInfo>(16, false);
			_m_post_sticky = new ProtoMemberBool(17, false);
		}

		public PlayerUnion(ulong __m_union_id, string __m_name, uint __m_change_name, string __m_badge, string __m_string, uint __m_lv, uint __m_exp, uint __m_money, uint __m_order_type, uint __m_hunting_limit, uint __m_lv_limit, bool __m_post_sticky)
		{
			_m_union_id = new ProtoMemberUInt64(1, false);
			_m_union_id.member_value = __m_union_id;
			_m_name = new ProtoMemberString(2, false);
			_m_name.member_value = __m_name;
			_m_change_name = new ProtoMemberUInt32(3, false);
			_m_change_name.member_value = __m_change_name;
			_m_badge = new ProtoMemberString(4, false);
			_m_badge.member_value = __m_badge;
			_m_string = new ProtoMemberString(5, false);
			_m_string.member_value = __m_string;
			_m_lv = new ProtoMemberUInt32(6, false);
			_m_lv.member_value = __m_lv;
			_m_exp = new ProtoMemberUInt32(8, false);
			_m_exp.member_value = __m_exp;
			_m_money = new ProtoMemberUInt32(9, false);
			_m_money.member_value = __m_money;
			_m_order_type = new ProtoMemberUInt32(10, false);
			_m_order_type.member_value = __m_order_type;
			_m_hunting_limit = new ProtoMemberUInt32(11, false);
			_m_hunting_limit.member_value = __m_hunting_limit;
			_m_lv_limit = new ProtoMemberUInt32(12, false);
			_m_lv_limit.member_value = __m_lv_limit;
			_m_technologies = new ProtoMemberEmbeddedList<UnionTechnologyInfo>(13, false);
			_m_chests = new ProtoMemberEmbeddedList<UnionChestInfo>(14, false);
			_m_manors = new ProtoMemberUInt32List(15, false);
			_m_members = new ProtoMemberEmbeddedList<UnionMemberShowInfo>(16, false);
			_m_post_sticky = new ProtoMemberBool(17, false);
			_m_post_sticky.member_value = __m_post_sticky;
		}

		public ulong m_union_id
		{
			get{ return _m_union_id.member_value; }
			set{ _m_union_id.member_value = value; }
		}
		public bool has_m_union_id
		{
			get{ return _m_union_id.has_value; }
		}

		public string m_name
		{
			get{ return _m_name.member_value; }
			set{ _m_name.member_value = value; }
		}
		public bool has_m_name
		{
			get{ return _m_name.has_value; }
		}

		public uint m_change_name
		{
			get{ return _m_change_name.member_value; }
			set{ _m_change_name.member_value = value; }
		}
		public bool has_m_change_name
		{
			get{ return _m_change_name.has_value; }
		}

		public string m_badge
		{
			get{ return _m_badge.member_value; }
			set{ _m_badge.member_value = value; }
		}
		public bool has_m_badge
		{
			get{ return _m_badge.has_value; }
		}

		public string m_string
		{
			get{ return _m_string.member_value; }
			set{ _m_string.member_value = value; }
		}
		public bool has_m_string
		{
			get{ return _m_string.has_value; }
		}

		public uint m_lv
		{
			get{ return _m_lv.member_value; }
			set{ _m_lv.member_value = value; }
		}
		public bool has_m_lv
		{
			get{ return _m_lv.has_value; }
		}

		public uint m_exp
		{
			get{ return _m_exp.member_value; }
			set{ _m_exp.member_value = value; }
		}
		public bool has_m_exp
		{
			get{ return _m_exp.has_value; }
		}

		public uint m_money
		{
			get{ return _m_money.member_value; }
			set{ _m_money.member_value = value; }
		}
		public bool has_m_money
		{
			get{ return _m_money.has_value; }
		}

		public uint m_order_type
		{
			get{ return _m_order_type.member_value; }
			set{ _m_order_type.member_value = value; }
		}
		public bool has_m_order_type
		{
			get{ return _m_order_type.has_value; }
		}

		public uint m_hunting_limit
		{
			get{ return _m_hunting_limit.member_value; }
			set{ _m_hunting_limit.member_value = value; }
		}
		public bool has_m_hunting_limit
		{
			get{ return _m_hunting_limit.has_value; }
		}

		public uint m_lv_limit
		{
			get{ return _m_lv_limit.member_value; }
			set{ _m_lv_limit.member_value = value; }
		}
		public bool has_m_lv_limit
		{
			get{ return _m_lv_limit.has_value; }
		}

		public System.Collections.Generic.List<UnionTechnologyInfo> m_technologies
		{
			get{ return _m_technologies.member_value; }
		}
		public bool has_m_technologies
		{
			get{ return _m_technologies.has_value; }
		}

		public System.Collections.Generic.List<UnionChestInfo> m_chests
		{
			get{ return _m_chests.member_value; }
		}
		public bool has_m_chests
		{
			get{ return _m_chests.has_value; }
		}

		public System.Collections.Generic.List<uint> m_manors
		{
			get{ return _m_manors.member_value; }
		}
		public bool has_m_manors
		{
			get{ return _m_manors.has_value; }
		}

		public System.Collections.Generic.List<UnionMemberShowInfo> m_members
		{
			get{ return _m_members.member_value; }
		}
		public bool has_m_members
		{
			get{ return _m_members.has_value; }
		}

		public bool m_post_sticky
		{
			get{ return _m_post_sticky.member_value; }
			set{ _m_post_sticky.member_value = value; }
		}
		public bool has_m_post_sticky
		{
			get{ return _m_post_sticky.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_union_id.Serialize(_m_union_id.member_value, ref out_stream);

			count += _m_name.Serialize(_m_name.member_value, ref out_stream);

			count += _m_change_name.Serialize(_m_change_name.member_value, ref out_stream);

			count += _m_badge.Serialize(_m_badge.member_value, ref out_stream);

			count += _m_string.Serialize(_m_string.member_value, ref out_stream);

			count += _m_lv.Serialize(_m_lv.member_value, ref out_stream);

			count += _m_exp.Serialize(_m_exp.member_value, ref out_stream);

			count += _m_money.Serialize(_m_money.member_value, ref out_stream);

			count += _m_order_type.Serialize(_m_order_type.member_value, ref out_stream);

			count += _m_hunting_limit.Serialize(_m_hunting_limit.member_value, ref out_stream);

			count += _m_lv_limit.Serialize(_m_lv_limit.member_value, ref out_stream);

			foreach(UnionTechnologyInfo one_member_value in _m_technologies.member_value)
			{
				count += _m_technologies.Serialize(one_member_value, ref out_stream);
			}

			foreach(UnionChestInfo one_member_value in _m_chests.member_value)
			{
				count += _m_chests.Serialize(one_member_value, ref out_stream);
			}

			foreach(uint one_member_value in _m_manors.member_value)
			{
				count += _m_manors.Serialize(one_member_value, ref out_stream);
			}

			foreach(UnionMemberShowInfo one_member_value in _m_members.member_value)
			{
				count += _m_members.Serialize(one_member_value, ref out_stream);
			}

			count += _m_post_sticky.Serialize(_m_post_sticky.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			ulong temp_m_union_id = 0;
			one_count = _m_union_id.ParseFrom(ref temp_m_union_id, ref int_stream);
			if (0 < one_count)
			{
					_m_union_id.member_value = temp_m_union_id;
					count = count + one_count;
			}

			string temp_m_name = "";
			one_count = _m_name.ParseFrom(ref temp_m_name, ref int_stream);
			if (0 < one_count)
			{
					_m_name.member_value = temp_m_name;
					count = count + one_count;
			}

			uint temp_m_change_name = 0;
			one_count = _m_change_name.ParseFrom(ref temp_m_change_name, ref int_stream);
			if (0 < one_count)
			{
					_m_change_name.member_value = temp_m_change_name;
					count = count + one_count;
			}

			string temp_m_badge = "";
			one_count = _m_badge.ParseFrom(ref temp_m_badge, ref int_stream);
			if (0 < one_count)
			{
					_m_badge.member_value = temp_m_badge;
					count = count + one_count;
			}

			string temp_m_string = "";
			one_count = _m_string.ParseFrom(ref temp_m_string, ref int_stream);
			if (0 < one_count)
			{
					_m_string.member_value = temp_m_string;
					count = count + one_count;
			}

			uint temp_m_lv = 0;
			one_count = _m_lv.ParseFrom(ref temp_m_lv, ref int_stream);
			if (0 < one_count)
			{
					_m_lv.member_value = temp_m_lv;
					count = count + one_count;
			}

			uint temp_m_exp = 0;
			one_count = _m_exp.ParseFrom(ref temp_m_exp, ref int_stream);
			if (0 < one_count)
			{
					_m_exp.member_value = temp_m_exp;
					count = count + one_count;
			}

			uint temp_m_money = 0;
			one_count = _m_money.ParseFrom(ref temp_m_money, ref int_stream);
			if (0 < one_count)
			{
					_m_money.member_value = temp_m_money;
					count = count + one_count;
			}

			uint temp_m_order_type = 0;
			one_count = _m_order_type.ParseFrom(ref temp_m_order_type, ref int_stream);
			if (0 < one_count)
			{
					_m_order_type.member_value = temp_m_order_type;
					count = count + one_count;
			}

			uint temp_m_hunting_limit = 0;
			one_count = _m_hunting_limit.ParseFrom(ref temp_m_hunting_limit, ref int_stream);
			if (0 < one_count)
			{
					_m_hunting_limit.member_value = temp_m_hunting_limit;
					count = count + one_count;
			}

			uint temp_m_lv_limit = 0;
			one_count = _m_lv_limit.ParseFrom(ref temp_m_lv_limit, ref int_stream);
			if (0 < one_count)
			{
					_m_lv_limit.member_value = temp_m_lv_limit;
					count = count + one_count;
			}

			while (true)
			{
				UnionTechnologyInfo one_member_value = new UnionTechnologyInfo();
				one_count = _m_technologies.ParseFrom(one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_technologies.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			while (true)
			{
				UnionChestInfo one_member_value = new UnionChestInfo();
				one_count = _m_chests.ParseFrom(one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_chests.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			while (true)
			{
				uint one_member_value = 0;
				one_count = _m_manors.ParseFrom(ref one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_manors.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			while (true)
			{
				UnionMemberShowInfo one_member_value = new UnionMemberShowInfo();
				one_count = _m_members.ParseFrom(one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_members.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			bool temp_m_post_sticky = false;
			one_count = _m_post_sticky.ParseFrom(ref temp_m_post_sticky, ref int_stream);
			if (0 < one_count)
			{
					_m_post_sticky.member_value = temp_m_post_sticky;
					count = count + one_count;
			}

			return count;
		}
	}

	public class PlayerUnionInfo : IMessage
	{
		private ProtoMemberUInt64 _m_player_union_id;	// 所属公会id
		private ProtoMemberUInt64List _m_player_application_ids;	// 所申请的公会id列表

		public PlayerUnionInfo()
		{
			_m_player_union_id = new ProtoMemberUInt64(1, false);
			_m_player_application_ids = new ProtoMemberUInt64List(2, false);
		}

		public PlayerUnionInfo(ulong __m_player_union_id)
		{
			_m_player_union_id = new ProtoMemberUInt64(1, false);
			_m_player_union_id.member_value = __m_player_union_id;
			_m_player_application_ids = new ProtoMemberUInt64List(2, false);
		}

		public ulong m_player_union_id
		{
			get{ return _m_player_union_id.member_value; }
			set{ _m_player_union_id.member_value = value; }
		}
		public bool has_m_player_union_id
		{
			get{ return _m_player_union_id.has_value; }
		}

		public System.Collections.Generic.List<ulong> m_player_application_ids
		{
			get{ return _m_player_application_ids.member_value; }
		}
		public bool has_m_player_application_ids
		{
			get{ return _m_player_application_ids.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_player_union_id.Serialize(_m_player_union_id.member_value, ref out_stream);

			foreach(ulong one_member_value in _m_player_application_ids.member_value)
			{
				count += _m_player_application_ids.Serialize(one_member_value, ref out_stream);
			}

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			ulong temp_m_player_union_id = 0;
			one_count = _m_player_union_id.ParseFrom(ref temp_m_player_union_id, ref int_stream);
			if (0 < one_count)
			{
					_m_player_union_id.member_value = temp_m_player_union_id;
					count = count + one_count;
			}

			while (true)
			{
				ulong one_member_value = 0;
				one_count = _m_player_application_ids.ParseFrom(ref one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_player_application_ids.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			return count;
		}
	}

	public class PlayerVoidScuffleInfo : IMessage
	{
		private ProtoMemberUInt64 _m_last_battle_time;	// 上一次战斗时间，用于判断是否是今日首场战斗
		private ProtoMemberUInt32 _m_today_win_count;	// 今日已胜利场次，用于判断是否是今日首胜
		private ProtoMemberUInt32 _m_today_battle_count;	// 今日已参加场次，用于计算前三场的鼓励状态

		public PlayerVoidScuffleInfo()
		{
			_m_last_battle_time = new ProtoMemberUInt64(1, false);
			_m_today_win_count = new ProtoMemberUInt32(2, false);
			_m_today_battle_count = new ProtoMemberUInt32(3, false);
		}

		public PlayerVoidScuffleInfo(ulong __m_last_battle_time, uint __m_today_win_count, uint __m_today_battle_count)
		{
			_m_last_battle_time = new ProtoMemberUInt64(1, false);
			_m_last_battle_time.member_value = __m_last_battle_time;
			_m_today_win_count = new ProtoMemberUInt32(2, false);
			_m_today_win_count.member_value = __m_today_win_count;
			_m_today_battle_count = new ProtoMemberUInt32(3, false);
			_m_today_battle_count.member_value = __m_today_battle_count;
		}

		public ulong m_last_battle_time
		{
			get{ return _m_last_battle_time.member_value; }
			set{ _m_last_battle_time.member_value = value; }
		}
		public bool has_m_last_battle_time
		{
			get{ return _m_last_battle_time.has_value; }
		}

		public uint m_today_win_count
		{
			get{ return _m_today_win_count.member_value; }
			set{ _m_today_win_count.member_value = value; }
		}
		public bool has_m_today_win_count
		{
			get{ return _m_today_win_count.has_value; }
		}

		public uint m_today_battle_count
		{
			get{ return _m_today_battle_count.member_value; }
			set{ _m_today_battle_count.member_value = value; }
		}
		public bool has_m_today_battle_count
		{
			get{ return _m_today_battle_count.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_last_battle_time.Serialize(_m_last_battle_time.member_value, ref out_stream);

			count += _m_today_win_count.Serialize(_m_today_win_count.member_value, ref out_stream);

			count += _m_today_battle_count.Serialize(_m_today_battle_count.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			ulong temp_m_last_battle_time = 0;
			one_count = _m_last_battle_time.ParseFrom(ref temp_m_last_battle_time, ref int_stream);
			if (0 < one_count)
			{
					_m_last_battle_time.member_value = temp_m_last_battle_time;
					count = count + one_count;
			}

			uint temp_m_today_win_count = 0;
			one_count = _m_today_win_count.ParseFrom(ref temp_m_today_win_count, ref int_stream);
			if (0 < one_count)
			{
					_m_today_win_count.member_value = temp_m_today_win_count;
					count = count + one_count;
			}

			uint temp_m_today_battle_count = 0;
			one_count = _m_today_battle_count.ParseFrom(ref temp_m_today_battle_count, ref int_stream);
			if (0 < one_count)
			{
					_m_today_battle_count.member_value = temp_m_today_battle_count;
					count = count + one_count;
			}

			return count;
		}
	}

	public class PlyKilMstCnt : IMessage
	{
		private ProtoMemberUInt64 _m_ownerplyid;	//玩家playerid
		private ProtoMemberUInt32 _m_kilmst_cnt;	//杀怪数

		public PlyKilMstCnt()
		{
			_m_ownerplyid = new ProtoMemberUInt64(1, true);
			_m_kilmst_cnt = new ProtoMemberUInt32(2, true);
		}

		public PlyKilMstCnt(ulong __m_ownerplyid, uint __m_kilmst_cnt)
		{
			_m_ownerplyid = new ProtoMemberUInt64(1, true);
			_m_ownerplyid.member_value = __m_ownerplyid;
			_m_kilmst_cnt = new ProtoMemberUInt32(2, true);
			_m_kilmst_cnt.member_value = __m_kilmst_cnt;
		}

		public ulong m_ownerplyid
		{
			get{ return _m_ownerplyid.member_value; }
			set{ _m_ownerplyid.member_value = value; }
		}
		public bool has_m_ownerplyid
		{
			get{ return _m_ownerplyid.has_value; }
		}

		public uint m_kilmst_cnt
		{
			get{ return _m_kilmst_cnt.member_value; }
			set{ _m_kilmst_cnt.member_value = value; }
		}
		public bool has_m_kilmst_cnt
		{
			get{ return _m_kilmst_cnt.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_ownerplyid.Serialize(_m_ownerplyid.member_value, ref out_stream);

			count += _m_kilmst_cnt.Serialize(_m_kilmst_cnt.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			ulong temp_m_ownerplyid = 0;
			one_count = _m_ownerplyid.ParseFrom(ref temp_m_ownerplyid, ref int_stream);
			if (0 < one_count)
			{
					_m_ownerplyid.member_value = temp_m_ownerplyid;
					count = count + one_count;
			}

			uint temp_m_kilmst_cnt = 0;
			one_count = _m_kilmst_cnt.ParseFrom(ref temp_m_kilmst_cnt, ref int_stream);
			if (0 < one_count)
			{
					_m_kilmst_cnt.member_value = temp_m_kilmst_cnt;
					count = count + one_count;
			}

			return count;
		}
	}

	public class RankingList : IMessage
	{
		private ProtoMemberUInt32 _m_ServerId;	//所在服务器Id
		private ProtoMemberEnum<enRankingType> _m_RankingType;	//排行榜类型
		private ProtoMemberEmbedded<PlayerRankingList> _m_PlayerList;	//玩家列表
		private ProtoMemberEmbedded<SectionRankingList> _m_SectionList;	//区段列表

		public RankingList()
		{
			_m_ServerId = new ProtoMemberUInt32(1, false);
			_m_RankingType = new ProtoMemberEnum<enRankingType>(2, false);
			_m_PlayerList = new ProtoMemberEmbedded<PlayerRankingList>(3, false);
			_m_PlayerList.member_value = new PlayerRankingList();
			_m_SectionList = new ProtoMemberEmbedded<SectionRankingList>(4, false);
			_m_SectionList.member_value = new SectionRankingList();
		}

		public RankingList(uint __m_ServerId, enRankingType __m_RankingType)
		{
			_m_ServerId = new ProtoMemberUInt32(1, false);
			_m_ServerId.member_value = __m_ServerId;
			_m_RankingType = new ProtoMemberEnum<enRankingType>(2, false);
			_m_RankingType.member_value = __m_RankingType;
			_m_PlayerList = new ProtoMemberEmbedded<PlayerRankingList>(3, false);
			_m_PlayerList.member_value = new PlayerRankingList();
			_m_SectionList = new ProtoMemberEmbedded<SectionRankingList>(4, false);
			_m_SectionList.member_value = new SectionRankingList();
		}

		public uint m_ServerId
		{
			get{ return _m_ServerId.member_value; }
			set{ _m_ServerId.member_value = value; }
		}
		public bool has_m_ServerId
		{
			get{ return _m_ServerId.has_value; }
		}

		public enRankingType m_RankingType
		{
			get{ return _m_RankingType.member_value; }
			set{ _m_RankingType.member_value = value; }
		}
		public bool has_m_RankingType
		{
			get{ return _m_RankingType.has_value; }
		}

		public PlayerRankingList m_PlayerList
		{
			get{ return _m_PlayerList.member_value as PlayerRankingList; }
			set{ _m_PlayerList.member_value = value; }
		}
		public bool has_m_PlayerList
		{
			get{ return _m_PlayerList.has_value; }
		}

		public SectionRankingList m_SectionList
		{
			get{ return _m_SectionList.member_value as SectionRankingList; }
			set{ _m_SectionList.member_value = value; }
		}
		public bool has_m_SectionList
		{
			get{ return _m_SectionList.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_ServerId.Serialize(_m_ServerId.member_value, ref out_stream);

			count += _m_RankingType.Serialize((uint)_m_RankingType.member_value, ref out_stream);

			count += _m_PlayerList.Serialize(_m_PlayerList.member_value, ref out_stream);

			count += _m_SectionList.Serialize(_m_SectionList.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_ServerId = 0;
			one_count = _m_ServerId.ParseFrom(ref temp_m_ServerId, ref int_stream);
			if (0 < one_count)
			{
					_m_ServerId.member_value = temp_m_ServerId;
					count = count + one_count;
			}

			uint temp_m_RankingType = 0;
			one_count = _m_RankingType.ParseFrom(ref temp_m_RankingType, ref int_stream);
			if (0 < one_count)
			{
					_m_RankingType.member_value = (enRankingType)temp_m_RankingType;
					count = count + one_count;
			}

			PlayerRankingList temp_m_PlayerList = new PlayerRankingList();
			one_count = _m_PlayerList.ParseFrom(temp_m_PlayerList, ref int_stream);
			if (0 < one_count)
			{
					_m_PlayerList.member_value = temp_m_PlayerList;
					count = count + one_count;
			}

			SectionRankingList temp_m_SectionList = new SectionRankingList();
			one_count = _m_SectionList.ParseFrom(temp_m_SectionList, ref int_stream);
			if (0 < one_count)
			{
					_m_SectionList.member_value = temp_m_SectionList;
					count = count + one_count;
			}

			return count;
		}
	}

	public class SectionRankingInfo : IMessage
	{
		private ProtoMemberUInt32 _m_uRankingLevel;	//具体等级范畴
		private ProtoMemberUInt32 _m_uRoleCount;	//人数

		public SectionRankingInfo()
		{
			_m_uRankingLevel = new ProtoMemberUInt32(1, false);
			_m_uRoleCount = new ProtoMemberUInt32(2, false);
		}

		public SectionRankingInfo(uint __m_uRankingLevel, uint __m_uRoleCount)
		{
			_m_uRankingLevel = new ProtoMemberUInt32(1, false);
			_m_uRankingLevel.member_value = __m_uRankingLevel;
			_m_uRoleCount = new ProtoMemberUInt32(2, false);
			_m_uRoleCount.member_value = __m_uRoleCount;
		}

		public uint m_uRankingLevel
		{
			get{ return _m_uRankingLevel.member_value; }
			set{ _m_uRankingLevel.member_value = value; }
		}
		public bool has_m_uRankingLevel
		{
			get{ return _m_uRankingLevel.has_value; }
		}

		public uint m_uRoleCount
		{
			get{ return _m_uRoleCount.member_value; }
			set{ _m_uRoleCount.member_value = value; }
		}
		public bool has_m_uRoleCount
		{
			get{ return _m_uRoleCount.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_uRankingLevel.Serialize(_m_uRankingLevel.member_value, ref out_stream);

			count += _m_uRoleCount.Serialize(_m_uRoleCount.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_uRankingLevel = 0;
			one_count = _m_uRankingLevel.ParseFrom(ref temp_m_uRankingLevel, ref int_stream);
			if (0 < one_count)
			{
					_m_uRankingLevel.member_value = temp_m_uRankingLevel;
					count = count + one_count;
			}

			uint temp_m_uRoleCount = 0;
			one_count = _m_uRoleCount.ParseFrom(ref temp_m_uRoleCount, ref int_stream);
			if (0 < one_count)
			{
					_m_uRoleCount.member_value = temp_m_uRoleCount;
					count = count + one_count;
			}

			return count;
		}
	}

	public class SectionRankingList : IMessage
	{
		private ProtoMemberUInt32 _m_SectionLv;	//当前区段级别
		private ProtoMemberEmbeddedList<SectionRankingInfo> _m_SectionList;	//数据

		public SectionRankingList()
		{
			_m_SectionLv = new ProtoMemberUInt32(1, false);
			_m_SectionList = new ProtoMemberEmbeddedList<SectionRankingInfo>(2, false);
		}

		public SectionRankingList(uint __m_SectionLv)
		{
			_m_SectionLv = new ProtoMemberUInt32(1, false);
			_m_SectionLv.member_value = __m_SectionLv;
			_m_SectionList = new ProtoMemberEmbeddedList<SectionRankingInfo>(2, false);
		}

		public uint m_SectionLv
		{
			get{ return _m_SectionLv.member_value; }
			set{ _m_SectionLv.member_value = value; }
		}
		public bool has_m_SectionLv
		{
			get{ return _m_SectionLv.has_value; }
		}

		public System.Collections.Generic.List<SectionRankingInfo> m_SectionList
		{
			get{ return _m_SectionList.member_value; }
		}
		public bool has_m_SectionList
		{
			get{ return _m_SectionList.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_SectionLv.Serialize(_m_SectionLv.member_value, ref out_stream);

			foreach(SectionRankingInfo one_member_value in _m_SectionList.member_value)
			{
				count += _m_SectionList.Serialize(one_member_value, ref out_stream);
			}

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_SectionLv = 0;
			one_count = _m_SectionLv.ParseFrom(ref temp_m_SectionLv, ref int_stream);
			if (0 < one_count)
			{
					_m_SectionLv.member_value = temp_m_SectionLv;
					count = count + one_count;
			}

			while (true)
			{
				SectionRankingInfo one_member_value = new SectionRankingInfo();
				one_count = _m_SectionList.ParseFrom(one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_SectionList.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			return count;
		}
	}

	public enum ServerType
	{
		///////////////////////////////////客户端///////////////////////////////////
		ServerType_ClientAccount = 0,		// 账号客户端
		ServerType_ClientLogic = 1,			// 逻辑客户端
		ServerType_ClientChat = 2,			// 聊天客户端
		ServerType_ClientBattle = 3,		// 战斗客户端
		ServerType_ClientGM = 4,			// gm客户端
		///////////////////////////////////账号服///////////////////////////////////
		ServerType_AccountDB = 5,			// 账号服
		///////////////////////////////////逻辑服///////////////////////////////////
		ServerType_BattleGate = 6,			// 战斗服网关
		ServerType_Battle = 7,				// 战斗服
		ServerType_LogicGate = 8,			// 逻辑服网关
		ServerType_ChatGate = 9,			// 聊天服网关
		ServerType_Logic = 10,				// 逻辑服
		ServerType_PlayerDB = 11,			// 角色数据库
		ServerType_LogDB = 12,				// 日志数据库
		///////////////////////////////////中心服///////////////////////////////////
		ServerType_Center = 13,				// 中心服
		ServerType_Team = 14,				// 队伍匹配服
		ServerType_Ranking = 15,			// 排行榜服
		ServerType_Union = 16,				// 公会服
		ServerType_CenterDB = 17,			// 跨服数据库
	}

	public enum ShopType
	{
		ShopType_RMB = 1,	//RMB商城
		ShopType_PVP = 2,	//PVP代币商店
		ShopType_PVE = 3,	//PVE代币商店
		ShopType_Gold = 4,	//金币商店
	}

	public class StarChessActionStatus : IMessage
	{
		private ProtoMemberUInt32 _m_action_id;	//事件id
		private ProtoMemberUInt32 _m_bout_times;	//已走回合次数

		public StarChessActionStatus()
		{
			_m_action_id = new ProtoMemberUInt32(1, true);
			_m_bout_times = new ProtoMemberUInt32(2, true);
		}

		public StarChessActionStatus(uint __m_action_id, uint __m_bout_times)
		{
			_m_action_id = new ProtoMemberUInt32(1, true);
			_m_action_id.member_value = __m_action_id;
			_m_bout_times = new ProtoMemberUInt32(2, true);
			_m_bout_times.member_value = __m_bout_times;
		}

		public uint m_action_id
		{
			get{ return _m_action_id.member_value; }
			set{ _m_action_id.member_value = value; }
		}
		public bool has_m_action_id
		{
			get{ return _m_action_id.has_value; }
		}

		public uint m_bout_times
		{
			get{ return _m_bout_times.member_value; }
			set{ _m_bout_times.member_value = value; }
		}
		public bool has_m_bout_times
		{
			get{ return _m_bout_times.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_action_id.Serialize(_m_action_id.member_value, ref out_stream);

			count += _m_bout_times.Serialize(_m_bout_times.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_action_id = 0;
			one_count = _m_action_id.ParseFrom(ref temp_m_action_id, ref int_stream);
			if (0 < one_count)
			{
					_m_action_id.member_value = temp_m_action_id;
					count = count + one_count;
			}

			uint temp_m_bout_times = 0;
			one_count = _m_bout_times.ParseFrom(ref temp_m_bout_times, ref int_stream);
			if (0 < one_count)
			{
					_m_bout_times.member_value = temp_m_bout_times;
					count = count + one_count;
			}

			return count;
		}
	}

	public class StarChessStepInfo : IMessage
	{
		private ProtoMemberUInt32 _m_step_index;	
		private ProtoMemberUInt32 _m_step_value;	

		public StarChessStepInfo()
		{
			_m_step_index = new ProtoMemberUInt32(1, true);
			_m_step_value = new ProtoMemberUInt32(2, true);
		}

		public StarChessStepInfo(uint __m_step_index, uint __m_step_value)
		{
			_m_step_index = new ProtoMemberUInt32(1, true);
			_m_step_index.member_value = __m_step_index;
			_m_step_value = new ProtoMemberUInt32(2, true);
			_m_step_value.member_value = __m_step_value;
		}

		public uint m_step_index
		{
			get{ return _m_step_index.member_value; }
			set{ _m_step_index.member_value = value; }
		}
		public bool has_m_step_index
		{
			get{ return _m_step_index.has_value; }
		}

		public uint m_step_value
		{
			get{ return _m_step_value.member_value; }
			set{ _m_step_value.member_value = value; }
		}
		public bool has_m_step_value
		{
			get{ return _m_step_value.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_step_index.Serialize(_m_step_index.member_value, ref out_stream);

			count += _m_step_value.Serialize(_m_step_value.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_step_index = 0;
			one_count = _m_step_index.ParseFrom(ref temp_m_step_index, ref int_stream);
			if (0 < one_count)
			{
					_m_step_index.member_value = temp_m_step_index;
					count = count + one_count;
			}

			uint temp_m_step_value = 0;
			one_count = _m_step_value.ParseFrom(ref temp_m_step_value, ref int_stream);
			if (0 < one_count)
			{
					_m_step_value.member_value = temp_m_step_value;
					count = count + one_count;
			}

			return count;
		}
	}

	public class TeamSeat : IMessage
	{
		private ProtoMemberUInt32 _m_account_id;	// 角色id
		private ProtoMemberUInt32 _m_server_id;	// 角色所选服id
		private ProtoMemberUInt64 _m_team_id;	// 当前队伍id，未组队/退出队伍时为0
		private ProtoMemberUInt32 _m_seat_index;	// 变化的槽位号
		private ProtoMemberUInt32 _m_toy_type;	// 变化的英雄id
		private ProtoMemberUInt32 _m_toy_sn;	// 是否是玩具
		private ProtoMemberUInt32 _m_borrow_id;	// 是否是借用英雄

		public TeamSeat()
		{
			_m_account_id = new ProtoMemberUInt32(1, true);
			_m_server_id = new ProtoMemberUInt32(2, true);
			_m_team_id = new ProtoMemberUInt64(3, true);
			_m_seat_index = new ProtoMemberUInt32(4, true);
			_m_toy_type = new ProtoMemberUInt32(5, true);
			_m_toy_sn = new ProtoMemberUInt32(6, true);
			_m_borrow_id = new ProtoMemberUInt32(7, true);
		}

		public TeamSeat(uint __m_account_id, uint __m_server_id, ulong __m_team_id, uint __m_seat_index, uint __m_toy_type, uint __m_toy_sn, uint __m_borrow_id)
		{
			_m_account_id = new ProtoMemberUInt32(1, true);
			_m_account_id.member_value = __m_account_id;
			_m_server_id = new ProtoMemberUInt32(2, true);
			_m_server_id.member_value = __m_server_id;
			_m_team_id = new ProtoMemberUInt64(3, true);
			_m_team_id.member_value = __m_team_id;
			_m_seat_index = new ProtoMemberUInt32(4, true);
			_m_seat_index.member_value = __m_seat_index;
			_m_toy_type = new ProtoMemberUInt32(5, true);
			_m_toy_type.member_value = __m_toy_type;
			_m_toy_sn = new ProtoMemberUInt32(6, true);
			_m_toy_sn.member_value = __m_toy_sn;
			_m_borrow_id = new ProtoMemberUInt32(7, true);
			_m_borrow_id.member_value = __m_borrow_id;
		}

		public uint m_account_id
		{
			get{ return _m_account_id.member_value; }
			set{ _m_account_id.member_value = value; }
		}
		public bool has_m_account_id
		{
			get{ return _m_account_id.has_value; }
		}

		public uint m_server_id
		{
			get{ return _m_server_id.member_value; }
			set{ _m_server_id.member_value = value; }
		}
		public bool has_m_server_id
		{
			get{ return _m_server_id.has_value; }
		}

		public ulong m_team_id
		{
			get{ return _m_team_id.member_value; }
			set{ _m_team_id.member_value = value; }
		}
		public bool has_m_team_id
		{
			get{ return _m_team_id.has_value; }
		}

		public uint m_seat_index
		{
			get{ return _m_seat_index.member_value; }
			set{ _m_seat_index.member_value = value; }
		}
		public bool has_m_seat_index
		{
			get{ return _m_seat_index.has_value; }
		}

		public uint m_toy_type
		{
			get{ return _m_toy_type.member_value; }
			set{ _m_toy_type.member_value = value; }
		}
		public bool has_m_toy_type
		{
			get{ return _m_toy_type.has_value; }
		}

		public uint m_toy_sn
		{
			get{ return _m_toy_sn.member_value; }
			set{ _m_toy_sn.member_value = value; }
		}
		public bool has_m_toy_sn
		{
			get{ return _m_toy_sn.has_value; }
		}

		public uint m_borrow_id
		{
			get{ return _m_borrow_id.member_value; }
			set{ _m_borrow_id.member_value = value; }
		}
		public bool has_m_borrow_id
		{
			get{ return _m_borrow_id.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_account_id.Serialize(_m_account_id.member_value, ref out_stream);

			count += _m_server_id.Serialize(_m_server_id.member_value, ref out_stream);

			count += _m_team_id.Serialize(_m_team_id.member_value, ref out_stream);

			count += _m_seat_index.Serialize(_m_seat_index.member_value, ref out_stream);

			count += _m_toy_type.Serialize(_m_toy_type.member_value, ref out_stream);

			count += _m_toy_sn.Serialize(_m_toy_sn.member_value, ref out_stream);

			count += _m_borrow_id.Serialize(_m_borrow_id.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_account_id = 0;
			one_count = _m_account_id.ParseFrom(ref temp_m_account_id, ref int_stream);
			if (0 < one_count)
			{
					_m_account_id.member_value = temp_m_account_id;
					count = count + one_count;
			}

			uint temp_m_server_id = 0;
			one_count = _m_server_id.ParseFrom(ref temp_m_server_id, ref int_stream);
			if (0 < one_count)
			{
					_m_server_id.member_value = temp_m_server_id;
					count = count + one_count;
			}

			ulong temp_m_team_id = 0;
			one_count = _m_team_id.ParseFrom(ref temp_m_team_id, ref int_stream);
			if (0 < one_count)
			{
					_m_team_id.member_value = temp_m_team_id;
					count = count + one_count;
			}

			uint temp_m_seat_index = 0;
			one_count = _m_seat_index.ParseFrom(ref temp_m_seat_index, ref int_stream);
			if (0 < one_count)
			{
					_m_seat_index.member_value = temp_m_seat_index;
					count = count + one_count;
			}

			uint temp_m_toy_type = 0;
			one_count = _m_toy_type.ParseFrom(ref temp_m_toy_type, ref int_stream);
			if (0 < one_count)
			{
					_m_toy_type.member_value = temp_m_toy_type;
					count = count + one_count;
			}

			uint temp_m_toy_sn = 0;
			one_count = _m_toy_sn.ParseFrom(ref temp_m_toy_sn, ref int_stream);
			if (0 < one_count)
			{
					_m_toy_sn.member_value = temp_m_toy_sn;
					count = count + one_count;
			}

			uint temp_m_borrow_id = 0;
			one_count = _m_borrow_id.ParseFrom(ref temp_m_borrow_id, ref int_stream);
			if (0 < one_count)
			{
					_m_borrow_id.member_value = temp_m_borrow_id;
					count = count + one_count;
			}

			return count;
		}
	}

	public class Union : IMessage
	{
		private ProtoMemberUInt32 _m_server_id;	// 公会所属服id
		private ProtoMemberUInt32 _m_union_index;	// 公会序号
		private ProtoMemberUInt64 _m_create_time;	// 公会创建时间
		private ProtoMemberString _m_name;	// 公会名称
		private ProtoMemberUInt32 _m_change_name;	// 公会名称更改次数
		private ProtoMemberString _m_badge;	// 公会徽章（固定12个字符）
		private ProtoMemberString _m_string;	// 公会宣言
		private ProtoMemberUInt32 _m_lv;	// 公会等级
		private ProtoMemberUInt32 _m_exp;	// 公会经验
		private ProtoMemberUInt32 _m_money;	// 公会货币
		private ProtoMemberUInt32 _m_order_type;	// 公会设置：排序方式
		private ProtoMemberUInt32 _m_hunting_limit;	// 公会设置：申请条件：狩猎等级
		private ProtoMemberUInt32 _m_lv_limit;	// 公会设置：申请条件：英雄等级
		private ProtoMemberEmbedded<UnionTechnologyList> _m_technology_list;	// 公会科技列表
		private ProtoMemberEmbedded<UnionChestList> _m_chest_list;	// 公会宝箱列表
		private ProtoMemberEmbedded<UnionManorList> _m_manor_list;	// 公会领地列表
		private ProtoMemberEmbedded<UnionMemberList> _m_member_list;	// 公会成员列表
		private ProtoMemberEmbedded<UnionApplicationList> _m_player_list;	// 申请成员列表

		public Union()
		{
			_m_server_id = new ProtoMemberUInt32(1, false);
			_m_union_index = new ProtoMemberUInt32(2, false);
			_m_create_time = new ProtoMemberUInt64(3, false);
			_m_name = new ProtoMemberString(4, false);
			_m_change_name = new ProtoMemberUInt32(5, false);
			_m_badge = new ProtoMemberString(6, false);
			_m_string = new ProtoMemberString(7, false);
			_m_lv = new ProtoMemberUInt32(8, false);
			_m_exp = new ProtoMemberUInt32(9, false);
			_m_money = new ProtoMemberUInt32(10, false);
			_m_order_type = new ProtoMemberUInt32(11, false);
			_m_hunting_limit = new ProtoMemberUInt32(12, false);
			_m_lv_limit = new ProtoMemberUInt32(13, false);
			_m_technology_list = new ProtoMemberEmbedded<UnionTechnologyList>(14, false);
			_m_technology_list.member_value = new UnionTechnologyList();
			_m_chest_list = new ProtoMemberEmbedded<UnionChestList>(15, false);
			_m_chest_list.member_value = new UnionChestList();
			_m_manor_list = new ProtoMemberEmbedded<UnionManorList>(16, false);
			_m_manor_list.member_value = new UnionManorList();
			_m_member_list = new ProtoMemberEmbedded<UnionMemberList>(17, false);
			_m_member_list.member_value = new UnionMemberList();
			_m_player_list = new ProtoMemberEmbedded<UnionApplicationList>(18, false);
			_m_player_list.member_value = new UnionApplicationList();
		}

		public Union(uint __m_server_id, uint __m_union_index, ulong __m_create_time, string __m_name, uint __m_change_name, string __m_badge, string __m_string, uint __m_lv, uint __m_exp, uint __m_money, uint __m_order_type, uint __m_hunting_limit, uint __m_lv_limit)
		{
			_m_server_id = new ProtoMemberUInt32(1, false);
			_m_server_id.member_value = __m_server_id;
			_m_union_index = new ProtoMemberUInt32(2, false);
			_m_union_index.member_value = __m_union_index;
			_m_create_time = new ProtoMemberUInt64(3, false);
			_m_create_time.member_value = __m_create_time;
			_m_name = new ProtoMemberString(4, false);
			_m_name.member_value = __m_name;
			_m_change_name = new ProtoMemberUInt32(5, false);
			_m_change_name.member_value = __m_change_name;
			_m_badge = new ProtoMemberString(6, false);
			_m_badge.member_value = __m_badge;
			_m_string = new ProtoMemberString(7, false);
			_m_string.member_value = __m_string;
			_m_lv = new ProtoMemberUInt32(8, false);
			_m_lv.member_value = __m_lv;
			_m_exp = new ProtoMemberUInt32(9, false);
			_m_exp.member_value = __m_exp;
			_m_money = new ProtoMemberUInt32(10, false);
			_m_money.member_value = __m_money;
			_m_order_type = new ProtoMemberUInt32(11, false);
			_m_order_type.member_value = __m_order_type;
			_m_hunting_limit = new ProtoMemberUInt32(12, false);
			_m_hunting_limit.member_value = __m_hunting_limit;
			_m_lv_limit = new ProtoMemberUInt32(13, false);
			_m_lv_limit.member_value = __m_lv_limit;
			_m_technology_list = new ProtoMemberEmbedded<UnionTechnologyList>(14, false);
			_m_technology_list.member_value = new UnionTechnologyList();
			_m_chest_list = new ProtoMemberEmbedded<UnionChestList>(15, false);
			_m_chest_list.member_value = new UnionChestList();
			_m_manor_list = new ProtoMemberEmbedded<UnionManorList>(16, false);
			_m_manor_list.member_value = new UnionManorList();
			_m_member_list = new ProtoMemberEmbedded<UnionMemberList>(17, false);
			_m_member_list.member_value = new UnionMemberList();
			_m_player_list = new ProtoMemberEmbedded<UnionApplicationList>(18, false);
			_m_player_list.member_value = new UnionApplicationList();
		}

		public uint m_server_id
		{
			get{ return _m_server_id.member_value; }
			set{ _m_server_id.member_value = value; }
		}
		public bool has_m_server_id
		{
			get{ return _m_server_id.has_value; }
		}

		public uint m_union_index
		{
			get{ return _m_union_index.member_value; }
			set{ _m_union_index.member_value = value; }
		}
		public bool has_m_union_index
		{
			get{ return _m_union_index.has_value; }
		}

		public ulong m_create_time
		{
			get{ return _m_create_time.member_value; }
			set{ _m_create_time.member_value = value; }
		}
		public bool has_m_create_time
		{
			get{ return _m_create_time.has_value; }
		}

		public string m_name
		{
			get{ return _m_name.member_value; }
			set{ _m_name.member_value = value; }
		}
		public bool has_m_name
		{
			get{ return _m_name.has_value; }
		}

		public uint m_change_name
		{
			get{ return _m_change_name.member_value; }
			set{ _m_change_name.member_value = value; }
		}
		public bool has_m_change_name
		{
			get{ return _m_change_name.has_value; }
		}

		public string m_badge
		{
			get{ return _m_badge.member_value; }
			set{ _m_badge.member_value = value; }
		}
		public bool has_m_badge
		{
			get{ return _m_badge.has_value; }
		}

		public string m_string
		{
			get{ return _m_string.member_value; }
			set{ _m_string.member_value = value; }
		}
		public bool has_m_string
		{
			get{ return _m_string.has_value; }
		}

		public uint m_lv
		{
			get{ return _m_lv.member_value; }
			set{ _m_lv.member_value = value; }
		}
		public bool has_m_lv
		{
			get{ return _m_lv.has_value; }
		}

		public uint m_exp
		{
			get{ return _m_exp.member_value; }
			set{ _m_exp.member_value = value; }
		}
		public bool has_m_exp
		{
			get{ return _m_exp.has_value; }
		}

		public uint m_money
		{
			get{ return _m_money.member_value; }
			set{ _m_money.member_value = value; }
		}
		public bool has_m_money
		{
			get{ return _m_money.has_value; }
		}

		public uint m_order_type
		{
			get{ return _m_order_type.member_value; }
			set{ _m_order_type.member_value = value; }
		}
		public bool has_m_order_type
		{
			get{ return _m_order_type.has_value; }
		}

		public uint m_hunting_limit
		{
			get{ return _m_hunting_limit.member_value; }
			set{ _m_hunting_limit.member_value = value; }
		}
		public bool has_m_hunting_limit
		{
			get{ return _m_hunting_limit.has_value; }
		}

		public uint m_lv_limit
		{
			get{ return _m_lv_limit.member_value; }
			set{ _m_lv_limit.member_value = value; }
		}
		public bool has_m_lv_limit
		{
			get{ return _m_lv_limit.has_value; }
		}

		public UnionTechnologyList m_technology_list
		{
			get{ return _m_technology_list.member_value as UnionTechnologyList; }
			set{ _m_technology_list.member_value = value; }
		}
		public bool has_m_technology_list
		{
			get{ return _m_technology_list.has_value; }
		}

		public UnionChestList m_chest_list
		{
			get{ return _m_chest_list.member_value as UnionChestList; }
			set{ _m_chest_list.member_value = value; }
		}
		public bool has_m_chest_list
		{
			get{ return _m_chest_list.has_value; }
		}

		public UnionManorList m_manor_list
		{
			get{ return _m_manor_list.member_value as UnionManorList; }
			set{ _m_manor_list.member_value = value; }
		}
		public bool has_m_manor_list
		{
			get{ return _m_manor_list.has_value; }
		}

		public UnionMemberList m_member_list
		{
			get{ return _m_member_list.member_value as UnionMemberList; }
			set{ _m_member_list.member_value = value; }
		}
		public bool has_m_member_list
		{
			get{ return _m_member_list.has_value; }
		}

		public UnionApplicationList m_player_list
		{
			get{ return _m_player_list.member_value as UnionApplicationList; }
			set{ _m_player_list.member_value = value; }
		}
		public bool has_m_player_list
		{
			get{ return _m_player_list.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_server_id.Serialize(_m_server_id.member_value, ref out_stream);

			count += _m_union_index.Serialize(_m_union_index.member_value, ref out_stream);

			count += _m_create_time.Serialize(_m_create_time.member_value, ref out_stream);

			count += _m_name.Serialize(_m_name.member_value, ref out_stream);

			count += _m_change_name.Serialize(_m_change_name.member_value, ref out_stream);

			count += _m_badge.Serialize(_m_badge.member_value, ref out_stream);

			count += _m_string.Serialize(_m_string.member_value, ref out_stream);

			count += _m_lv.Serialize(_m_lv.member_value, ref out_stream);

			count += _m_exp.Serialize(_m_exp.member_value, ref out_stream);

			count += _m_money.Serialize(_m_money.member_value, ref out_stream);

			count += _m_order_type.Serialize(_m_order_type.member_value, ref out_stream);

			count += _m_hunting_limit.Serialize(_m_hunting_limit.member_value, ref out_stream);

			count += _m_lv_limit.Serialize(_m_lv_limit.member_value, ref out_stream);

			count += _m_technology_list.Serialize(_m_technology_list.member_value, ref out_stream);

			count += _m_chest_list.Serialize(_m_chest_list.member_value, ref out_stream);

			count += _m_manor_list.Serialize(_m_manor_list.member_value, ref out_stream);

			count += _m_member_list.Serialize(_m_member_list.member_value, ref out_stream);

			count += _m_player_list.Serialize(_m_player_list.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_server_id = 0;
			one_count = _m_server_id.ParseFrom(ref temp_m_server_id, ref int_stream);
			if (0 < one_count)
			{
					_m_server_id.member_value = temp_m_server_id;
					count = count + one_count;
			}

			uint temp_m_union_index = 0;
			one_count = _m_union_index.ParseFrom(ref temp_m_union_index, ref int_stream);
			if (0 < one_count)
			{
					_m_union_index.member_value = temp_m_union_index;
					count = count + one_count;
			}

			ulong temp_m_create_time = 0;
			one_count = _m_create_time.ParseFrom(ref temp_m_create_time, ref int_stream);
			if (0 < one_count)
			{
					_m_create_time.member_value = temp_m_create_time;
					count = count + one_count;
			}

			string temp_m_name = "";
			one_count = _m_name.ParseFrom(ref temp_m_name, ref int_stream);
			if (0 < one_count)
			{
					_m_name.member_value = temp_m_name;
					count = count + one_count;
			}

			uint temp_m_change_name = 0;
			one_count = _m_change_name.ParseFrom(ref temp_m_change_name, ref int_stream);
			if (0 < one_count)
			{
					_m_change_name.member_value = temp_m_change_name;
					count = count + one_count;
			}

			string temp_m_badge = "";
			one_count = _m_badge.ParseFrom(ref temp_m_badge, ref int_stream);
			if (0 < one_count)
			{
					_m_badge.member_value = temp_m_badge;
					count = count + one_count;
			}

			string temp_m_string = "";
			one_count = _m_string.ParseFrom(ref temp_m_string, ref int_stream);
			if (0 < one_count)
			{
					_m_string.member_value = temp_m_string;
					count = count + one_count;
			}

			uint temp_m_lv = 0;
			one_count = _m_lv.ParseFrom(ref temp_m_lv, ref int_stream);
			if (0 < one_count)
			{
					_m_lv.member_value = temp_m_lv;
					count = count + one_count;
			}

			uint temp_m_exp = 0;
			one_count = _m_exp.ParseFrom(ref temp_m_exp, ref int_stream);
			if (0 < one_count)
			{
					_m_exp.member_value = temp_m_exp;
					count = count + one_count;
			}

			uint temp_m_money = 0;
			one_count = _m_money.ParseFrom(ref temp_m_money, ref int_stream);
			if (0 < one_count)
			{
					_m_money.member_value = temp_m_money;
					count = count + one_count;
			}

			uint temp_m_order_type = 0;
			one_count = _m_order_type.ParseFrom(ref temp_m_order_type, ref int_stream);
			if (0 < one_count)
			{
					_m_order_type.member_value = temp_m_order_type;
					count = count + one_count;
			}

			uint temp_m_hunting_limit = 0;
			one_count = _m_hunting_limit.ParseFrom(ref temp_m_hunting_limit, ref int_stream);
			if (0 < one_count)
			{
					_m_hunting_limit.member_value = temp_m_hunting_limit;
					count = count + one_count;
			}

			uint temp_m_lv_limit = 0;
			one_count = _m_lv_limit.ParseFrom(ref temp_m_lv_limit, ref int_stream);
			if (0 < one_count)
			{
					_m_lv_limit.member_value = temp_m_lv_limit;
					count = count + one_count;
			}

			UnionTechnologyList temp_m_technology_list = new UnionTechnologyList();
			one_count = _m_technology_list.ParseFrom(temp_m_technology_list, ref int_stream);
			if (0 < one_count)
			{
					_m_technology_list.member_value = temp_m_technology_list;
					count = count + one_count;
			}

			UnionChestList temp_m_chest_list = new UnionChestList();
			one_count = _m_chest_list.ParseFrom(temp_m_chest_list, ref int_stream);
			if (0 < one_count)
			{
					_m_chest_list.member_value = temp_m_chest_list;
					count = count + one_count;
			}

			UnionManorList temp_m_manor_list = new UnionManorList();
			one_count = _m_manor_list.ParseFrom(temp_m_manor_list, ref int_stream);
			if (0 < one_count)
			{
					_m_manor_list.member_value = temp_m_manor_list;
					count = count + one_count;
			}

			UnionMemberList temp_m_member_list = new UnionMemberList();
			one_count = _m_member_list.ParseFrom(temp_m_member_list, ref int_stream);
			if (0 < one_count)
			{
					_m_member_list.member_value = temp_m_member_list;
					count = count + one_count;
			}

			UnionApplicationList temp_m_player_list = new UnionApplicationList();
			one_count = _m_player_list.ParseFrom(temp_m_player_list, ref int_stream);
			if (0 < one_count)
			{
					_m_player_list.member_value = temp_m_player_list;
					count = count + one_count;
			}

			return count;
		}
	}

	public class UnionApplicationInfo : IMessage
	{
		private ProtoMemberUInt32 _m_account_id;	// 申请成员角色id == 账号id
		private ProtoMemberUInt32 _m_server_id;	// 申请成员所属服id
		private ProtoMemberString _m_player_name;	// 申请成员名称
		private ProtoMemberUInt32 _m_toy_type;	// 申请成员当前主英雄id
		private ProtoMemberUInt32 _m_hunting_lv;	// 申请成员当前狩猎等级
		private ProtoMemberUInt32 _m_summoner_lv;	// 申请成员当前召唤师等级
		private ProtoMemberUInt64 _m_last_offline;	// 申请成员最后一次下线时间
		private ProtoMemberBool _m_is_online;	// 申请成员的在线状态
		private ProtoMemberUInt64 _m_apply_time;	// 申请加入时间

		public UnionApplicationInfo()
		{
			_m_account_id = new ProtoMemberUInt32(1, false);
			_m_server_id = new ProtoMemberUInt32(2, false);
			_m_player_name = new ProtoMemberString(3, false);
			_m_toy_type = new ProtoMemberUInt32(4, false);
			_m_hunting_lv = new ProtoMemberUInt32(5, false);
			_m_summoner_lv = new ProtoMemberUInt32(6, false);
			_m_last_offline = new ProtoMemberUInt64(7, false);
			_m_is_online = new ProtoMemberBool(8, false);
			_m_apply_time = new ProtoMemberUInt64(9, false);
		}

		public UnionApplicationInfo(uint __m_account_id, uint __m_server_id, string __m_player_name, uint __m_toy_type, uint __m_hunting_lv, uint __m_summoner_lv, ulong __m_last_offline, bool __m_is_online, ulong __m_apply_time)
		{
			_m_account_id = new ProtoMemberUInt32(1, false);
			_m_account_id.member_value = __m_account_id;
			_m_server_id = new ProtoMemberUInt32(2, false);
			_m_server_id.member_value = __m_server_id;
			_m_player_name = new ProtoMemberString(3, false);
			_m_player_name.member_value = __m_player_name;
			_m_toy_type = new ProtoMemberUInt32(4, false);
			_m_toy_type.member_value = __m_toy_type;
			_m_hunting_lv = new ProtoMemberUInt32(5, false);
			_m_hunting_lv.member_value = __m_hunting_lv;
			_m_summoner_lv = new ProtoMemberUInt32(6, false);
			_m_summoner_lv.member_value = __m_summoner_lv;
			_m_last_offline = new ProtoMemberUInt64(7, false);
			_m_last_offline.member_value = __m_last_offline;
			_m_is_online = new ProtoMemberBool(8, false);
			_m_is_online.member_value = __m_is_online;
			_m_apply_time = new ProtoMemberUInt64(9, false);
			_m_apply_time.member_value = __m_apply_time;
		}

		public uint m_account_id
		{
			get{ return _m_account_id.member_value; }
			set{ _m_account_id.member_value = value; }
		}
		public bool has_m_account_id
		{
			get{ return _m_account_id.has_value; }
		}

		public uint m_server_id
		{
			get{ return _m_server_id.member_value; }
			set{ _m_server_id.member_value = value; }
		}
		public bool has_m_server_id
		{
			get{ return _m_server_id.has_value; }
		}

		public string m_player_name
		{
			get{ return _m_player_name.member_value; }
			set{ _m_player_name.member_value = value; }
		}
		public bool has_m_player_name
		{
			get{ return _m_player_name.has_value; }
		}

		public uint m_toy_type
		{
			get{ return _m_toy_type.member_value; }
			set{ _m_toy_type.member_value = value; }
		}
		public bool has_m_toy_type
		{
			get{ return _m_toy_type.has_value; }
		}

		public uint m_hunting_lv
		{
			get{ return _m_hunting_lv.member_value; }
			set{ _m_hunting_lv.member_value = value; }
		}
		public bool has_m_hunting_lv
		{
			get{ return _m_hunting_lv.has_value; }
		}

		public uint m_summoner_lv
		{
			get{ return _m_summoner_lv.member_value; }
			set{ _m_summoner_lv.member_value = value; }
		}
		public bool has_m_summoner_lv
		{
			get{ return _m_summoner_lv.has_value; }
		}

		public ulong m_last_offline
		{
			get{ return _m_last_offline.member_value; }
			set{ _m_last_offline.member_value = value; }
		}
		public bool has_m_last_offline
		{
			get{ return _m_last_offline.has_value; }
		}

		public bool m_is_online
		{
			get{ return _m_is_online.member_value; }
			set{ _m_is_online.member_value = value; }
		}
		public bool has_m_is_online
		{
			get{ return _m_is_online.has_value; }
		}

		public ulong m_apply_time
		{
			get{ return _m_apply_time.member_value; }
			set{ _m_apply_time.member_value = value; }
		}
		public bool has_m_apply_time
		{
			get{ return _m_apply_time.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_account_id.Serialize(_m_account_id.member_value, ref out_stream);

			count += _m_server_id.Serialize(_m_server_id.member_value, ref out_stream);

			count += _m_player_name.Serialize(_m_player_name.member_value, ref out_stream);

			count += _m_toy_type.Serialize(_m_toy_type.member_value, ref out_stream);

			count += _m_hunting_lv.Serialize(_m_hunting_lv.member_value, ref out_stream);

			count += _m_summoner_lv.Serialize(_m_summoner_lv.member_value, ref out_stream);

			count += _m_last_offline.Serialize(_m_last_offline.member_value, ref out_stream);

			count += _m_is_online.Serialize(_m_is_online.member_value, ref out_stream);

			count += _m_apply_time.Serialize(_m_apply_time.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_account_id = 0;
			one_count = _m_account_id.ParseFrom(ref temp_m_account_id, ref int_stream);
			if (0 < one_count)
			{
					_m_account_id.member_value = temp_m_account_id;
					count = count + one_count;
			}

			uint temp_m_server_id = 0;
			one_count = _m_server_id.ParseFrom(ref temp_m_server_id, ref int_stream);
			if (0 < one_count)
			{
					_m_server_id.member_value = temp_m_server_id;
					count = count + one_count;
			}

			string temp_m_player_name = "";
			one_count = _m_player_name.ParseFrom(ref temp_m_player_name, ref int_stream);
			if (0 < one_count)
			{
					_m_player_name.member_value = temp_m_player_name;
					count = count + one_count;
			}

			uint temp_m_toy_type = 0;
			one_count = _m_toy_type.ParseFrom(ref temp_m_toy_type, ref int_stream);
			if (0 < one_count)
			{
					_m_toy_type.member_value = temp_m_toy_type;
					count = count + one_count;
			}

			uint temp_m_hunting_lv = 0;
			one_count = _m_hunting_lv.ParseFrom(ref temp_m_hunting_lv, ref int_stream);
			if (0 < one_count)
			{
					_m_hunting_lv.member_value = temp_m_hunting_lv;
					count = count + one_count;
			}

			uint temp_m_summoner_lv = 0;
			one_count = _m_summoner_lv.ParseFrom(ref temp_m_summoner_lv, ref int_stream);
			if (0 < one_count)
			{
					_m_summoner_lv.member_value = temp_m_summoner_lv;
					count = count + one_count;
			}

			ulong temp_m_last_offline = 0;
			one_count = _m_last_offline.ParseFrom(ref temp_m_last_offline, ref int_stream);
			if (0 < one_count)
			{
					_m_last_offline.member_value = temp_m_last_offline;
					count = count + one_count;
			}

			bool temp_m_is_online = false;
			one_count = _m_is_online.ParseFrom(ref temp_m_is_online, ref int_stream);
			if (0 < one_count)
			{
					_m_is_online.member_value = temp_m_is_online;
					count = count + one_count;
			}

			ulong temp_m_apply_time = 0;
			one_count = _m_apply_time.ParseFrom(ref temp_m_apply_time, ref int_stream);
			if (0 < one_count)
			{
					_m_apply_time.member_value = temp_m_apply_time;
					count = count + one_count;
			}

			return count;
		}
	}

	public class UnionApplicationList : IMessage
	{
		private ProtoMemberEmbeddedList<UnionApplicationInfo> _m_players;	// 申请成员列表

		public UnionApplicationList()
		{
			_m_players = new ProtoMemberEmbeddedList<UnionApplicationInfo>(1, false);
		}

		public System.Collections.Generic.List<UnionApplicationInfo> m_players
		{
			get{ return _m_players.member_value; }
		}
		public bool has_m_players
		{
			get{ return _m_players.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			foreach(UnionApplicationInfo one_member_value in _m_players.member_value)
			{
				count += _m_players.Serialize(one_member_value, ref out_stream);
			}

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			while (true)
			{
				UnionApplicationInfo one_member_value = new UnionApplicationInfo();
				one_count = _m_players.ParseFrom(one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_players.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			return count;
		}
	}

	public class UnionChestInfo : IMessage
	{
		private ProtoMemberUInt32 _m_id;	// 公会宝箱id
		private ProtoMemberUInt32 _m_count;	// 公会宝箱剩余数量

		public UnionChestInfo()
		{
			_m_id = new ProtoMemberUInt32(1, false);
			_m_count = new ProtoMemberUInt32(2, false);
		}

		public UnionChestInfo(uint __m_id, uint __m_count)
		{
			_m_id = new ProtoMemberUInt32(1, false);
			_m_id.member_value = __m_id;
			_m_count = new ProtoMemberUInt32(2, false);
			_m_count.member_value = __m_count;
		}

		public uint m_id
		{
			get{ return _m_id.member_value; }
			set{ _m_id.member_value = value; }
		}
		public bool has_m_id
		{
			get{ return _m_id.has_value; }
		}

		public uint m_count
		{
			get{ return _m_count.member_value; }
			set{ _m_count.member_value = value; }
		}
		public bool has_m_count
		{
			get{ return _m_count.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_id.Serialize(_m_id.member_value, ref out_stream);

			count += _m_count.Serialize(_m_count.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_id = 0;
			one_count = _m_id.ParseFrom(ref temp_m_id, ref int_stream);
			if (0 < one_count)
			{
					_m_id.member_value = temp_m_id;
					count = count + one_count;
			}

			uint temp_m_count = 0;
			one_count = _m_count.ParseFrom(ref temp_m_count, ref int_stream);
			if (0 < one_count)
			{
					_m_count.member_value = temp_m_count;
					count = count + one_count;
			}

			return count;
		}
	}

	public class UnionChestList : IMessage
	{
		private ProtoMemberEmbeddedList<UnionChestInfo> _m_chests;	// 公会宝箱列表

		public UnionChestList()
		{
			_m_chests = new ProtoMemberEmbeddedList<UnionChestInfo>(1, false);
		}

		public System.Collections.Generic.List<UnionChestInfo> m_chests
		{
			get{ return _m_chests.member_value; }
		}
		public bool has_m_chests
		{
			get{ return _m_chests.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			foreach(UnionChestInfo one_member_value in _m_chests.member_value)
			{
				count += _m_chests.Serialize(one_member_value, ref out_stream);
			}

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			while (true)
			{
				UnionChestInfo one_member_value = new UnionChestInfo();
				one_count = _m_chests.ParseFrom(one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_chests.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			return count;
		}
	}

	public enum UnionExpUpdateType
	{
		UnionExpUpdateType_Online = 1,
		UnionExpUpdateType_Offline = 2,
	}

	public class UnionManorList : IMessage
	{
		private ProtoMemberUInt32List _m_manors;	// 公会领地列表

		public UnionManorList()
		{
			_m_manors = new ProtoMemberUInt32List(1, false);
		}

		public System.Collections.Generic.List<uint> m_manors
		{
			get{ return _m_manors.member_value; }
		}
		public bool has_m_manors
		{
			get{ return _m_manors.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			foreach(uint one_member_value in _m_manors.member_value)
			{
				count += _m_manors.Serialize(one_member_value, ref out_stream);
			}

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			while (true)
			{
				uint one_member_value = 0;
				one_count = _m_manors.ParseFrom(ref one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_manors.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			return count;
		}
	}

	public enum UnionManorStateType
	{
		UnionManorStateType_Safe = 0,							// 不可进攻的安全期
		UnionManorStateType_Bid  = 1,							// 宣战，投标期
		UnionManorStateType_Ready = 2,							// 战斗准备期
		UnionManorStateType_Attack = 3,							// 战斗中
	}

	public class UnionMemberInfo : IMessage
	{
		private ProtoMemberUInt32 _m_account_id;	// 公会成员角色id == 账号id
		private ProtoMemberUInt32 _m_server_id;	// 公会成员所属服id
		private ProtoMemberString _m_player_name;	// 公会成员名称
		private ProtoMemberUInt32 _m_toy_type;	// 公会成员当前主英雄id
		private ProtoMemberUInt32 _m_hunting_lv;	// 公会成员当前狩猎等级
		private ProtoMemberUInt32 _m_summoner_lv;	// 公会成员当前召唤师等级
		private ProtoMemberUInt64 _m_last_offline;	// 公会成员最后一次下线时间
		private ProtoMemberBool _m_is_online;	// 公会成员的在线状态
		private ProtoMemberUInt64 _m_join_time;	// 公会加入时间
		private ProtoMemberUInt32 _m_lv;	// 公会个人贡献等级
		private ProtoMemberUInt32 _m_exp;	// 公会个人贡献经验
		private ProtoMemberUInt32 _m_position;	// 公会个人职位
		private ProtoMemberBool _m_post_sticky;	// 公会个人设置：个人信息置顶

		public UnionMemberInfo()
		{
			_m_account_id = new ProtoMemberUInt32(1, false);
			_m_server_id = new ProtoMemberUInt32(2, false);
			_m_player_name = new ProtoMemberString(3, false);
			_m_toy_type = new ProtoMemberUInt32(4, false);
			_m_hunting_lv = new ProtoMemberUInt32(5, false);
			_m_summoner_lv = new ProtoMemberUInt32(6, false);
			_m_last_offline = new ProtoMemberUInt64(7, false);
			_m_is_online = new ProtoMemberBool(8, false);
			_m_join_time = new ProtoMemberUInt64(9, false);
			_m_lv = new ProtoMemberUInt32(10, false);
			_m_exp = new ProtoMemberUInt32(11, false);
			_m_position = new ProtoMemberUInt32(12, false);
			_m_post_sticky = new ProtoMemberBool(13, false);
		}

		public UnionMemberInfo(uint __m_account_id, uint __m_server_id, string __m_player_name, uint __m_toy_type, uint __m_hunting_lv, uint __m_summoner_lv, ulong __m_last_offline, bool __m_is_online, ulong __m_join_time, uint __m_lv, uint __m_exp, uint __m_position, bool __m_post_sticky)
		{
			_m_account_id = new ProtoMemberUInt32(1, false);
			_m_account_id.member_value = __m_account_id;
			_m_server_id = new ProtoMemberUInt32(2, false);
			_m_server_id.member_value = __m_server_id;
			_m_player_name = new ProtoMemberString(3, false);
			_m_player_name.member_value = __m_player_name;
			_m_toy_type = new ProtoMemberUInt32(4, false);
			_m_toy_type.member_value = __m_toy_type;
			_m_hunting_lv = new ProtoMemberUInt32(5, false);
			_m_hunting_lv.member_value = __m_hunting_lv;
			_m_summoner_lv = new ProtoMemberUInt32(6, false);
			_m_summoner_lv.member_value = __m_summoner_lv;
			_m_last_offline = new ProtoMemberUInt64(7, false);
			_m_last_offline.member_value = __m_last_offline;
			_m_is_online = new ProtoMemberBool(8, false);
			_m_is_online.member_value = __m_is_online;
			_m_join_time = new ProtoMemberUInt64(9, false);
			_m_join_time.member_value = __m_join_time;
			_m_lv = new ProtoMemberUInt32(10, false);
			_m_lv.member_value = __m_lv;
			_m_exp = new ProtoMemberUInt32(11, false);
			_m_exp.member_value = __m_exp;
			_m_position = new ProtoMemberUInt32(12, false);
			_m_position.member_value = __m_position;
			_m_post_sticky = new ProtoMemberBool(13, false);
			_m_post_sticky.member_value = __m_post_sticky;
		}

		public uint m_account_id
		{
			get{ return _m_account_id.member_value; }
			set{ _m_account_id.member_value = value; }
		}
		public bool has_m_account_id
		{
			get{ return _m_account_id.has_value; }
		}

		public uint m_server_id
		{
			get{ return _m_server_id.member_value; }
			set{ _m_server_id.member_value = value; }
		}
		public bool has_m_server_id
		{
			get{ return _m_server_id.has_value; }
		}

		public string m_player_name
		{
			get{ return _m_player_name.member_value; }
			set{ _m_player_name.member_value = value; }
		}
		public bool has_m_player_name
		{
			get{ return _m_player_name.has_value; }
		}

		public uint m_toy_type
		{
			get{ return _m_toy_type.member_value; }
			set{ _m_toy_type.member_value = value; }
		}
		public bool has_m_toy_type
		{
			get{ return _m_toy_type.has_value; }
		}

		public uint m_hunting_lv
		{
			get{ return _m_hunting_lv.member_value; }
			set{ _m_hunting_lv.member_value = value; }
		}
		public bool has_m_hunting_lv
		{
			get{ return _m_hunting_lv.has_value; }
		}

		public uint m_summoner_lv
		{
			get{ return _m_summoner_lv.member_value; }
			set{ _m_summoner_lv.member_value = value; }
		}
		public bool has_m_summoner_lv
		{
			get{ return _m_summoner_lv.has_value; }
		}

		public ulong m_last_offline
		{
			get{ return _m_last_offline.member_value; }
			set{ _m_last_offline.member_value = value; }
		}
		public bool has_m_last_offline
		{
			get{ return _m_last_offline.has_value; }
		}

		public bool m_is_online
		{
			get{ return _m_is_online.member_value; }
			set{ _m_is_online.member_value = value; }
		}
		public bool has_m_is_online
		{
			get{ return _m_is_online.has_value; }
		}

		public ulong m_join_time
		{
			get{ return _m_join_time.member_value; }
			set{ _m_join_time.member_value = value; }
		}
		public bool has_m_join_time
		{
			get{ return _m_join_time.has_value; }
		}

		public uint m_lv
		{
			get{ return _m_lv.member_value; }
			set{ _m_lv.member_value = value; }
		}
		public bool has_m_lv
		{
			get{ return _m_lv.has_value; }
		}

		public uint m_exp
		{
			get{ return _m_exp.member_value; }
			set{ _m_exp.member_value = value; }
		}
		public bool has_m_exp
		{
			get{ return _m_exp.has_value; }
		}

		public uint m_position
		{
			get{ return _m_position.member_value; }
			set{ _m_position.member_value = value; }
		}
		public bool has_m_position
		{
			get{ return _m_position.has_value; }
		}

		public bool m_post_sticky
		{
			get{ return _m_post_sticky.member_value; }
			set{ _m_post_sticky.member_value = value; }
		}
		public bool has_m_post_sticky
		{
			get{ return _m_post_sticky.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_account_id.Serialize(_m_account_id.member_value, ref out_stream);

			count += _m_server_id.Serialize(_m_server_id.member_value, ref out_stream);

			count += _m_player_name.Serialize(_m_player_name.member_value, ref out_stream);

			count += _m_toy_type.Serialize(_m_toy_type.member_value, ref out_stream);

			count += _m_hunting_lv.Serialize(_m_hunting_lv.member_value, ref out_stream);

			count += _m_summoner_lv.Serialize(_m_summoner_lv.member_value, ref out_stream);

			count += _m_last_offline.Serialize(_m_last_offline.member_value, ref out_stream);

			count += _m_is_online.Serialize(_m_is_online.member_value, ref out_stream);

			count += _m_join_time.Serialize(_m_join_time.member_value, ref out_stream);

			count += _m_lv.Serialize(_m_lv.member_value, ref out_stream);

			count += _m_exp.Serialize(_m_exp.member_value, ref out_stream);

			count += _m_position.Serialize(_m_position.member_value, ref out_stream);

			count += _m_post_sticky.Serialize(_m_post_sticky.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_account_id = 0;
			one_count = _m_account_id.ParseFrom(ref temp_m_account_id, ref int_stream);
			if (0 < one_count)
			{
					_m_account_id.member_value = temp_m_account_id;
					count = count + one_count;
			}

			uint temp_m_server_id = 0;
			one_count = _m_server_id.ParseFrom(ref temp_m_server_id, ref int_stream);
			if (0 < one_count)
			{
					_m_server_id.member_value = temp_m_server_id;
					count = count + one_count;
			}

			string temp_m_player_name = "";
			one_count = _m_player_name.ParseFrom(ref temp_m_player_name, ref int_stream);
			if (0 < one_count)
			{
					_m_player_name.member_value = temp_m_player_name;
					count = count + one_count;
			}

			uint temp_m_toy_type = 0;
			one_count = _m_toy_type.ParseFrom(ref temp_m_toy_type, ref int_stream);
			if (0 < one_count)
			{
					_m_toy_type.member_value = temp_m_toy_type;
					count = count + one_count;
			}

			uint temp_m_hunting_lv = 0;
			one_count = _m_hunting_lv.ParseFrom(ref temp_m_hunting_lv, ref int_stream);
			if (0 < one_count)
			{
					_m_hunting_lv.member_value = temp_m_hunting_lv;
					count = count + one_count;
			}

			uint temp_m_summoner_lv = 0;
			one_count = _m_summoner_lv.ParseFrom(ref temp_m_summoner_lv, ref int_stream);
			if (0 < one_count)
			{
					_m_summoner_lv.member_value = temp_m_summoner_lv;
					count = count + one_count;
			}

			ulong temp_m_last_offline = 0;
			one_count = _m_last_offline.ParseFrom(ref temp_m_last_offline, ref int_stream);
			if (0 < one_count)
			{
					_m_last_offline.member_value = temp_m_last_offline;
					count = count + one_count;
			}

			bool temp_m_is_online = false;
			one_count = _m_is_online.ParseFrom(ref temp_m_is_online, ref int_stream);
			if (0 < one_count)
			{
					_m_is_online.member_value = temp_m_is_online;
					count = count + one_count;
			}

			ulong temp_m_join_time = 0;
			one_count = _m_join_time.ParseFrom(ref temp_m_join_time, ref int_stream);
			if (0 < one_count)
			{
					_m_join_time.member_value = temp_m_join_time;
					count = count + one_count;
			}

			uint temp_m_lv = 0;
			one_count = _m_lv.ParseFrom(ref temp_m_lv, ref int_stream);
			if (0 < one_count)
			{
					_m_lv.member_value = temp_m_lv;
					count = count + one_count;
			}

			uint temp_m_exp = 0;
			one_count = _m_exp.ParseFrom(ref temp_m_exp, ref int_stream);
			if (0 < one_count)
			{
					_m_exp.member_value = temp_m_exp;
					count = count + one_count;
			}

			uint temp_m_position = 0;
			one_count = _m_position.ParseFrom(ref temp_m_position, ref int_stream);
			if (0 < one_count)
			{
					_m_position.member_value = temp_m_position;
					count = count + one_count;
			}

			bool temp_m_post_sticky = false;
			one_count = _m_post_sticky.ParseFrom(ref temp_m_post_sticky, ref int_stream);
			if (0 < one_count)
			{
					_m_post_sticky.member_value = temp_m_post_sticky;
					count = count + one_count;
			}

			return count;
		}
	}

	public class UnionMemberList : IMessage
	{
		private ProtoMemberEmbeddedList<UnionMemberInfo> _m_members;	// 公会成员列表

		public UnionMemberList()
		{
			_m_members = new ProtoMemberEmbeddedList<UnionMemberInfo>(1, false);
		}

		public System.Collections.Generic.List<UnionMemberInfo> m_members
		{
			get{ return _m_members.member_value; }
		}
		public bool has_m_members
		{
			get{ return _m_members.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			foreach(UnionMemberInfo one_member_value in _m_members.member_value)
			{
				count += _m_members.Serialize(one_member_value, ref out_stream);
			}

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			while (true)
			{
				UnionMemberInfo one_member_value = new UnionMemberInfo();
				one_count = _m_members.ParseFrom(one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_members.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			return count;
		}
	}

	public enum UnionMemberOperatorType
	{
		UnionMemberOperatorType_Agree = 0,						// 允许加入公会
		UnionMemberOperatorType_Refuse = 1,						// 拒绝加入公会
		UnionMemberOperatorType_Member = 2,						// 设置为成员
		UnionMemberOperatorType_Elite = 3,						// 设置为精英
		UnionMemberOperatorType_Kick = 4,						// 踢出公会
		UnionMemberOperatorType_Exit = 5,						// 退出公会
	}

	public class UnionMemberShowInfo : IMessage
	{
		private ProtoMemberUInt32 _m_account_id;	// 公会成员角色id == 账号id
		private ProtoMemberUInt32 _m_server_id;	// 公会成员所属服id
		private ProtoMemberString _m_player_name;	// 公会成员名称
		private ProtoMemberUInt32 _m_toy_type;	// 公会成员当前主英雄id
		private ProtoMemberUInt32 _m_hunting_lv;	// 公会成员当前狩猎等级
		private ProtoMemberUInt32 _m_summoner_lv;	// 公会成员当前召唤师等级
		private ProtoMemberUInt64 _m_last_offline;	// 公会成员最后一次下线时间
		private ProtoMemberBool _m_is_online;	// 公会成员的在线状态
		private ProtoMemberUInt64 _m_join_time;	// 公会加入时间
		private ProtoMemberUInt32 _m_lv;	// 公会个人贡献等级
		private ProtoMemberUInt32 _m_exp;	// 公会个人贡献经验
		private ProtoMemberUInt32 _m_position;	// 公会个人职位

		public UnionMemberShowInfo()
		{
			_m_account_id = new ProtoMemberUInt32(1, false);
			_m_server_id = new ProtoMemberUInt32(2, false);
			_m_player_name = new ProtoMemberString(3, false);
			_m_toy_type = new ProtoMemberUInt32(4, false);
			_m_hunting_lv = new ProtoMemberUInt32(5, false);
			_m_summoner_lv = new ProtoMemberUInt32(6, false);
			_m_last_offline = new ProtoMemberUInt64(7, false);
			_m_is_online = new ProtoMemberBool(8, false);
			_m_join_time = new ProtoMemberUInt64(9, false);
			_m_lv = new ProtoMemberUInt32(10, false);
			_m_exp = new ProtoMemberUInt32(11, false);
			_m_position = new ProtoMemberUInt32(12, false);
		}

		public UnionMemberShowInfo(uint __m_account_id, uint __m_server_id, string __m_player_name, uint __m_toy_type, uint __m_hunting_lv, uint __m_summoner_lv, ulong __m_last_offline, bool __m_is_online, ulong __m_join_time, uint __m_lv, uint __m_exp, uint __m_position)
		{
			_m_account_id = new ProtoMemberUInt32(1, false);
			_m_account_id.member_value = __m_account_id;
			_m_server_id = new ProtoMemberUInt32(2, false);
			_m_server_id.member_value = __m_server_id;
			_m_player_name = new ProtoMemberString(3, false);
			_m_player_name.member_value = __m_player_name;
			_m_toy_type = new ProtoMemberUInt32(4, false);
			_m_toy_type.member_value = __m_toy_type;
			_m_hunting_lv = new ProtoMemberUInt32(5, false);
			_m_hunting_lv.member_value = __m_hunting_lv;
			_m_summoner_lv = new ProtoMemberUInt32(6, false);
			_m_summoner_lv.member_value = __m_summoner_lv;
			_m_last_offline = new ProtoMemberUInt64(7, false);
			_m_last_offline.member_value = __m_last_offline;
			_m_is_online = new ProtoMemberBool(8, false);
			_m_is_online.member_value = __m_is_online;
			_m_join_time = new ProtoMemberUInt64(9, false);
			_m_join_time.member_value = __m_join_time;
			_m_lv = new ProtoMemberUInt32(10, false);
			_m_lv.member_value = __m_lv;
			_m_exp = new ProtoMemberUInt32(11, false);
			_m_exp.member_value = __m_exp;
			_m_position = new ProtoMemberUInt32(12, false);
			_m_position.member_value = __m_position;
		}

		public uint m_account_id
		{
			get{ return _m_account_id.member_value; }
			set{ _m_account_id.member_value = value; }
		}
		public bool has_m_account_id
		{
			get{ return _m_account_id.has_value; }
		}

		public uint m_server_id
		{
			get{ return _m_server_id.member_value; }
			set{ _m_server_id.member_value = value; }
		}
		public bool has_m_server_id
		{
			get{ return _m_server_id.has_value; }
		}

		public string m_player_name
		{
			get{ return _m_player_name.member_value; }
			set{ _m_player_name.member_value = value; }
		}
		public bool has_m_player_name
		{
			get{ return _m_player_name.has_value; }
		}

		public uint m_toy_type
		{
			get{ return _m_toy_type.member_value; }
			set{ _m_toy_type.member_value = value; }
		}
		public bool has_m_toy_type
		{
			get{ return _m_toy_type.has_value; }
		}

		public uint m_hunting_lv
		{
			get{ return _m_hunting_lv.member_value; }
			set{ _m_hunting_lv.member_value = value; }
		}
		public bool has_m_hunting_lv
		{
			get{ return _m_hunting_lv.has_value; }
		}

		public uint m_summoner_lv
		{
			get{ return _m_summoner_lv.member_value; }
			set{ _m_summoner_lv.member_value = value; }
		}
		public bool has_m_summoner_lv
		{
			get{ return _m_summoner_lv.has_value; }
		}

		public ulong m_last_offline
		{
			get{ return _m_last_offline.member_value; }
			set{ _m_last_offline.member_value = value; }
		}
		public bool has_m_last_offline
		{
			get{ return _m_last_offline.has_value; }
		}

		public bool m_is_online
		{
			get{ return _m_is_online.member_value; }
			set{ _m_is_online.member_value = value; }
		}
		public bool has_m_is_online
		{
			get{ return _m_is_online.has_value; }
		}

		public ulong m_join_time
		{
			get{ return _m_join_time.member_value; }
			set{ _m_join_time.member_value = value; }
		}
		public bool has_m_join_time
		{
			get{ return _m_join_time.has_value; }
		}

		public uint m_lv
		{
			get{ return _m_lv.member_value; }
			set{ _m_lv.member_value = value; }
		}
		public bool has_m_lv
		{
			get{ return _m_lv.has_value; }
		}

		public uint m_exp
		{
			get{ return _m_exp.member_value; }
			set{ _m_exp.member_value = value; }
		}
		public bool has_m_exp
		{
			get{ return _m_exp.has_value; }
		}

		public uint m_position
		{
			get{ return _m_position.member_value; }
			set{ _m_position.member_value = value; }
		}
		public bool has_m_position
		{
			get{ return _m_position.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_account_id.Serialize(_m_account_id.member_value, ref out_stream);

			count += _m_server_id.Serialize(_m_server_id.member_value, ref out_stream);

			count += _m_player_name.Serialize(_m_player_name.member_value, ref out_stream);

			count += _m_toy_type.Serialize(_m_toy_type.member_value, ref out_stream);

			count += _m_hunting_lv.Serialize(_m_hunting_lv.member_value, ref out_stream);

			count += _m_summoner_lv.Serialize(_m_summoner_lv.member_value, ref out_stream);

			count += _m_last_offline.Serialize(_m_last_offline.member_value, ref out_stream);

			count += _m_is_online.Serialize(_m_is_online.member_value, ref out_stream);

			count += _m_join_time.Serialize(_m_join_time.member_value, ref out_stream);

			count += _m_lv.Serialize(_m_lv.member_value, ref out_stream);

			count += _m_exp.Serialize(_m_exp.member_value, ref out_stream);

			count += _m_position.Serialize(_m_position.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_account_id = 0;
			one_count = _m_account_id.ParseFrom(ref temp_m_account_id, ref int_stream);
			if (0 < one_count)
			{
					_m_account_id.member_value = temp_m_account_id;
					count = count + one_count;
			}

			uint temp_m_server_id = 0;
			one_count = _m_server_id.ParseFrom(ref temp_m_server_id, ref int_stream);
			if (0 < one_count)
			{
					_m_server_id.member_value = temp_m_server_id;
					count = count + one_count;
			}

			string temp_m_player_name = "";
			one_count = _m_player_name.ParseFrom(ref temp_m_player_name, ref int_stream);
			if (0 < one_count)
			{
					_m_player_name.member_value = temp_m_player_name;
					count = count + one_count;
			}

			uint temp_m_toy_type = 0;
			one_count = _m_toy_type.ParseFrom(ref temp_m_toy_type, ref int_stream);
			if (0 < one_count)
			{
					_m_toy_type.member_value = temp_m_toy_type;
					count = count + one_count;
			}

			uint temp_m_hunting_lv = 0;
			one_count = _m_hunting_lv.ParseFrom(ref temp_m_hunting_lv, ref int_stream);
			if (0 < one_count)
			{
					_m_hunting_lv.member_value = temp_m_hunting_lv;
					count = count + one_count;
			}

			uint temp_m_summoner_lv = 0;
			one_count = _m_summoner_lv.ParseFrom(ref temp_m_summoner_lv, ref int_stream);
			if (0 < one_count)
			{
					_m_summoner_lv.member_value = temp_m_summoner_lv;
					count = count + one_count;
			}

			ulong temp_m_last_offline = 0;
			one_count = _m_last_offline.ParseFrom(ref temp_m_last_offline, ref int_stream);
			if (0 < one_count)
			{
					_m_last_offline.member_value = temp_m_last_offline;
					count = count + one_count;
			}

			bool temp_m_is_online = false;
			one_count = _m_is_online.ParseFrom(ref temp_m_is_online, ref int_stream);
			if (0 < one_count)
			{
					_m_is_online.member_value = temp_m_is_online;
					count = count + one_count;
			}

			ulong temp_m_join_time = 0;
			one_count = _m_join_time.ParseFrom(ref temp_m_join_time, ref int_stream);
			if (0 < one_count)
			{
					_m_join_time.member_value = temp_m_join_time;
					count = count + one_count;
			}

			uint temp_m_lv = 0;
			one_count = _m_lv.ParseFrom(ref temp_m_lv, ref int_stream);
			if (0 < one_count)
			{
					_m_lv.member_value = temp_m_lv;
					count = count + one_count;
			}

			uint temp_m_exp = 0;
			one_count = _m_exp.ParseFrom(ref temp_m_exp, ref int_stream);
			if (0 < one_count)
			{
					_m_exp.member_value = temp_m_exp;
					count = count + one_count;
			}

			uint temp_m_position = 0;
			one_count = _m_position.ParseFrom(ref temp_m_position, ref int_stream);
			if (0 < one_count)
			{
					_m_position.member_value = temp_m_position;
					count = count + one_count;
			}

			return count;
		}
	}

	public enum UnionMoneyUpdateType
	{
		UnionMoneyUpdateType_Online = 1,
		UnionMoneyUpdateType_Offline = 2,
		UnionMoneyUpdateType_Technology = 3,
		UnionMoneyUpdateType_GM = 4,
	}

	public enum UnionOrdeyType
	{
		UnionOrdeyType_Lv_U2L = 0,								// 根据等级（高到低）
		UnionOrdeyType_Lv_L2U = 1,								// 根据等级（低到高）
		UnionOrdeyType_Contribution_U2L = 2,					// 根据公会贡献（高到低）
		UnionOrdeyType_Contribution_L2U = 3,					// 根据公会贡献（低到高）
		UnionOrdeyType_HuntingLv_U2L = 4,						// 根据猎人评级（高到低）
		UnionOrdeyType_HuntingLv_L2U = 5,						// 根据猎人评级（低到高）
	}

	public enum UnionPositionType
	{
		UnionPositionType_Member = 0,							// 会员
		UnionPositionType_Elite = 1,							// 精英
		UnionPositionType_Chairman = 2,							// 会长
	}

	public class UnionShowInfo : IMessage
	{
		private ProtoMemberUInt64 _m_union_id;	// 公会id
		private ProtoMemberString _m_name;	// 公会名称
		private ProtoMemberString _m_badge;	// 公会徽章
		private ProtoMemberUInt32 _m_lv;	// 公会等级
		private ProtoMemberUInt32 _m_hunting_limit;	// 公会设置：申请条件：狩猎等级
		private ProtoMemberUInt32 _m_lv_limit;	// 公会设置：申请条件：英雄等级
		private ProtoMemberUInt32 _m_member_count;	// 公会当前人数

		public UnionShowInfo()
		{
			_m_union_id = new ProtoMemberUInt64(1, false);
			_m_name = new ProtoMemberString(2, false);
			_m_badge = new ProtoMemberString(3, false);
			_m_lv = new ProtoMemberUInt32(4, false);
			_m_hunting_limit = new ProtoMemberUInt32(5, false);
			_m_lv_limit = new ProtoMemberUInt32(6, false);
			_m_member_count = new ProtoMemberUInt32(7, false);
		}

		public UnionShowInfo(ulong __m_union_id, string __m_name, string __m_badge, uint __m_lv, uint __m_hunting_limit, uint __m_lv_limit, uint __m_member_count)
		{
			_m_union_id = new ProtoMemberUInt64(1, false);
			_m_union_id.member_value = __m_union_id;
			_m_name = new ProtoMemberString(2, false);
			_m_name.member_value = __m_name;
			_m_badge = new ProtoMemberString(3, false);
			_m_badge.member_value = __m_badge;
			_m_lv = new ProtoMemberUInt32(4, false);
			_m_lv.member_value = __m_lv;
			_m_hunting_limit = new ProtoMemberUInt32(5, false);
			_m_hunting_limit.member_value = __m_hunting_limit;
			_m_lv_limit = new ProtoMemberUInt32(6, false);
			_m_lv_limit.member_value = __m_lv_limit;
			_m_member_count = new ProtoMemberUInt32(7, false);
			_m_member_count.member_value = __m_member_count;
		}

		public ulong m_union_id
		{
			get{ return _m_union_id.member_value; }
			set{ _m_union_id.member_value = value; }
		}
		public bool has_m_union_id
		{
			get{ return _m_union_id.has_value; }
		}

		public string m_name
		{
			get{ return _m_name.member_value; }
			set{ _m_name.member_value = value; }
		}
		public bool has_m_name
		{
			get{ return _m_name.has_value; }
		}

		public string m_badge
		{
			get{ return _m_badge.member_value; }
			set{ _m_badge.member_value = value; }
		}
		public bool has_m_badge
		{
			get{ return _m_badge.has_value; }
		}

		public uint m_lv
		{
			get{ return _m_lv.member_value; }
			set{ _m_lv.member_value = value; }
		}
		public bool has_m_lv
		{
			get{ return _m_lv.has_value; }
		}

		public uint m_hunting_limit
		{
			get{ return _m_hunting_limit.member_value; }
			set{ _m_hunting_limit.member_value = value; }
		}
		public bool has_m_hunting_limit
		{
			get{ return _m_hunting_limit.has_value; }
		}

		public uint m_lv_limit
		{
			get{ return _m_lv_limit.member_value; }
			set{ _m_lv_limit.member_value = value; }
		}
		public bool has_m_lv_limit
		{
			get{ return _m_lv_limit.has_value; }
		}

		public uint m_member_count
		{
			get{ return _m_member_count.member_value; }
			set{ _m_member_count.member_value = value; }
		}
		public bool has_m_member_count
		{
			get{ return _m_member_count.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_union_id.Serialize(_m_union_id.member_value, ref out_stream);

			count += _m_name.Serialize(_m_name.member_value, ref out_stream);

			count += _m_badge.Serialize(_m_badge.member_value, ref out_stream);

			count += _m_lv.Serialize(_m_lv.member_value, ref out_stream);

			count += _m_hunting_limit.Serialize(_m_hunting_limit.member_value, ref out_stream);

			count += _m_lv_limit.Serialize(_m_lv_limit.member_value, ref out_stream);

			count += _m_member_count.Serialize(_m_member_count.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			ulong temp_m_union_id = 0;
			one_count = _m_union_id.ParseFrom(ref temp_m_union_id, ref int_stream);
			if (0 < one_count)
			{
					_m_union_id.member_value = temp_m_union_id;
					count = count + one_count;
			}

			string temp_m_name = "";
			one_count = _m_name.ParseFrom(ref temp_m_name, ref int_stream);
			if (0 < one_count)
			{
					_m_name.member_value = temp_m_name;
					count = count + one_count;
			}

			string temp_m_badge = "";
			one_count = _m_badge.ParseFrom(ref temp_m_badge, ref int_stream);
			if (0 < one_count)
			{
					_m_badge.member_value = temp_m_badge;
					count = count + one_count;
			}

			uint temp_m_lv = 0;
			one_count = _m_lv.ParseFrom(ref temp_m_lv, ref int_stream);
			if (0 < one_count)
			{
					_m_lv.member_value = temp_m_lv;
					count = count + one_count;
			}

			uint temp_m_hunting_limit = 0;
			one_count = _m_hunting_limit.ParseFrom(ref temp_m_hunting_limit, ref int_stream);
			if (0 < one_count)
			{
					_m_hunting_limit.member_value = temp_m_hunting_limit;
					count = count + one_count;
			}

			uint temp_m_lv_limit = 0;
			one_count = _m_lv_limit.ParseFrom(ref temp_m_lv_limit, ref int_stream);
			if (0 < one_count)
			{
					_m_lv_limit.member_value = temp_m_lv_limit;
					count = count + one_count;
			}

			uint temp_m_member_count = 0;
			one_count = _m_member_count.ParseFrom(ref temp_m_member_count, ref int_stream);
			if (0 < one_count)
			{
					_m_member_count.member_value = temp_m_member_count;
					count = count + one_count;
			}

			return count;
		}
	}

	public enum UnionTableType
	{
		UnionTableType_AddUnionPlayerExp_Login = 1,			// 每日公会成员登陆游戏均会获得个人贡献经验
		UnionTableType_AddUnionPlayerExp_AddChest = 2,		// 推进公会风暴宝箱激活进度会获得个人贡献经验
		UnionTableType_AddUnionPlayerExp_BattleWin = 3,		// 公会战中单场胜利会获得个人贡献经验
		UnionTableType_AddUnionPlayerExp_BattleLose = 4,	// 公会战中单场失败会获得少量个人贡献经验
		UnionTableType_AddUnionMoney_Login = 5,				// 每日公会成员登陆游戏均会为公会提供公会建设币
		UnionTableType_AddUnionMoney_GetChest = 6,			// 公会风暴宝箱被开启的时候会为公会提供少量公会建设币
		UnionTableType_AddUnionMoney_BattleWin = 7,			// 公会战胜利会为公会提供大量公会建设币获取
		UnionTableType_AddUnionExp_Login = 8,				// 每日公会成员登陆游戏均会为公会提供公会经验
		UnionTableType_AddUnionExp_UnLogin = 9,				// 每日0：00，前日未登陆的公会成员会为公会提供少量公会经验
		UnionTableType_AddUnionExp_GetChest = 10,			// 公会风暴宝箱被开启的时候会为公会提供少量公会经验
		UnionTableType_AddUnionExp_BattleWin = 11,			// 公会战胜利会为公会提供公会经验
		UnionTableType_AddUnionExp_BattleLose = 12,			// 公会战失败会为公会提供少量公会经验
		UnionTableType_CreatUnion_Gold = 13,				// 创建公会所需金币
	}

	public class UnionTechnologyInfo : IMessage
	{
		private ProtoMemberUInt32 _m_id;	// 公会科技id
		private ProtoMemberUInt32 _m_lv;	// 公会科技等级

		public UnionTechnologyInfo()
		{
			_m_id = new ProtoMemberUInt32(1, false);
			_m_lv = new ProtoMemberUInt32(2, false);
		}

		public UnionTechnologyInfo(uint __m_id, uint __m_lv)
		{
			_m_id = new ProtoMemberUInt32(1, false);
			_m_id.member_value = __m_id;
			_m_lv = new ProtoMemberUInt32(2, false);
			_m_lv.member_value = __m_lv;
		}

		public uint m_id
		{
			get{ return _m_id.member_value; }
			set{ _m_id.member_value = value; }
		}
		public bool has_m_id
		{
			get{ return _m_id.has_value; }
		}

		public uint m_lv
		{
			get{ return _m_lv.member_value; }
			set{ _m_lv.member_value = value; }
		}
		public bool has_m_lv
		{
			get{ return _m_lv.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_id.Serialize(_m_id.member_value, ref out_stream);

			count += _m_lv.Serialize(_m_lv.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			uint temp_m_id = 0;
			one_count = _m_id.ParseFrom(ref temp_m_id, ref int_stream);
			if (0 < one_count)
			{
					_m_id.member_value = temp_m_id;
					count = count + one_count;
			}

			uint temp_m_lv = 0;
			one_count = _m_lv.ParseFrom(ref temp_m_lv, ref int_stream);
			if (0 < one_count)
			{
					_m_lv.member_value = temp_m_lv;
					count = count + one_count;
			}

			return count;
		}
	}

	public class UnionTechnologyList : IMessage
	{
		private ProtoMemberEmbeddedList<UnionTechnologyInfo> _m_technologies;	// 公会科技列表

		public UnionTechnologyList()
		{
			_m_technologies = new ProtoMemberEmbeddedList<UnionTechnologyInfo>(1, false);
		}

		public System.Collections.Generic.List<UnionTechnologyInfo> m_technologies
		{
			get{ return _m_technologies.member_value; }
		}
		public bool has_m_technologies
		{
			get{ return _m_technologies.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			foreach(UnionTechnologyInfo one_member_value in _m_technologies.member_value)
			{
				count += _m_technologies.Serialize(one_member_value, ref out_stream);
			}

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			while (true)
			{
				UnionTechnologyInfo one_member_value = new UnionTechnologyInfo();
				one_count = _m_technologies.ParseFrom(one_member_value, ref int_stream);
				if (0 < one_count)
				{
					_m_technologies.member_value.Add(one_member_value);
					count = count + one_count;
				}
				else
				{
					break;
				}
			}

			return count;
		}
	}

	public enum UnionTechnologyType
	{
		UnionTechnologyType_AddExp = 1,						// 加成经验
		UnionTechnologyType_AddGold = 2,					// 加成金币
		UnionTechnologyType_AddBattle = 3,					// 加成战斗
	}

	public class WorldPosition : IMessage
	{
		private ProtoMemberInt32 _m_posx;	//坐标位置X
		private ProtoMemberInt32 _m_posz;	//坐标位置Z
		private ProtoMemberInt32 _m_posy;	//坐标位置Y

		public WorldPosition()
		{
			_m_posx = new ProtoMemberInt32(1, true);
			_m_posz = new ProtoMemberInt32(2, true);
			_m_posy = new ProtoMemberInt32(3, true);
		}

		public WorldPosition(int __m_posx, int __m_posz, int __m_posy)
		{
			_m_posx = new ProtoMemberInt32(1, true);
			_m_posx.member_value = __m_posx;
			_m_posz = new ProtoMemberInt32(2, true);
			_m_posz.member_value = __m_posz;
			_m_posy = new ProtoMemberInt32(3, true);
			_m_posy.member_value = __m_posy;
		}

		public int m_posx
		{
			get{ return _m_posx.member_value; }
			set{ _m_posx.member_value = value; }
		}
		public bool has_m_posx
		{
			get{ return _m_posx.has_value; }
		}

		public int m_posz
		{
			get{ return _m_posz.member_value; }
			set{ _m_posz.member_value = value; }
		}
		public bool has_m_posz
		{
			get{ return _m_posz.has_value; }
		}

		public int m_posy
		{
			get{ return _m_posy.member_value; }
			set{ _m_posy.member_value = value; }
		}
		public bool has_m_posy
		{
			get{ return _m_posy.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_posx.Serialize(_m_posx.member_value, ref out_stream);

			count += _m_posz.Serialize(_m_posz.member_value, ref out_stream);

			count += _m_posy.Serialize(_m_posy.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			int temp_m_posx = 0;
			one_count = _m_posx.ParseFrom(ref temp_m_posx, ref int_stream);
			if (0 < one_count)
			{
					_m_posx.member_value = temp_m_posx;
					count = count + one_count;
			}

			int temp_m_posz = 0;
			one_count = _m_posz.ParseFrom(ref temp_m_posz, ref int_stream);
			if (0 < one_count)
			{
					_m_posz.member_value = temp_m_posz;
					count = count + one_count;
			}

			int temp_m_posy = 0;
			one_count = _m_posy.ParseFrom(ref temp_m_posy, ref int_stream);
			if (0 < one_count)
			{
					_m_posy.member_value = temp_m_posy;
					count = count + one_count;
			}

			return count;
		}
	}

	public enum enAppearanceType
	{
		enum_Head = 0,		//头部
		enum_Back = 1,		//后背
		enum_medal = 2,		//勋章
		enum_coating = 3,	//涂装
	}

	public enum enRankingType
	{
		RANKINGTYPE_level = 0,			//等级排行
		RANKINGTYPE_all_role_level = 1,	//英雄总等级排行
		RANKINGTYPE_max_capacity = 2,	//最高战力排行
		RANKINGTYPE_chess = 3,			//星空谜棋排行
		RANKINGTYPE_pass_chess = 4,		//星空谜棋通关次数排行
		RANKINGTYPE_mausoleum = 5,		//迷之陵寝排行
		RANKINGTYPE_ladder = 6,			//天梯排行
		RANKINGTYPE_kill = 7,			//杀怪排行
		RANKINGTYPE_online_time = 8,	//在线时间排行
		RANKINGTYPE_get_gold = 9,		//获取金币排行
		RANKINGTYPE_dead_count = 10,	//死亡次数排行
		RANKINGTYPE_resolve	= 11,		//分解粉尘排行
		RANKINGTYPE_union = 12,			//公会排行
	}

	public enum en_C2C_P2P_handshake
	{
		enum_connect = 1,	//连接
		enum_ping	= 2,	//ping包
		enum_disconnect = 3,	//断开连接
	}

	public enum en_p2p_opt
	{
		enum_Msg_C2S_ReqP2P	= 1,		//客户端向服务端请求p2p通信
		enum_Msg_S2C_ResP2P = 2,        //服务端返回是否可以打洞
		enum_Msg_C2S_P2P_SendPunchResult = 3,// 客户端向服务端发送打洞结果
		enum_Msg_S2C_P2P_IsSuccess = 4,	// 服务端向客户端发送p2p通信是否成功
		enum_Msg_C2C_P2P_Punch_Req = 5,	//客户端向客户端发送打洞消息
		enum_Msg_C2C_P2P_Punch_Res = 6,	//客户端向客户端发送打洞消息返回
		enum_Msg_C2S_Connect = 7,
		enum_Msg_C2S_Disconnect = 8,
		enum_Msg_C2S_Ping = 9,
	}

	public class strAddr : IMessage
	{
		private ProtoMemberUInt64 _m_clientID;	
		private ProtoMemberString _m_clientIp;	
		private ProtoMemberUInt32 _m_clientPort;	

		public strAddr()
		{
			_m_clientID = new ProtoMemberUInt64(1, true);
			_m_clientIp = new ProtoMemberString(2, true);
			_m_clientPort = new ProtoMemberUInt32(3, true);
		}

		public strAddr(ulong __m_clientID, string __m_clientIp, uint __m_clientPort)
		{
			_m_clientID = new ProtoMemberUInt64(1, true);
			_m_clientID.member_value = __m_clientID;
			_m_clientIp = new ProtoMemberString(2, true);
			_m_clientIp.member_value = __m_clientIp;
			_m_clientPort = new ProtoMemberUInt32(3, true);
			_m_clientPort.member_value = __m_clientPort;
		}

		public ulong m_clientID
		{
			get{ return _m_clientID.member_value; }
			set{ _m_clientID.member_value = value; }
		}
		public bool has_m_clientID
		{
			get{ return _m_clientID.has_value; }
		}

		public string m_clientIp
		{
			get{ return _m_clientIp.member_value; }
			set{ _m_clientIp.member_value = value; }
		}
		public bool has_m_clientIp
		{
			get{ return _m_clientIp.has_value; }
		}

		public uint m_clientPort
		{
			get{ return _m_clientPort.member_value; }
			set{ _m_clientPort.member_value = value; }
		}
		public bool has_m_clientPort
		{
			get{ return _m_clientPort.has_value; }
		}

		public int Serialize(ref MemoryStream out_stream)
		{
			int count = 0;

			count += _m_clientID.Serialize(_m_clientID.member_value, ref out_stream);

			count += _m_clientIp.Serialize(_m_clientIp.member_value, ref out_stream);

			count += _m_clientPort.Serialize(_m_clientPort.member_value, ref out_stream);

			return count;
		}
		public int ParseFrom(ref MemoryStream int_stream)
		{
			int count = 0;
			int one_count = 0;

			ulong temp_m_clientID = 0;
			one_count = _m_clientID.ParseFrom(ref temp_m_clientID, ref int_stream);
			if (0 < one_count)
			{
					_m_clientID.member_value = temp_m_clientID;
					count = count + one_count;
			}

			string temp_m_clientIp = "";
			one_count = _m_clientIp.ParseFrom(ref temp_m_clientIp, ref int_stream);
			if (0 < one_count)
			{
					_m_clientIp.member_value = temp_m_clientIp;
					count = count + one_count;
			}

			uint temp_m_clientPort = 0;
			one_count = _m_clientPort.ParseFrom(ref temp_m_clientPort, ref int_stream);
			if (0 < one_count)
			{
					_m_clientPort.member_value = temp_m_clientPort;
					count = count + one_count;
			}

			return count;
		}
	}

	public enum MsgType
	{
		enum_Msg_Connect = 0,
		enum_Msg_Ping_Req = 1,
		enum_Msg_Ping_Res = 2,
		enum_Msg_Gm2Logic_GM_Req = 3,
		enum_Msg_Logic2Gm_GM_Res = 4,
		enum_Msg_Client2Account_Login_Req = 5,
		enum_Msg_Account2Center_Reg_Login_Key_Req = 6,
		enum_Msg_Center2Account_Reg_Login_Key_Res = 7,
		enum_Msg_Account2Client_Login_Res = 8,
		enum_Msg_Client2Account_Reg_Req = 9,
		enum_Msg_Account2Client_Reg_Res = 10,
		enum_Msg_Client2Account_CleanToy_Req = 11,
		enum_Msg_Center2Account_Create_Player_Req = 12,
		enum_Msg_Account2Center_Create_Player_Res = 13,
		enum_Msg_Center2Account_ToyActivate_Req = 14,
		enum_Msg_Account2Center_ToyActivate_Res = 15,
		enum_Msg_Center2Account_CheckToyActivate_Req = 16,
		enum_Msg_Account2Center_CheckToyActivate_Res = 17,
		enum_Msg_Normal = 18,
		enum_Msg_Route = 19,
		enum_Msg_Broadcast = 20,
		enum_Msg_MsgBeginFlag_GM = 1000,
		enum_Msg_Table_ReLoad_Req = 1001,
		enum_Msg_Table_ReLoad_Res = 1002,
		enum_Msg_Client2Logic_GM_Req = 1003,
		enum_Msg_Logic2Player_GM_PlayerInfo_Req = 1004,
		enum_Msg_Player2Logic_GM_PlayerInfo_Res = 1005,
		enum_Msg_MsgEndFlag_GM = 1006,
		enum_Msg_MsgBeginFlag_LoginLogout = 2000,
		enum_Msg_Client2Center_Connect = 2001,
		enum_Msg_Center2Client_Connect_Res = 2002,
		enum_Msg_Gate2Logic_Player_Login_Req = 2003,
		enum_Msg_Gate2Logic_Player_Out_Req = 2004,
		enum_Msg_Logic2Gate_Player_Kickout_Req = 2005,
		enum_Msg_MsgEndFlag_LoginLogout = 2006,
		enum_Msg_MsgBeginFlag_Toy = 3000,
		enum_Msg_Client2Logic_ToyActivate_Req = 3001,
		enum_Msg_Logic2Center_ToyActivate_Req = 3002,
		enum_Msg_Center2Logic_ToyActivate_Res = 3003,
		enum_Msg_Logic2Client_ToyActivate_Res = 3004,
		enum_Msg_Client2Logic_CheckToyActivate_Req = 3005,
		enum_Msg_Logic2Center_CheckToyActivate_Req = 3006,
		enum_Msg_Center2Logic_CheckToyActivate_Res = 3007,
		enum_Msg_Logic2Client_CheckToyActivate_Res = 3008,
		enum_Msg_MsgEndFlag_Toy = 3009,
		enum_Msg_MsgBeginFlag_Scene = 4000,
		enum_Msg_Client2Logic_Player_List_Req = 4001,
		enum_Msg_Logic2Player_Player_List_Req = 4002,
		enum_Msg_Player2Logic_Player_List_Res = 4003,
		enum_Msg_Logic2Client_Player_List_Res = 4004,
		enum_Msg_Client2Logic_CheckPlayerName_Req = 4005,
		enum_Msg_Logic2Player_CheckPlayerName_Req = 4006,
		enum_Msg_Player2Logic_CheckPlayerName_Res = 4007,
		enum_Msg_Logic2Client_CheckPlayerName_Res = 4008,
		enum_Msg_Client2Logic_Create_Player_Req = 4009,
		enum_Msg_Logic2Center_Create_Player_Req = 4010,
		enum_Msg_Center2Logic_Create_Player_Res = 4011,
		enum_Msg_Logic2Player_Create_Player_Req = 4012,
		enum_Msg_Player2Logic_Create_Player_Res = 4013,
		enum_Msg_Logic2Client_Create_Player_Res = 4014,
		enum_Msg_Client2Logic_SetPlayerName_Req = 4015,
		enum_Msg_Logic2Player_SetPlayerName_Req = 4016,
		enum_Msg_Player2Logic_SetPlayerName_Res = 4017,
		enum_Msg_Logic2Client_SetPlayerName_Res = 4018,
		enum_Msg_Logic2Player_Player_Info_Req = 4019,
		enum_Msg_Player2Logic_Player_Info_Res = 4020,
		enum_Msg_Logic2Player_Player_Update_Req = 4021,
		enum_Msg_Logic2Logic_Player_Update_Req = 4022,
		enum_Msg_Client2Logic_Player_Data_Req = 4023,
		enum_Msg_Logic2Client_Player_Data_Res = 4024,
		enum_Msg_Client2Logic_In_Scene_Req = 4025,
		enum_Msg_Logic2Client_In_Scene_Res = 4026,
		enum_Msg_Logic2Client_In_Scene_Broadcast = 4027,
		enum_Msg_Client2Logic_Out_Scene_Req = 4028,
		enum_Msg_Logic2Client_Out_Scene_Res = 4029,
		enum_Msg_Logic2Client_Out_Scene_Broadcast = 4030,
		enum_Msg_Logic2Client_Event_Broadcast = 4031,
		enum_Msg_Logic2Client_Team_Broadcast = 4032,
		enum_Msg_Client2Logic_Move_Req = 4033,
		enum_Msg_Logic2Client_Move_Broadcast = 4034,
		enum_Msg_Client2Logic_ChangeToy_Req = 4035,
		enum_Msg_Logic2Client_ChangeToy_Res = 4036,
		enum_Msg_Logic2Client_ChangeToy_Broadcast = 4037,
		enum_Msg_Logic2Client_LvExp_Update_Res = 4038,
		enum_Msg_Logic2Client_Strength_Res = 4039,
		enum_Msg_MsgEndFlag_Scene = 4040,
		enum_Msg_MsgBeginFlag_Chat = 5000,
		enum_Msg_Client2Logic_Chat_Req = 5001,
		enum_Msg_Logic2Logic_Chat_Req = 5002,
		enum_Msg_Logic2Client_Chat_Broadcast = 5003,
		enum_Msg_Client2Chat_UdpConnect_Req = 5004,
		enum_Msg_Chat2Client_UdpConnect_Res = 5005,
		enum_Msg_Client2Chat_TeamMember_IpPort_Req = 5006,
		enum_Msg_Chat2Client_TeamMember_IpPort_Res = 5007,
		enum_Msg_Chat2Client_Disconnect = 5008,
		enum_Msg_MsgEndFlag_Chat = 5009,
		enum_Msg_MsgBeginFlag_Hero = 6000,
		enum_Msg_Client2Logic_Hero_QualityUp_Req = 6001,
		enum_Msg_Logic2Client_Hero_QualityUp_Res = 6002,
		enum_Msg_Logic2Client_Hero_Update_Res = 6003,
		enum_Msg_Client2Logic_Hero_EquipmentUp_Req = 6004,
		enum_Msg_Logic2Client_Hero_EquipmentUp_Res = 6005,
		enum_Msg_Client2Logic_Hero_SkillSet_Req = 6006,
		enum_Msg_Logic2Client_Hero_SkillSet_Res = 6007,
		enum_Msg_MsgEndFlag_Hero = 6008,
		enum_Msg_MsgBeginFlag_Item = 7000,
		enum_Msg_Client2Logic_Item_Decompose_Req = 7001,
		enum_Msg_Logic2Client_Item_Decompose_Res = 7002,
		enum_Msg_Client2Logic_Item_Use_Req = 7003,
		enum_Msg_Logic2Client_Item_Use_Res = 7004,
		enum_Msg_Logic2Client_Item_Update_Res = 7005,
		enum_Msg_MsgEndFlag_Item = 7006,
		enum_Msg_MsgBeginFlag_Appearance = 8000,
		enum_Msg_Client2Logic_Appearance_SetPlan_Req = 8001,
		enum_Msg_Logic2Client_Appearance_SetPlan_Res = 8002,
		enum_Msg_Logic2Client_Appearance_update_Res = 8003,
		enum_Msg_MsgEndFlag_Appearance = 8004,
		enum_Msg_MsgBeginFlag_Statistics = 9000,
		enum_Msg_Client2Logic_Statistics_Req = 9001,
		enum_Msg_Logic2Logic_Statistics_Req = 9002,
		enum_Msg_Logic2Logic_Statistics_Res = 9003,
		enum_Msg_Logic2Client_Statistics_Res = 9004,
		enum_Msg_Logic2Client_Statistics_Update_Res = 9005,
		enum_Msg_MsgEndFlag_Statistics = 9006,
		enum_Msg_MsgBeginFlag_Shop = 10000,
		enum_Msg_Client2Logic_Shop_ItemList_Req = 10001,
		enum_Msg_Logic2Client_Shop_ItemList_Res = 10002,
		enum_Msg_Client2Logic_Shop_Buy_Req = 10003,
		enum_Msg_Logic2Client_Shop_Buy_Res = 10004,
		enum_Msg_MsgEndFlag_Shop = 10005,
		enum_Msg_MsgBeginFlag_Task = 11000,
		enum_Msg_Client2Logic_Task_Change_Req = 11001,
		enum_Msg_Logic2Client_Task_Change_Res = 11002,
		enum_Msg_Client2Logic_Task_Finsh_Req = 11003,
		enum_Msg_Logic2Client_Task_Finsh_Res = 11004,
		enum_Msg_Logic2Client_Task_Update_Res = 11005,
		enum_Msg_Client2Logic_MainTask_Update_Req = 11006,
		enum_Msg_Logic2Client_MainTask_Update_Res = 11007,
		enum_Msg_Client2Logic_MainTask_Finsh_Req = 11008,
		enum_Msg_Logic2Client_MainTask_Finsh_Res = 11009,
		enum_Msg_Client2Logic_MainTask_Next_Req = 11010,
		enum_Msg_Logic2Client_MainTask_Next_Res = 11011,
		enum_Msg_MsgEndFlag_Task = 11012,
		enum_Msg_MsgBeginFlag_DiaoWen = 12000,
		enum_Msg_Client2Logic_DiaoWen_LvUp_Req = 12001,
		enum_Msg_Logic2Client_DiaoWen_LvUp_Res = 12002,
		enum_Msg_Client2Logic_DiaoWen_Set_Req = 12003,
		enum_Msg_Logic2Client_DiaoWen_Set_Res = 12004,
		enum_Msg_Client2Logic_DiaoWen_UnSet_Req = 12005,
		enum_Msg_Logic2Client_DiaoWen_UnSet_Res = 12006,
		enum_Msg_Client2Logic_DiaoWen_SetCurrPlan_Req = 12007,
		enum_Msg_Logic2Client_DiaoWen_SetCurrPlan_Res = 12008,
		enum_Msg_Logic2Client_DiaoWen_Update_Res = 12009,
		enum_Msg_MsgEndFlag_DiaoWen = 12010,
		enum_Msg_MsgBeginFlag_Talent = 13000,
		enum_Msg_Client2Logic_Talent_LvUp_Req = 13001,
		enum_Msg_Logic2Client_Talent_LvUp_Res = 13002,
		enum_Msg_Client2Logic_Talent_ReSet_Req = 13003,
		enum_Msg_Logic2Client_Talent_ReSet_Res = 13004,
		enum_Msg_Client2Logic_Talent_SetCurrPlan_Req = 13005,
		enum_Msg_Logic2Client_Talent_SetCurrPlan_Res = 13006,
		enum_Msg_Logic2Client_Talent_Update_Res = 13007,
		enum_Msg_MsgEndFlag_Talent = 13008,
		enum_Msg_MsgBeginFlag_Mail = 14000,
		enum_Msg_Client2Logic_Mail_Read_Req = 14001,
		enum_Msg_Logic2Client_Mail_Read_Res = 14002,
		enum_Msg_Client2Logic_Mail_Receive_Req = 14003,
		enum_Msg_Logic2Client_Mail_Receive_Res = 14004,
		enum_Msg_Logic2Client_Mail_Add_Res = 14005,
		enum_Msg_MsgEndFlag_Mail = 14006,
		enum_Msg_MsgBeginFlag_Firend = 15000,
		enum_Msg_Logic2Player_Firend_PlayerInfo_Req = 15001,
		enum_Msg_Player2Logic_Firend_PlayerInfo_Res = 15002,
		enum_Msg_Client2Logic_Firend_Find_Req = 15003,
		enum_Msg_Logic2Logic_Firend_Find_Req = 15004,
		enum_Msg_Logic2Logic_Firend_Find_Res = 15005,
		enum_Msg_Logic2Client_Firend_Find_Res = 15006,
		enum_Msg_Client2Logic_Firend_Application_Req = 15007,
		enum_Msg_Logic2Logic_Firend_Application_Req = 15008,
		enum_Msg_Logic2Logic_Firend_Application_Res = 15009,
		enum_Msg_Logic2Client_Firend_Application_Res = 15010,
		enum_Msg_Client2Logic_Firend_Add_Req = 15011,
		enum_Msg_Logic2Logic_Firend_Add_Req = 15012,
		enum_Msg_Logic2Logic_Firend_Add_Res = 15013,
		enum_Msg_Logic2Client_Firend_Add_Res = 15014,
		enum_Msg_Client2Logic_Firend_Remove_Req = 15015,
		enum_Msg_Logic2Logic_Firend_Remove_Req = 15016,
		enum_Msg_Logic2Client_Firend_Remove_Res = 15017,
		enum_Msg_Logic2Client_Firend_PlayerUpdate_Res = 15018,
		enum_Msg_Logic2Client_Firend_ApplicationUpdate_Res = 15019,
		enum_Msg_Client2Logic_Firend_Update_Req = 15020,
		enum_Msg_Logic2Logic_Firend_Update_Req = 15021,
		enum_Msg_Logic2Logic_Firend_Update_Res = 15022,
		enum_Msg_Logic2Client_Firend_Update_Res = 15023,
		enum_Msg_Client2Logic_Firend_AddShield_Req = 15024,
		enum_Msg_Logic2Client_Firend_AddShield_Res = 15025,
		enum_Msg_Client2Logic_Firend_RemoveShield_Req = 15026,
		enum_Msg_Logic2Client_Firend_RemoveShield_Res = 15027,
		enum_Msg_Logic2Client_Firend_Count_Update_Res = 15028,
		enum_Msg_MsgEndFlag_Firend = 15029,
		enum_Msg_MsgBeginFlag_Union = 16000,
		enum_Msg_Client2Union_RecommendList_Req = 16001,
		enum_Msg_Union2Client_RecommendList_Res = 16002,
		enum_Msg_Client2Union_ApplyList_Req = 16003,
		enum_Msg_Union2Client_ApplyList_Res = 16004,
		enum_Msg_Client2Union_Union_Find_Req = 16005,
		enum_Msg_Union2Client_Union_Find_Res = 16006,
		enum_Msg_Client2Union_CheckUnionName_Req = 16007,
		enum_Msg_Union2Player_CheckUnionName_Req = 16008,
		enum_Msg_Player2Union_CheckUnionName_Res = 16009,
		enum_Msg_Union2Client_CheckUnionName_Res = 16010,
		enum_Msg_Client2Union_Union_Create_Req = 16011,
		enum_Msg_Union2Player_Union_Create_Req = 16012,
		enum_Msg_Player2Union_Union_Create_Res = 16013,
		enum_Msg_Union2Client_Union_Create_Res = 16014,
		enum_Msg_Client2Union_SetUnionName_Req = 16015,
		enum_Msg_Union2Player_SetUnionName_Req = 16016,
		enum_Msg_Player2Union_SetUnionName_Res = 16017,
		enum_Msg_Union2Client_SetUnionName_Res = 16018,
		enum_Msg_Client2Union_Union_Info_Req = 16019,
		enum_Msg_Union2Client_Union_Info_Res = 16020,
		enum_Msg_Client2Union_Union_Join_Req = 16021,
		enum_Msg_Union2Client_Union_Join_Res = 16022,
		enum_Msg_Client2Union_Union_Set_Req = 16023,
		enum_Msg_Union2Client_Union_Set_Res = 16024,
		enum_Msg_Client2Union_Union_MemberSet_Req = 16025,
		enum_Msg_Union2Client_Union_MemberSet_Res = 16026,
		enum_Msg_Client2Union_UnionApplicationList_Req = 16027,
		enum_Msg_Union2Client_UnionApplicationList_Res = 16028,
		enum_Msg_Client2Union_UnionPlayerOperator_Req = 16029,
		enum_Msg_Union2Client_UnionPlayerOperator_Broadcast = 16030,
		enum_Msg_Client2Union_UnionTechnology_LvUp_Req = 16031,
		enum_Msg_Union2Client_UnionTechnology_LvUp_Res = 16032,
		enum_Msg_Client2Union_UnionChest_Get_Req = 16033,
		enum_Msg_Union2Client_UnionChest_Get_Res = 16034,
		enum_Msg_Client2Union_UnionManor_Bid_Req = 16035,
		enum_Msg_Union2Client_UnionManor_Bid_Res = 16036,
		enum_Msg_Union2Client_UnionManor_State_Broadcast = 16037,
		enum_Msg_Client2Logic_PVP_UnionManor_AttackBegin_Req = 16038,
		enum_Msg_Union2Player_Union_Info_Req = 16039,
		enum_Msg_Player2Union_Union_Info_Res = 16040,
		enum_Msg_Union2Player_Update_Union_Req = 16041,
		enum_Msg_Union2Client_Update_Union_Req = 16042,
		enum_Msg_Union2Client_Update_UnionMoney_Broadcast = 16043,
		enum_Msg_Union2Client_Update_UnionExp_Broadcast = 16044,
		enum_Msg_Union2Client_Update_UnionTechnology_Broadcast = 16045,
		enum_Msg_MsgEndFlag_Union = 16046,
		enum_Msg_MsgBeginFlag_Team = 17000,
		enum_Msg_Client2Logic_PVE_CreateTeam_Req = 17001,
		enum_Msg_Logic2Client_PVE_TeamInfo_Broadcast = 17002,
		enum_Msg_Client2Logic_PVE_InviteFriend_Req = 17003,
		enum_Msg_Logic2Client_PVE_InviteFriend_Res = 17004,
		enum_Msg_Logic2Client_PVE_BeInviteFriend_Req = 17005,
		enum_Msg_Client2Logic_PVE_JoinTeam_Req = 17006,
		enum_Msg_Logic2Client_PVE_JoinTeam_Res = 17007,
		enum_Msg_Client2Logic_PVE_CancelInvite_Req = 17008,
		enum_Msg_Client2Logic_PVE_KickTeam_Req = 17009,
		enum_Msg_Logic2Client_PVE_KickTeam_Broadcast = 17010,
		enum_Msg_Client2Logic_PVE_ExitTeam_Req = 17011,
		enum_Msg_Logic2Client_PVE_ExitTeam_Broadcast = 17012,
		enum_Msg_Logic2Client_PVE_CancelTeam_Broadcast = 17013,
		enum_Msg_Client2Logic_PVE_ChangeHero_Req = 17014,
		enum_Msg_Logic2Client_PVE_ChangeHero_Res = 17015,
		enum_Msg_Client2Logic_PVE_CancelHero_Req = 17016,
		enum_Msg_Logic2Client_PVE_CancelHero_Res = 17017,
		enum_Msg_Client2Logic_PVE_Ready_Req = 17018,
		enum_Msg_Client2Logic_Team_UI_Req = 17019,
		enum_Msg_Logic2Client_Team_UI_Broadcast = 17020,
		enum_Msg_Client2Logic_Team_Time_Req = 17021,
		enum_Msg_Logic2Client_Team_Time_Res = 17022,
		enum_Msg_Logic2Client_PVE_Refuse_Res = 17023,
		enum_Msg_Logic2Team_TeamUpdate_Req = 17024,
		enum_Msg_Logic2Team_Login_Req = 17025,
		enum_Msg_Logic2Team_Logout_Req = 17026,
		enum_Msg_Client2Logic_PVE_InviteGuest_Req = 17027,
		enum_Msg_Logic2Player_PVE_GuestInfo_Req = 17028,
		enum_Msg_Player2Logic_PVE_GuestInfo_Res = 17029,
		enum_Msg_Logic2Client_PVE_InviteGuest_Res = 17030,
		enum_Msg_MsgEndFlag_Team = 17031,
		enum_Msg_MsgBeginFlag_Instance = 18000,
		enum_Msg_Client2Logic_PVE_HuntingTest_AttackBegin_Req = 18001,
		enum_Msg_Logic2Team_PVE_HuntingTest_AttackBegin_Req = 18002,
		enum_Msg_Team2Client_PVE_HuntingTest_AttackBegin_Res = 18003,
		enum_Msg_Team2Battle_PVE_HuntingTest_AttackBegin_Req = 18004,
		enum_Msg_Logic2Client_PVE_HuntingTest_AttackEnd_Res = 18005,
		enum_Msg_Client2Logic_PVE_HuntingChapter_AttackBegin_Req = 18006,
		enum_Msg_Logic2Team_PVE_HuntingChapter_AttackBegin_Req = 18007,
		enum_Msg_Team2Client_PVE_HuntingChapter_AttackBegin_Res = 18008,
		enum_Msg_Team2Battle_PVE_HuntingChapter_AttackBegin_Req = 18009,
		enum_Msg_Logic2Client_PVE_HuntingChapter_AttackEnd_Res = 18010,
		enum_Msg_Client2Logic_PVE_HuntingChallenge_AttackBegin_Req = 18011,
		enum_Msg_Logic2Client_PVE_HuntingChallenge_AttackBegin_Broadcast = 18012,
		enum_Msg_Battle2Logic_PVE_HuntingChallenge_Mid_Res = 18013,
		enum_Msg_Logic2Client_PVE_HuntingChallenge_Mid_Broadcast = 18014,
		enum_Msg_Client2Logic_PVE_HuntingChallenge_AttackEnd_Req = 18015,
		enum_Msg_Logic2Battle_PVE_HuntingChallenge_AttackEnd_Req = 18016,
		enum_Msg_Logic2Logic_PVE_HuntingChallenge_AttackEnd_Req = 18017,
		enum_Msg_Logic2Client_PVE_HuntingChallenge_AttackEnd_Broadcast = 18018,
		enum_Msg_Client2Logic_PVE_Hunting_AttackBegin_Req = 18019,
		enum_Msg_Logic2Team_PVE_Hunting_AttackBegin_Req = 18020,
		enum_Msg_Team2Client_PVE_Hunting_AttackBegin_Broadcast = 18021,
		enum_Msg_Team2Battle_PVE_Hunting_AttackBegin_Req = 18022,
		enum_Msg_Logic2Client_PVE_Hunting_AttackEnd_Res = 18023,
		enum_Msg_Logic2Client_Instance_Update_Res = 18024,
		enum_Msg_Client2Logic_PVE_Extreme_AttackBegin_Req = 18025,
		enum_Msg_Logic2Team_PVE_Extreme_AttackBegin_Req = 18026,
		enum_Msg_Team2Client_PVE_Extreme_AttackBegin_Broadcast = 18027,
		enum_Msg_Team2Battle_PVE_Extreme_AttackBegin_Req = 18028,
		enum_Msg_Logic2Client_PVE_Extreme_AttackEnd_Res = 18029,
		enum_Msg_Logic2Battle_PVE_Extreme_ChangeHero_Req = 18030,
		enum_Msg_Logic2Battle_PVE_Extreme_CancelHero_Req = 18031,
		enum_Msg_Logic2Client_PVE_Extreme_Temp1 = 18032,
		enum_Msg_Battle2Logic_PVE_Extreme_Temp2 = 18033,
		enum_Msg_Client2Logic_PVP_Match_Begin_Req = 18034,
		enum_Msg_Logic2Client_PVP_Match_Begin_Broadcast = 18035,
		enum_Msg_Client2Logic_PVP_Match_AttackBegin_Req = 18036,
		enum_Msg_Logic2Team_PVP_Match_AttackBegin_Req = 18037,
		enum_Msg_Client2Logic_PVP_Match_AttackBeginWithRobot_Req = 18038,
		enum_Msg_Logic2Team_PVP_Match_AttackBeginWithRobot_Req = 18039,
		enum_Msg_Team2Client_PVP_Match_AttackBegin_Broadcast = 18040,
		enum_Msg_Team2Battle_PVP_Match_AttackBegin_Req = 18041,
		enum_Msg_Client2Logic_PVP_Match_Cancel_Req = 18042,
		enum_Msg_Logic2Team_PVP_Match_Cancel_Req = 18043,
		enum_Msg_Team2Client_PVP_Match_Cancel_Broadcast = 18044,
		enum_Msg_Logic2Client_PVP_Chess_AttackEnd_Res = 18045,
		enum_Msg_Logic2Client_PVP_MoutainKing_AttackEnd_Res = 18046,
		enum_Msg_Logic2Client_PVP_Match_AttackEnd_Res = 18047,
		enum_Msg_Client2Logic_PVP_BattleField_Begin_Req = 18048,
		enum_Msg_Logic2Team_PVP_BattleField_Begin_Req = 18049,
		enum_Msg_Team2Client_PVP_BattleField_Begin_Broadcast = 18050,
		enum_Msg_Client2Logic_PVP_BattleField_Cancel_Req = 18051,
		enum_Msg_Logic2Team_PVP_BattleField_Cancel_Req = 18052,
		enum_Msg_Team2Client_PVP_BattleField_Cancel_Broadcast = 18053,
		enum_Msg_Battle2Logic_PVP_BattleField_MidExit_Res = 18054,
		enum_Msg_Logic2Client_PVP_BattleField_MidExit_Res = 18055,
		enum_Msg_Team2Client_PVP_BattleField_AttackBegin_Broadcast = 18056,
		enum_Msg_Team2Battle_PVP_BattleField_AttackBegin_Req = 18057,
		enum_Msg_Logic2Client_PVP_TortoiseHare_AttackEnd_Res = 18058,
		enum_Msg_Logic2Client_PVP_IndianaJones_AttackEnd_Res = 18059,
		enum_Msg_Client2Logic_RandCard_Req = 18060,
		enum_Msg_Logic2Client_RandCard_Res = 18061,
		enum_Msg_MsgEndFlag_Instance = 18062,
		enum_Msg_MsgBeginFlag_Ranking = 19000,
		enum_Msg_RankingList_C2S_Req = 19001,
		enum_Msg_RankingList_S2C_Res = 19002,
		enum_Msg_Logic2Ranking_CreatePlayer_Req = 19003,
		enum_Msg_Logic2Ranking_UpdatePlayer_Req = 19004,
		enum_Msg_Logic2Ranking_UpdatePlayerName_Req = 19005,
		enum_Msg_Logic2Ranking_UpdatePlayerUnionName_Req = 19006,
		enum_Msg_Ranking2CenterDB_RankingInfo_Req = 19007,
		enum_Msg_CenterDB2Ranking_RankingInfo_Res = 19008,
		enum_Msg_Ranking2CenterDB_RankingInfo_Update_Req = 19009,
		enum_Msg_MsgEndFlag_Ranking = 19010,
		enum_Msg_MsgBeginFlag_Log = 20000,
		enum_Msg_Write_Log = 20001,
		enum_Msg_Logic2Log_Write_Req = 20002,
		enum_Msg_MsgEndFlag_Log = 20003,
		enum_Msg_MsgBeginFlag_Battle = 21000,
		enum_Msg_Client2Battle_PlayerLogin_Req = 21001,
		enum_Msg_Battle2Client_PlayerLogin_Res = 21002,
		enum_Msg_Battle2Client_NotifyControlHeroIndex = 21003,
		enum_Msg_Client2Battle_HeroWalk = 21004,
		enum_Msg_Client2Battle_NotifyExitBattle = 21005,
		enum_Msg_Battle2Logic_AttackBegin_Res = 21006,
		enum_Msg_Client2Battle_HeroSkill = 21007,
		enum_Msg_Battle2Client_HeroSkill = 21008,
		enum_Msg_Battle2Client_DamageHpInfoList = 21009,
		enum_Msg_Battle2Client_CalcNetDelayTime = 21010,
		enum_Msg_Client2Battle_CalcNetDelayTime = 21011,
		enum_Msg_Battle2Client_MonsterSkill = 21012,
		enum_Msg_Battle2Client_SyncUnitHp = 21013,
		enum_Msg_Client2Battle_SyncUnitHp = 21014,
		enum_Msg_Battle2Client_NotifyChgScene = 21015,
		enum_Msg_Client2Battle_NotifyEnterScene = 21016,
		enum_Msg_Client2Battle_PvpLoadBegin = 21017,
		enum_Msg_Battle2Client_NotifyEnterScene_Res = 21018,
		enum_Msg_Battle2Client_NotifyBattleResult = 21019,
		enum_Msg_Battle2Client_SyncUnitPos = 21020,
		enum_Msg_Client2Battle_SyncUnitPos = 21021,
		enum_Msg_Client2Battle_CourseCartoonFinish = 21022,
		enum_Msg_Battle2Client_QTE_Touch = 21023,
		enum_Msg_Client2Battle_QTE_Result = 21024,
		enum_Msg_Client2Battle_RequestMonsterUseSkill = 21025,
		enum_Msg_Client2Battle_SetPropValue = 21026,
		enum_Msg_Battle2Client_NotifyHeroUseSkill = 21027,
		enum_Msg_Client2Battle_HelpBoardcast = 21028,
		enum_Msg_Client2Battle_BoardcastSkillEffect = 21029,
		enum_Msg_Battle2Client_PlayerOffline = 21030,
		enum_Msg_Battle2Client_StatusProc = 21031,
		enum_Msg_Battle2Client_CurOnlinePlayers = 21032,
		enum_Msg_Battle2Client_ShowDamage = 21033,
		enum_Msg_Battle2Client_BattleEffect = 21034,
		enum_Msg_SyncServerTimeStamp = 21035,
		enum_Msg_Battle2Team_GiveRewardToPlayer = 21036,
		enum_Msg_Client2Battle_StarChess_GetHort = 21037,
		enum_Msg_Battle2Client_StarChess_ChessPlayerInfo = 21038,
		enum_Msg_Battle2Client_StarChess_ChessPlayerInfo_List = 21039,
		enum_Msg_Battle2Client_StarChess_BeginInfo = 21040,
		enum_Msg_Client2Battle_StarChess_Dice = 21041,
		enum_Msg_Client2Logic_StarChess_SelHero = 21042,
		enum_Msg_Logic2Team_StarChess_SelHero = 21043,
		enum_Msg_Team2Battle_StarChess_SelHero = 21044,
		enum_Msg_Battle2Client_StarChess_SelHero = 21045,
		enum_Msg_Battle2Client_StarChessTouchEvent = 21046,
		enum_Msg_Client2Battle_StarChess_PartyModeNotify = 21047,
		enum_Msg_Logic2Client_Update_DataContainer = 21048,
		enum_Msg_Client2Battle_SwitchMainControlHero = 21049,
		enum_Msg_Battle2Client_InterruptSkill = 21050,
		enum_Msg_Client2Battle_RequestBattleRecordOfChallengeHunting = 21051,
		enum_Msg_Battle2Client_ChallengeHunting = 21052,
		enum_Msg_Client2Battle_StarChessUsePropItem = 21053,
		enum_Msg_Client2Battle_SelectHero = 21054,
		enum_Msg_Battle2Client_SelectHero_Res = 21055,
		enum_Msg_Battle2Client_HeroSelectInfoList = 21056,
		enum_Msg_Client2Battle_GM_Req = 21057,
		enum_Msg_Battle2Client_CommonBattleRecord = 21058,
		enum_Msg_Battle2Client_CommonBattleMsgHint = 21059,
		enum_Msg_Battle2Client_BattleStatusNotify = 21060,
		enum_Msg_MsgEndFlag_Battle = 21061,

        enum_Msg_ChatVoice = 65535,
	}

}

